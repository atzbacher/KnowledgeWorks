---------- LM.Core ----------
#nullable enable
#nullable enable
IPublicationLookup
IPublicationLookup.TryGetByDoiAsync(string! doi, bool includeCitedBy, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<LM.Core.Models.PublicationRecord?>!
LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore
LM.Core.Abstractions.IContentExtractor
LM.Core.Abstractions.IContentExtractor.ExtractTextAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Core.Abstractions.IEntryStore
LM.Core.Abstractions.IEntryStore.EnumerateAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<LM.Core.Models.Entry!>!
LM.Core.Abstractions.IEntryStore.FindByHashAsync(string! sha256, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Core.Abstractions.IEntryStore.FindByIdsAsync(string? doi, string? pmid, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Core.Abstractions.IEntryStore.FindSimilarByNameYearAsync(string! title, int? year, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.Core.Abstractions.IEntryStore.GetByIdAsync(string! id, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Core.Abstractions.IEntryStore.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.IEntryStore.SaveAsync(LM.Core.Models.Entry! entry, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.IEntryStore.SearchAsync(LM.Core.Models.Filters.EntryFilter! filter, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.Core.Abstractions.IFullTextSearchService
LM.Core.Abstractions.IFullTextSearchService.SearchAsync(LM.Core.Models.Search.FullTextSearchQuery! query, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.FullTextSearchHit!>!>!
LM.Core.Abstractions.Search.ISearchExecutionService
LM.Core.Abstractions.Search.ISearchExecutionService.ExecuteAsync(LM.Core.Models.Search.SearchExecutionRequest! request, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Search.SearchExecutionResult!>!
LM.Core.Abstractions.Search.ISearchProvider
LM.Core.Abstractions.Search.ISearchProvider.Database.get -> LM.Core.Models.SearchDatabase
LM.Core.Abstractions.Search.ISearchProvider.SearchAsync(string! query, System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.SearchHit!>!>!
LM.Core.Abstractions.IFileStorageRepository
LM.Core.Abstractions.IFileStorageRepository.SaveNewAsync(string! sourcePath, string! relativeTargetDir, string? preferredFileName = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Core.Abstractions.IHasher
LM.Core.Abstractions.IHasher.ComputeSha256Async(string! filePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Core.Abstractions.IPdfAnnotationPersistenceService
LM.Core.Abstractions.IPdfAnnotationPersistenceService.PersistAsync(string! entryId, string! pdfHash, string! overlayJson, System.Collections.Generic.IReadOnlyDictionary<string!, byte[]!>! previewImages, string? overlaySidecarRelativePath, string? pdfRelativePath, System.Collections.Generic.IReadOnlyList<LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata!>! annotations, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata.AnnotationId.get -> string!
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata.Note.get -> string?
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata.ColorHex.get -> string?
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata.PdfAnnotationBridgeMetadata(string! annotationId, string? text, string? note, string? colorHex = null) -> void
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata.Text.get -> string?
LM.Core.Abstractions.IPdfAnnotationPreviewStorage
LM.Core.Abstractions.IPdfAnnotationPreviewStorage.SaveAsync(string! pdfHash, string! annotationId, byte[]! pngBytes, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<string!>!
LM.Core.Abstractions.IPdfAnnotationOverlayReader
LM.Core.Abstractions.IPdfAnnotationOverlayReader.GetOverlayJsonAsync(string! entryId, string! pdfHash, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string?>!
LM.Core.Abstractions.IMetadataDebugSlideExporter
LM.Core.Abstractions.IMetadataDebugSlideExporter.ExportAsync(System.Collections.Generic.IEnumerable<LM.Core.Models.FileMetadata!>! items, string! outputPath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Core.Abstractions.IMetadataExtractor
LM.Core.Abstractions.IMetadataExtractor.ExtractAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.FileMetadata!>!
LM.Core.Abstractions.IPmidNormalizer
LM.Core.Abstractions.IPmidNormalizer.Normalize(string? raw) -> string?
LM.Core.Abstractions.ISimilarityService
LM.Core.Abstractions.ISimilarityService.ComputeFileSimilarityAsync(string! filePathA, string! filePathB, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
LM.Core.Abstractions.ITagVocabularyProvider
LM.Core.Abstractions.ITagVocabularyProvider.GetAllTagsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>!>!
LM.Core.Abstractions.IWorkSpaceService
LM.Core.Abstractions.IWorkSpaceService.EnsureWorkspaceAsync(string! absoluteWorkspacePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.IWorkSpaceService.GetAbsolutePath(string! relativePath) -> string!
LM.Core.Abstractions.IWorkSpaceService.GetLocalDbPath() -> string!
LM.Core.Abstractions.IWorkSpaceService.GetWorkspaceRoot() -> string!
LM.Core.Abstractions.IWorkSpaceService.WorkspacePath.get -> string?
LM.Core.Abstractions.IDoiNormalizer
LM.Core.Abstractions.IDoiNormalizer.Normalize(string? raw) -> string?
LM.Core.Models.AbstractSection
LM.Core.Models.AbstractSection.Label.get -> string?
LM.Core.Models.AbstractSection.Label.init -> void
LM.Core.Models.AbstractSection.Text.get -> string?
LM.Core.Models.AbstractSection.Text.init -> void
LM.Core.Models.Attachment
LM.Core.Models.Attachment.Attachment() -> void
LM.Core.Models.Attachment.Id.get -> string!
LM.Core.Models.Attachment.Id.set -> void
LM.Core.Models.Attachment.Notes.get -> string?
LM.Core.Models.Attachment.Notes.set -> void
LM.Core.Models.Attachment.RelativePath.get -> string!
LM.Core.Models.Attachment.RelativePath.set -> void
LM.Core.Models.Attachment.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Attachment.Tags.set -> void
LM.Core.Models.Attachment.Title.get -> string!
LM.Core.Models.Attachment.Title.set -> void
LM.Core.Models.Attachment.Kind.get -> LM.Core.Models.AttachmentKind
LM.Core.Models.Attachment.Kind.set -> void
LM.Core.Models.Attachment.AddedBy.get -> string!
LM.Core.Models.Attachment.AddedBy.set -> void
LM.Core.Models.Attachment.AddedUtc.get -> System.DateTime
LM.Core.Models.Attachment.AddedUtc.set -> void
LM.Core.Models.AttachmentKind
LM.Core.Models.AttachmentKind.Supplement = 0 -> LM.Core.Models.AttachmentKind
LM.Core.Models.AttachmentKind.Version = 1 -> LM.Core.Models.AttachmentKind
LM.Core.Models.AttachmentKind.Presentation = 2 -> LM.Core.Models.AttachmentKind
LM.Core.Models.AttachmentKind.ExternalNotes = 3 -> LM.Core.Models.AttachmentKind
LM.Core.Models.AttachmentKind.Metadata = 4 -> LM.Core.Models.AttachmentKind
LM.Core.Models.AuthorName
LM.Core.Models.AuthorName.Affiliations.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.AuthorName.Affiliations.init -> void
LM.Core.Models.AuthorName.CollectiveName.get -> string?
LM.Core.Models.AuthorName.CollectiveName.init -> void
LM.Core.Models.AuthorName.Family.get -> string?
LM.Core.Models.AuthorName.Family.init -> void
LM.Core.Models.AuthorName.Given.get -> string?
LM.Core.Models.AuthorName.Given.init -> void
LM.Core.Models.AuthorName.LastFromLiteral() -> string?
LM.Core.Models.AuthorName.Literal.get -> string?
LM.Core.Models.AuthorName.Literal.init -> void
LM.Core.Models.AuthorName.Orcid.get -> string?
LM.Core.Models.AuthorName.Orcid.init -> void
LM.Core.Models.AuthorName.ToCsvPart() -> string!
LM.Core.Models.Entry
LM.Core.Models.Entry.AddedBy.get -> string?
LM.Core.Models.Entry.AddedBy.set -> void
LM.Core.Models.Entry.AddedOnUtc.get -> System.DateTime
LM.Core.Models.Entry.AddedOnUtc.set -> void
LM.Core.Models.Entry.Attachments.get -> System.Collections.Generic.List<LM.Core.Models.Attachment!>!
LM.Core.Models.Entry.Attachments.set -> void
LM.Core.Models.Entry.Authors.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Entry.Authors.set -> void
LM.Core.Models.Entry.DisplayName.get -> string?
LM.Core.Models.Entry.DisplayName.set -> void
LM.Core.Models.Entry.Doi.get -> string?
LM.Core.Models.Entry.Doi.set -> void
LM.Core.Models.Entry.Entry() -> void
LM.Core.Models.Entry.Id.get -> string!
LM.Core.Models.Entry.Id.set -> void
LM.Core.Models.Entry.InternalId.get -> string?
LM.Core.Models.Entry.InternalId.set -> void
LM.Core.Models.Entry.IsInternal.get -> bool
LM.Core.Models.Entry.IsInternal.set -> void
LM.Core.Models.Entry.Links.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Entry.Links.set -> void
LM.Core.Models.Entry.MainFileHashSha256.get -> string?
LM.Core.Models.Entry.MainFileHashSha256.set -> void
LM.Core.Models.Entry.MainFilePath.get -> string!
LM.Core.Models.Entry.MainFilePath.set -> void
LM.Core.Models.Entry.Nct.get -> string?
LM.Core.Models.Entry.Nct.set -> void
LM.Core.Models.Entry.Notes.get -> string?
LM.Core.Models.Entry.Notes.set -> void
LM.Core.Models.Entry.UserNotes.get -> string?
LM.Core.Models.Entry.UserNotes.set -> void
LM.Core.Models.Entry.OriginalFileName.get -> string?
LM.Core.Models.Entry.OriginalFileName.set -> void
LM.Core.Models.Entry.Pmid.get -> string?
LM.Core.Models.Entry.Pmid.set -> void
LM.Core.Models.Entry.Relations.get -> System.Collections.Generic.List<LM.Core.Models.Relation!>!
LM.Core.Models.Entry.Relations.set -> void
LM.Core.Models.Entry.ShortTitle.get -> string?
LM.Core.Models.Entry.ShortTitle.set -> void
LM.Core.Models.Entry.Source.get -> string?
LM.Core.Models.Entry.Source.set -> void
LM.Core.Models.Entry.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Entry.Tags.set -> void
LM.Core.Models.Entry.Title.get -> string!
LM.Core.Models.Entry.Title.set -> void
LM.Core.Models.Entry.Type.get -> LM.Core.Models.EntryType
LM.Core.Models.Entry.Type.set -> void
LM.Core.Models.Entry.Version.get -> int
LM.Core.Models.Entry.Version.set -> void
LM.Core.Models.Entry.Year.get -> int?
LM.Core.Models.Entry.Year.set -> void
LM.Core.Models.EntryDocument
LM.Core.Models.EntryDocument.Authors.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.EntryDocument.Authors.set -> void
LM.Core.Models.EntryDocument.CreatedUtc.get -> System.DateTimeOffset
LM.Core.Models.EntryDocument.CreatedUtc.set -> void
LM.Core.Models.EntryDocument.Doi.get -> string?
LM.Core.Models.EntryDocument.Doi.set -> void
LM.Core.Models.EntryDocument.EntryDocument() -> void
LM.Core.Models.EntryDocument.Files.get -> System.Collections.Generic.List<LM.Core.Models.EntryFile!>!
LM.Core.Models.EntryDocument.Files.set -> void
LM.Core.Models.EntryDocument.Id.get -> string!
LM.Core.Models.EntryDocument.Id.set -> void
LM.Core.Models.EntryDocument.Internal.get -> bool
LM.Core.Models.EntryDocument.Internal.set -> void
LM.Core.Models.EntryDocument.Pmid.get -> string?
LM.Core.Models.EntryDocument.Pmid.set -> void
LM.Core.Models.EntryDocument.Source.get -> string?
LM.Core.Models.EntryDocument.Source.set -> void
LM.Core.Models.EntryDocument.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.EntryDocument.Tags.set -> void
LM.Core.Models.EntryDocument.Title.get -> string?
LM.Core.Models.EntryDocument.Title.set -> void
LM.Core.Models.EntryDocument.UpdatedUtc.get -> System.DateTimeOffset
LM.Core.Models.EntryDocument.UpdatedUtc.set -> void
LM.Core.Models.EntryDocument.Year.get -> int?
LM.Core.Models.EntryDocument.Year.set -> void
LM.Core.Models.EntryFile
LM.Core.Models.EntryFile.EntryFile() -> void
LM.Core.Models.EntryFile.Hash.get -> string!
LM.Core.Models.EntryFile.Hash.set -> void
LM.Core.Models.EntryFile.MimeType.get -> string!
LM.Core.Models.EntryFile.MimeType.set -> void
LM.Core.Models.EntryFile.OriginalFileName.get -> string!
LM.Core.Models.EntryFile.OriginalFileName.set -> void
LM.Core.Models.EntryFile.RelativePath.get -> string!
LM.Core.Models.EntryFile.RelativePath.set -> void
LM.Core.Models.EntryFile.SizeBytes.get -> long
LM.Core.Models.EntryFile.SizeBytes.set -> void
LM.Core.Models.EntryFile.StoredFileName.get -> string!
LM.Core.Models.EntryFile.StoredFileName.set -> void
LM.Core.Models.EntryType
LM.Core.Models.EntryType.LitSearch = 6 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.Other = 5 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.Presentation = 1 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.Publication = 0 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.Report = 4 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.SlideDeck = 3 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.WhitePaper = 2 -> LM.Core.Models.EntryType
LM.Core.Models.FileMetadata
LM.Core.Models.FileMetadata.Authors.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.FileMetadata.Authors.set -> void
LM.Core.Models.FileMetadata.Doi.get -> string?
LM.Core.Models.FileMetadata.Doi.set -> void
LM.Core.Models.FileMetadata.FileMetadata() -> void
LM.Core.Models.FileMetadata.Pmid.get -> string?
LM.Core.Models.FileMetadata.Pmid.set -> void
LM.Core.Models.FileMetadata.Source.get -> string?
LM.Core.Models.FileMetadata.Source.set -> void
LM.Core.Models.FileMetadata.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.FileMetadata.Tags.set -> void
LM.Core.Models.FileMetadata.Title.get -> string?
LM.Core.Models.FileMetadata.Title.set -> void
LM.Core.Models.FileMetadata.Year.get -> int?
LM.Core.Models.FileMetadata.Year.set -> void
LM.Core.Models.Filters.EntryFilter
LM.Core.Models.Filters.EntryFilter.AuthorContains.get -> string?
LM.Core.Models.Filters.EntryFilter.AuthorContains.set -> void
LM.Core.Models.Filters.EntryFilter.EntryFilter() -> void
LM.Core.Models.Filters.EntryFilter.IsInternal.get -> bool?
LM.Core.Models.Filters.EntryFilter.IsInternal.set -> void
LM.Core.Models.Filters.EntryFilter.TagMatchMode.get -> LM.Core.Models.Filters.TagMatchMode
LM.Core.Models.Filters.EntryFilter.TagMatchMode.set -> void
LM.Core.Models.Filters.EntryFilter.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Filters.EntryFilter.Tags.set -> void
LM.Core.Models.Filters.TagMatchMode
LM.Core.Models.Filters.TagMatchMode.Any = 0 -> LM.Core.Models.Filters.TagMatchMode
LM.Core.Models.Filters.TagMatchMode.All = 1 -> LM.Core.Models.Filters.TagMatchMode
LM.Core.Models.Filters.TagMatchMode.Not = 2 -> LM.Core.Models.Filters.TagMatchMode
LM.Core.Models.Filters.EntryFilter.TitleContains.get -> string?
LM.Core.Models.Filters.EntryFilter.TitleContains.set -> void
LM.Core.Models.Filters.EntryFilter.TypesAny.get -> LM.Core.Models.EntryType[]?
LM.Core.Models.Filters.EntryFilter.TypesAny.set -> void
LM.Core.Models.Filters.EntryFilter.YearFrom.get -> int?
LM.Core.Models.Filters.EntryFilter.YearFrom.set -> void
LM.Core.Models.Filters.EntryFilter.YearTo.get -> int?
LM.Core.Models.Filters.EntryFilter.YearTo.set -> void
LM.Core.Models.Filters.EntryFilter.SourceContains.get -> string?
LM.Core.Models.Filters.EntryFilter.SourceContains.set -> void
LM.Core.Models.Filters.EntryFilter.InternalIdContains.get -> string?
LM.Core.Models.Filters.EntryFilter.InternalIdContains.set -> void
LM.Core.Models.Filters.EntryFilter.DoiContains.get -> string?
LM.Core.Models.Filters.EntryFilter.DoiContains.set -> void
LM.Core.Models.Filters.EntryFilter.PmidContains.get -> string?
LM.Core.Models.Filters.EntryFilter.PmidContains.set -> void
LM.Core.Models.Filters.EntryFilter.NctContains.get -> string?
LM.Core.Models.Filters.EntryFilter.NctContains.set -> void
LM.Core.Models.Filters.EntryFilter.AddedByContains.get -> string?
LM.Core.Models.Filters.EntryFilter.AddedByContains.set -> void
LM.Core.Models.Filters.EntryFilter.AddedOnFromUtc.get -> System.DateTime?
LM.Core.Models.Filters.EntryFilter.AddedOnFromUtc.set -> void
LM.Core.Models.Filters.EntryFilter.AddedOnToUtc.get -> System.DateTime?
LM.Core.Models.Filters.EntryFilter.AddedOnToUtc.set -> void
LM.Core.Models.GrantInfo
LM.Core.Models.GrantInfo.Agency.get -> string?
LM.Core.Models.GrantInfo.Agency.init -> void
LM.Core.Models.GrantInfo.Country.get -> string?
LM.Core.Models.GrantInfo.Country.init -> void
LM.Core.Models.GrantInfo.GrantId.get -> string?
LM.Core.Models.GrantInfo.GrantId.init -> void
LM.Core.Models.PublicationRecord
LM.Core.Models.PublicationRecord.AbstractPlain.get -> string?
LM.Core.Models.PublicationRecord.AbstractPlain.init -> void
LM.Core.Models.PublicationRecord.AbstractSections.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.AbstractSection!>!
LM.Core.Models.PublicationRecord.AbstractSections.init -> void
LM.Core.Models.PublicationRecord.Affiliations.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.Affiliations.init -> void
LM.Core.Models.PublicationRecord.Authors.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.AuthorName!>!
LM.Core.Models.PublicationRecord.Authors.init -> void
LM.Core.Models.PublicationRecord.AuthorsCsv.get -> string!
LM.Core.Models.PublicationRecord.CitedByCount.get -> int?
LM.Core.Models.PublicationRecord.CitedByCount.init -> void
LM.Core.Models.PublicationRecord.CitedByPmids.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.CitedByPmids.init -> void
LM.Core.Models.PublicationRecord.CommentsCorrections.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.CommentsCorrections.init -> void
LM.Core.Models.PublicationRecord.Country.get -> string?
LM.Core.Models.PublicationRecord.Country.init -> void
LM.Core.Models.PublicationRecord.Doi.get -> string?
LM.Core.Models.PublicationRecord.Doi.init -> void
LM.Core.Models.PublicationRecord.FirstAuthorLast.get -> string!
LM.Core.Models.PublicationRecord.Grants.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.GrantInfo!>!
LM.Core.Models.PublicationRecord.Grants.init -> void
LM.Core.Models.PublicationRecord.Issue.get -> string?
LM.Core.Models.PublicationRecord.Issue.init -> void
LM.Core.Models.PublicationRecord.JournalIsoAbbrev.get -> string?
LM.Core.Models.PublicationRecord.JournalIsoAbbrev.init -> void
LM.Core.Models.PublicationRecord.JournalTitle.get -> string?
LM.Core.Models.PublicationRecord.JournalTitle.init -> void
LM.Core.Models.PublicationRecord.Keywords.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.Keywords.init -> void
LM.Core.Models.PublicationRecord.Language.get -> string?
LM.Core.Models.PublicationRecord.Language.init -> void
LM.Core.Models.PublicationRecord.MeshHeadings.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.MeshHeadings.init -> void
LM.Core.Models.PublicationRecord.Pages.get -> string?
LM.Core.Models.PublicationRecord.Pages.init -> void
LM.Core.Models.PublicationRecord.Pmcid.get -> string?
LM.Core.Models.PublicationRecord.Pmcid.init -> void
LM.Core.Models.PublicationRecord.Pmid.get -> string?
LM.Core.Models.PublicationRecord.Pmid.init -> void
LM.Core.Models.PublicationRecord.PublicationTypes.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.PublicationTypes.init -> void
LM.Core.Models.PublicationRecord.PublishedEpub.get -> System.DateOnly?
LM.Core.Models.PublicationRecord.PublishedEpub.init -> void
LM.Core.Models.PublicationRecord.PublishedPrint.get -> System.DateOnly?
LM.Core.Models.PublicationRecord.PublishedPrint.init -> void
LM.Core.Models.PublicationRecord.ReferencedPmids.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.ReferencedPmids.init -> void
LM.Core.Models.PublicationRecord.Title.get -> string?
LM.Core.Models.PublicationRecord.Title.init -> void
LM.Core.Models.PublicationRecord.UrlPubMed.get -> string?
LM.Core.Models.PublicationRecord.UrlPubMed.init -> void
LM.Core.Models.PublicationRecord.Volume.get -> string?
LM.Core.Models.PublicationRecord.Volume.init -> void
LM.Core.Models.PublicationRecord.Year.get -> int?
LM.Core.Models.PublicationRecord.Year.init -> void
LM.Core.Models.Relation
LM.Core.Models.Relation.Relation() -> void
LM.Core.Models.Relation.TargetEntryId.get -> string!
LM.Core.Models.Relation.TargetEntryId.set -> void
LM.Core.Models.Relation.Type.get -> string!
LM.Core.Models.Relation.Type.set -> void
LM.Core.Models.Search.FullTextSearchHit.EntryId.init -> void
LM.Core.Models.Search.FullTextSearchHit.Highlight.init -> void
LM.Core.Models.Search.FullTextSearchHit.Score.init -> void
LM.Core.Models.Search.FullTextSearchQuery.TypesAny.get -> LM.Core.Models.EntryType[]?
LM.Core.Models.SearchDatabase
LM.Core.Models.SearchDatabase.ClinicalTrialsGov = 1 -> LM.Core.Models.SearchDatabase
LM.Core.Models.SearchDatabase.PubMed = 0 -> LM.Core.Models.SearchDatabase
LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchField.Abstract = 2 -> LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchField.Content = 4 -> LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchField.None = 0 -> LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchField.Title = 1 -> LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchHit
LM.Core.Models.Search.FullTextSearchHit.EntryId.get -> string!
LM.Core.Models.Search.FullTextSearchHit.FullTextSearchHit(string! EntryId, double Score, string? Highlight) -> void
LM.Core.Models.Search.FullTextSearchHit.Highlight.get -> string?
LM.Core.Models.Search.FullTextSearchHit.Score.get -> double
LM.Core.Models.Search.FullTextSearchQuery
LM.Core.Models.Search.FullTextSearchQuery.Fields.get -> LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchQuery.Fields.set -> void
LM.Core.Models.Search.FullTextSearchQuery.FullTextSearchQuery() -> void
LM.Core.Models.Search.FullTextSearchQuery.IsInternal.get -> bool?
LM.Core.Models.Search.FullTextSearchQuery.IsInternal.set -> void
LM.Core.Models.Search.FullTextSearchQuery.Limit.get -> int
LM.Core.Models.Search.FullTextSearchQuery.Limit.set -> void
LM.Core.Models.Search.FullTextSearchQuery.Text.get -> string?
LM.Core.Models.Search.FullTextSearchQuery.Text.set -> void
LM.Core.Models.Search.FullTextSearchQuery.TypesAny.set -> void
LM.Core.Models.Search.FullTextSearchQuery.YearFrom.get -> int?
LM.Core.Models.Search.FullTextSearchQuery.YearFrom.set -> void
LM.Core.Models.Search.FullTextSearchQuery.YearTo.get -> int?
LM.Core.Models.Search.FullTextSearchQuery.YearTo.set -> void
LM.Core.Models.SearchHit
LM.Core.Models.SearchHit.AlreadyInDb.get -> bool
LM.Core.Models.SearchHit.AlreadyInDb.set -> void
LM.Core.Models.SearchHit.Authors.get -> string!
LM.Core.Models.SearchHit.Authors.init -> void
LM.Core.Models.SearchHit.Doi.get -> string?
LM.Core.Models.SearchHit.Doi.init -> void
LM.Core.Models.SearchHit.ExternalId.get -> string!
LM.Core.Models.SearchHit.ExternalId.init -> void
LM.Core.Models.SearchHit.ExistingEntryId.get -> string?
LM.Core.Models.SearchHit.ExistingEntryId.set -> void
LM.Core.Models.SearchHit.JournalOrSource.get -> string?
LM.Core.Models.SearchHit.JournalOrSource.init -> void
LM.Core.Models.SearchHit.SearchHit() -> void
LM.Core.Models.SearchHit.Selected.get -> bool
LM.Core.Models.SearchHit.Selected.set -> void
LM.Core.Models.SearchHit.Source.get -> LM.Core.Models.SearchDatabase
LM.Core.Models.SearchHit.Source.init -> void
LM.Core.Models.SearchHit.Title.get -> string!
LM.Core.Models.SearchHit.Title.init -> void
LM.Core.Models.SearchHit.Url.get -> string?
LM.Core.Models.SearchHit.Url.init -> void
LM.Core.Models.SearchHit.Year.get -> int?
LM.Core.Models.SearchHit.Year.init -> void
LM.Core.Models.SearchHit.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.Core.Models.WatchedFolderState.WatchedFolderState(string! Path, System.DateTimeOffset? LastScanUtc, string? AggregatedHash, bool LastScanWasUnchanged) -> void
LM.Core.Utils.Hashes
LM.Core.Utils.IdGen
LM.Core.Utils.JsonEx
static LM.Core.Utils.Hashes.Sha1(string! input) -> string!
static LM.Core.Utils.Hashes.Sha256File(string! path) -> string!
static LM.Core.Utils.IdGen.NewId() -> string!
static LM.Core.Utils.JsonEx.Deserialize<T>(string! s) -> T?
static LM.Core.Utils.JsonEx.Serialize<T>(T v) -> string!
LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.WatchedFolderSettings!>!
LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore.SaveAsync(LM.Core.Models.WatchedFolderSettings! settings, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.Configuration.ISearchHistoryStore
LM.Core.Abstractions.Configuration.ISearchHistoryStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Search.SearchHistoryDocument!>!
LM.Core.Abstractions.Configuration.ISearchHistoryStore.SaveAsync(LM.Core.Models.Search.SearchHistoryDocument! document, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.Configuration.IUserPreferencesStore
LM.Core.Abstractions.Configuration.IUserPreferencesStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.UserPreferences!>!
LM.Core.Abstractions.Configuration.IUserPreferencesStore.SaveAsync(LM.Core.Models.UserPreferences! preferences, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Models.Search.SearchHistoryDocument
LM.Core.Models.Search.SearchHistoryDocument.Entries.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.Core.Models.Search.SearchHistoryDocument.Entries.init -> void
LM.Core.Models.Search.SearchHistoryEntry
LM.Core.Models.Search.SearchHistoryEntry.Database.get -> LM.Core.Models.SearchDatabase
LM.Core.Models.Search.SearchHistoryEntry.Database.init -> void
LM.Core.Models.Search.SearchHistoryEntry.ExecutedUtc.get -> System.DateTimeOffset
LM.Core.Models.Search.SearchHistoryEntry.ExecutedUtc.init -> void
LM.Core.Models.Search.SearchHistoryEntry.From.get -> System.DateTime?
LM.Core.Models.Search.SearchHistoryEntry.From.init -> void
LM.Core.Models.Search.SearchHistoryEntry.Query.get -> string!
LM.Core.Models.Search.SearchHistoryEntry.Query.init -> void
LM.Core.Models.Search.SearchHistoryEntry.To.get -> System.DateTime?
LM.Core.Models.Search.SearchHistoryEntry.To.init -> void
LM.Core.Models.Search.SearchExecutionRequest
LM.Core.Models.Search.SearchExecutionRequest.Database.get -> LM.Core.Models.SearchDatabase
LM.Core.Models.Search.SearchExecutionRequest.Database.init -> void
LM.Core.Models.Search.SearchExecutionRequest.From.get -> System.DateTime?
LM.Core.Models.Search.SearchExecutionRequest.From.init -> void
LM.Core.Models.Search.SearchExecutionRequest.Query.get -> string!
LM.Core.Models.Search.SearchExecutionRequest.Query.init -> void
LM.Core.Models.Search.SearchExecutionRequest.To.get -> System.DateTime?
LM.Core.Models.Search.SearchExecutionRequest.To.init -> void
LM.Core.Models.Search.SearchExecutionResult
LM.Core.Models.Search.SearchExecutionResult.ExecutedUtc.get -> System.DateTimeOffset
LM.Core.Models.Search.SearchExecutionResult.ExecutedUtc.init -> void
LM.Core.Models.Search.SearchExecutionResult.Hits.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.SearchHit!>!
LM.Core.Models.Search.SearchExecutionResult.Hits.init -> void
LM.Core.Models.Search.SearchExecutionResult.Request.get -> LM.Core.Models.Search.SearchExecutionRequest!
LM.Core.Models.Search.SearchExecutionResult.Request.init -> void
LM.Core.Models.UserPreferences
LM.Core.Models.UserPreferences.Search.get -> LM.Core.Models.SearchPreferences!
LM.Core.Models.UserPreferences.Search.init -> void
LM.Core.Models.UserPreferences.Library.get -> LM.Core.Models.LibraryPreferences!
LM.Core.Models.UserPreferences.Library.init -> void
LM.Core.Models.SearchPreferences
LM.Core.Models.SearchPreferences.LastSelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.Core.Models.SearchPreferences.LastSelectedDatabase.init -> void
LM.Core.Models.SearchPreferences.LastUpdatedUtc.get -> System.DateTimeOffset
LM.Core.Models.SearchPreferences.LastUpdatedUtc.init -> void
LM.Core.Models.LibraryPreferences
LM.Core.Models.LibraryPreferences.VisibleColumns.get -> string![]!
LM.Core.Models.LibraryPreferences.VisibleColumns.init -> void
LM.Core.Models.LibraryPreferences.LastUpdatedUtc.get -> System.DateTimeOffset
LM.Core.Models.LibraryPreferences.LastUpdatedUtc.init -> void
LM.Core.Models.WatchedFolderSettings
LM.Core.Models.WatchedFolderSettings.Folders.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.WatchedFolderSettingsFolder!>!
LM.Core.Models.WatchedFolderSettings.Folders.init -> void
LM.Core.Models.WatchedFolderSettings.States.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.WatchedFolderState!>!
LM.Core.Models.WatchedFolderSettings.States.init -> void
LM.Core.Models.WatchedFolderSettingsFolder
LM.Core.Models.WatchedFolderSettingsFolder.IsEnabled.get -> bool
LM.Core.Models.WatchedFolderSettingsFolder.IsEnabled.init -> void
LM.Core.Models.WatchedFolderSettingsFolder.Path.get -> string!
LM.Core.Models.WatchedFolderSettingsFolder.Path.init -> void
LM.Core.Models.WatchedFolderState
LM.Core.Models.WatchedFolderState.AggregatedHash.get -> string?
LM.Core.Models.WatchedFolderState.AggregatedHash.init -> void
LM.Core.Models.WatchedFolderState.LastScanUtc.get -> System.DateTimeOffset?
LM.Core.Models.WatchedFolderState.LastScanUtc.init -> void
LM.Core.Models.WatchedFolderState.LastScanWasUnchanged.get -> bool
LM.Core.Models.WatchedFolderState.LastScanWasUnchanged.init -> void
LM.Core.Models.WatchedFolderState.Path.get -> string!
LM.Core.Models.WatchedFolderState.Path.init -> void
static readonly LM.Core.Utils.JsonEx.Options -> System.Text.Json.JsonSerializerOptions!
---------- LM.Review.Core ----------
#nullable enable
LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConflictState.None = 0 -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConflictState.Conflict = 1 -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConflictState.Escalated = 2 -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConflictState.Resolved = 3 -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.Pending = 0 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.InProgress = 1 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.Included = 2 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.Excluded = 3 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.Escalated = 4 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewerRole.Primary = 0 -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewerRole.Secondary = 1 -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewerRole.TieBreaker = 2 -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewerRole.Arbitrator = 3 -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewStageType.TitleScreening = 0 -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewStageType.FullTextReview = 1 -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewStageType.ConsensusMeeting = 2 -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewStageType.QualityAssurance = 3 -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewerDecision
LM.Review.Core.Models.ReviewerDecision.AssignmentId.get -> string!
static LM.Review.Core.Models.ReviewerDecision.Create(string! assignmentId, string! reviewerId, LM.Review.Core.Models.ScreeningStatus decision, System.DateTimeOffset decidedAtUtc, string? notes = null) -> LM.Review.Core.Models.ReviewerDecision!
LM.Review.Core.Models.ReviewerDecision.DecidedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ReviewerDecision.Decision.get -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ReviewerDecision.Notes.get -> string?
LM.Review.Core.Models.ReviewerDecision.ReviewerId.get -> string!
LM.Review.Core.Models.ConsensusOutcome
LM.Review.Core.Models.ConsensusOutcome.Approved.get -> bool
static LM.Review.Core.Models.ConsensusOutcome.Create(string! stageId, bool approved, LM.Review.Core.Models.ConflictState resultingState, System.DateTimeOffset resolvedAtUtc, string? notes = null, string? resolvedBy = null) -> LM.Review.Core.Models.ConsensusOutcome!
LM.Review.Core.Models.ConsensusOutcome.Notes.get -> string?
LM.Review.Core.Models.ConsensusOutcome.ResolvedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ConsensusOutcome.ResolvedBy.get -> string?
LM.Review.Core.Models.ConsensusOutcome.ResultingState.get -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConsensusOutcome.StageId.get -> string!
LM.Review.Core.Models.ReviewAuditTrail
LM.Review.Core.Models.ReviewAuditTrail.Append(LM.Review.Core.Models.ReviewAuditTrail.AuditEntry! entry) -> LM.Review.Core.Models.ReviewAuditTrail!
static LM.Review.Core.Models.ReviewAuditTrail.Create(System.Collections.Generic.IEnumerable<LM.Review.Core.Models.ReviewAuditTrail.AuditEntry!>? entries = null) -> LM.Review.Core.Models.ReviewAuditTrail!
LM.Review.Core.Models.ReviewAuditTrail.Entries.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewAuditTrail.AuditEntry!>!
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Action.get -> string!
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Actor.get -> string!
static LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Create(string! id, string! actor, string! action, System.DateTimeOffset occurredAtUtc, string? details = null) -> LM.Review.Core.Models.ReviewAuditTrail.AuditEntry!
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Details.get -> string?
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Id.get -> string!
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.OccurredAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ReviewProject
LM.Review.Core.Models.ReviewProject.AuditTrail.get -> LM.Review.Core.Models.ReviewAuditTrail!
static LM.Review.Core.Models.ReviewProject.Create(string! id, string! name, System.DateTimeOffset createdAtUtc, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.StageDefinition!>! stageDefinitions, LM.Review.Core.Models.ReviewProjectMetadata? metadata = null, LM.Review.Core.Models.ReviewAuditTrail? auditTrail = null) -> LM.Review.Core.Models.ReviewProject!
LM.Review.Core.Models.ReviewProject.CreatedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ReviewProject.Id.get -> string!
LM.Review.Core.Models.ReviewProject.Name.get -> string!
LM.Review.Core.Models.ReviewProject.Metadata.get -> LM.Review.Core.Models.ReviewProjectMetadata!
LM.Review.Core.Models.ReviewProject.StageDefinitions.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.StageDefinition!>!
LM.Review.Core.Models.ReviewStage
LM.Review.Core.Models.ReviewStage.ActivatedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ReviewStage.Assignments.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ScreeningAssignment!>!
LM.Review.Core.Models.ReviewStage.CompletedAt.get -> System.DateTimeOffset?
LM.Review.Core.Models.ReviewStage.Consensus.get -> LM.Review.Core.Models.ConsensusOutcome?
LM.Review.Core.Models.ReviewStage.ConflictState.get -> LM.Review.Core.Models.ConflictState
static LM.Review.Core.Models.ReviewStage.Create(string! id, string! projectId, LM.Review.Core.Models.StageDefinition! definition, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.ScreeningAssignment!>! assignments, LM.Review.Core.Models.ConflictState conflictState, System.DateTimeOffset activatedAtUtc, System.DateTimeOffset? completedAtUtc = null, LM.Review.Core.Models.ConsensusOutcome? consensus = null) -> LM.Review.Core.Models.ReviewStage!
LM.Review.Core.Models.ReviewStage.Definition.get -> LM.Review.Core.Models.StageDefinition!
LM.Review.Core.Models.ReviewStage.Id.get -> string!
LM.Review.Core.Models.ReviewStage.IsComplete.get -> bool
LM.Review.Core.Models.ReviewStage.ProjectId.get -> string!
LM.Review.Core.Models.StageDefinition
LM.Review.Core.Models.StageDefinition.ConsensusPolicy.get -> LM.Review.Core.Models.StageConsensusPolicy!
static LM.Review.Core.Models.StageDefinition.Create(string! id, string! name, LM.Review.Core.Models.ReviewStageType stageType, LM.Review.Core.Models.ReviewerRequirement! reviewerRequirement, LM.Review.Core.Models.StageConsensusPolicy! consensusPolicy, LM.Review.Core.Models.StageDisplayProfile! displayProfile) -> LM.Review.Core.Models.StageDefinition!
LM.Review.Core.Models.StageDefinition.Id.get -> string!
LM.Review.Core.Models.StageDefinition.Name.get -> string!
LM.Review.Core.Models.StageDefinition.ReviewerRequirement.get -> LM.Review.Core.Models.ReviewerRequirement!
LM.Review.Core.Models.StageDefinition.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.StageDefinition.DisplayProfile.get -> LM.Review.Core.Models.StageDisplayProfile!
LM.Review.Core.Models.StageConsensusPolicy
LM.Review.Core.Models.StageConsensusPolicy.ArbitrationRole.get -> LM.Review.Core.Models.ReviewerRole?
static LM.Review.Core.Models.StageConsensusPolicy.Disabled() -> LM.Review.Core.Models.StageConsensusPolicy!
LM.Review.Core.Models.StageConsensusPolicy.EscalateOnDisagreement.get -> bool
LM.Review.Core.Models.StageConsensusPolicy.MinimumAgreements.get -> int
static LM.Review.Core.Models.StageConsensusPolicy.RequireAgreement(int minimumAgreements, bool escalateOnDisagreement, LM.Review.Core.Models.ReviewerRole? arbitrationRole) -> LM.Review.Core.Models.StageConsensusPolicy!
LM.Review.Core.Models.StageConsensusPolicy.RequiresConsensus.get -> bool
LM.Review.Core.Models.ReviewerRequirement
static LM.Review.Core.Models.ReviewerRequirement.Create(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<LM.Review.Core.Models.ReviewerRole, int>>! requirements) -> LM.Review.Core.Models.ReviewerRequirement!
LM.Review.Core.Models.ReviewerRequirement.GetRequirement(LM.Review.Core.Models.ReviewerRole role) -> int
LM.Review.Core.Models.ReviewerRequirement.Requirements.get -> System.Collections.Generic.IReadOnlyDictionary<LM.Review.Core.Models.ReviewerRole, int>!
LM.Review.Core.Models.ReviewerRequirement.TotalRequired.get -> int
LM.Review.Core.Models.ScreeningAssignment
LM.Review.Core.Models.ScreeningAssignment.AssignedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ScreeningAssignment.CompletedAt.get -> System.DateTimeOffset?
static LM.Review.Core.Models.ScreeningAssignment.Create(string! id, string! stageId, string! reviewerId, LM.Review.Core.Models.ReviewerRole role, LM.Review.Core.Models.ScreeningStatus status, System.DateTimeOffset assignedAtUtc, System.DateTimeOffset? completedAtUtc = null, LM.Review.Core.Models.ReviewerDecision? decision = null) -> LM.Review.Core.Models.ScreeningAssignment!
LM.Review.Core.Models.ScreeningAssignment.Decision.get -> LM.Review.Core.Models.ReviewerDecision?
LM.Review.Core.Models.ScreeningAssignment.Id.get -> string!
LM.Review.Core.Models.ScreeningAssignment.ReviewerId.get -> string!
LM.Review.Core.Models.ScreeningAssignment.Role.get -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ScreeningAssignment.StageId.get -> string!
LM.Review.Core.Models.ScreeningAssignment.Status.get -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.Forms.ExtractionForm
LM.Review.Core.Models.Forms.ExtractionForm.Category.get -> string?
static LM.Review.Core.Models.Forms.ExtractionForm.Create(string! id, string! name, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.Forms.FormSection!>! sections, string? description = null, string? category = null) -> LM.Review.Core.Models.Forms.ExtractionForm!
LM.Review.Core.Models.Forms.ExtractionForm.Description.get -> string?
LM.Review.Core.Models.Forms.ExtractionForm.Id.get -> string!
LM.Review.Core.Models.Forms.ExtractionForm.Name.get -> string!
LM.Review.Core.Models.Forms.ExtractionForm.Sections.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.Forms.FormSection!>!
LM.Review.Core.Models.Forms.FormField
LM.Review.Core.Models.Forms.FormField.AllowFreeTextFallback.get -> bool
LM.Review.Core.Models.Forms.FormField.Description.get -> string?
LM.Review.Core.Models.Forms.FormField.FieldType.get -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormField.Id.get -> string!
LM.Review.Core.Models.Forms.FormField.Options.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.Forms.FormFieldOption!>!
LM.Review.Core.Models.Forms.FormField.Title.get -> string!
LM.Review.Core.Models.Forms.FormField.Validation.get -> LM.Review.Core.Models.Forms.FormFieldValidation?
LM.Review.Core.Models.Forms.FormField.Visibility.get -> LM.Review.Core.Models.Forms.FormVisibilityRule?
static LM.Review.Core.Models.Forms.FormField.Create(string! id, string! title, LM.Review.Core.Models.Forms.FormFieldType fieldType, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.Forms.FormFieldOption!>? options = null, string? description = null, LM.Review.Core.Models.Forms.FormFieldValidation? validation = null, LM.Review.Core.Models.Forms.FormVisibilityRule? visibility = null, bool allowFreeTextFallback = false) -> LM.Review.Core.Models.Forms.FormField!
LM.Review.Core.Models.Forms.FormFieldOption
LM.Review.Core.Models.Forms.FormFieldOption.Description.get -> string?
LM.Review.Core.Models.Forms.FormFieldOption.Id.get -> string!
LM.Review.Core.Models.Forms.FormFieldOption.IsDefault.get -> bool
LM.Review.Core.Models.Forms.FormFieldOption.Label.get -> string!
static LM.Review.Core.Models.Forms.FormFieldOption.Create(string! id, string! label, string? description = null, bool isDefault = false) -> LM.Review.Core.Models.Forms.FormFieldOption!
LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.SingleSelect = 0 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.MultiSelect = 1 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.Text = 2 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.Numeric = 3 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.Date = 4 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.Reference = 5 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldValidation
LM.Review.Core.Models.Forms.FormFieldValidation.Expression.get -> string?
LM.Review.Core.Models.Forms.FormFieldValidation.Maximum.get -> decimal?
LM.Review.Core.Models.Forms.FormFieldValidation.MaximumDateUtc.get -> System.DateTime?
LM.Review.Core.Models.Forms.FormFieldValidation.Minimum.get -> decimal?
LM.Review.Core.Models.Forms.FormFieldValidation.MinimumDateUtc.get -> System.DateTime?
LM.Review.Core.Models.Forms.FormFieldValidation.Mode.get -> LM.Review.Core.Models.Forms.FormValidationMode
static LM.Review.Core.Models.Forms.FormFieldValidation.CreateDateRange(System.DateTime? minimumUtc, System.DateTime? maximumUtc) -> LM.Review.Core.Models.Forms.FormFieldValidation!
static LM.Review.Core.Models.Forms.FormFieldValidation.CreateNumericRange(decimal? minimum, decimal? maximum) -> LM.Review.Core.Models.Forms.FormFieldValidation!
static LM.Review.Core.Models.Forms.FormFieldValidation.CreateRegex(string! pattern) -> LM.Review.Core.Models.Forms.FormFieldValidation!
static LM.Review.Core.Models.Forms.FormFieldValidation.CreateRequired() -> LM.Review.Core.Models.Forms.FormFieldValidation!
LM.Review.Core.Models.Forms.FormIdentifier
static bool LM.Review.Core.Models.Forms.FormIdentifier.IsNormalized(string! identifier) -> bool
static string LM.Review.Core.Models.Forms.FormIdentifier.Normalize(string! identifier) -> string!
LM.Review.Core.Models.Forms.FormSection
LM.Review.Core.Models.Forms.FormSection.Children.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.Forms.FormSection!>!
LM.Review.Core.Models.Forms.FormSection.Description.get -> string?
LM.Review.Core.Models.Forms.FormSection.Fields.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.Forms.FormField!>!
LM.Review.Core.Models.Forms.FormSection.Id.get -> string!
LM.Review.Core.Models.Forms.FormSection.IsRepeatable.get -> bool
LM.Review.Core.Models.Forms.FormSection.Title.get -> string!
LM.Review.Core.Models.Forms.FormSection.Visibility.get -> LM.Review.Core.Models.Forms.FormVisibilityRule?
static LM.Review.Core.Models.Forms.FormSection.Create(string! id, string! title, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.Forms.FormField!>! fields, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.Forms.FormSection!>? children = null, bool isRepeatable = false, string? description = null, LM.Review.Core.Models.Forms.FormVisibilityRule? visibility = null) -> LM.Review.Core.Models.Forms.FormSection!
LM.Review.Core.Models.Forms.FormValidationMode
LM.Review.Core.Models.Forms.FormValidationMode.Required = 0 -> LM.Review.Core.Models.Forms.FormValidationMode
LM.Review.Core.Models.Forms.FormValidationMode.Range = 1 -> LM.Review.Core.Models.Forms.FormValidationMode
LM.Review.Core.Models.Forms.FormValidationMode.Regex = 2 -> LM.Review.Core.Models.Forms.FormValidationMode
LM.Review.Core.Models.Forms.FormVisibilityRule
LM.Review.Core.Models.Forms.FormVisibilityRule.ExpectedValues.get -> System.Collections.Generic.IReadOnlyList<string>!
LM.Review.Core.Models.Forms.FormVisibilityRule.IsVisibleWhenMatches.get -> bool
LM.Review.Core.Models.Forms.FormVisibilityRule.SourceFieldId.get -> string!
static LM.Review.Core.Models.Forms.FormVisibilityRule.Create(string! sourceFieldId, System.Collections.Generic.IEnumerable<string>? expectedValues = null, bool isVisibleWhenMatches = true) -> LM.Review.Core.Models.Forms.FormVisibilityRule!
LM.Review.Core.Models.Forms.ExtractionFormSnapshot
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.CapturedBy.get -> string!
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.CapturedUtc.get -> System.DateTime
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.FormId.get -> string!
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.Values.get -> System.Collections.Generic.IReadOnlyDictionary<string, object?>!
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.VersionId.get -> string!
static LM.Review.Core.Models.Forms.ExtractionFormSnapshot.Create(string! formId, string! versionId, System.Collections.Generic.IDictionary<string, object?>! values, string? capturedBy = null, System.DateTime? capturedUtc = null) -> LM.Review.Core.Models.Forms.ExtractionFormSnapshot!
LM.Review.Core.Models.Forms.ExtractionFormVersion
LM.Review.Core.Models.Forms.ExtractionFormVersion.CreatedBy.get -> string!
LM.Review.Core.Models.Forms.ExtractionFormVersion.CreatedUtc.get -> System.DateTime
LM.Review.Core.Models.Forms.ExtractionFormVersion.Form.get -> LM.Review.Core.Models.Forms.ExtractionForm!
LM.Review.Core.Models.Forms.ExtractionFormVersion.Metadata.get -> System.Collections.Generic.IReadOnlyDictionary<string, string>!
LM.Review.Core.Models.Forms.ExtractionFormVersion.VersionId.get -> string!
static LM.Review.Core.Models.Forms.ExtractionFormVersion.Create(string! versionId, LM.Review.Core.Models.Forms.ExtractionForm! form, System.Collections.Generic.IDictionary<string, string>? metadata = null, string? createdBy = null, System.DateTime? createdUtc = null) -> LM.Review.Core.Models.Forms.ExtractionFormVersion!
LM.Review.Core.Validation.FormSchemaIssue
LM.Review.Core.Validation.FormSchemaIssue.Code.get -> string!
LM.Review.Core.Validation.FormSchemaIssue.FieldId.get -> string?
LM.Review.Core.Validation.FormSchemaIssue.Message.get -> string!
LM.Review.Core.Validation.FormSchemaIssue.SectionId.get -> string?
LM.Review.Core.Validation.FormSchemaIssue.Severity.get -> LM.Review.Core.Validation.FormSchemaSeverity
static LM.Review.Core.Validation.FormSchemaIssue.Error(string! code, string! message, string? sectionId = null, string? fieldId = null) -> LM.Review.Core.Validation.FormSchemaIssue!
static LM.Review.Core.Validation.FormSchemaIssue.Warning(string! code, string! message, string? sectionId = null, string? fieldId = null) -> LM.Review.Core.Validation.FormSchemaIssue!
LM.Review.Core.Validation.FormSchemaSeverity
LM.Review.Core.Validation.FormSchemaSeverity.Warning = 0 -> LM.Review.Core.Validation.FormSchemaSeverity
LM.Review.Core.Validation.FormSchemaSeverity.Error = 1 -> LM.Review.Core.Validation.FormSchemaSeverity
LM.Review.Core.Validation.FormSchemaValidator
LM.Review.Core.Validation.FormSchemaValidator.Validate(LM.Review.Core.Models.Forms.ExtractionForm! form) -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Validation.FormSchemaIssue!>!
LM.Review.Core.Validation.FormSchemaValidator.Validate(LM.Review.Core.Models.Forms.ExtractionFormSnapshot! snapshot, LM.Review.Core.Models.Forms.ExtractionFormVersion! version) -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Validation.FormSchemaIssue!>!
LM.Review.Core.Validation.FormSchemaValidator.Validate(LM.Review.Core.Models.Forms.ExtractionFormVersion! version) -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Validation.FormSchemaIssue!>!
#nullable enable
LM.Review.Core.Services.IReviewHookContext
LM.Review.Core.Services.IReviewHookContextFactory
LM.Review.Core.Services.IReviewHookContextFactory.CreateAssignmentUpdated(LM.Review.Core.Models.ReviewStage! stage, LM.Review.Core.Models.ScreeningAssignment! assignment) -> LM.Review.Core.Services.IReviewHookContext!
LM.Review.Core.Services.IReviewHookContextFactory.CreateReviewerDecisionRecorded(LM.Review.Core.Models.ScreeningAssignment! assignment, LM.Review.Core.Models.ReviewerDecision! decision) -> LM.Review.Core.Services.IReviewHookContext!
LM.Review.Core.Services.IReviewHookContextFactory.CreateStageTransition(LM.Review.Core.Models.ReviewStage! stage, LM.Review.Core.Models.ConflictState previousState, LM.Review.Core.Models.ConflictState currentState) -> LM.Review.Core.Services.IReviewHookContext!
LM.Review.Core.Services.IReviewHookOrchestrator
LM.Review.Core.Services.IReviewHookOrchestrator.ProcessAsync(string! entryId, LM.Review.Core.Services.IReviewHookContext! context, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Review.Core.Services.IReviewWorkflowService
LM.Review.Core.Services.IReviewWorkflowService.CreateStageAsync(string! projectId, string! stageDefinitionId, System.Collections.Generic.IReadOnlyCollection<LM.Review.Core.Services.ReviewerAssignmentRequest!>! assignments, System.Threading.CancellationToken cancellationToken = default) -> LM.Review.Core.Models.ReviewStage!
LM.Review.Core.Services.IReviewWorkflowService.SubmitDecisionAsync(string! assignmentId, LM.Review.Core.Models.ScreeningStatus decision, string? notes, System.Threading.CancellationToken cancellationToken = default) -> LM.Review.Core.Models.ScreeningAssignment!
LM.Review.Core.Services.IReviewWorkflowStore
LM.Review.Core.Services.IReviewWorkflowStore.GetAssignmentAsync(string! assignmentId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ScreeningAssignment?>!
LM.Review.Core.Services.IReviewWorkflowStore.GetAssignmentsByStageAsync(string! stageId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ScreeningAssignment!>>!
LM.Review.Core.Services.IReviewWorkflowStore.GetProjectAsync(string! projectId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ReviewProject?>!
LM.Review.Core.Services.IReviewWorkflowStore.GetProjectsAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewProject!>!>!
LM.Review.Core.Services.IReviewWorkflowStore.GetStageAsync(string! stageId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ReviewStage?>!
LM.Review.Core.Services.IReviewWorkflowStore.GetStagesByProjectAsync(string! projectId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStage!>>!
LM.Review.Core.Services.IReviewWorkflowStore.SaveAssignmentAsync(string! projectId, LM.Review.Core.Models.ScreeningAssignment! assignment, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Review.Core.Services.IReviewWorkflowStore.SaveProjectAsync(LM.Review.Core.Models.ReviewProject! project, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Review.Core.Services.IReviewWorkflowStore.SaveStageAsync(LM.Review.Core.Models.ReviewStage! stage, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Review.Core.Services.ReviewWorkflowService
LM.Review.Core.Services.ReviewWorkflowService.CreateStageAsync(string! projectId, string! stageDefinitionId, System.Collections.Generic.IReadOnlyCollection<LM.Review.Core.Services.ReviewerAssignmentRequest!>! assignments, System.Threading.CancellationToken cancellationToken = default) -> LM.Review.Core.Models.ReviewStage!
LM.Review.Core.Services.ReviewWorkflowService.ReviewWorkflowService(LM.Review.Core.Services.IReviewWorkflowStore! store, LM.Review.Core.Services.IReviewHookOrchestrator! hookOrchestrator, LM.Review.Core.Services.IReviewHookContextFactory! hookContextFactory, System.TimeProvider? timeProvider = null)
LM.Review.Core.Services.ReviewWorkflowService.SubmitDecisionAsync(string! assignmentId, LM.Review.Core.Models.ScreeningStatus decision, string? notes, System.Threading.CancellationToken cancellationToken = default) -> LM.Review.Core.Models.ScreeningAssignment!
LM.Review.Core.Services.ReviewerAssignmentRequest
LM.Review.Core.Services.ReviewerAssignmentRequest.ReviewerAssignmentRequest(string! ReviewerId, LM.Review.Core.Models.ReviewerRole Role)
LM.Review.Core.Services.ReviewerAssignmentRequest.ReviewerId.get -> string!
LM.Review.Core.Services.ReviewerAssignmentRequest.ReviewerId.init -> void
LM.Review.Core.Services.ReviewerAssignmentRequest.Role.get -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Services.ReviewerAssignmentRequest.Role.init -> void
LM.Review.Core.Models.ReviewStageType.DataExtraction = 4 -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewProjectMetadata
static LM.Review.Core.Models.ReviewProjectMetadata.Create(LM.Review.Core.Models.ReviewTemplateKind template, string? notes) -> LM.Review.Core.Models.ReviewProjectMetadata!
LM.Review.Core.Models.ReviewProjectMetadata.Notes.get -> string!
LM.Review.Core.Models.ReviewProjectMetadata.Template.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.ReviewTemplateKind.Custom = 1 -> LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.ReviewTemplateKind.DataExtraction = 3 -> LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.ReviewTemplateKind.Picos = 0 -> LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.ReviewTemplateKind.RapidAssessment = 2 -> LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.BibliographySummary = 0 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.DataExtractionWorkspace = 4 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.FullTextViewer = 2 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.InclusionExclusionChecklist = 1 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.NotesPane = 5 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.ReviewerDecisionPanel = 3 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageDisplayProfile
static LM.Review.Core.Models.StageDisplayProfile.Create(System.Collections.Generic.IEnumerable<LM.Review.Core.Models.StageContentArea!>! contentAreas) -> LM.Review.Core.Models.StageDisplayProfile!
LM.Review.Core.Models.StageDisplayProfile.ContentAreas.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.StageContentArea>!
---------- LM.HubSpoke ----------
#nullable enable
#nullable enable
LM.HubSpoke.Abstractions.CasResult
LM.HubSpoke.Abstractions.CasResult.Bytes.get -> long
LM.HubSpoke.Abstractions.CasResult.Bytes.init -> void
LM.HubSpoke.Abstractions.CasResult.CasResult() -> void
LM.HubSpoke.Abstractions.CasResult.CasResult(string? RelPath, string? Sha, long Bytes, string? Mime, string? Original) -> void
LM.HubSpoke.Abstractions.CasResult.Mime.get -> string?
LM.HubSpoke.Abstractions.CasResult.Mime.init -> void
LM.HubSpoke.Abstractions.CasResult.Original.get -> string?
LM.HubSpoke.Abstractions.CasResult.Original.init -> void
LM.HubSpoke.Abstractions.CasResult.RelPath.get -> string?
LM.HubSpoke.Abstractions.CasResult.RelPath.init -> void
LM.HubSpoke.Abstractions.CasResult.Sha.get -> string?
LM.HubSpoke.Abstractions.CasResult.Sha.init -> void
LM.HubSpoke.Abstractions.ISimilarityLog
LM.HubSpoke.Abstractions.ISimilarityLog.LogAsync(string! sessionId, string! stagedPath, string! candidateEntryId, double score, string! method, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Abstractions.ISimilarityLog.NewSessionId() -> string!
LM.HubSpoke.Abstractions.ISpokeHandler
LM.HubSpoke.Abstractions.ISpokeHandler.BuildHookAsync(LM.Core.Models.Entry! entry, LM.HubSpoke.Abstractions.CasResult primary, System.Collections.Generic.IEnumerable<string!>! attachmentRelPaths, System.Func<string!, System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.HubSpoke.Abstractions.CasResult>!>! moveToCas, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Abstractions.ISpokeHandler.BuildIndex(LM.HubSpoke.Models.EntryHub! hub, object? hook, string? extractedFullText) -> LM.HubSpoke.Abstractions.SpokeIndexContribution
LM.HubSpoke.Abstractions.ISpokeHandler.Handles.get -> LM.Core.Models.EntryType
LM.HubSpoke.Abstractions.ISpokeHandler.HookPath.get -> string!
LM.HubSpoke.Abstractions.ISpokeHandler.LoadHookAsync(LM.Core.Abstractions.IWorkSpaceService! ws, string! entryId, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Abstractions.ISpokeHandler.MapToEntry(LM.HubSpoke.Models.EntryHub! hub, object? hook) -> LM.Core.Models.Entry!
LM.HubSpoke.Abstractions.SpokeIndexContribution
LM.HubSpoke.Abstractions.SpokeIndexContribution.Abstract.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Abstract.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.AssetHashes.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Abstractions.SpokeIndexContribution.AssetHashes.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Authors.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Abstractions.SpokeIndexContribution.Authors.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Doi.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Doi.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.FullText.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.FullText.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Journal.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Journal.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Keywords.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Abstractions.SpokeIndexContribution.Keywords.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Pmid.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Pmid.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.SpokeIndexContribution() -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.SpokeIndexContribution(string? Title, string? Abstract, System.Collections.Generic.IReadOnlyList<string!>! Authors, System.Collections.Generic.IReadOnlyList<string!>! Keywords, string? Journal, string? Doi, string? Pmid, int? Year, System.Collections.Generic.IReadOnlyList<string!>! AssetHashes, string? FullText) -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Title.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Title.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Year.get -> int?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Year.init -> void
LM.HubSpoke.Entries.HubSpokeStore
LM.HubSpoke.Entries.HubSpokeStore.EnumerateAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<LM.Core.Models.Entry!>!
LM.HubSpoke.Entries.HubSpokeStore.FindByHashAsync(string! sha256, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.HubSpoke.Entries.HubSpokeStore.FindByIdsAsync(string? doi, string? pmid, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.HubSpoke.Entries.HubSpokeStore.FindSimilarByNameYearAsync(string! title, int? year, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.HubSpoke.Entries.HubSpokeStore.FullTextSearch.get -> LM.Core.Abstractions.IFullTextSearchService!
LM.HubSpoke.Entries.HubSpokeStore.GetByIdAsync(string! id, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.HubSpoke.Entries.HubSpokeStore.HubSpokeStore(LM.Core.Abstractions.IWorkSpaceService! ws, LM.Core.Abstractions.IHasher! hasher, System.Collections.Generic.IEnumerable<LM.HubSpoke.Abstractions.ISpokeHandler!>! handlers, LM.Core.Abstractions.IContentExtractor? contentExtractor = null, LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub? graphHub = null) -> void
LM.HubSpoke.Entries.HubSpokeStore.HubSpokeStore(LM.Core.Abstractions.IWorkSpaceService! ws, LM.Core.Abstractions.IHasher! hasher, System.Collections.Generic.IEnumerable<LM.HubSpoke.Abstractions.ISpokeHandler!>! handlers, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.Core.Abstractions.IContentExtractor? contentExtractor = null, LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub? graphHub = null) -> void
LM.HubSpoke.Entries.HubSpokeStore.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Entries.HubSpokeStore.SaveAsync(LM.Core.Models.Entry! entry, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Entries.HubSpokeStore.SearchAsync(LM.Core.Models.Filters.EntryFilter! filter, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.HubSpoke.Indexing.SimilarityLog
LM.HubSpoke.Indexing.SimilarityLog.LogAsync(string! sessionId, string! stagedPath, string! candidateEntryId, double score, string! method, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Indexing.SimilarityLog.NewSessionId() -> string!
LM.HubSpoke.Indexing.SimilarityLog.SimilarityLog(LM.Core.Abstractions.IWorkSpaceService! ws) -> void
LM.HubSpoke.Models.AbstractSection
LM.HubSpoke.Models.AbstractSection.AbstractSection() -> void
LM.HubSpoke.Models.AbstractSection.Label.get -> string?
LM.HubSpoke.Models.AbstractSection.Label.init -> void
LM.HubSpoke.Models.AbstractSection.Text.get -> string!
LM.HubSpoke.Models.AbstractSection.Text.init -> void
LM.HubSpoke.Models.Affiliation
LM.HubSpoke.Models.Affiliation.Affiliation() -> void
LM.HubSpoke.Models.Affiliation.Email.get -> string?
LM.HubSpoke.Models.Affiliation.Email.init -> void
LM.HubSpoke.Models.Affiliation.Text.get -> string!
LM.HubSpoke.Models.Affiliation.Text.init -> void
LM.HubSpoke.Models.AttachmentHook
LM.HubSpoke.Models.AttachmentHook.AttachmentHook() -> void
LM.HubSpoke.Models.AttachmentHook.Attachments.get -> System.Collections.Generic.List<LM.HubSpoke.Models.AttachmentHookItem!>!
LM.HubSpoke.Models.AttachmentHook.Attachments.set -> void
LM.HubSpoke.Models.AttachmentHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.AttachmentHook.SchemaVersion.init -> void
LM.HubSpoke.Models.AttachmentHookItem
LM.HubSpoke.Models.AttachmentHookItem.AddedBy.get -> string!
LM.HubSpoke.Models.AttachmentHookItem.AddedBy.init -> void
LM.HubSpoke.Models.AttachmentHookItem.AddedUtc.get -> System.DateTime
LM.HubSpoke.Models.AttachmentHookItem.AddedUtc.init -> void
LM.HubSpoke.Models.AttachmentHookItem.AttachmentHookItem() -> void
LM.HubSpoke.Models.AttachmentHookItem.AttachmentId.get -> string!
LM.HubSpoke.Models.AttachmentHookItem.AttachmentId.init -> void
LM.HubSpoke.Models.AttachmentHookItem.LibraryPath.get -> string!
LM.HubSpoke.Models.AttachmentHookItem.LibraryPath.init -> void
LM.HubSpoke.Models.AttachmentHookItem.Notes.get -> string?
LM.HubSpoke.Models.AttachmentHookItem.Notes.init -> void
LM.HubSpoke.Models.AttachmentHookItem.Purpose.get -> LM.Core.Models.AttachmentKind
LM.HubSpoke.Models.AttachmentHookItem.Purpose.init -> void
LM.HubSpoke.Models.AttachmentHookItem.Tags.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.AttachmentHookItem.Tags.init -> void
LM.HubSpoke.Models.AttachmentHookItem.Title.get -> string!
LM.HubSpoke.Models.AttachmentHookItem.Title.init -> void
LM.HubSpoke.Models.ArticleAbstract
LM.HubSpoke.Models.ArticleAbstract.ArticleAbstract() -> void
LM.HubSpoke.Models.ArticleAbstract.Sections.get -> System.Collections.Generic.List<LM.HubSpoke.Models.AbstractSection!>!
LM.HubSpoke.Models.ArticleAbstract.Sections.init -> void
LM.HubSpoke.Models.ArticleAbstract.Text.get -> string?
LM.HubSpoke.Models.ArticleAbstract.Text.init -> void
LM.HubSpoke.Models.ArticleAsset
LM.HubSpoke.Models.ArticleAsset.ArticleAsset() -> void
LM.HubSpoke.Models.ArticleAsset.Bytes.get -> long
LM.HubSpoke.Models.ArticleAsset.Bytes.init -> void
LM.HubSpoke.Models.ArticleAsset.ContentType.get -> string!
LM.HubSpoke.Models.ArticleAsset.ContentType.init -> void
LM.HubSpoke.Models.ArticleAsset.Hash.get -> string!
LM.HubSpoke.Models.ArticleAsset.Hash.init -> void
LM.HubSpoke.Models.ArticleAsset.OriginalFilename.get -> string?
LM.HubSpoke.Models.ArticleAsset.OriginalFilename.init -> void
LM.HubSpoke.Models.ArticleAsset.OriginalFolderPath.get -> string?
LM.HubSpoke.Models.ArticleAsset.OriginalFolderPath.init -> void
LM.HubSpoke.Models.ArticleAsset.Purpose.get -> LM.HubSpoke.Models.ArticleAssetPurpose
LM.HubSpoke.Models.ArticleAsset.Purpose.init -> void
LM.HubSpoke.Models.ArticleAsset.StoragePath.get -> string!
LM.HubSpoke.Models.ArticleAsset.StoragePath.init -> void
LM.HubSpoke.Models.ArticleAsset.Title.get -> string!
LM.HubSpoke.Models.ArticleAsset.Title.init -> void
LM.HubSpoke.Models.ArticleAssetPurpose
LM.HubSpoke.Models.ArticleAssetPurpose.Manuscript = 0 -> LM.HubSpoke.Models.ArticleAssetPurpose
LM.HubSpoke.Models.ArticleAssetPurpose.Supplement = 1 -> LM.HubSpoke.Models.ArticleAssetPurpose
LM.HubSpoke.Models.ArticleDates
LM.HubSpoke.Models.ArticleDates.Accepted.get -> System.DateTimeOffset?
LM.HubSpoke.Models.ArticleDates.Accepted.init -> void
LM.HubSpoke.Models.ArticleDates.ArticleDates() -> void
LM.HubSpoke.Models.ArticleDates.Electronic.get -> System.DateTimeOffset?
LM.HubSpoke.Models.ArticleDates.Electronic.init -> void
LM.HubSpoke.Models.ArticleDates.Print.get -> System.DateTimeOffset?
LM.HubSpoke.Models.ArticleDates.Print.init -> void
LM.HubSpoke.Models.ArticleDates.Received.get -> System.DateTimeOffset?
LM.HubSpoke.Models.ArticleDates.Received.init -> void
LM.HubSpoke.Models.ArticleDates.Revised.get -> System.DateTimeOffset?
LM.HubSpoke.Models.ArticleDates.Revised.init -> void
LM.HubSpoke.Models.ArticleDetails
LM.HubSpoke.Models.ArticleDetails.ArticleDetails() -> void
LM.HubSpoke.Models.ArticleDetails.Dates.get -> LM.HubSpoke.Models.ArticleDates!
LM.HubSpoke.Models.ArticleDetails.Dates.init -> void
LM.HubSpoke.Models.ArticleDetails.Language.get -> string?
LM.HubSpoke.Models.ArticleDetails.Language.init -> void
LM.HubSpoke.Models.ArticleDetails.Pagination.get -> LM.HubSpoke.Models.Pagination!
LM.HubSpoke.Models.ArticleDetails.Pagination.init -> void
LM.HubSpoke.Models.ArticleDetails.PublicationTypes.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.ArticleDetails.PublicationTypes.init -> void
LM.HubSpoke.Models.ArticleDetails.Status.get -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.ArticleDetails.Status.init -> void
LM.HubSpoke.Models.ArticleDetails.Title.get -> string!
LM.HubSpoke.Models.ArticleDetails.Title.init -> void
LM.HubSpoke.Models.ArticleHook
LM.HubSpoke.Models.ArticleHook.Abstract.get -> LM.HubSpoke.Models.ArticleAbstract?
LM.HubSpoke.Models.ArticleHook.Abstract.init -> void
LM.HubSpoke.Models.ArticleHook.Article.get -> LM.HubSpoke.Models.ArticleDetails!
LM.HubSpoke.Models.ArticleHook.Article.init -> void
LM.HubSpoke.Models.ArticleHook.ArticleHook() -> void
LM.HubSpoke.Models.ArticleHook.Assets.get -> System.Collections.Generic.List<LM.HubSpoke.Models.ArticleAsset!>!
LM.HubSpoke.Models.ArticleHook.Assets.init -> void
LM.HubSpoke.Models.ArticleHook.Authors.get -> System.Collections.Generic.List<LM.HubSpoke.Models.Author!>!
LM.HubSpoke.Models.ArticleHook.Authors.init -> void
LM.HubSpoke.Models.ArticleHook.Chemicals.get -> System.Collections.Generic.List<LM.HubSpoke.Models.Chemical!>!
LM.HubSpoke.Models.ArticleHook.Chemicals.init -> void
LM.HubSpoke.Models.ArticleHook.ConflictOfInterest.get -> string?
LM.HubSpoke.Models.ArticleHook.ConflictOfInterest.init -> void
LM.HubSpoke.Models.ArticleHook.Copyright.get -> string?
LM.HubSpoke.Models.ArticleHook.Copyright.init -> void
LM.HubSpoke.Models.ArticleHook.Grants.get -> System.Collections.Generic.List<LM.HubSpoke.Models.Grant!>!
LM.HubSpoke.Models.ArticleHook.Grants.init -> void
LM.HubSpoke.Models.ArticleHook.History.get -> LM.HubSpoke.Models.PublicationHistory!
LM.HubSpoke.Models.ArticleHook.History.init -> void
LM.HubSpoke.Models.ArticleHook.Identifier.get -> LM.HubSpoke.Models.ArticleIdentifier!
LM.HubSpoke.Models.ArticleHook.Identifier.init -> void
LM.HubSpoke.Models.ArticleHook.Journal.get -> LM.HubSpoke.Models.JournalInfo!
LM.HubSpoke.Models.ArticleHook.Journal.init -> void
LM.HubSpoke.Models.ArticleHook.Keywords.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.ArticleHook.Keywords.init -> void
LM.HubSpoke.Models.ArticleHook.Medline.get -> LM.HubSpoke.Models.MedlineInfo!
LM.HubSpoke.Models.ArticleHook.Medline.init -> void
LM.HubSpoke.Models.ArticleHook.MeshHeadings.get -> System.Collections.Generic.List<LM.HubSpoke.Models.MeshHeading!>!
LM.HubSpoke.Models.ArticleHook.MeshHeadings.init -> void
LM.HubSpoke.Models.ArticleHook.References.get -> System.Collections.Generic.List<LM.HubSpoke.Models.Citation!>!
LM.HubSpoke.Models.ArticleHook.References.init -> void
LM.HubSpoke.Models.ArticleHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.ArticleHook.SchemaVersion.init -> void
LM.HubSpoke.Models.ArticleIdentifier
LM.HubSpoke.Models.ArticleIdentifier.ArticleIdentifier() -> void
LM.HubSpoke.Models.ArticleIdentifier.DOI.get -> string?
LM.HubSpoke.Models.ArticleIdentifier.DOI.init -> void
LM.HubSpoke.Models.ArticleIdentifier.OtherIds.get -> System.Collections.Generic.Dictionary<string!, string!>!
LM.HubSpoke.Models.ArticleIdentifier.OtherIds.init -> void
LM.HubSpoke.Models.ArticleIdentifier.PII.get -> string?
LM.HubSpoke.Models.ArticleIdentifier.PII.init -> void
LM.HubSpoke.Models.ArticleIdentifier.PMCID.get -> string?
LM.HubSpoke.Models.ArticleIdentifier.PMCID.init -> void
LM.HubSpoke.Models.ArticleIdentifier.PMID.get -> string!
LM.HubSpoke.Models.ArticleIdentifier.PMID.init -> void
LM.HubSpoke.Models.AssetRef
LM.HubSpoke.Models.AssetRef.AssetRef() -> void
LM.HubSpoke.Models.AssetRef.Bytes.get -> long
LM.HubSpoke.Models.AssetRef.Bytes.init -> void
LM.HubSpoke.Models.AssetRef.ContentType.get -> string!
LM.HubSpoke.Models.AssetRef.ContentType.init -> void
LM.HubSpoke.Models.AssetRef.Hash.get -> string!
LM.HubSpoke.Models.AssetRef.Hash.init -> void
LM.HubSpoke.Models.AssetRef.OriginalFilename.get -> string?
LM.HubSpoke.Models.AssetRef.OriginalFilename.init -> void
LM.HubSpoke.Models.AssetRef.Role.get -> string!
LM.HubSpoke.Models.AssetRef.Role.init -> void
LM.HubSpoke.Models.AssetRef.StoragePath.get -> string!
LM.HubSpoke.Models.AssetRef.StoragePath.init -> void
LM.HubSpoke.Models.Author
LM.HubSpoke.Models.Author.Affiliations.get -> System.Collections.Generic.List<LM.HubSpoke.Models.Affiliation!>!
LM.HubSpoke.Models.Author.Affiliations.init -> void
LM.HubSpoke.Models.Author.Author() -> void
LM.HubSpoke.Models.Author.ForeName.get -> string?
LM.HubSpoke.Models.Author.ForeName.init -> void
LM.HubSpoke.Models.Author.Initials.get -> string?
LM.HubSpoke.Models.Author.Initials.init -> void
LM.HubSpoke.Models.Author.LastName.get -> string?
LM.HubSpoke.Models.Author.LastName.init -> void
LM.HubSpoke.Models.Author.ORCID.get -> string?
LM.HubSpoke.Models.Author.ORCID.init -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails
LM.HubSpoke.Models.ChangeLogAttachmentDetails.AttachmentId.get -> string!
LM.HubSpoke.Models.ChangeLogAttachmentDetails.AttachmentId.init -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails.ChangeLogAttachmentDetails() -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails.LibraryPath.get -> string!
LM.HubSpoke.Models.ChangeLogAttachmentDetails.LibraryPath.init -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Purpose.get -> LM.Core.Models.AttachmentKind
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Purpose.init -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Tags.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Tags.init -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Title.get -> string!
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Title.init -> void
LM.HubSpoke.Models.Chemical
LM.HubSpoke.Models.Chemical.Chemical() -> void
LM.HubSpoke.Models.Chemical.Name.get -> string!
LM.HubSpoke.Models.Chemical.Name.init -> void
LM.HubSpoke.Models.Chemical.RegistryNumber.get -> string?
LM.HubSpoke.Models.Chemical.RegistryNumber.init -> void
LM.HubSpoke.Models.Citation
LM.HubSpoke.Models.Citation.Citation() -> void
LM.HubSpoke.Models.Citation.DOI.get -> string?
LM.HubSpoke.Models.Citation.DOI.init -> void
LM.HubSpoke.Models.Citation.PMID.get -> string?
LM.HubSpoke.Models.Citation.PMID.init -> void
LM.HubSpoke.Models.Citation.Text.get -> string!
LM.HubSpoke.Models.Citation.Text.init -> void
LM.HubSpoke.Models.CreationMethod
LM.HubSpoke.Models.CreationMethod.Manual = 0 -> LM.HubSpoke.Models.CreationMethod
LM.HubSpoke.Models.CreationMethod.Search = 1 -> LM.HubSpoke.Models.CreationMethod
LM.HubSpoke.Models.DocumentHook
LM.HubSpoke.Models.DocumentHook.Assets.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.AssetRef!>!
LM.HubSpoke.Models.DocumentHook.Assets.init -> void
LM.HubSpoke.Models.DocumentHook.Description.get -> string?
LM.HubSpoke.Models.DocumentHook.Description.init -> void
LM.HubSpoke.Models.DocumentHook.DocumentHook() -> void
LM.HubSpoke.Models.DocumentHook.DocumentType.get -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentHook.DocumentType.init -> void
LM.HubSpoke.Models.DocumentHook.EffectiveUtc.get -> System.DateTime?
LM.HubSpoke.Models.DocumentHook.EffectiveUtc.init -> void
LM.HubSpoke.Models.DocumentHook.ExpiresUtc.get -> System.DateTime?
LM.HubSpoke.Models.DocumentHook.ExpiresUtc.init -> void
LM.HubSpoke.Models.DocumentHook.Owner.get -> string?
LM.HubSpoke.Models.DocumentHook.Owner.init -> void
LM.HubSpoke.Models.DocumentHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.DocumentHook.SchemaVersion.init -> void
LM.HubSpoke.Models.DocumentHook.Title.get -> string?
LM.HubSpoke.Models.DocumentHook.Title.init -> void
LM.HubSpoke.Models.DocumentHook.Version.get -> string?
LM.HubSpoke.Models.DocumentHook.Version.init -> void
LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.MarketingMaterial = 1 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.Other = 6 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.Poster = 5 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.Presentation = 0 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.Report = 2 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.StandardOperatingProcedure = 3 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.Whitepaper = 4 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.EntryChangeLogEvent
LM.HubSpoke.Models.EntryChangeLogEvent.Action.get -> string!
LM.HubSpoke.Models.EntryChangeLogEvent.Action.init -> void
LM.HubSpoke.Models.EntryChangeLogEvent.Details.get -> LM.HubSpoke.Models.ChangeLogAttachmentDetails?
LM.HubSpoke.Models.EntryChangeLogEvent.Details.init -> void
LM.HubSpoke.Models.EntryChangeLogEvent.EntryChangeLogEvent() -> void
LM.HubSpoke.Models.EntryChangeLogEvent.EventId.get -> string!
LM.HubSpoke.Models.EntryChangeLogEvent.EventId.init -> void
LM.HubSpoke.Models.EntryChangeLogEvent.PerformedBy.get -> string!
LM.HubSpoke.Models.EntryChangeLogEvent.PerformedBy.init -> void
LM.HubSpoke.Models.EntryChangeLogEvent.TimestampUtc.get -> System.DateTime
LM.HubSpoke.Models.EntryChangeLogEvent.TimestampUtc.init -> void
LM.HubSpoke.Models.EntryChangeLogHook
LM.HubSpoke.Models.EntryChangeLogHook.EntryChangeLogHook() -> void
LM.HubSpoke.Models.EntryChangeLogHook.Events.get -> System.Collections.Generic.List<LM.HubSpoke.Models.EntryChangeLogEvent!>!
LM.HubSpoke.Models.EntryChangeLogHook.Events.set -> void
LM.HubSpoke.Models.EntryChangeLogHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.EntryChangeLogHook.SchemaVersion.init -> void
LM.HubSpoke.Models.PdfAnnotationPreview
LM.HubSpoke.Models.PdfAnnotationPreview.AnnotationId.get -> string!
LM.HubSpoke.Models.PdfAnnotationPreview.AnnotationId.init -> void
LM.HubSpoke.Models.PdfAnnotationPreview.ImagePath.get -> string!
LM.HubSpoke.Models.PdfAnnotationPreview.ImagePath.init -> void
LM.HubSpoke.Models.PdfAnnotationPreview.PdfAnnotationPreview() -> void
LM.HubSpoke.Models.PdfAnnotationsHook
LM.HubSpoke.Models.PdfAnnotationsHook.Annotations.get -> System.Collections.Generic.List<LM.HubSpoke.Models.PdfAnnotationMetadata!>!
LM.HubSpoke.Models.PdfAnnotationsHook.Annotations.init -> void
LM.HubSpoke.Models.PdfAnnotationsHook.OverlayPath.get -> string!
LM.HubSpoke.Models.PdfAnnotationsHook.OverlayPath.init -> void
LM.HubSpoke.Models.PdfAnnotationsHook.Previews.get -> System.Collections.Generic.List<LM.HubSpoke.Models.PdfAnnotationPreview!>!
LM.HubSpoke.Models.PdfAnnotationsHook.Previews.init -> void
LM.HubSpoke.Models.PdfAnnotationsHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.PdfAnnotationsHook.SchemaVersion.init -> void
LM.HubSpoke.Models.PdfAnnotationsHook.PdfAnnotationsHook() -> void
LM.HubSpoke.Models.PdfAnnotationMetadata
LM.HubSpoke.Models.PdfAnnotationMetadata.AnnotationId.get -> string!
LM.HubSpoke.Models.PdfAnnotationMetadata.AnnotationId.init -> void
LM.HubSpoke.Models.PdfAnnotationMetadata.Color.get -> LM.HubSpoke.Models.PdfAnnotationColorMetadata?
LM.HubSpoke.Models.PdfAnnotationMetadata.Color.init -> void
LM.HubSpoke.Models.PdfAnnotationMetadata.Note.get -> string?
LM.HubSpoke.Models.PdfAnnotationMetadata.Note.init -> void
LM.HubSpoke.Models.PdfAnnotationMetadata.PdfAnnotationMetadata() -> void
LM.HubSpoke.Models.PdfAnnotationMetadata.Text.get -> string?
LM.HubSpoke.Models.PdfAnnotationMetadata.Text.init -> void
LM.HubSpoke.Models.PdfAnnotationColorMetadata
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Blue.get -> int
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Blue.init -> void
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Green.get -> int
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Green.init -> void
LM.HubSpoke.Models.PdfAnnotationColorMetadata.PdfAnnotationColorMetadata() -> void
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Red.get -> int
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Red.init -> void
LM.HubSpoke.Models.EntryHooks
LM.HubSpoke.Models.EntryHooks.Article.get -> string?
LM.HubSpoke.Models.EntryHooks.Article.init -> void
LM.HubSpoke.Models.EntryHooks.LitSearch.get -> string?
LM.HubSpoke.Models.EntryHooks.LitSearch.init -> void
LM.HubSpoke.Models.EntryHooks.DataExtraction.get -> string?
LM.HubSpoke.Models.EntryHooks.DataExtraction.init -> void
LM.HubSpoke.Models.EntryHooks.Document.get -> string?
LM.HubSpoke.Models.EntryHooks.Document.init -> void
LM.HubSpoke.Models.EntryHooks.PdfAnnotations.get -> string?
LM.HubSpoke.Models.EntryHooks.PdfAnnotations.init -> void
LM.HubSpoke.Models.EntryHooks.EntryHooks() -> void
LM.HubSpoke.Models.EntryHooks.History.get -> string?
LM.HubSpoke.Models.EntryHooks.History.init -> void
LM.HubSpoke.Models.EntryHooks.Notes.get -> string?
LM.HubSpoke.Models.EntryHooks.Notes.init -> void
LM.HubSpoke.Models.EntryHooks.Provenance.get -> string?
LM.HubSpoke.Models.EntryHooks.Provenance.init -> void
LM.HubSpoke.Models.EntryHooks.Relations.get -> string?
LM.HubSpoke.Models.EntryHooks.Relations.init -> void
LM.HubSpoke.Models.EntryHooks.SearchHits.get -> string?
LM.HubSpoke.Models.EntryHooks.SearchHits.init -> void
LM.HubSpoke.Models.EntryHooks.Trial.get -> string?
LM.HubSpoke.Models.EntryHooks.Trial.init -> void
LM.HubSpoke.Models.EntryHub
LM.HubSpoke.Models.EntryHub.ConcurrencyStamp.get -> string!
LM.HubSpoke.Models.EntryHub.ConcurrencyStamp.init -> void
LM.HubSpoke.Models.EntryHub.CreatedBy.get -> LM.HubSpoke.Models.PersonRef
LM.HubSpoke.Models.EntryHub.CreatedBy.init -> void
LM.HubSpoke.Models.EntryHub.CreatedUtc.get -> System.DateTime
LM.HubSpoke.Models.EntryHub.CreatedUtc.init -> void
LM.HubSpoke.Models.EntryHub.CreationMethod.get -> LM.HubSpoke.Models.CreationMethod
LM.HubSpoke.Models.EntryHub.CreationMethod.init -> void
LM.HubSpoke.Models.EntryHub.DisplayTitle.get -> string!
LM.HubSpoke.Models.EntryHub.DisplayTitle.init -> void
LM.HubSpoke.Models.EntryHub.EntryHub() -> void
LM.HubSpoke.Models.EntryHub.EntryId.get -> string!
LM.HubSpoke.Models.EntryHub.EntryId.init -> void
LM.HubSpoke.Models.EntryHub.Flags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Models.EntryHub.Flags.init -> void
LM.HubSpoke.Models.EntryHub.Hooks.get -> LM.HubSpoke.Models.EntryHooks!
LM.HubSpoke.Models.EntryHub.Hooks.init -> void
LM.HubSpoke.Models.DataExtractionHook
LM.HubSpoke.Models.DataExtractionHook.Assignments.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.PopulationInterventionAssignment!>!
LM.HubSpoke.Models.DataExtractionHook.Assignments.init -> void
LM.HubSpoke.Models.DataExtractionHook.DataExtractionHook() -> void
LM.HubSpoke.Models.DataExtractionHook.Endpoints.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.ExtractedEndpoint!>!
LM.HubSpoke.Models.DataExtractionHook.Endpoints.init -> void
LM.HubSpoke.Models.DataExtractionHook.EntryId.get -> string!
LM.HubSpoke.Models.DataExtractionHook.EntryId.init -> void
LM.HubSpoke.Models.DataExtractionHook.Interventions.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.ExtractedIntervention!>!
LM.HubSpoke.Models.DataExtractionHook.Interventions.init -> void
LM.HubSpoke.Models.DataExtractionHook.Populations.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.ExtractedPopulation!>!
LM.HubSpoke.Models.DataExtractionHook.Populations.init -> void
LM.HubSpoke.Models.DataExtractionHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.DataExtractionHook.SchemaVersion.init -> void
LM.HubSpoke.Models.DataExtractionHook.Source.get -> string?
LM.HubSpoke.Models.DataExtractionHook.Source.init -> void
LM.HubSpoke.Models.DataExtractionHook.Title.get -> string?
LM.HubSpoke.Models.DataExtractionHook.Title.init -> void
LM.HubSpoke.Models.DataExtractionHook.Year.get -> int?
LM.HubSpoke.Models.DataExtractionHook.Year.init -> void
LM.HubSpoke.Models.ExtractedEndpoint
LM.HubSpoke.Models.ExtractedEndpoint.Category.get -> string!
LM.HubSpoke.Models.ExtractedEndpoint.Category.init -> void
LM.HubSpoke.Models.ExtractedEndpoint.Description.get -> string?
LM.HubSpoke.Models.ExtractedEndpoint.Description.init -> void
LM.HubSpoke.Models.ExtractedEndpoint.ExtractedEndpoint() -> void
LM.HubSpoke.Models.ExtractedEndpoint.Id.get -> string!
LM.HubSpoke.Models.ExtractedEndpoint.Id.init -> void
LM.HubSpoke.Models.ExtractedEndpoint.Name.get -> string!
LM.HubSpoke.Models.ExtractedEndpoint.Name.init -> void
LM.HubSpoke.Models.ExtractedEndpoint.Readouts.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.EndpointReadout!>!
LM.HubSpoke.Models.ExtractedEndpoint.Readouts.init -> void
LM.HubSpoke.Models.ExtractedIntervention
LM.HubSpoke.Models.ExtractedIntervention.Attributes.get -> System.Collections.Generic.IReadOnlyDictionary<string!, string!>?
LM.HubSpoke.Models.ExtractedIntervention.Attributes.init -> void
LM.HubSpoke.Models.ExtractedIntervention.Description.get -> string?
LM.HubSpoke.Models.ExtractedIntervention.Description.init -> void
LM.HubSpoke.Models.ExtractedIntervention.ExtractedIntervention() -> void
LM.HubSpoke.Models.ExtractedIntervention.Id.get -> string!
LM.HubSpoke.Models.ExtractedIntervention.Id.init -> void
LM.HubSpoke.Models.ExtractedIntervention.Name.get -> string!
LM.HubSpoke.Models.ExtractedIntervention.Name.init -> void
LM.HubSpoke.Models.ExtractedIntervention.Type.get -> string?
LM.HubSpoke.Models.ExtractedIntervention.Type.init -> void
LM.HubSpoke.Models.ExtractedPopulation
LM.HubSpoke.Models.ExtractedPopulation.BaselineCharacteristics.get -> System.Collections.Generic.IReadOnlyDictionary<string!, string!>!
LM.HubSpoke.Models.ExtractedPopulation.BaselineCharacteristics.init -> void
LM.HubSpoke.Models.ExtractedPopulation.Description.get -> string?
LM.HubSpoke.Models.ExtractedPopulation.Description.init -> void
LM.HubSpoke.Models.ExtractedPopulation.ExtractedPopulation() -> void
LM.HubSpoke.Models.ExtractedPopulation.Id.get -> string!
LM.HubSpoke.Models.ExtractedPopulation.Id.init -> void
LM.HubSpoke.Models.ExtractedPopulation.Name.get -> string!
LM.HubSpoke.Models.ExtractedPopulation.Name.init -> void
LM.HubSpoke.Models.EndpointReadout
LM.HubSpoke.Models.EndpointReadout.ComparatorInterventionId.get -> string?
LM.HubSpoke.Models.EndpointReadout.ComparatorInterventionId.init -> void
LM.HubSpoke.Models.EndpointReadout.EndpointReadout() -> void
LM.HubSpoke.Models.EndpointReadout.InterventionId.get -> string?
LM.HubSpoke.Models.EndpointReadout.InterventionId.init -> void
LM.HubSpoke.Models.EndpointReadout.KaplanMeierCurve.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.KaplanMeierPoint!>?
LM.HubSpoke.Models.EndpointReadout.KaplanMeierCurve.init -> void
LM.HubSpoke.Models.EndpointReadout.Metric.get -> string?
LM.HubSpoke.Models.EndpointReadout.Metric.init -> void
LM.HubSpoke.Models.EndpointReadout.PopulationId.get -> string?
LM.HubSpoke.Models.EndpointReadout.PopulationId.init -> void
LM.HubSpoke.Models.EndpointReadout.Timepoint.get -> string?
LM.HubSpoke.Models.EndpointReadout.Timepoint.init -> void
LM.HubSpoke.Models.EndpointReadout.Unit.get -> string?
LM.HubSpoke.Models.EndpointReadout.Unit.init -> void
LM.HubSpoke.Models.EndpointReadout.Value.get -> double?
LM.HubSpoke.Models.EndpointReadout.Value.init -> void
LM.HubSpoke.Models.KaplanMeierPoint
LM.HubSpoke.Models.KaplanMeierPoint.KaplanMeierPoint() -> void
LM.HubSpoke.Models.KaplanMeierPoint.SurvivalProbability.get -> double
LM.HubSpoke.Models.KaplanMeierPoint.SurvivalProbability.init -> void
LM.HubSpoke.Models.KaplanMeierPoint.Time.get -> double
LM.HubSpoke.Models.KaplanMeierPoint.Time.init -> void
LM.HubSpoke.Models.PopulationInterventionAssignment
LM.HubSpoke.Models.PopulationInterventionAssignment.ArmLabel.get -> string?
LM.HubSpoke.Models.PopulationInterventionAssignment.ArmLabel.init -> void
LM.HubSpoke.Models.PopulationInterventionAssignment.PopulationId.get -> string!
LM.HubSpoke.Models.PopulationInterventionAssignment.PopulationId.init -> void
LM.HubSpoke.Models.PopulationInterventionAssignment.InterventionId.get -> string!
LM.HubSpoke.Models.PopulationInterventionAssignment.InterventionId.init -> void
LM.HubSpoke.Models.PopulationInterventionAssignment.PopulationInterventionAssignment() -> void
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.GetEntryOverviewAsync(string! entryId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview?>!
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.GetKaplanMeierOverlaysAsync(string! entryId, string? endpointId = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.GetMortalityComparisonsAsync(string? entryId = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.RefreshEntryAsync(string! entryId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.SearchBaselineCharacteristicsAsync(string! characteristicSearchTerm, string? valueContains = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.KnowledgeGraphHub(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.GetEntryOverviewAsync(string! entryId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview?>!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.GetKaplanMeierOverlaysAsync(string! entryId, string? endpointId = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.GetMortalityComparisonsAsync(string? entryId = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.RefreshEntryAsync(string! entryId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.SearchBaselineCharacteristicsAsync(string! characteristicSearchTerm, string? valueContains = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.BaselineCharacteristicHit(string! entryId, string! entryTitle, string! populationId, string! populationName, string! characteristic, string! value) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.Characteristic.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.EntryId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.EntryTitle.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.PopulationId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.PopulationName.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.Value.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.GraphEdge(string! sourceType, string! sourceId, string! targetType, string! targetId, string! relationship, string? payloadJson) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.PayloadJson.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.Relationship.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.SourceId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.SourceType.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.TargetId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.TargetType.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.Edges.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge!>!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.GraphEntryOverview(string! entryId, string! title, System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode!>! populations, System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode!>! interventions, System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode!>! endpoints, System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge!>! edges) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.EntryId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.Endpoints.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode!>!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.Interventions.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode!>!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.Populations.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode!>!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.Title.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode.Category.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode.Description.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode.EndpointId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode.GraphEndpointNode(string! endpointId, string! name, string! category, string? description) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode.Name.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode.Description.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode.GraphInterventionNode(string! interventionId, string! name, string? type, string? description) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode.InterventionId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode.Name.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode.Type.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode
LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode.Description.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode.GraphPopulationNode(string! populationId, string! name, string? description) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode.Name.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode.PopulationId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.Curve.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto!>!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.EndpointId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.EndpointName.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.EntryId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.EntryTitle.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.InterventionId.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.InterventionName.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.KaplanMeierOverlay(string! entryId, string! entryTitle, string! endpointId, string! endpointName, string? populationId, string? interventionId, string? interventionName, System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto!>! curve) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.PopulationId.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto.KaplanMeierPointDto(double time, double survivalProbability) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto.SurvivalProbability.get -> double
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto.Time.get -> double
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.ComparatorInterventionId.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.ComparatorName.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.EndpointId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.EndpointName.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.EntryId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.EntryTitle.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.InterventionId.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.InterventionName.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.Metric.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.MortalityComparison(string! entryId, string! entryTitle, string! endpointId, string! endpointName, string? populationId, string? interventionId, string? interventionName, string? comparatorInterventionId, string? comparatorName, double? value, string? unit, string? metric, string? timepoint) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.PopulationId.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.Timepoint.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.Unit.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.Value.get -> double?
LM.HubSpoke.Models.EntryHub.LastActivityUtc.get -> System.DateTime?
LM.HubSpoke.Models.EntryHub.LastActivityUtc.init -> void
LM.HubSpoke.Models.EntryHub.Origin.get -> LM.HubSpoke.Models.EntryOrigin
LM.HubSpoke.Models.EntryHub.Origin.init -> void
LM.HubSpoke.Models.EntryHub.PrimaryPurpose.get -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryHub.PrimaryPurpose.init -> void
LM.HubSpoke.Models.EntryHub.PrimaryPurposeSource.get -> LM.HubSpoke.Models.PurposeSource
LM.HubSpoke.Models.EntryHub.PrimaryPurposeSource.init -> void
LM.HubSpoke.Models.EntryHub.RelationsSummary.get -> LM.HubSpoke.Models.EntryRelationsSummary?
LM.HubSpoke.Models.EntryHub.RelationsSummary.init -> void
LM.HubSpoke.Models.EntryHub.SchemaVersion.get -> string!
LM.HubSpoke.Models.EntryHub.SchemaVersion.init -> void
LM.HubSpoke.Models.EntryHub.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Models.EntryHub.Tags.init -> void
LM.HubSpoke.Models.EntryHub.UpdatedBy.get -> LM.HubSpoke.Models.PersonRef
LM.HubSpoke.Models.EntryHub.UpdatedBy.init -> void
LM.HubSpoke.Models.EntryHub.UpdatedUtc.get -> System.DateTime
LM.HubSpoke.Models.EntryHub.UpdatedUtc.init -> void
LM.HubSpoke.Models.EntryNotesHook
LM.HubSpoke.Models.EntryNotesHook.EntryNotesHook() -> void
LM.HubSpoke.Models.EntryNotesHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.EntryNotesHook.SchemaVersion.init -> void
LM.HubSpoke.Models.EntryNotesHook.Summary.get -> LM.HubSpoke.Models.EntryNotesSummary?
LM.HubSpoke.Models.EntryNotesHook.Summary.init -> void
LM.HubSpoke.Models.EntryNotesHook.SummaryText.get -> string?
LM.HubSpoke.Models.EntryNotesHook.UpdatedUtc.get -> System.DateTime
LM.HubSpoke.Models.EntryNotesHook.UpdatedUtc.init -> void
LM.HubSpoke.Models.EntryNotesHook.UserNotes.get -> string?
LM.HubSpoke.Models.EntryNotesHook.UserNotes.init -> void
LM.HubSpoke.Models.EntryNotesSummary
LM.HubSpoke.Models.EntryNotesSummary.EntryNotesSummary() -> void
LM.HubSpoke.Models.EntryNotesSummary.GetRenderedText() -> string?
LM.HubSpoke.Models.EntryNotesSummary.LitSearch.get -> LM.HubSpoke.Models.LitSearchNoteSummary?
LM.HubSpoke.Models.EntryNotesSummary.LitSearch.init -> void
LM.HubSpoke.Models.EntryNotesSummary.RawText.get -> string?
LM.HubSpoke.Models.EntryNotesSummary.RawText.init -> void
LM.HubSpoke.Models.EntryNotesSummary.Rendered.get -> string?
LM.HubSpoke.Models.EntryNotesSummary.Rendered.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary
LM.HubSpoke.Models.LitSearchNoteRunSummary.ExecutedBy.get -> string?
LM.HubSpoke.Models.LitSearchNoteRunSummary.ExecutedBy.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.From.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchNoteRunSummary.From.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.LitSearchNoteRunSummary() -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.RunId.get -> string!
LM.HubSpoke.Models.LitSearchNoteRunSummary.RunId.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.RunUtc.get -> System.DateTime
LM.HubSpoke.Models.LitSearchNoteRunSummary.RunUtc.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.To.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchNoteRunSummary.To.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.TotalHits.get -> int
LM.HubSpoke.Models.LitSearchNoteRunSummary.TotalHits.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary
LM.HubSpoke.Models.LitSearchNoteSummary.CreatedBy.get -> string?
LM.HubSpoke.Models.LitSearchNoteSummary.CreatedBy.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.CreatedUtc.get -> System.DateTime
LM.HubSpoke.Models.LitSearchNoteSummary.CreatedUtc.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.DerivedFromEntryId.get -> string?
LM.HubSpoke.Models.LitSearchNoteSummary.DerivedFromEntryId.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.LatestRun.get -> LM.HubSpoke.Models.LitSearchNoteRunSummary?
LM.HubSpoke.Models.LitSearchNoteSummary.LatestRun.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.LitSearchNoteSummary() -> void
LM.HubSpoke.Models.LitSearchNoteSummary.Provider.get -> string!
LM.HubSpoke.Models.LitSearchNoteSummary.Provider.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.Query.get -> string!
LM.HubSpoke.Models.LitSearchNoteSummary.Query.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.RunCount.get -> int
LM.HubSpoke.Models.LitSearchNoteSummary.RunCount.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.Title.get -> string?
LM.HubSpoke.Models.LitSearchNoteSummary.Title.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.ToDisplayString() -> string!
LM.HubSpoke.Models.EntryOrigin
LM.HubSpoke.Models.EntryOrigin.External = 0 -> LM.HubSpoke.Models.EntryOrigin
LM.HubSpoke.Models.EntryOrigin.Internal = 1 -> LM.HubSpoke.Models.EntryOrigin
LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Code = 5 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Dataset = 4 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Document = 3 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Manuscript = 1 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Trial = 2 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Unknown = 0 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryRelationsSummary
LM.HubSpoke.Models.EntryRelationsSummary.EntryRelationsSummary() -> void
LM.HubSpoke.Models.EntryRelationsSummary.RelatedCount.get -> int
LM.HubSpoke.Models.EntryRelationsSummary.RelatedCount.init -> void
LM.HubSpoke.Models.EntryRelationsSummary.RelationsUpdatedUtc.get -> System.DateTime?
LM.HubSpoke.Models.EntryRelationsSummary.RelationsUpdatedUtc.init -> void
LM.HubSpoke.Models.EntryRelationsSummary.VariantOfCount.get -> int
LM.HubSpoke.Models.EntryRelationsSummary.VariantOfCount.init -> void
LM.HubSpoke.Models.Grant
LM.HubSpoke.Models.Grant.Agency.get -> string?
LM.HubSpoke.Models.Grant.Agency.init -> void
LM.HubSpoke.Models.Grant.Country.get -> string?
LM.HubSpoke.Models.Grant.Country.init -> void
LM.HubSpoke.Models.Grant.Grant() -> void
LM.HubSpoke.Models.Grant.GrantId.get -> string?
LM.HubSpoke.Models.Grant.GrantId.init -> void
LM.HubSpoke.Models.JournalInfo
LM.HubSpoke.Models.JournalInfo.Country.get -> string?
LM.HubSpoke.Models.JournalInfo.Country.init -> void
LM.HubSpoke.Models.JournalInfo.ISOAbbreviation.get -> string?
LM.HubSpoke.Models.JournalInfo.ISOAbbreviation.init -> void
LM.HubSpoke.Models.JournalInfo.ISSN.get -> string?
LM.HubSpoke.Models.JournalInfo.ISSN.init -> void
LM.HubSpoke.Models.JournalInfo.ISSNElectronic.get -> string?
LM.HubSpoke.Models.JournalInfo.ISSNElectronic.init -> void
LM.HubSpoke.Models.JournalInfo.ISSNPrint.get -> string?
LM.HubSpoke.Models.JournalInfo.ISSNPrint.init -> void
LM.HubSpoke.Models.JournalInfo.Issue.get -> LM.HubSpoke.Models.JournalIssue!
LM.HubSpoke.Models.JournalInfo.Issue.init -> void
LM.HubSpoke.Models.JournalInfo.JournalInfo() -> void
LM.HubSpoke.Models.JournalInfo.NlmUniqueId.get -> string?
LM.HubSpoke.Models.JournalInfo.NlmUniqueId.init -> void
LM.HubSpoke.Models.JournalInfo.Title.get -> string!
LM.HubSpoke.Models.JournalInfo.Title.init -> void
LM.HubSpoke.Models.JournalIssue
LM.HubSpoke.Models.JournalIssue.JournalIssue() -> void
LM.HubSpoke.Models.JournalIssue.Number.get -> string?
LM.HubSpoke.Models.JournalIssue.Number.init -> void
LM.HubSpoke.Models.JournalIssue.PubDate.get -> LM.HubSpoke.Models.PartialDate?
LM.HubSpoke.Models.JournalIssue.PubDate.init -> void
LM.HubSpoke.Models.JournalIssue.Volume.get -> string?
LM.HubSpoke.Models.JournalIssue.Volume.init -> void
LM.HubSpoke.Models.JsonStd
LM.HubSpoke.Models.LitSearchHook
LM.HubSpoke.Models.LitSearchHook.CreatedBy.get -> string?
LM.HubSpoke.Models.LitSearchHook.CreatedBy.init -> void
LM.HubSpoke.Models.LitSearchHook.CreatedUtc.get -> System.DateTime
LM.HubSpoke.Models.LitSearchHook.CreatedUtc.init -> void
LM.HubSpoke.Models.LitSearchHook.From.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchHook.From.init -> void
LM.HubSpoke.Models.LitSearchHook.Keywords.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Models.LitSearchHook.Keywords.init -> void
LM.HubSpoke.Models.LitSearchHook.DerivedFromEntryId.get -> string?
LM.HubSpoke.Models.LitSearchHook.DerivedFromEntryId.init -> void
LM.HubSpoke.Models.LitSearchHook.LitSearchHook() -> void
LM.HubSpoke.Models.LitSearchHook.Provider.get -> string!
LM.HubSpoke.Models.LitSearchHook.Provider.init -> void
LM.HubSpoke.Models.LitSearchHook.Query.get -> string!
LM.HubSpoke.Models.LitSearchHook.Query.init -> void
LM.HubSpoke.Models.LitSearchHook.LegacyNotes.get -> string?
LM.HubSpoke.Models.LitSearchHook.LegacyNotes.init -> void
LM.HubSpoke.Models.LitSearchHook.NotesSummary.get -> string?
LM.HubSpoke.Models.LitSearchHook.NotesSummary.set -> void
LM.HubSpoke.Models.LitSearchHook.UserNotes.get -> string?
LM.HubSpoke.Models.LitSearchHook.UserNotes.set -> void
LM.HubSpoke.Models.LitSearchHook.Runs.get -> System.Collections.Generic.List<LM.HubSpoke.Models.LitSearchRun!>!
LM.HubSpoke.Models.LitSearchHook.Runs.init -> void
LM.HubSpoke.Models.LitSearchHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.LitSearchHook.SchemaVersion.init -> void
LM.HubSpoke.Models.LitSearchHook.Title.get -> string!
LM.HubSpoke.Models.LitSearchHook.Title.init -> void
LM.HubSpoke.Models.LitSearchHook.To.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchHook.To.init -> void
LM.HubSpoke.Models.LitSearchRun
LM.HubSpoke.Models.LitSearchRun.IsFavorite.get -> bool
LM.HubSpoke.Models.LitSearchRun.IsFavorite.init -> void
LM.HubSpoke.Models.LitSearchRun.LitSearchRun() -> void
LM.HubSpoke.Models.LitSearchRun.RawAttachments.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.LitSearchRun.RawAttachments.init -> void
LM.HubSpoke.Models.LitSearchRun.CheckedEntryIdsPath.get -> string?
LM.HubSpoke.Models.LitSearchRun.CheckedEntryIdsPath.set -> void
LM.HubSpoke.Models.LitSearchRun.RunId.get -> string!
LM.HubSpoke.Models.LitSearchRun.RunId.init -> void
LM.HubSpoke.Models.LitSearchRun.RunUtc.get -> System.DateTime
LM.HubSpoke.Models.LitSearchRun.RunUtc.init -> void
LM.HubSpoke.Models.LitSearchRun.ExecutedBy.get -> string?
LM.HubSpoke.Models.LitSearchRun.ExecutedBy.init -> void
LM.HubSpoke.Models.LitSearchRun.From.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchRun.From.init -> void
LM.HubSpoke.Models.LitSearchRun.To.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchRun.To.init -> void
LM.HubSpoke.Models.LitSearchRun.TotalHits.get -> int
LM.HubSpoke.Models.LitSearchRun.TotalHits.init -> void
LM.HubSpoke.Models.MedlineInfo
LM.HubSpoke.Models.MedlineInfo.CitationSubset.get -> string?
LM.HubSpoke.Models.MedlineInfo.CitationSubset.init -> void
LM.HubSpoke.Models.MedlineInfo.MedlineInfo() -> void
LM.HubSpoke.Models.MedlineInfo.PublicationStatusRaw.get -> string?
LM.HubSpoke.Models.MedlineInfo.PublicationStatusRaw.init -> void
LM.HubSpoke.Models.MeshHeading
LM.HubSpoke.Models.MeshHeading.Descriptor.get -> string!
LM.HubSpoke.Models.MeshHeading.Descriptor.init -> void
LM.HubSpoke.Models.MeshHeading.MajorTopic.get -> bool
LM.HubSpoke.Models.MeshHeading.MajorTopic.init -> void
LM.HubSpoke.Models.MeshHeading.MeshHeading() -> void
LM.HubSpoke.Models.MeshHeading.Qualifiers.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.MeshHeading.Qualifiers.init -> void
LM.HubSpoke.Models.NullableUtcDateTimeConverter
LM.HubSpoke.Models.NullableUtcDateTimeConverter.NullableUtcDateTimeConverter() -> void
LM.HubSpoke.Models.Pagination
LM.HubSpoke.Models.Pagination.ArticleNumber.get -> string?
LM.HubSpoke.Models.Pagination.ArticleNumber.init -> void
LM.HubSpoke.Models.Pagination.EndPage.get -> string?
LM.HubSpoke.Models.Pagination.EndPage.init -> void
LM.HubSpoke.Models.Pagination.Pagination() -> void
LM.HubSpoke.Models.Pagination.StartPage.get -> string?
LM.HubSpoke.Models.Pagination.StartPage.init -> void
LM.HubSpoke.Models.PartialDate
LM.HubSpoke.Models.PartialDate.Day.get -> int?
LM.HubSpoke.Models.PartialDate.Day.init -> void
LM.HubSpoke.Models.PartialDate.Month.get -> int?
LM.HubSpoke.Models.PartialDate.Month.init -> void
LM.HubSpoke.Models.PartialDate.PartialDate() -> void
LM.HubSpoke.Models.PartialDate.ToDateTimeOrNull() -> System.DateTime?
LM.HubSpoke.Models.PartialDate.Year.get -> int
LM.HubSpoke.Models.PartialDate.Year.init -> void
LM.HubSpoke.Models.PersonRef
LM.HubSpoke.Models.PersonRef.DisplayName.get -> string?
LM.HubSpoke.Models.PersonRef.DisplayName.init -> void
LM.HubSpoke.Models.PersonRef.Id.get -> string!
LM.HubSpoke.Models.PersonRef.Id.init -> void
LM.HubSpoke.Models.PersonRef.PersonRef() -> void
LM.HubSpoke.Models.PersonRef.PersonRef(string! Id, string? DisplayName) -> void
LM.HubSpoke.Models.PersonRef.TimestampUtc.get -> System.DateTime?
LM.HubSpoke.Models.PersonRef.TimestampUtc.init -> void
LM.HubSpoke.Models.PublicationHistory
LM.HubSpoke.Models.PublicationHistory.Accepted.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.Accepted.init -> void
LM.HubSpoke.Models.PublicationHistory.Entrez.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.Entrez.init -> void
LM.HubSpoke.Models.PublicationHistory.Medline.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.Medline.init -> void
LM.HubSpoke.Models.PublicationHistory.PublicationHistory() -> void
LM.HubSpoke.Models.PublicationHistory.PubMed.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.PubMed.init -> void
LM.HubSpoke.Models.PublicationHistory.Received.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.Received.init -> void
LM.HubSpoke.Models.PublicationHistory.Revised.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.Revised.init -> void
LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.AheadOfPrint = 1 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.EPublish = 2 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.Medline = 4 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.PPublish = 3 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.PubMedNotMedline = 5 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.Unknown = 0 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PurposeSource
LM.HubSpoke.Models.PurposeSource.Inferred = 0 -> LM.HubSpoke.Models.PurposeSource
LM.HubSpoke.Models.PurposeSource.Manual = 1 -> LM.HubSpoke.Models.PurposeSource
LM.HubSpoke.Models.UtcDateTimeConverter
LM.HubSpoke.Models.UtcDateTimeConverter.UtcDateTimeConverter() -> void
LM.HubSpoke.Spokes.ArticleSpokeHandler
LM.HubSpoke.Spokes.ArticleSpokeHandler.ArticleSpokeHandler() -> void
LM.HubSpoke.Spokes.ArticleSpokeHandler.BuildHookAsync(LM.Core.Models.Entry! entry, LM.HubSpoke.Abstractions.CasResult primary, System.Collections.Generic.IEnumerable<string!>! attachmentRelPaths, System.Func<string!, System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.HubSpoke.Abstractions.CasResult>!>! moveToCas, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.ArticleSpokeHandler.BuildIndex(LM.HubSpoke.Models.EntryHub! hub, object? hookObj, string? fullText) -> LM.HubSpoke.Abstractions.SpokeIndexContribution
LM.HubSpoke.Spokes.ArticleSpokeHandler.Handles.get -> LM.Core.Models.EntryType
LM.HubSpoke.Spokes.ArticleSpokeHandler.HookPath.get -> string!
LM.HubSpoke.Spokes.ArticleSpokeHandler.LoadHookAsync(LM.Core.Abstractions.IWorkSpaceService! ws, string! entryId, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.ArticleSpokeHandler.MapToEntry(LM.HubSpoke.Models.EntryHub! hub, object? hookObj) -> LM.Core.Models.Entry!
LM.HubSpoke.Spokes.DocumentSpokeHandler
LM.HubSpoke.Spokes.DocumentSpokeHandler.BuildHookAsync(LM.Core.Models.Entry! entry, LM.HubSpoke.Abstractions.CasResult primary, System.Collections.Generic.IEnumerable<string!>! attachmentRelPaths, System.Func<string!, System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.HubSpoke.Abstractions.CasResult>!>! moveToCas, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.DocumentSpokeHandler.BuildIndex(LM.HubSpoke.Models.EntryHub! hub, object? hookObj, string? fullText) -> LM.HubSpoke.Abstractions.SpokeIndexContribution
LM.HubSpoke.Spokes.DocumentSpokeHandler.DocumentSpokeHandler() -> void
LM.HubSpoke.Spokes.DocumentSpokeHandler.Handles.get -> LM.Core.Models.EntryType
LM.HubSpoke.Spokes.DocumentSpokeHandler.HookPath.get -> string!
LM.HubSpoke.Spokes.DocumentSpokeHandler.LoadHookAsync(LM.Core.Abstractions.IWorkSpaceService! ws, string! entryId, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.DocumentSpokeHandler.MapToEntry(LM.HubSpoke.Models.EntryHub! hub, object? hookObj) -> LM.Core.Models.Entry!
LM.HubSpoke.Spokes.LitSearchSpokeHandler
LM.HubSpoke.Spokes.LitSearchSpokeHandler.BuildHookAsync(LM.Core.Models.Entry! entry, LM.HubSpoke.Abstractions.CasResult primary, System.Collections.Generic.IEnumerable<string!>! attachmentRelPaths, System.Func<string!, System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.HubSpoke.Abstractions.CasResult>!>! moveToCas, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.LitSearchSpokeHandler.BuildIndex(LM.HubSpoke.Models.EntryHub! hub, object? hookObj, string? extractedFullText) -> LM.HubSpoke.Abstractions.SpokeIndexContribution
LM.HubSpoke.Spokes.LitSearchSpokeHandler.Handles.get -> LM.Core.Models.EntryType
LM.HubSpoke.Spokes.LitSearchSpokeHandler.HookPath.get -> string!
LM.HubSpoke.Spokes.LitSearchSpokeHandler.LitSearchSpokeHandler(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.HubSpoke.Spokes.LitSearchSpokeHandler.LoadHookAsync(LM.Core.Abstractions.IWorkSpaceService! ws, string! entryId, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.LitSearchSpokeHandler.MapToEntry(LM.HubSpoke.Models.EntryHub! hub, object? hookObj) -> LM.Core.Models.Entry!
override LM.HubSpoke.Models.NullableUtcDateTimeConverter.Read(ref System.Text.Json.Utf8JsonReader reader, System.Type! typeToConvert, System.Text.Json.JsonSerializerOptions! options) -> System.DateTime?
override LM.HubSpoke.Models.NullableUtcDateTimeConverter.Write(System.Text.Json.Utf8JsonWriter! writer, System.DateTime? value, System.Text.Json.JsonSerializerOptions! options) -> void
override LM.HubSpoke.Models.UtcDateTimeConverter.Read(ref System.Text.Json.Utf8JsonReader reader, System.Type! typeToConvert, System.Text.Json.JsonSerializerOptions! options) -> System.DateTime
override LM.HubSpoke.Models.UtcDateTimeConverter.Write(System.Text.Json.Utf8JsonWriter! writer, System.DateTime value, System.Text.Json.JsonSerializerOptions! options) -> void
static LM.HubSpoke.Models.EntryNotesSummary.FromLitSearch(LM.HubSpoke.Models.LitSearchNoteSummary! summary, string? renderedText) -> LM.HubSpoke.Models.EntryNotesSummary!
static LM.HubSpoke.Models.EntryNotesSummary.FromRawText(string! text) -> LM.HubSpoke.Models.EntryNotesSummary!
static LM.HubSpoke.Models.PersonRef.Unknown.get -> LM.HubSpoke.Models.PersonRef
static readonly LM.HubSpoke.Models.JsonStd.Options -> System.Text.Json.JsonSerializerOptions!
---------- LM.Infrastructure ----------
#nullable enable
#nullable enable
LM.Infrastructure.Content.CompositeContentExtractor
LM.Infrastructure.Content.CompositeContentExtractor.CompositeContentExtractor() -> void
LM.Infrastructure.Content.CompositeContentExtractor.ExtractTextAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Content.OpenXmlContentExtractor
LM.Infrastructure.Content.OpenXmlContentExtractor.ExtractTextAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Content.OpenXmlContentExtractor.OpenXmlContentExtractor() -> void
LM.Infrastructure.Content.PdfPigContentExtractor
LM.Infrastructure.Content.PdfPigContentExtractor.ExtractTextAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Content.PdfPigContentExtractor.PdfPigContentExtractor() -> void
LM.Infrastructure.Content.PlainTextContentExtractor
LM.Infrastructure.Content.PlainTextContentExtractor.ExtractTextAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Content.PlainTextContentExtractor.PlainTextContentExtractor() -> void
LM.Infrastructure.Entries.JsonEntryStore
LM.Infrastructure.Entries.JsonEntryStore.EnumerateAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<LM.Core.Models.Entry!>!
LM.Infrastructure.Entries.JsonEntryStore.FindByHashAsync(string! sha256, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Infrastructure.Entries.JsonEntryStore.FindByIdsAsync(string? doi, string? pmid, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Infrastructure.Entries.JsonEntryStore.FindSimilarByNameYearAsync(string! title, int? year, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.Infrastructure.Entries.JsonEntryStore.GetByIdAsync(string! id, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Infrastructure.Entries.JsonEntryStore.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Infrastructure.Entries.JsonEntryStore.JsonEntryStore(LM.Core.Abstractions.IWorkSpaceService! ws, LM.Core.Abstractions.IDoiNormalizer? doiNormalizer = null, LM.Core.Abstractions.IPmidNormalizer? pmidNormalizer = null) -> void
LM.Infrastructure.Entries.JsonEntryStore.SaveAsync(LM.Core.Models.Entry! entry, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Infrastructure.Entries.JsonEntryStore.SearchAsync(LM.Core.Models.Filters.EntryFilter! f, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.Infrastructure.Entries.EntryTagVocabularyProvider
LM.Infrastructure.Entries.EntryTagVocabularyProvider.EntryTagVocabularyProvider(LM.Core.Abstractions.IEntryStore! store) -> void
LM.Infrastructure.Entries.EntryTagVocabularyProvider.GetAllTagsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>!>!
LM.Infrastructure.Export.MetadataDebugSlideExporter
LM.Infrastructure.Export.MetadataDebugSlideExporter.ExportAsync(System.Collections.Generic.IEnumerable<LM.Core.Models.FileMetadata!>! items, string! outPath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Export.MetadataDebugSlideExporter.MetadataDebugSlideExporter() -> void
LM.Infrastructure.FileSystem.WorkspaceService
LM.Infrastructure.FileSystem.WorkspaceService.EnsureWorkspaceAsync(string! absoluteWorkspacePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Infrastructure.FileSystem.WorkspaceService.GetAbsolutePath(string! relativePath) -> string!
LM.Infrastructure.FileSystem.WorkspaceService.GetLocalDbPath() -> string!
LM.Infrastructure.FileSystem.WorkspaceService.GetWorkspaceRoot() -> string!
LM.Infrastructure.FileSystem.WorkspaceService.WorkspacePath.get -> string?
LM.Infrastructure.FileSystem.WorkspaceService.WorkspaceService() -> void
LM.Infrastructure.FileSystem.WorkspacePreferenceStore
LM.Infrastructure.FileSystem.WorkspacePreferenceStore.SetLastWorkspacePath(string! workspacePath) -> void
LM.Infrastructure.FileSystem.WorkspacePreferenceStore.TryGetLastWorkspacePath() -> string?
LM.Infrastructure.FileSystem.WorkspacePreferenceStore.WorkspacePreferenceStore(string? settingsFilePath = null) -> void
LM.Infrastructure.Hooks.ArticleHookFactory
LM.Infrastructure.Hooks.HookContext
LM.Infrastructure.Hooks.HookContext.Article.get -> LM.HubSpoke.Models.ArticleHook?
LM.Infrastructure.Hooks.HookContext.Article.init -> void
LM.Infrastructure.Hooks.HookContext.Attachments.get -> LM.HubSpoke.Models.AttachmentHook?
LM.Infrastructure.Hooks.HookContext.Attachments.init -> void
LM.Infrastructure.Hooks.HookContext.ChangeLog.get -> LM.HubSpoke.Models.EntryChangeLogHook?
LM.Infrastructure.Hooks.HookContext.ChangeLog.init -> void
LM.Infrastructure.Hooks.HookContext.HookContext() -> void
LM.Infrastructure.Hooks.HookOrchestrator
LM.Infrastructure.Hooks.HookOrchestrator.HookOrchestrator(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Hooks.HookOrchestrator.ProcessAsync(string! entryId, LM.Infrastructure.Hooks.HookContext! ctx, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.Infrastructure.Hooks.HookPersister
LM.Infrastructure.Hooks.HookPersister.HookPersister(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Hooks.HookPersister.SaveArticleIfAnyAsync(string! entryId, LM.HubSpoke.Models.ArticleHook? hook, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.Infrastructure.Metadata.CompositeMetadataExtractor
LM.Infrastructure.Metadata.CompositeMetadataExtractor.CompositeMetadataExtractor(LM.Core.Abstractions.IContentExtractor! content) -> void
LM.Infrastructure.Metadata.CompositeMetadataExtractor.ExtractAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.FileMetadata!>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetAssignmentsByStageAsync(string! stageId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ScreeningAssignment!>!>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetStagesByProjectAsync(string! projectId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStage!>!>!
LM.Infrastructure.Search.ClinicalTrialsGovSearchProvider
LM.Infrastructure.Search.ClinicalTrialsGovSearchProvider.ClinicalTrialsGovSearchProvider() -> void
LM.Infrastructure.Search.ClinicalTrialsGovSearchProvider.Database.get -> LM.Core.Models.SearchDatabase
LM.Infrastructure.Search.ClinicalTrialsGovSearchProvider.SearchAsync(string! query, System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.SearchHit!>!>!
LM.Infrastructure.PubMed.PubMedClient
LM.Infrastructure.PubMed.PubMedClient.PubMedClient() -> void
LM.Infrastructure.PubMed.PubMedClient.TryGetByDoiAsync(string! doi, bool includeCitedBy, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<LM.Core.Models.PublicationRecord?>!
LM.Infrastructure.Pdf.PdfAnnotationPersistenceService
LM.Infrastructure.Pdf.PdfAnnotationPersistenceService.PdfAnnotationPersistenceService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Pdf.PdfAnnotationPersistenceService.PersistAsync(string! entryId, string! pdfHash, string! overlayJson, System.Collections.Generic.IReadOnlyDictionary<string!, byte[]!>! previewImages, string? overlaySidecarRelativePath, string? pdfRelativePath, System.Collections.Generic.IReadOnlyList<LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata!>! annotations, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Infrastructure.Pdf.PdfAnnotationPreviewStorage
LM.Infrastructure.Pdf.PdfAnnotationPreviewStorage.PdfAnnotationPreviewStorage(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Pdf.PdfAnnotationPreviewStorage.SaveAsync(string! pdfHash, string! annotationId, byte[]! pngBytes, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Pdf.PdfAnnotationOverlayReader
LM.Infrastructure.Pdf.PdfAnnotationOverlayReader.PdfAnnotationOverlayReader(LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IEntryStore! entryStore) -> void
LM.Infrastructure.Pdf.PdfAnnotationOverlayReader.GetOverlayJsonAsync(string! entryId, string! pdfHash, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string?>!
LM.Infrastructure.Search.PubMedSearchProvider
LM.Infrastructure.Search.PubMedSearchProvider.PubMedSearchProvider() -> void
LM.Infrastructure.Search.PubMedSearchProvider.Database.get -> LM.Core.Models.SearchDatabase
LM.Infrastructure.Search.PubMedSearchProvider.SearchAsync(string! query, System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.SearchHit!>!>!
LM.Infrastructure.Search.PubMedSearchProvider.FetchFullRecordXmlAsync(string! pubmedId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string?>!
LM.Infrastructure.Search.SearchExecutionService
LM.Infrastructure.Search.SearchExecutionService.SearchExecutionService(System.Collections.Generic.IEnumerable<LM.Core.Abstractions.Search.ISearchProvider!>! providers, LM.Core.Abstractions.IEntryStore! store) -> void
LM.Infrastructure.Search.SearchExecutionService.ExecuteAsync(LM.Core.Models.Search.SearchExecutionRequest! request, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Search.SearchExecutionResult!>!
LM.Infrastructure.Settings.JsonWatchedFolderSettingsStore
LM.Infrastructure.Storage.FileStorageService
LM.Infrastructure.Storage.FileStorageService.FileStorageService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Storage.FileStorageService.SaveNewAsync(string! sourcePath, string! relativeTargetDir, string? preferredFileName = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Text.DoiNormalizer
LM.Infrastructure.Text.DoiNormalizer.DoiNormalizer() -> void
LM.Infrastructure.Text.DoiNormalizer.Normalize(string? raw) -> string?
LM.Infrastructure.Text.PmidNormalizer
LM.Infrastructure.Text.PmidNormalizer.Normalize(string? raw) -> string?
LM.Infrastructure.Text.PmidNormalizer.PmidNormalizer() -> void
LM.Infrastructure.Utils.BibliographyHelper
LM.Infrastructure.Utils.ContentAwareSimilarityService
LM.Infrastructure.Utils.ContentAwareSimilarityService.ComputeFileSimilarityAsync(string! filePathA, string! filePathB, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
LM.Infrastructure.Utils.ContentAwareSimilarityService.ContentAwareSimilarityService(LM.Core.Abstractions.IContentExtractor! extractor) -> void
LM.Infrastructure.Utils.HashingService
LM.Infrastructure.Utils.HashingService.ComputeSha256Async(string! filePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Utils.HashingService.HashingService() -> void
LM.Infrastructure.Utils.SimilarityService
LM.Infrastructure.Utils.SimilarityService.ComputeFileSimilarityAsync(string! filePathA, string! filePathB, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
LM.Infrastructure.Utils.SimilarityService.SimilarityService() -> void
LM.Infrastructure.Utils.TagMerger
LM.Infrastructure.Utils.TagNormalizer
static LM.Infrastructure.Hooks.ArticleHookFactory.CreateFromPublication(LM.Core.Models.PublicationRecord! r) -> LM.HubSpoke.Models.ArticleHook!
static LM.Infrastructure.Utils.BibliographyHelper.GenerateShortTitle(string? title, System.Collections.Generic.IEnumerable<string!>! authors, string? source, int? year) -> string!
static LM.Infrastructure.Utils.TagMerger.Merge(string? existingCsv, System.Collections.Generic.IEnumerable<string!>? add) -> string?
LM.Infrastructure.Settings.JsonWatchedFolderSettingsStore.JsonWatchedFolderSettingsStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Settings.JsonWatchedFolderSettingsStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.WatchedFolderSettings!>!
LM.Infrastructure.Settings.JsonWatchedFolderSettingsStore.SaveAsync(LM.Core.Models.WatchedFolderSettings! settings, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Infrastructure.Settings.JsonSearchHistoryStore
LM.Infrastructure.Settings.JsonSearchHistoryStore.JsonSearchHistoryStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Settings.JsonSearchHistoryStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Search.SearchHistoryDocument!>!
LM.Infrastructure.Settings.JsonSearchHistoryStore.SaveAsync(LM.Core.Models.Search.SearchHistoryDocument! document, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Infrastructure.Settings.JsonUserPreferencesStore
LM.Infrastructure.Settings.JsonUserPreferencesStore.JsonUserPreferencesStore() -> void
LM.Infrastructure.Settings.JsonUserPreferencesStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.UserPreferences!>!
LM.Infrastructure.Settings.JsonUserPreferencesStore.SaveAsync(LM.Core.Models.UserPreferences! preferences, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
static LM.Infrastructure.Utils.TagNormalizer.SplitAndNormalize(string! raw) -> System.Collections.Generic.IEnumerable<string!>!
LM.Infrastructure.Review.ReviewHookContextFactory
LM.Infrastructure.Review.ReviewHookContextFactory.CreateProjectCreated(LM.Review.Core.Models.ReviewProject! project) -> LM.Review.Core.Services.IReviewHookContext!
LM.Infrastructure.Review.ReviewHookContextFactory.CreateAssignmentUpdated(LM.Review.Core.Models.ReviewStage! stage, LM.Review.Core.Models.ScreeningAssignment! assignment) -> LM.Review.Core.Services.IReviewHookContext!
LM.Infrastructure.Review.ReviewHookContextFactory.CreateConsensusResolved(LM.Review.Core.Models.ReviewStage! stage, LM.Review.Core.Models.ConsensusOutcome! consensus) -> LM.Review.Core.Services.IReviewHookContext!
LM.Infrastructure.Review.ReviewHookContextFactory.CreateReviewerDecisionRecorded(LM.Review.Core.Models.ScreeningAssignment! assignment, LM.Review.Core.Models.ReviewerDecision! decision) -> LM.Review.Core.Services.IReviewHookContext!
LM.Infrastructure.Review.ReviewHookContextFactory.CreateStageTransition(LM.Review.Core.Models.ReviewStage! stage, LM.Review.Core.Models.ConflictState previousState, LM.Review.Core.Models.ConflictState currentState) -> LM.Review.Core.Services.IReviewHookContext!
LM.Infrastructure.Review.ReviewHookContextFactory.ReviewHookContextFactory() -> void
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetAssignmentAsync(string! assignmentId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ScreeningAssignment?>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetProjectAsync(string! projectId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ReviewProject?>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetProjectsAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewProject!>!>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetStageAsync(string! stageId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ReviewStage?>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.SaveAssignmentAsync(string! projectId, LM.Review.Core.Models.ScreeningAssignment! assignment, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.SaveProjectAsync(LM.Review.Core.Models.ReviewProject! project, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.SaveStageAsync(LM.Review.Core.Models.ReviewStage! stage, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.WorkspaceReviewWorkflowStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
---------- LM.App.Wpf ----------
#nullable enable
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.ColumnKeyProperty -> System.Windows.DependencyProperty!
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.GetColumnKey(System.Windows.DependencyObject! element) -> string?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.SetColumnKey(System.Windows.DependencyObject! element, string? value) -> void
#nullable enable
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Id.get -> string!
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.IsDraggable.get -> bool
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Name.get -> string!
const LM.App.Wpf.Library.LibraryPresetFolder.RootId = "root" -> string!
const LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.RootId = "root" -> string!
const LM.App.Wpf.ViewModels.StagingItem.DuplicateThreshold = 0.999 -> double
const LM.App.Wpf.ViewModels.StagingItem.NearThreshold = 0.75 -> double
LM.App.Wpf.App
LM.App.Wpf.App.App() -> void
LM.App.Wpf.App.InitializeComponent() -> void
LM.App.Wpf.Common.AsyncRelayCommand
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<object?, System.Threading.Tasks.Task!>! execute, System.Func<object?, bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<System.Threading.Tasks.Task!>! execute, System.Func<bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.AsyncRelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.AsyncRelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.AsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.IAsyncRelayCommand
LM.App.Wpf.Common.IAsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter
LM.App.Wpf.Common.BooleanToOpacityConverter.BooleanToOpacityConverter() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.set -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.set -> void
LM.App.Wpf.Common.Converters.ProjectEditorConverters
LM.App.Wpf.Common.Converters.ProjectEditorConverters.StageSelectionEquality.get -> System.Windows.Data.IMultiValueConverter!
LM.App.Wpf.Common.LibraryPresetSaveContext.LibraryPresetSaveContext(string! DefaultName, System.Collections.Generic.IReadOnlyCollection<string!>! ExistingNames, string! Title = "Save Library Preset", string! Prompt = "Name this filter preset.") -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.LibraryCollectionEntry() -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.DeletePresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
LM.App.Wpf.Library.LibraryFilterState.Tags.get -> string![]!
LM.App.Wpf.Library.LibraryPresetFolder.EnumerateChildren() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.LibraryPresetTreeItem>!
LM.App.Wpf.Library.LibraryPresetNodeKind.Folder = 0 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetNodeKind.Preset = 1 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.LitSearchOrganizerEntry() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.LitSearchOrganizerFolder() -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectBlueprint(string! projectId, string! name, System.DateTimeOffset createdAtUtc, string! createdBy, string! litSearchEntryId, string! litSearchRunId, System.Collections.Generic.IReadOnlyList<string!>! checkedEntryIds, string? hookRelativePath, LM.Review.Core.Models.ReviewTemplateKind template, string! metadataNotes, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>! stages) -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CheckedEntryIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedAtUtc.get -> System.DateTimeOffset
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedBy.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.HookRelativePath.get -> string?
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchEntryId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchRunId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Template.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.MetadataNotes.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Stages.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.With(string? name = null, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>? stages = null, LM.Review.Core.Models.ReviewTemplateKind? template = null, string? metadataNotes = null, string? litSearchEntryId = null, string? litSearchRunId = null, System.Collections.Generic.IReadOnlyList<string!>? checkedEntryIds = null) -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint!
LM.App.Wpf.Services.Review.Design.StageBlueprint
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageBlueprint(string! stageId, string! name, LM.Review.Core.Models.ReviewStageType stageType, int primaryReviewers, int secondaryReviewers, bool requiresConsensus, int minimumAgreements, bool escalateOnDisagreement, LM.Review.Core.Models.StageDisplayProfile! displayProfile) -> void
LM.App.Wpf.Services.Review.Design.StageBlueprint.EscalateOnDisagreement.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.MinimumAgreements.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.PrimaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.RequiresConsensus.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.SecondaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageId.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.Services.Review.Design.StageBlueprint.DisplayProfile.get -> LM.Review.Core.Models.StageDisplayProfile!
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher.Show(string! entryId, string! pdfAbsolutePath, string! pdfHash) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.AddSelectionToFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RemoveSelectionFromFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.LitSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.SavedSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SavedSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeletePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest!>!
LM.App.Wpf.ViewModels.LibraryViewModel.LitSearchOrganizer.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.OpenPdfAnnotationsCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationTypeDisplay.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Dispose() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.HighlightBrush.get -> System.Windows.Media.Brush!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.PdfAnnotationColorCommandParameter() -> void
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior.LitSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Converters.EnumEqualsConverter
LM.App.Wpf.Views.Converters.EnumEqualsConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.EnumEqualsConverter() -> void
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.InverseBooleanToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.AnnotationColorParameterConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.Convert(object?[]! values, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.ConvertBack(object? value, System.Type![]! targetTypes, object? parameter, System.Globalization.CultureInfo! culture) -> object?[]!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NullOrEmptyToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList
LM.App.Wpf.Views.Pdf.PdfAnnotationList.PdfAnnotationList() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow
LM.App.Wpf.Views.PdfViewerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow.PdfViewerWindow() -> void
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.PdfViewerHostObject(LM.App.Wpf.Views.PdfViewer! owner) -> void
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogCloseRequestedEventArgs(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogResult.get -> bool?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.CloseRequested -> System.EventHandler<LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs!>?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.DialogViewModelBase() -> void
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.RequestClose(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.IDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.WpfDialogService(System.IServiceProvider! services) -> void
LM.App.Wpf.Common.ILibraryPresetPrompt
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Common.IClipboardService
LM.App.Wpf.Common.IClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.ClipboardService
LM.App.Wpf.Common.ClipboardService.ClipboardService() -> void
LM.App.Wpf.Common.ClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.IFileExplorerService
LM.App.Wpf.Common.IFileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.FileExplorerService
LM.App.Wpf.Common.FileExplorerService.FileExplorerService() -> void
LM.App.Wpf.Common.FileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.ISearchSavePrompt
LM.App.Wpf.Common.ISearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Common.SearchSavePromptContext
LM.App.Wpf.Common.SearchSavePromptContext.Database.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.From.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.Query.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.SearchSavePromptContext(string! Query, LM.Core.Models.SearchDatabase Database, System.DateTime? From, System.DateTime? To, string! DefaultName, string! DefaultNotes, System.Collections.Generic.IReadOnlyList<string!>! DefaultTags) -> void
LM.App.Wpf.Common.SearchSavePromptContext.Database.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.SearchSavePromptContext.From.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.Query.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.To.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.To.init -> void
LM.App.Wpf.Common.SearchSavePromptResult
LM.App.Wpf.Common.SearchSavePromptResult.Name.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Notes.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Tags.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.SearchSavePromptResult(string! Name, string! Notes, string! Tags) -> void
LM.App.Wpf.Common.SearchSavePromptResult.Name.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Notes.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Tags.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSaveResult
LM.App.Wpf.Common.LibraryPresetSaveResult.LibraryPresetSaveResult(string! Name) -> void
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.get -> bool
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.LibraryPresetSelectionContext(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! Presets, bool AllowLoad, string! Title) -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.LibraryPresetSelectionResult(string? SelectedPresetId, System.Collections.Generic.IReadOnlyList<string!>! DeletedPresetIds) -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.get -> string?
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.init -> void
LM.App.Wpf.Common.LibraryPresetSummary
LM.App.Wpf.Common.LibraryPresetSummary.Id.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Id.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.LibraryPresetSummary(string! Id, string! Name, System.DateTime SavedUtc) -> void
LM.App.Wpf.Common.LibraryPresetSummary.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.get -> System.DateTime
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.init -> void
LM.App.Wpf.Common.RelayCommand
LM.App.Wpf.Common.RelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.RelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.RelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.RelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.RelayCommand.RelayCommand(System.Action<object?>! exec, System.Func<object?, bool>? can = null) -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.get -> bool
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.init -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.get -> string?
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.init -> void
LM.App.Wpf.Common.Dialogs.FolderPickerOptions
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.get -> string?
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.init -> void
LM.App.Wpf.Common.Dialogs.IDialogService
LM.App.Wpf.Common.Dialogs.IDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.StringJoinConverter
LM.App.Wpf.Common.StringJoinConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.StringJoinConverter() -> void
LM.App.Wpf.Common.ViewModelBase
LM.App.Wpf.Common.ViewModelBase.ViewModelBase() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Id.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.get -> int
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PdfAnnotation(string! id, string! title) -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.get -> System.Windows.Media.Imaging.BitmapImage?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.Annotations.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Pdf.PdfAnnotation!>!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.ChangeAnnotationColorCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.CopyAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DocumentSource.get -> System.Uri?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.HandleAnnotationSelectionAsync(LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.LoadPdfCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfHash.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfViewerViewModel(LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.App.Wpf.Services.IUserContext! userContext, LM.Core.Abstractions.IPdfAnnotationPreviewStorage! previewStorage, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.Common.IClipboardService! clipboard) -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.RecordAnnotationChangeCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.WebViewBridge.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DeleteAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.Library.LibraryFilterPreset
LM.App.Wpf.Library.LibraryFilterPreset.LibraryFilterPreset() -> void
LM.App.Wpf.Library.LibraryFilterPreset.Id.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Id.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.Name.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Name.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.get -> System.DateTime
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.get -> int
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.State.get -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.Library.LibraryFilterPreset.State.set -> void
LM.App.Wpf.Library.LibraryFilterPresetStore
LM.App.Wpf.Library.LibraryFilterPresetStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.MovePresetAsync(string! presetId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.LibraryFilterPresetStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.ListPresetsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.LibraryFilterPreset!>!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, string? targetFolderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetByIdAsync(string! presetId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
const LM.App.Wpf.Library.Collections.LibraryCollectionFolder.RootId = "collections-root" -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionEntry!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile
LM.App.Wpf.Library.Collections.LibraryCollectionFile.LibraryCollectionFile() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.get -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder?
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.get -> int
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.EnumerateDescendants() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionEntry!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.LibraryCollectionFolder() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.LibraryCollectionMetadata() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore
LM.App.Wpf.Library.Collections.LibraryCollectionStore.AddEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.CreateFolderAsync(string? parentFolderId, string! name, string! createdBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.DeleteFolderAsync(string! folderId, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.LibraryCollectionStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RemoveEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryPresetFolder
LM.App.Wpf.Library.LibraryPresetFolder.Clone() -> LM.App.Wpf.Library.LibraryPresetFolder!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Id.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Id.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.LibraryPresetFolder() -> void
LM.App.Wpf.Library.LibraryPresetFolder.Name.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Name.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Presets.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryFilterPreset!>!
LM.App.Wpf.Library.LibraryPresetFolder.Presets.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.get -> int
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.set -> void
LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem
LM.App.Wpf.Library.LibraryPresetTreeItem.Folder.get -> LM.App.Wpf.Library.LibraryPresetFolder?
LM.App.Wpf.Library.LibraryPresetTreeItem.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem(LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder, LM.App.Wpf.Library.LibraryPresetFolder? folder, LM.App.Wpf.Library.LibraryFilterPreset? preset) -> void
LM.App.Wpf.Library.LibraryPresetTreeItem.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset?
LM.App.Wpf.Library.LibraryPresetTreeItem.SortOrder.get -> int
LM.App.Wpf.Library.ILibraryEntryEditor
LM.App.Wpf.Library.ILibraryEntryEditor.EditEntryAsync(LM.Core.Models.Entry! entry) -> System.Threading.Tasks.Task<System.Boolean>!
LM.App.Wpf.Library.LibraryFilterState
LM.App.Wpf.Library.LibraryFilterState.LibraryFilterState() -> void
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.get -> bool
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.set -> void
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateFrom.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateFrom.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateTo.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateTo.set -> void
LM.App.Wpf.Library.LibraryFilterState.SortKey.get -> string?
LM.App.Wpf.Library.LibraryFilterState.SortKey.set -> void
LM.App.Wpf.Library.LibraryFilterState.Tags.set -> void
LM.App.Wpf.ViewModels.AddPipeline
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddViewModel
LM.App.Wpf.ViewModels.AddViewModel.AddFilesCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.ViewModels.WatchedFolderScanner? scanner = null, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore? watchedFolderSettings = null, LM.App.Wpf.ViewModels.StagingListViewModel? stagingList = null, LM.App.Wpf.ViewModels.WatchedFoldersViewModel? watchedFolders = null, LM.App.Wpf.Common.Dialogs.IDialogService? dialogService = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.BulkAddFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ClearCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.CommitSelectedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.AddViewModel.Current.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.AddViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.AddViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.AddViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.AddViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.AddViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.AddViewModel.ReviewStagedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Staging.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.AddViewModel.StagingListViewModel.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFolders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFoldersViewModel.get -> LM.App.Wpf.ViewModels.WatchedFoldersViewModel!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.LibraryPresetPickerDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Presets.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.SelectedPresetId.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.EntryId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookAbsolutePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookRelativePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.DisplayLabel.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.ExecutedBy.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.Owner.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.TotalHits.get -> int
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.ConfirmCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.Entries.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.LitSearchRunPickerViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.LibraryPresetSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.set -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Initialize(LM.App.Wpf.Common.SearchSavePromptContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultNotes.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultTags.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.SearchSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingEditorViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingList.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.SelectedWorkspacePath.get -> string?
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.get -> bool
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.WorkspaceChooserViewModel(LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.CanAcceptFileDrop(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleFileDropAsync(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibrarySearchResult
LM.App.Wpf.ViewModels.LibrarySearchResult.Entry.get -> LM.Core.Models.Entry!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasAttachments.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasDoi.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasIdentifiers.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasInternalId.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasLinks.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNct.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPmid.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasRelations.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasSource.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasUserNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.Highlight.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.HighlightDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.IsFullText.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.LibrarySearchResult(LM.Core.Models.Entry! entry, double? score, string? highlight) -> void
LM.App.Wpf.ViewModels.LibrarySearchResult.Score.get -> double?
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreDisplay.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryLinkItem
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.LibraryLinkItem(string! DisplayText, string! Target, LM.App.Wpf.ViewModels.Library.LinkItemKind Kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.get -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.init -> void
LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Url = 0 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.File = 1 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Folder = 2 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.RunAndBasics = 0 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Metadata = 1 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Workflow = 2 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Summary = 3 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.ProjectEditorStepDescriptor(LM.App.Wpf.ViewModels.Review.ProjectEditorStep Step, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.ReviewTemplateOption(LM.Review.Core.Models.ReviewTemplateKind Kind, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectEditorViewModel() -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.AddStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntryCount.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntrySummary.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ErrorMessage.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.HookRelativePath.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Initialize(LM.App.Wpf.Services.Review.Design.ProjectBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchEntryId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchRunId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageDownCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageUpCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.RemoveStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Result.get -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SaveCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.get -> LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.StageTypes.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStageType>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Stages.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Steps.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.TemplateOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStep.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepDescriptor.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepIndex.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsSummaryStep.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.get -> LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateKind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.NextCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.BackCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ChangeRunCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ConfigureRunReloadHandler(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.App.Wpf.Services.Review.Design.ProjectBlueprint?>!>! handler) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.StageDisplayOptionViewModel(LM.Review.Core.Models.StageContentArea area, bool isSelected) -> void
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Area.get -> LM.Review.Core.Models.StageContentArea
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Description.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.get -> bool
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageBlueprintViewModel(LM.App.Wpf.Services.Review.Design.StageBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageId.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TotalReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.DisplayOptions.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel!>!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TryBuild(out LM.App.Wpf.Services.Review.Design.StageBlueprint! stage, out string? errorMessage) -> bool
LM.App.Wpf.ViewModels.StagingListViewModel
LM.App.Wpf.ViewModels.StagingListViewModel.AddStagedItemsAsync(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Clear() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.CommitSelectedAsync(System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.StagingListViewModel.Current.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.StagingListViewModel.HasItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.HasSelectedItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.StagingListViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.StagingListViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingListViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.StagingListViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.SetCommandGuard(System.Func<System.Func<System.Threading.Tasks.Task!>!, System.Threading.Tasks.Task!>! guard) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.UpdateParentBusy(bool isBusy) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.WatchedFoldersViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList, LM.App.Wpf.ViewModels.WatchedFolderScanner! scanner, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore! settingsStore, LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.WatchedFolder
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.get -> bool
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.LastScanDisplay.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.LastScanUtc.get -> System.DateTimeOffset?
LM.App.Wpf.ViewModels.WatchedFolder.LastScanWasUnchanged.get -> bool?
LM.App.Wpf.ViewModels.WatchedFolder.Path.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.Path.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFolder.ResetScanState() -> void
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusLabel.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusToolTip.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.WatchedFolder() -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(string! path) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig
LM.App.Wpf.ViewModels.WatchedFolderConfig.ApplyState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.ClearState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFolderConfig.CreateSnapshot() -> LM.Core.Models.WatchedFolderSettings!
LM.App.Wpf.ViewModels.WatchedFolderConfig.Load(LM.Core.Models.WatchedFolderSettings! settings) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.StoreState(LM.App.Wpf.ViewModels.WatchedFolder! folder, LM.Core.Models.WatchedFolderState! state) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.WatchedFolderConfig() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Folder.get -> LM.App.Wpf.ViewModels.WatchedFolder!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Items.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.WatchedFolderScanEventArgs(LM.App.Wpf.ViewModels.WatchedFolder! folder, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner
LM.App.Wpf.ViewModels.WatchedFolderScanner.Attach(LM.App.Wpf.ViewModels.WatchedFolderConfig! config) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.ItemsStaged -> System.EventHandler<LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs!>?
LM.App.Wpf.ViewModels.WatchedFolderScanner.ScanAsync(LM.App.Wpf.ViewModels.WatchedFolder? folder, System.Threading.CancellationToken ct, bool force = false) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFolderScanner.WatchedFolderScanner(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.IAddPipeline
LM.App.Wpf.ViewModels.IAddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.IAddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.Library.ILibraryDocumentService
LM.App.Wpf.Library.ILibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.ILibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.LibraryDocumentService
LM.App.Wpf.Library.LibraryDocumentService.LibraryDocumentService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.IAttachmentMetadataPrompt
LM.App.Wpf.Library.IAttachmentMetadataPrompt.RequestMetadataAsync(LM.App.Wpf.Library.AttachmentMetadataPromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.AttachmentMetadataPromptResult?>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.get -> string!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.AttachmentMetadataPromptContext(string! EntryTitle, System.Collections.Generic.IReadOnlyList<string!>! FilePaths) -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>!
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult.AttachmentMetadataPromptResult(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>! Attachments) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection
LM.App.Wpf.Library.AttachmentMetadataSelection.AttachmentMetadataSelection(string! SourcePath, string! Title, LM.Core.Models.AttachmentKind Kind, System.Collections.Generic.IReadOnlyList<string!>! Tags) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.get -> LM.Core.Models.AttachmentKind
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.init -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LibraryFiltersViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! presetStore, LM.App.Wpf.Common.ILibraryPresetPrompt! presetPrompt, LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.SavedSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.get -> string
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedSearchPresetViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, LM.App.Wpf.Library.LibraryFilterPreset! preset, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Summary.get -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.ToSummary() -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.SavedSearchTreeChangedEventArgs(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! presets) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.SavedSearchTreeViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.TreeChanged -> System.EventHandler<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs!>?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ClearCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyPresetAsync(LM.App.Wpf.Common.LibraryPresetSummary! summary, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyState(LM.App.Wpf.Library.LibraryFilterState! state) -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.CaptureState() -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTooltip.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTokens.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.BuildFullTextQuery(string! normalizedQuery) -> LM.Core.Models.Search.FullTextSearchQuery!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.HasSavedPresets.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.GetNormalizedFullTextQuery() -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.NavigationRoots.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RefreshNavigationAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedPresets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedSearches.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleLeftPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleRightPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SortOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RemoveTagCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand<string?>!
LM.App.Wpf.ViewModels.Library.LibrarySortOption
LM.App.Wpf.ViewModels.Library.LibrarySortOption.LibrarySortOption(string! key, string! displayName) -> void
LM.App.Wpf.ViewModels.Library.LibrarySortOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOptions
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.Category = 0 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.SavedSearch = 1 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchEntry = 2 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchRun = 3 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.LibraryNavigationNodeViewModel(string! name, LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.HasChildren.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Kind.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.get -> object?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.init -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.LibraryColumnOption(string! key, string! displayName, bool isVisible) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LibraryColumnVisibility() -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LoadFrom(System.Collections.Generic.IReadOnlyDictionary<string!, bool>! source) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.Snapshot() -> System.Collections.Generic.IReadOnlyDictionary<string!, bool>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LibraryResultsViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.App.Wpf.Library.ILibraryEntryEditor! entryEditor, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.Library.IAttachmentMetadataPrompt! attachmentPrompt, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.Core.Abstractions.IHasher! hasher, LM.App.Wpf.Services.Pdf.IPdfViewerLauncher! pdfViewerLauncher) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadFullTextResultsAsync(System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.FullTextSearchHit!>! hits, System.Func<LM.Core.Models.Entry!, bool>? entryFilter = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadMetadataResults(System.Collections.Generic.IEnumerable<LM.Core.Models.Entry!>! entries) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.MarkAsMetadataResults() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResultsAreFullText.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.get -> LM.App.Wpf.ViewModels.LibrarySearchResult?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LinkItems.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryLinkItem!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.EditEntryAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleSelectionChangedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelection.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedItems.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectionChanged -> System.EventHandler?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelectedAbstract.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.get -> int
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.LibraryCollectionFolderViewModel(LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! tree, string! id, string! name, LM.App.Wpf.Library.Collections.LibraryCollectionMetadata! metadata) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.LibraryCollectionsViewModel(LM.App.Wpf.Library.Collections.LibraryCollectionStore! store, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPrimaryAttachment.get -> bool
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.LibrarySearchQueryBox() -> void
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.get -> string!
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel
LM.App.Wpf.ViewModels.LibraryViewModel.Filters.get -> LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LibraryViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFullTextSearchService! fullTextSearch, LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel! filters, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.Configuration.IUserPreferencesStore! preferencesStore, LM.App.Wpf.Common.IClipboardService! clipboard, LM.App.Wpf.Common.IFileExplorerService! fileExplorer, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! litSearchOrganizer, LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! collections) -> void
LM.App.Wpf.ViewModels.LibraryViewModel.Results.get -> LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.Collections.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibraryColumnOption!>!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnVisibility.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility!
LM.App.Wpf.ViewModels.SearchItemViewModel
LM.App.Wpf.ViewModels.SearchItemViewModel.Header.get -> string!
LM.App.Wpf.ViewModels.SearchItemViewModel.SearchItemViewModel(string! header, LM.App.Wpf.ViewModels.LibraryViewModel! vm) -> void
LM.App.Wpf.ViewModels.SearchItemViewModel.Vm.get -> LM.App.Wpf.ViewModels.LibraryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel
LM.App.Wpf.ViewModels.SearchViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.SearchViewModel.ExportSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.From.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.LoadSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRuns.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.PreviousSearchSummary!>!
LM.App.Wpf.ViewModels.SearchViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRunsCount.get -> int
LM.App.Wpf.ViewModels.SearchViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.SearchViewModel.Query.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.get -> LM.Core.Models.SearchHit?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RunSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SaveSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleLeftPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleRightPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SearchViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IWorkSpaceService! ws, LM.App.Wpf.Common.ISearchSavePrompt! savePrompt, LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel! providers, LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel! history, LM.Infrastructure.Search.PubMedSearchProvider! pubMedProvider, LM.Core.Abstractions.Configuration.IUserPreferencesStore? preferencesStore = null) -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.get -> LM.App.Wpf.ViewModels.PreviousSearchSummary?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.StartPreviousRunCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ShowRunDetailsCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleFavoriteCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.To.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.History.get -> LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel.Providers.get -> LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecordExecutionAsync(LM.Core.Models.Search.SearchExecutionResult! result, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.SearchHistoryViewModel(LM.Core.Abstractions.Configuration.ISearchHistoryStore! store) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.ExecuteSearchAsync() -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.RunSearchCommand.get -> LM.App.Wpf.Common.AsyncRelayCommand!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchExecuted -> System.EventHandler<LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs!>?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchProvidersViewModel(LM.Core.Abstractions.Search.ISearchExecutionService! executionService) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.set -> void
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.Result.get -> LM.Core.Models.Search.SearchExecutionResult!
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.SearchExecutedEventArgs(LM.Core.Models.Search.SearchExecutionResult! result) -> void
LM.App.Wpf.ViewModels.PreviousSearchSummary
LM.App.Wpf.ViewModels.PreviousSearchSummary.DisplayName.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.EntryId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.FavoriteRunId.get -> string?
LM.App.Wpf.ViewModels.PreviousSearchSummary.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastRunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.Provider.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.Query.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunCount.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TotalHits.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TagsDisplay.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption
LM.App.Wpf.ViewModels.SearchDatabaseOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption.SearchDatabaseOption(LM.Core.Models.SearchDatabase value, string! displayName) -> void
LM.App.Wpf.ViewModels.SearchDatabaseOption.Value.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.StagingItem
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.get -> LM.HubSpoke.Models.ArticleHook?
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.DisplayName.get -> string?
LM.App.Wpf.ViewModels.StagingItem.DisplayName.set -> void
LM.App.Wpf.ViewModels.StagingItem.Doi.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Doi.set -> void
LM.App.Wpf.ViewModels.StagingItem.FilePath.get -> string!
LM.App.Wpf.ViewModels.StagingItem.FilePath.set -> void
LM.App.Wpf.ViewModels.StagingItem.Internal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Internal.set -> void
LM.App.Wpf.ViewModels.StagingItem.InternalId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.InternalId.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsDuplicate.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsNearMatch.get -> bool
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Notes.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Notes.set -> void
LM.App.Wpf.ViewModels.StagingItem.OriginalFileName.get -> string!
LM.App.Wpf.ViewModels.StagingItem.Pmid.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Pmid.set -> void
LM.App.Wpf.ViewModels.StagingItem.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingItem.Selected.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Selected.set -> void
LM.App.Wpf.ViewModels.StagingItem.Similarity.get -> double
LM.App.Wpf.ViewModels.StagingItem.Similarity.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Source.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Source.set -> void
LM.App.Wpf.ViewModels.StagingItem.StagingItem() -> void
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.get -> string!
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.set -> void
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.Title.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Title.set -> void
LM.App.Wpf.ViewModels.StagingItem.Type.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingItem.Type.set -> void
LM.App.Wpf.ViewModels.StagingItem.Year.get -> int?
LM.App.Wpf.ViewModels.StagingItem.Year.set -> void
LM.App.Wpf.Views.AddView
LM.App.Wpf.Views.Behaviors.FileDropRequest
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.get -> System.Windows.DragEventArgs!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.get -> object?
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.FileDropRequest(System.Collections.Generic.IReadOnlyList<string!>! Paths, object? DropTarget, System.Windows.DragEventArgs! Args) -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.init -> void
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior.SavedSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.AddView.AddView() -> void
LM.App.Wpf.Views.AddView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog
LM.App.Wpf.Views.LibraryPresetPickerDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.LibraryPresetPickerDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel!
LM.App.Wpf.Views.LibraryPresetPrompt.LibraryPresetPrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.InitializeComponent() -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.AttachmentMetadataDialog(LM.App.Wpf.ViewModels.Library.AttachmentMetadataDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog
LM.App.Wpf.Views.LibraryPresetSaveDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.LibraryPresetSaveDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel!
LM.App.Wpf.Views.LibraryView
LM.App.Wpf.Views.LibraryView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryView.LibraryView() -> void
LM.App.Wpf.Views.PdfViewer
LM.App.Wpf.Views.PdfViewer.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewer.PdfViewer() -> void
LM.App.Wpf.Views.Library.TagTokenSelector
LM.App.Wpf.Views.Library.TagTokenSelector.InitializeComponent() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.FilteredSuggestions.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>?
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.set -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagTokenSelector() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.get -> System.Collections.Generic.IEnumerable<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.set -> void
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTagsProperty
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabularyProperty
LM.App.Wpf.Views.LibraryPresetPrompt
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Views.Review.Controls.DecisionBadge
LM.App.Wpf.Views.Review.Controls.DecisionBadge.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.DecisionBadge() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.get -> LM.Review.Core.Models.ScreeningStatus
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.set -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.ExtractionFieldEditor() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.ScreeningQueueControl() -> void
LM.App.Wpf.Views.Review.ReviewView
LM.App.Wpf.Views.Review.ReviewView.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ReviewView.ReviewView() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.LitSearchRunPickerWindow(LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel!
LM.App.Wpf.Views.Review.ProjectEditorWindow
LM.App.Wpf.Views.Review.ProjectEditorWindow.Attach(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.ProjectEditorWindow() -> void
LM.App.Wpf.Views.SearchSavePrompt
LM.App.Wpf.Views.SearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Views.SearchSavePrompt.SearchSavePrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.DataGridColumnVisibilityBehavior() -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.set -> void
LM.App.Wpf.Views.SearchView
LM.App.Wpf.Views.SearchView.InitializeComponent() -> void
LM.App.Wpf.Views.SearchView.SearchView() -> void
LM.App.Wpf.Views.ShellWindow
LM.App.Wpf.Views.ShellWindow.InitializeComponent() -> void
LM.App.Wpf.Views.ShellWindow.LoadWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.NewWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.ShellWindow() -> void
LM.App.Wpf.Views.StagingEditorWindow
LM.App.Wpf.Views.StagingEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.StagingEditorWindow.StagingEditorWindow(LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel! viewModel) -> void
override LM.App.Wpf.ViewModels.Library.LibrarySortOption.ToString() -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Name.get -> string!
override LM.App.Wpf.Views.Library.AttachmentMetadataDialog.OnClosed(System.EventArgs! e) -> void
LM.App.Wpf.Views.WorkspaceChooser
LM.App.Wpf.Views.WorkspaceChooser.InitializeComponent() -> void
LM.App.Wpf.Views.WorkspaceChooser.SelectedWorkspacePath.get -> string?
LM.App.Wpf.Views.WorkspaceChooser.WorkspaceChooser(LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel! viewModel) -> void
LM.App.Wpf.Views.WorkspaceChooser.Configure(System.Action<LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel!>! configure) -> void
override LM.App.Wpf.App.OnExit(System.Windows.ExitEventArgs! e) -> void
override LM.App.Wpf.App.OnStartup(System.Windows.StartupEventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetPickerDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetSaveDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.StagingEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.WorkspaceChooser.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.ProjectEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.OnClosed(System.EventArgs! e) -> void
static LM.App.Wpf.App.Main() -> void
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.All.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.NewestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.OldestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleAscending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleDescending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Clone() -> LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.LitSearchOrganizerStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveEntryAsync(string! entryId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.SyncEntriesAsync(System.Collections.Generic.IEnumerable<string!>! entryIds, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema.CurrentVersion -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.LitSearchEntryViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! title, string? query) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Query.get -> string?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.CanDelete.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsRoot.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.LitSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! name, bool isRoot) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.LitSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.LitSearchRunViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! runId, string! label, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel! parent) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.LitSearchTreeViewModel(LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt, LM.Core.Abstractions.IEntryStore! entryStore, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
---------- LM.Core ----------
#nullable enable
#nullable enable
IPublicationLookup
IPublicationLookup.TryGetByDoiAsync(string! doi, bool includeCitedBy, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<LM.Core.Models.PublicationRecord?>!
LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore
LM.Core.Abstractions.IContentExtractor
LM.Core.Abstractions.IContentExtractor.ExtractTextAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Core.Abstractions.IEntryStore
LM.Core.Abstractions.IEntryStore.EnumerateAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<LM.Core.Models.Entry!>!
LM.Core.Abstractions.IEntryStore.FindByHashAsync(string! sha256, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Core.Abstractions.IEntryStore.FindByIdsAsync(string? doi, string? pmid, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Core.Abstractions.IEntryStore.FindSimilarByNameYearAsync(string! title, int? year, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.Core.Abstractions.IEntryStore.GetByIdAsync(string! id, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Core.Abstractions.IEntryStore.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.IEntryStore.SaveAsync(LM.Core.Models.Entry! entry, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.IEntryStore.SearchAsync(LM.Core.Models.Filters.EntryFilter! filter, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.Core.Abstractions.IFullTextSearchService
LM.Core.Abstractions.IFullTextSearchService.SearchAsync(LM.Core.Models.Search.FullTextSearchQuery! query, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.FullTextSearchHit!>!>!
LM.Core.Abstractions.Search.ISearchExecutionService
LM.Core.Abstractions.Search.ISearchExecutionService.ExecuteAsync(LM.Core.Models.Search.SearchExecutionRequest! request, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Search.SearchExecutionResult!>!
LM.Core.Abstractions.Search.ISearchProvider
LM.Core.Abstractions.Search.ISearchProvider.Database.get -> LM.Core.Models.SearchDatabase
LM.Core.Abstractions.Search.ISearchProvider.SearchAsync(string! query, System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.SearchHit!>!>!
LM.Core.Abstractions.IFileStorageRepository
LM.Core.Abstractions.IFileStorageRepository.SaveNewAsync(string! sourcePath, string! relativeTargetDir, string? preferredFileName = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Core.Abstractions.IHasher
LM.Core.Abstractions.IHasher.ComputeSha256Async(string! filePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Core.Abstractions.IPdfAnnotationPersistenceService
LM.Core.Abstractions.IPdfAnnotationPersistenceService.PersistAsync(string! entryId, string! pdfHash, string! overlayJson, System.Collections.Generic.IReadOnlyDictionary<string!, byte[]!>! previewImages, string? overlaySidecarRelativePath, string? pdfRelativePath, System.Collections.Generic.IReadOnlyList<LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata!>! annotations, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata.AnnotationId.get -> string!
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata.Note.get -> string?
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata.ColorHex.get -> string?
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata.PdfAnnotationBridgeMetadata(string! annotationId, string? text, string? note, string? colorHex = null) -> void
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata.Text.get -> string?
LM.Core.Abstractions.IPdfAnnotationPreviewStorage
LM.Core.Abstractions.IPdfAnnotationPreviewStorage.SaveAsync(string! pdfHash, string! annotationId, byte[]! pngBytes, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<string!>!
LM.Core.Abstractions.IPdfAnnotationOverlayReader
LM.Core.Abstractions.IPdfAnnotationOverlayReader.GetOverlayJsonAsync(string! entryId, string! pdfHash, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string?>!
LM.Core.Abstractions.IMetadataDebugSlideExporter
LM.Core.Abstractions.IMetadataDebugSlideExporter.ExportAsync(System.Collections.Generic.IEnumerable<LM.Core.Models.FileMetadata!>! items, string! outputPath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Core.Abstractions.IMetadataExtractor
LM.Core.Abstractions.IMetadataExtractor.ExtractAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.FileMetadata!>!
LM.Core.Abstractions.IPmidNormalizer
LM.Core.Abstractions.IPmidNormalizer.Normalize(string? raw) -> string?
LM.Core.Abstractions.ISimilarityService
LM.Core.Abstractions.ISimilarityService.ComputeFileSimilarityAsync(string! filePathA, string! filePathB, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
LM.Core.Abstractions.ITagVocabularyProvider
LM.Core.Abstractions.ITagVocabularyProvider.GetAllTagsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>!>!
LM.Core.Abstractions.IWorkSpaceService
LM.Core.Abstractions.IWorkSpaceService.EnsureWorkspaceAsync(string! absoluteWorkspacePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.IWorkSpaceService.GetAbsolutePath(string! relativePath) -> string!
LM.Core.Abstractions.IWorkSpaceService.GetLocalDbPath() -> string!
LM.Core.Abstractions.IWorkSpaceService.GetWorkspaceRoot() -> string!
LM.Core.Abstractions.IWorkSpaceService.WorkspacePath.get -> string?
LM.Core.Abstractions.IDoiNormalizer
LM.Core.Abstractions.IDoiNormalizer.Normalize(string? raw) -> string?
LM.Core.Models.AbstractSection
LM.Core.Models.AbstractSection.Label.get -> string?
LM.Core.Models.AbstractSection.Label.init -> void
LM.Core.Models.AbstractSection.Text.get -> string?
LM.Core.Models.AbstractSection.Text.init -> void
LM.Core.Models.Attachment
LM.Core.Models.Attachment.Attachment() -> void
LM.Core.Models.Attachment.Id.get -> string!
LM.Core.Models.Attachment.Id.set -> void
LM.Core.Models.Attachment.Notes.get -> string?
LM.Core.Models.Attachment.Notes.set -> void
LM.Core.Models.Attachment.RelativePath.get -> string!
LM.Core.Models.Attachment.RelativePath.set -> void
LM.Core.Models.Attachment.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Attachment.Tags.set -> void
LM.Core.Models.Attachment.Title.get -> string!
LM.Core.Models.Attachment.Title.set -> void
LM.Core.Models.Attachment.Kind.get -> LM.Core.Models.AttachmentKind
LM.Core.Models.Attachment.Kind.set -> void
LM.Core.Models.Attachment.AddedBy.get -> string!
LM.Core.Models.Attachment.AddedBy.set -> void
LM.Core.Models.Attachment.AddedUtc.get -> System.DateTime
LM.Core.Models.Attachment.AddedUtc.set -> void
LM.Core.Models.AttachmentKind
LM.Core.Models.AttachmentKind.Supplement = 0 -> LM.Core.Models.AttachmentKind
LM.Core.Models.AttachmentKind.Version = 1 -> LM.Core.Models.AttachmentKind
LM.Core.Models.AttachmentKind.Presentation = 2 -> LM.Core.Models.AttachmentKind
LM.Core.Models.AttachmentKind.ExternalNotes = 3 -> LM.Core.Models.AttachmentKind
LM.Core.Models.AttachmentKind.Metadata = 4 -> LM.Core.Models.AttachmentKind
LM.Core.Models.AuthorName
LM.Core.Models.AuthorName.Affiliations.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.AuthorName.Affiliations.init -> void
LM.Core.Models.AuthorName.CollectiveName.get -> string?
LM.Core.Models.AuthorName.CollectiveName.init -> void
LM.Core.Models.AuthorName.Family.get -> string?
LM.Core.Models.AuthorName.Family.init -> void
LM.Core.Models.AuthorName.Given.get -> string?
LM.Core.Models.AuthorName.Given.init -> void
LM.Core.Models.AuthorName.LastFromLiteral() -> string?
LM.Core.Models.AuthorName.Literal.get -> string?
LM.Core.Models.AuthorName.Literal.init -> void
LM.Core.Models.AuthorName.Orcid.get -> string?
LM.Core.Models.AuthorName.Orcid.init -> void
LM.Core.Models.AuthorName.ToCsvPart() -> string!
LM.Core.Models.Entry
LM.Core.Models.Entry.AddedBy.get -> string?
LM.Core.Models.Entry.AddedBy.set -> void
LM.Core.Models.Entry.AddedOnUtc.get -> System.DateTime
LM.Core.Models.Entry.AddedOnUtc.set -> void
LM.Core.Models.Entry.Attachments.get -> System.Collections.Generic.List<LM.Core.Models.Attachment!>!
LM.Core.Models.Entry.Attachments.set -> void
LM.Core.Models.Entry.Authors.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Entry.Authors.set -> void
LM.Core.Models.Entry.DisplayName.get -> string?
LM.Core.Models.Entry.DisplayName.set -> void
LM.Core.Models.Entry.Doi.get -> string?
LM.Core.Models.Entry.Doi.set -> void
LM.Core.Models.Entry.Entry() -> void
LM.Core.Models.Entry.Id.get -> string!
LM.Core.Models.Entry.Id.set -> void
LM.Core.Models.Entry.InternalId.get -> string?
LM.Core.Models.Entry.InternalId.set -> void
LM.Core.Models.Entry.IsInternal.get -> bool
LM.Core.Models.Entry.IsInternal.set -> void
LM.Core.Models.Entry.IsBlacklisted.get -> bool
LM.Core.Models.Entry.IsBlacklisted.set -> void
LM.Core.Models.Entry.Links.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Entry.Links.set -> void
LM.Core.Models.Entry.MainFileHashSha256.get -> string?
LM.Core.Models.Entry.MainFileHashSha256.set -> void
LM.Core.Models.Entry.MainFilePath.get -> string!
LM.Core.Models.Entry.MainFilePath.set -> void
LM.Core.Models.Entry.Nct.get -> string?
LM.Core.Models.Entry.Nct.set -> void
LM.Core.Models.Entry.Notes.get -> string?
LM.Core.Models.Entry.Notes.set -> void
LM.Core.Models.Entry.UserNotes.get -> string?
LM.Core.Models.Entry.UserNotes.set -> void
LM.Core.Models.Entry.OriginalFileName.get -> string?
LM.Core.Models.Entry.OriginalFileName.set -> void
LM.Core.Models.Entry.Pmid.get -> string?
LM.Core.Models.Entry.Pmid.set -> void
LM.Core.Models.Entry.Relations.get -> System.Collections.Generic.List<LM.Core.Models.Relation!>!
LM.Core.Models.Entry.Relations.set -> void
LM.Core.Models.Entry.ShortTitle.get -> string?
LM.Core.Models.Entry.ShortTitle.set -> void
LM.Core.Models.Entry.Source.get -> string?
LM.Core.Models.Entry.Source.set -> void
LM.Core.Models.Entry.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Entry.Tags.set -> void
LM.Core.Models.Entry.Title.get -> string!
LM.Core.Models.Entry.Title.set -> void
LM.Core.Models.Entry.Type.get -> LM.Core.Models.EntryType
LM.Core.Models.Entry.Type.set -> void
LM.Core.Models.Entry.Version.get -> int
LM.Core.Models.Entry.Version.set -> void
LM.Core.Models.Entry.Year.get -> int?
LM.Core.Models.Entry.Year.set -> void
LM.Core.Models.EntryDocument
LM.Core.Models.EntryDocument.Authors.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.EntryDocument.Authors.set -> void
LM.Core.Models.EntryDocument.CreatedUtc.get -> System.DateTimeOffset
LM.Core.Models.EntryDocument.CreatedUtc.set -> void
LM.Core.Models.EntryDocument.Doi.get -> string?
LM.Core.Models.EntryDocument.Doi.set -> void
LM.Core.Models.EntryDocument.EntryDocument() -> void
LM.Core.Models.EntryDocument.Files.get -> System.Collections.Generic.List<LM.Core.Models.EntryFile!>!
LM.Core.Models.EntryDocument.Files.set -> void
LM.Core.Models.EntryDocument.Id.get -> string!
LM.Core.Models.EntryDocument.Id.set -> void
LM.Core.Models.EntryDocument.Internal.get -> bool
LM.Core.Models.EntryDocument.Internal.set -> void
LM.Core.Models.EntryDocument.Pmid.get -> string?
LM.Core.Models.EntryDocument.Pmid.set -> void
LM.Core.Models.EntryDocument.Source.get -> string?
LM.Core.Models.EntryDocument.Source.set -> void
LM.Core.Models.EntryDocument.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.EntryDocument.Tags.set -> void
LM.Core.Models.EntryDocument.Title.get -> string?
LM.Core.Models.EntryDocument.Title.set -> void
LM.Core.Models.EntryDocument.UpdatedUtc.get -> System.DateTimeOffset
LM.Core.Models.EntryDocument.UpdatedUtc.set -> void
LM.Core.Models.EntryDocument.Year.get -> int?
LM.Core.Models.EntryDocument.Year.set -> void
LM.Core.Models.EntryFile
LM.Core.Models.EntryFile.EntryFile() -> void
LM.Core.Models.EntryFile.Hash.get -> string!
LM.Core.Models.EntryFile.Hash.set -> void
LM.Core.Models.EntryFile.MimeType.get -> string!
LM.Core.Models.EntryFile.MimeType.set -> void
LM.Core.Models.EntryFile.OriginalFileName.get -> string!
LM.Core.Models.EntryFile.OriginalFileName.set -> void
LM.Core.Models.EntryFile.RelativePath.get -> string!
LM.Core.Models.EntryFile.RelativePath.set -> void
LM.Core.Models.EntryFile.SizeBytes.get -> long
LM.Core.Models.EntryFile.SizeBytes.set -> void
LM.Core.Models.EntryFile.StoredFileName.get -> string!
LM.Core.Models.EntryFile.StoredFileName.set -> void
LM.Core.Models.EntryType
LM.Core.Models.EntryType.LitSearch = 6 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.Other = 5 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.Presentation = 1 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.Publication = 0 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.Report = 4 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.SlideDeck = 3 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.WhitePaper = 2 -> LM.Core.Models.EntryType
LM.Core.Models.FileMetadata
LM.Core.Models.FileMetadata.Authors.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.FileMetadata.Authors.set -> void
LM.Core.Models.FileMetadata.Doi.get -> string?
LM.Core.Models.FileMetadata.Doi.set -> void
LM.Core.Models.FileMetadata.FileMetadata() -> void
LM.Core.Models.FileMetadata.Pmid.get -> string?
LM.Core.Models.FileMetadata.Pmid.set -> void
LM.Core.Models.FileMetadata.Source.get -> string?
LM.Core.Models.FileMetadata.Source.set -> void
LM.Core.Models.FileMetadata.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.FileMetadata.Tags.set -> void
LM.Core.Models.FileMetadata.Title.get -> string?
LM.Core.Models.FileMetadata.Title.set -> void
LM.Core.Models.FileMetadata.Year.get -> int?
LM.Core.Models.FileMetadata.Year.set -> void
LM.Core.Models.Filters.EntryFilter
LM.Core.Models.Filters.EntryFilter.AuthorContains.get -> string?
LM.Core.Models.Filters.EntryFilter.AuthorContains.set -> void
LM.Core.Models.Filters.EntryFilter.EntryFilter() -> void
LM.Core.Models.Filters.EntryFilter.IsInternal.get -> bool?
LM.Core.Models.Filters.EntryFilter.IsInternal.set -> void
LM.Core.Models.Filters.EntryFilter.TagMatchMode.get -> LM.Core.Models.Filters.TagMatchMode
LM.Core.Models.Filters.EntryFilter.TagMatchMode.set -> void
LM.Core.Models.Filters.EntryFilter.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Filters.EntryFilter.Tags.set -> void
LM.Core.Models.Filters.TagMatchMode
LM.Core.Models.Filters.TagMatchMode.Any = 0 -> LM.Core.Models.Filters.TagMatchMode
LM.Core.Models.Filters.TagMatchMode.All = 1 -> LM.Core.Models.Filters.TagMatchMode
LM.Core.Models.Filters.TagMatchMode.Not = 2 -> LM.Core.Models.Filters.TagMatchMode
LM.Core.Models.Filters.EntryFilter.TitleContains.get -> string?
LM.Core.Models.Filters.EntryFilter.TitleContains.set -> void
LM.Core.Models.Filters.EntryFilter.TypesAny.get -> LM.Core.Models.EntryType[]?
LM.Core.Models.Filters.EntryFilter.TypesAny.set -> void
LM.Core.Models.Filters.EntryFilter.YearFrom.get -> int?
LM.Core.Models.Filters.EntryFilter.YearFrom.set -> void
LM.Core.Models.Filters.EntryFilter.YearTo.get -> int?
LM.Core.Models.Filters.EntryFilter.YearTo.set -> void
LM.Core.Models.Filters.EntryFilter.SourceContains.get -> string?
LM.Core.Models.Filters.EntryFilter.SourceContains.set -> void
LM.Core.Models.Filters.EntryFilter.InternalIdContains.get -> string?
LM.Core.Models.Filters.EntryFilter.InternalIdContains.set -> void
LM.Core.Models.Filters.EntryFilter.DoiContains.get -> string?
LM.Core.Models.Filters.EntryFilter.DoiContains.set -> void
LM.Core.Models.Filters.EntryFilter.PmidContains.get -> string?
LM.Core.Models.Filters.EntryFilter.PmidContains.set -> void
LM.Core.Models.Filters.EntryFilter.NctContains.get -> string?
LM.Core.Models.Filters.EntryFilter.NctContains.set -> void
LM.Core.Models.Filters.EntryFilter.AddedByContains.get -> string?
LM.Core.Models.Filters.EntryFilter.AddedByContains.set -> void
LM.Core.Models.Filters.EntryFilter.AddedOnFromUtc.get -> System.DateTime?
LM.Core.Models.Filters.EntryFilter.AddedOnFromUtc.set -> void
LM.Core.Models.Filters.EntryFilter.AddedOnToUtc.get -> System.DateTime?
LM.Core.Models.Filters.EntryFilter.AddedOnToUtc.set -> void
LM.Core.Models.GrantInfo
LM.Core.Models.GrantInfo.Agency.get -> string?
LM.Core.Models.GrantInfo.Agency.init -> void
LM.Core.Models.GrantInfo.Country.get -> string?
LM.Core.Models.GrantInfo.Country.init -> void
LM.Core.Models.GrantInfo.GrantId.get -> string?
LM.Core.Models.GrantInfo.GrantId.init -> void
LM.Core.Models.PublicationRecord
LM.Core.Models.PublicationRecord.AbstractPlain.get -> string?
LM.Core.Models.PublicationRecord.AbstractPlain.init -> void
LM.Core.Models.PublicationRecord.AbstractSections.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.AbstractSection!>!
LM.Core.Models.PublicationRecord.AbstractSections.init -> void
LM.Core.Models.PublicationRecord.Affiliations.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.Affiliations.init -> void
LM.Core.Models.PublicationRecord.Authors.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.AuthorName!>!
LM.Core.Models.PublicationRecord.Authors.init -> void
LM.Core.Models.PublicationRecord.AuthorsCsv.get -> string!
LM.Core.Models.PublicationRecord.CitedByCount.get -> int?
LM.Core.Models.PublicationRecord.CitedByCount.init -> void
LM.Core.Models.PublicationRecord.CitedByPmids.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.CitedByPmids.init -> void
LM.Core.Models.PublicationRecord.CommentsCorrections.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.CommentsCorrections.init -> void
LM.Core.Models.PublicationRecord.Country.get -> string?
LM.Core.Models.PublicationRecord.Country.init -> void
LM.Core.Models.PublicationRecord.Doi.get -> string?
LM.Core.Models.PublicationRecord.Doi.init -> void
LM.Core.Models.PublicationRecord.FirstAuthorLast.get -> string!
LM.Core.Models.PublicationRecord.Grants.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.GrantInfo!>!
LM.Core.Models.PublicationRecord.Grants.init -> void
LM.Core.Models.PublicationRecord.Issue.get -> string?
LM.Core.Models.PublicationRecord.Issue.init -> void
LM.Core.Models.PublicationRecord.JournalIsoAbbrev.get -> string?
LM.Core.Models.PublicationRecord.JournalIsoAbbrev.init -> void
LM.Core.Models.PublicationRecord.JournalTitle.get -> string?
LM.Core.Models.PublicationRecord.JournalTitle.init -> void
LM.Core.Models.PublicationRecord.Keywords.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.Keywords.init -> void
LM.Core.Models.PublicationRecord.Language.get -> string?
LM.Core.Models.PublicationRecord.Language.init -> void
LM.Core.Models.PublicationRecord.MeshHeadings.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.MeshHeadings.init -> void
LM.Core.Models.PublicationRecord.Pages.get -> string?
LM.Core.Models.PublicationRecord.Pages.init -> void
LM.Core.Models.PublicationRecord.Pmcid.get -> string?
LM.Core.Models.PublicationRecord.Pmcid.init -> void
LM.Core.Models.PublicationRecord.Pmid.get -> string?
LM.Core.Models.PublicationRecord.Pmid.init -> void
LM.Core.Models.PublicationRecord.PublicationTypes.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.PublicationTypes.init -> void
LM.Core.Models.PublicationRecord.PublishedEpub.get -> System.DateOnly?
LM.Core.Models.PublicationRecord.PublishedEpub.init -> void
LM.Core.Models.PublicationRecord.PublishedPrint.get -> System.DateOnly?
LM.Core.Models.PublicationRecord.PublishedPrint.init -> void
LM.Core.Models.PublicationRecord.ReferencedPmids.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.ReferencedPmids.init -> void
LM.Core.Models.PublicationRecord.Title.get -> string?
LM.Core.Models.PublicationRecord.Title.init -> void
LM.Core.Models.PublicationRecord.UrlPubMed.get -> string?
LM.Core.Models.PublicationRecord.UrlPubMed.init -> void
LM.Core.Models.PublicationRecord.Volume.get -> string?
LM.Core.Models.PublicationRecord.Volume.init -> void
LM.Core.Models.PublicationRecord.Year.get -> int?
LM.Core.Models.PublicationRecord.Year.init -> void
LM.Core.Models.Relation
LM.Core.Models.Relation.Relation() -> void
LM.Core.Models.Relation.TargetEntryId.get -> string!
LM.Core.Models.Relation.TargetEntryId.set -> void
LM.Core.Models.Relation.Type.get -> string!
LM.Core.Models.Relation.Type.set -> void
LM.Core.Models.Search.FullTextSearchHit.EntryId.init -> void
LM.Core.Models.Search.FullTextSearchHit.Highlight.init -> void
LM.Core.Models.Search.FullTextSearchHit.Score.init -> void
LM.Core.Models.Search.FullTextSearchQuery.TypesAny.get -> LM.Core.Models.EntryType[]?
LM.Core.Models.SearchDatabase
LM.Core.Models.SearchDatabase.ClinicalTrialsGov = 1 -> LM.Core.Models.SearchDatabase
LM.Core.Models.SearchDatabase.PubMed = 0 -> LM.Core.Models.SearchDatabase
LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchField.Abstract = 2 -> LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchField.Content = 4 -> LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchField.None = 0 -> LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchField.Title = 1 -> LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchHit
LM.Core.Models.Search.FullTextSearchHit.EntryId.get -> string!
LM.Core.Models.Search.FullTextSearchHit.FullTextSearchHit(string! EntryId, double Score, string? Highlight) -> void
LM.Core.Models.Search.FullTextSearchHit.Highlight.get -> string?
LM.Core.Models.Search.FullTextSearchHit.Score.get -> double
LM.Core.Models.Search.FullTextSearchQuery
LM.Core.Models.Search.FullTextSearchQuery.Fields.get -> LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchQuery.Fields.set -> void
LM.Core.Models.Search.FullTextSearchQuery.FullTextSearchQuery() -> void
LM.Core.Models.Search.FullTextSearchQuery.IsInternal.get -> bool?
LM.Core.Models.Search.FullTextSearchQuery.IsInternal.set -> void
LM.Core.Models.Search.FullTextSearchQuery.Limit.get -> int
LM.Core.Models.Search.FullTextSearchQuery.Limit.set -> void
LM.Core.Models.Search.FullTextSearchQuery.Text.get -> string?
LM.Core.Models.Search.FullTextSearchQuery.Text.set -> void
LM.Core.Models.Search.FullTextSearchQuery.TypesAny.set -> void
LM.Core.Models.Search.FullTextSearchQuery.YearFrom.get -> int?
LM.Core.Models.Search.FullTextSearchQuery.YearFrom.set -> void
LM.Core.Models.Search.FullTextSearchQuery.YearTo.get -> int?
LM.Core.Models.Search.FullTextSearchQuery.YearTo.set -> void
LM.Core.Models.SearchHit
LM.Core.Models.SearchHit.AlreadyInDb.get -> bool
LM.Core.Models.SearchHit.AlreadyInDb.set -> void
LM.Core.Models.SearchHit.Authors.get -> string!
LM.Core.Models.SearchHit.Authors.init -> void
LM.Core.Models.SearchHit.Doi.get -> string?
LM.Core.Models.SearchHit.Doi.init -> void
LM.Core.Models.SearchHit.ExternalId.get -> string!
LM.Core.Models.SearchHit.ExternalId.init -> void
LM.Core.Models.SearchHit.ExistingEntryId.get -> string?
LM.Core.Models.SearchHit.ExistingEntryId.set -> void
LM.Core.Models.SearchHit.JournalOrSource.get -> string?
LM.Core.Models.SearchHit.JournalOrSource.init -> void
LM.Core.Models.SearchHit.SearchHit() -> void
LM.Core.Models.SearchHit.Selected.get -> bool
LM.Core.Models.SearchHit.Selected.set -> void
LM.Core.Models.SearchHit.Source.get -> LM.Core.Models.SearchDatabase
LM.Core.Models.SearchHit.Source.init -> void
LM.Core.Models.SearchHit.Title.get -> string!
LM.Core.Models.SearchHit.Title.init -> void
LM.Core.Models.SearchHit.Url.get -> string?
LM.Core.Models.SearchHit.Url.init -> void
LM.Core.Models.SearchHit.Year.get -> int?
LM.Core.Models.SearchHit.Year.init -> void
LM.Core.Models.SearchHit.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.Core.Models.WatchedFolderState.WatchedFolderState(string! Path, System.DateTimeOffset? LastScanUtc, string? AggregatedHash, bool LastScanWasUnchanged) -> void
LM.Core.Utils.Hashes
LM.Core.Utils.IdGen
LM.Core.Utils.JsonEx
static LM.Core.Utils.Hashes.Sha1(string! input) -> string!
static LM.Core.Utils.Hashes.Sha256File(string! path) -> string!
static LM.Core.Utils.IdGen.NewId() -> string!
static LM.Core.Utils.JsonEx.Deserialize<T>(string! s) -> T?
static LM.Core.Utils.JsonEx.Serialize<T>(T v) -> string!
LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.WatchedFolderSettings!>!
LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore.SaveAsync(LM.Core.Models.WatchedFolderSettings! settings, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.Configuration.ISearchHistoryStore
LM.Core.Abstractions.Configuration.ISearchHistoryStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Search.SearchHistoryDocument!>!
LM.Core.Abstractions.Configuration.ISearchHistoryStore.SaveAsync(LM.Core.Models.Search.SearchHistoryDocument! document, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.Configuration.IUserPreferencesStore
LM.Core.Abstractions.Configuration.IUserPreferencesStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.UserPreferences!>!
LM.Core.Abstractions.Configuration.IUserPreferencesStore.SaveAsync(LM.Core.Models.UserPreferences! preferences, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Models.Search.SearchHistoryDocument
LM.Core.Models.Search.SearchHistoryDocument.Entries.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.Core.Models.Search.SearchHistoryDocument.Entries.init -> void
LM.Core.Models.Search.SearchHistoryEntry
LM.Core.Models.Search.SearchHistoryEntry.Database.get -> LM.Core.Models.SearchDatabase
LM.Core.Models.Search.SearchHistoryEntry.Database.init -> void
LM.Core.Models.Search.SearchHistoryEntry.ExecutedUtc.get -> System.DateTimeOffset
LM.Core.Models.Search.SearchHistoryEntry.ExecutedUtc.init -> void
LM.Core.Models.Search.SearchHistoryEntry.From.get -> System.DateTime?
LM.Core.Models.Search.SearchHistoryEntry.From.init -> void
LM.Core.Models.Search.SearchHistoryEntry.Query.get -> string!
LM.Core.Models.Search.SearchHistoryEntry.Query.init -> void
LM.Core.Models.Search.SearchHistoryEntry.To.get -> System.DateTime?
LM.Core.Models.Search.SearchHistoryEntry.To.init -> void
LM.Core.Models.Search.SearchExecutionRequest
LM.Core.Models.Search.SearchExecutionRequest.Database.get -> LM.Core.Models.SearchDatabase
LM.Core.Models.Search.SearchExecutionRequest.Database.init -> void
LM.Core.Models.Search.SearchExecutionRequest.From.get -> System.DateTime?
LM.Core.Models.Search.SearchExecutionRequest.From.init -> void
LM.Core.Models.Search.SearchExecutionRequest.Query.get -> string!
LM.Core.Models.Search.SearchExecutionRequest.Query.init -> void
LM.Core.Models.Search.SearchExecutionRequest.To.get -> System.DateTime?
LM.Core.Models.Search.SearchExecutionRequest.To.init -> void
LM.Core.Models.Search.SearchExecutionResult
LM.Core.Models.Search.SearchExecutionResult.ExecutedUtc.get -> System.DateTimeOffset
LM.Core.Models.Search.SearchExecutionResult.ExecutedUtc.init -> void
LM.Core.Models.Search.SearchExecutionResult.Hits.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.SearchHit!>!
LM.Core.Models.Search.SearchExecutionResult.Hits.init -> void
LM.Core.Models.Search.SearchExecutionResult.Request.get -> LM.Core.Models.Search.SearchExecutionRequest!
LM.Core.Models.Search.SearchExecutionResult.Request.init -> void
LM.Core.Models.UserPreferences
LM.Core.Models.UserPreferences.Search.get -> LM.Core.Models.SearchPreferences!
LM.Core.Models.UserPreferences.Search.init -> void
LM.Core.Models.UserPreferences.Library.get -> LM.Core.Models.LibraryPreferences!
LM.Core.Models.UserPreferences.Library.init -> void
LM.Core.Models.SearchPreferences
LM.Core.Models.SearchPreferences.LastSelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.Core.Models.SearchPreferences.LastSelectedDatabase.init -> void
LM.Core.Models.SearchPreferences.LastUpdatedUtc.get -> System.DateTimeOffset
LM.Core.Models.SearchPreferences.LastUpdatedUtc.init -> void
LM.Core.Models.LibraryPreferences
LM.Core.Models.LibraryPreferences.VisibleColumns.get -> string![]!
LM.Core.Models.LibraryPreferences.VisibleColumns.init -> void
LM.Core.Models.LibraryPreferences.LastUpdatedUtc.get -> System.DateTimeOffset
LM.Core.Models.LibraryPreferences.LastUpdatedUtc.init -> void
LM.Core.Models.WatchedFolderSettings
LM.Core.Models.WatchedFolderSettings.Folders.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.WatchedFolderSettingsFolder!>!
LM.Core.Models.WatchedFolderSettings.Folders.init -> void
LM.Core.Models.WatchedFolderSettings.States.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.WatchedFolderState!>!
LM.Core.Models.WatchedFolderSettings.States.init -> void
LM.Core.Models.WatchedFolderSettingsFolder
LM.Core.Models.WatchedFolderSettingsFolder.IsEnabled.get -> bool
LM.Core.Models.WatchedFolderSettingsFolder.IsEnabled.init -> void
LM.Core.Models.WatchedFolderSettingsFolder.Path.get -> string!
LM.Core.Models.WatchedFolderSettingsFolder.Path.init -> void
LM.Core.Models.WatchedFolderState
LM.Core.Models.WatchedFolderState.AggregatedHash.get -> string?
LM.Core.Models.WatchedFolderState.AggregatedHash.init -> void
LM.Core.Models.WatchedFolderState.LastScanUtc.get -> System.DateTimeOffset?
LM.Core.Models.WatchedFolderState.LastScanUtc.init -> void
LM.Core.Models.WatchedFolderState.LastScanWasUnchanged.get -> bool
LM.Core.Models.WatchedFolderState.LastScanWasUnchanged.init -> void
LM.Core.Models.WatchedFolderState.Path.get -> string!
LM.Core.Models.WatchedFolderState.Path.init -> void
static readonly LM.Core.Utils.JsonEx.Options -> System.Text.Json.JsonSerializerOptions!
---------- LM.HubSpoke ----------
#nullable enable
#nullable enable
LM.HubSpoke.Abstractions.CasResult
LM.HubSpoke.Abstractions.CasResult.Bytes.get -> long
LM.HubSpoke.Abstractions.CasResult.Bytes.init -> void
LM.HubSpoke.Abstractions.CasResult.CasResult() -> void
LM.HubSpoke.Abstractions.CasResult.CasResult(string? RelPath, string? Sha, long Bytes, string? Mime, string? Original) -> void
LM.HubSpoke.Abstractions.CasResult.Mime.get -> string?
LM.HubSpoke.Abstractions.CasResult.Mime.init -> void
LM.HubSpoke.Abstractions.CasResult.Original.get -> string?
LM.HubSpoke.Abstractions.CasResult.Original.init -> void
LM.HubSpoke.Abstractions.CasResult.RelPath.get -> string?
LM.HubSpoke.Abstractions.CasResult.RelPath.init -> void
LM.HubSpoke.Abstractions.CasResult.Sha.get -> string?
LM.HubSpoke.Abstractions.CasResult.Sha.init -> void
LM.HubSpoke.Abstractions.ISimilarityLog
LM.HubSpoke.Abstractions.ISimilarityLog.LogAsync(string! sessionId, string! stagedPath, string! candidateEntryId, double score, string! method, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Abstractions.ISimilarityLog.NewSessionId() -> string!
LM.HubSpoke.Abstractions.ISpokeHandler
LM.HubSpoke.Abstractions.ISpokeHandler.BuildHookAsync(LM.Core.Models.Entry! entry, LM.HubSpoke.Abstractions.CasResult primary, System.Collections.Generic.IEnumerable<string!>! attachmentRelPaths, System.Func<string!, System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.HubSpoke.Abstractions.CasResult>!>! moveToCas, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Abstractions.ISpokeHandler.BuildIndex(LM.HubSpoke.Models.EntryHub! hub, object? hook, string? extractedFullText) -> LM.HubSpoke.Abstractions.SpokeIndexContribution
LM.HubSpoke.Abstractions.ISpokeHandler.Handles.get -> LM.Core.Models.EntryType
LM.HubSpoke.Abstractions.ISpokeHandler.HookPath.get -> string!
LM.HubSpoke.Abstractions.ISpokeHandler.LoadHookAsync(LM.Core.Abstractions.IWorkSpaceService! ws, string! entryId, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Abstractions.ISpokeHandler.MapToEntry(LM.HubSpoke.Models.EntryHub! hub, object? hook) -> LM.Core.Models.Entry!
LM.HubSpoke.Abstractions.SpokeIndexContribution
LM.HubSpoke.Abstractions.SpokeIndexContribution.Abstract.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Abstract.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.AssetHashes.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Abstractions.SpokeIndexContribution.AssetHashes.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Authors.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Abstractions.SpokeIndexContribution.Authors.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Doi.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Doi.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.FullText.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.FullText.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Journal.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Journal.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Keywords.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Abstractions.SpokeIndexContribution.Keywords.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Pmid.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Pmid.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.SpokeIndexContribution() -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.SpokeIndexContribution(string? Title, string? Abstract, System.Collections.Generic.IReadOnlyList<string!>! Authors, System.Collections.Generic.IReadOnlyList<string!>! Keywords, string? Journal, string? Doi, string? Pmid, int? Year, System.Collections.Generic.IReadOnlyList<string!>! AssetHashes, string? FullText) -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Title.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Title.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Year.get -> int?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Year.init -> void
LM.HubSpoke.Entries.HubSpokeStore
LM.HubSpoke.Entries.HubSpokeStore.EnumerateAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<LM.Core.Models.Entry!>!
LM.HubSpoke.Entries.HubSpokeStore.FindByHashAsync(string! sha256, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.HubSpoke.Entries.HubSpokeStore.FindByIdsAsync(string? doi, string? pmid, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.HubSpoke.Entries.HubSpokeStore.FindSimilarByNameYearAsync(string! title, int? year, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.HubSpoke.Entries.HubSpokeStore.FullTextSearch.get -> LM.Core.Abstractions.IFullTextSearchService!
LM.HubSpoke.Entries.HubSpokeStore.GetByIdAsync(string! id, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.HubSpoke.Entries.HubSpokeStore.HubSpokeStore(LM.Core.Abstractions.IWorkSpaceService! ws, LM.Core.Abstractions.IHasher! hasher, System.Collections.Generic.IEnumerable<LM.HubSpoke.Abstractions.ISpokeHandler!>! handlers, LM.Core.Abstractions.IContentExtractor? contentExtractor = null, LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub? graphHub = null) -> void
LM.HubSpoke.Entries.HubSpokeStore.HubSpokeStore(LM.Core.Abstractions.IWorkSpaceService! ws, LM.Core.Abstractions.IHasher! hasher, System.Collections.Generic.IEnumerable<LM.HubSpoke.Abstractions.ISpokeHandler!>! handlers, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.Core.Abstractions.IContentExtractor? contentExtractor = null, LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub? graphHub = null) -> void
LM.HubSpoke.Entries.HubSpokeStore.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Entries.HubSpokeStore.SaveAsync(LM.Core.Models.Entry! entry, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Entries.HubSpokeStore.SearchAsync(LM.Core.Models.Filters.EntryFilter! filter, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.HubSpoke.Indexing.SimilarityLog
LM.HubSpoke.Indexing.SimilarityLog.LogAsync(string! sessionId, string! stagedPath, string! candidateEntryId, double score, string! method, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Indexing.SimilarityLog.NewSessionId() -> string!
LM.HubSpoke.Indexing.SimilarityLog.SimilarityLog(LM.Core.Abstractions.IWorkSpaceService! ws) -> void
LM.HubSpoke.Models.AbstractSection
LM.HubSpoke.Models.AbstractSection.AbstractSection() -> void
LM.HubSpoke.Models.AbstractSection.Label.get -> string?
LM.HubSpoke.Models.AbstractSection.Label.init -> void
LM.HubSpoke.Models.AbstractSection.Text.get -> string!
LM.HubSpoke.Models.AbstractSection.Text.init -> void
LM.HubSpoke.Models.Affiliation
LM.HubSpoke.Models.Affiliation.Affiliation() -> void
LM.HubSpoke.Models.Affiliation.Email.get -> string?
LM.HubSpoke.Models.Affiliation.Email.init -> void
LM.HubSpoke.Models.Affiliation.Text.get -> string!
LM.HubSpoke.Models.Affiliation.Text.init -> void
LM.HubSpoke.Models.AttachmentHook
LM.HubSpoke.Models.AttachmentHook.AttachmentHook() -> void
LM.HubSpoke.Models.AttachmentHook.Attachments.get -> System.Collections.Generic.List<LM.HubSpoke.Models.AttachmentHookItem!>!
LM.HubSpoke.Models.AttachmentHook.Attachments.set -> void
LM.HubSpoke.Models.AttachmentHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.AttachmentHook.SchemaVersion.init -> void
LM.HubSpoke.Models.AttachmentHookItem
LM.HubSpoke.Models.AttachmentHookItem.AddedBy.get -> string!
LM.HubSpoke.Models.AttachmentHookItem.AddedBy.init -> void
LM.HubSpoke.Models.AttachmentHookItem.AddedUtc.get -> System.DateTime
LM.HubSpoke.Models.AttachmentHookItem.AddedUtc.init -> void
LM.HubSpoke.Models.AttachmentHookItem.AttachmentHookItem() -> void
LM.HubSpoke.Models.AttachmentHookItem.AttachmentId.get -> string!
LM.HubSpoke.Models.AttachmentHookItem.AttachmentId.init -> void
LM.HubSpoke.Models.AttachmentHookItem.LibraryPath.get -> string!
LM.HubSpoke.Models.AttachmentHookItem.LibraryPath.init -> void
LM.HubSpoke.Models.AttachmentHookItem.Notes.get -> string?
LM.HubSpoke.Models.AttachmentHookItem.Notes.init -> void
LM.HubSpoke.Models.AttachmentHookItem.Purpose.get -> LM.Core.Models.AttachmentKind
LM.HubSpoke.Models.AttachmentHookItem.Purpose.init -> void
LM.HubSpoke.Models.AttachmentHookItem.Tags.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.AttachmentHookItem.Tags.init -> void
LM.HubSpoke.Models.AttachmentHookItem.Title.get -> string!
LM.HubSpoke.Models.AttachmentHookItem.Title.init -> void
LM.HubSpoke.Models.ArticleAbstract
LM.HubSpoke.Models.ArticleAbstract.ArticleAbstract() -> void
LM.HubSpoke.Models.ArticleAbstract.Sections.get -> System.Collections.Generic.List<LM.HubSpoke.Models.AbstractSection!>!
LM.HubSpoke.Models.ArticleAbstract.Sections.init -> void
LM.HubSpoke.Models.ArticleAbstract.Text.get -> string?
LM.HubSpoke.Models.ArticleAbstract.Text.init -> void
LM.HubSpoke.Models.ArticleAsset
LM.HubSpoke.Models.ArticleAsset.ArticleAsset() -> void
LM.HubSpoke.Models.ArticleAsset.Bytes.get -> long
LM.HubSpoke.Models.ArticleAsset.Bytes.init -> void
LM.HubSpoke.Models.ArticleAsset.ContentType.get -> string!
LM.HubSpoke.Models.ArticleAsset.ContentType.init -> void
LM.HubSpoke.Models.ArticleAsset.Hash.get -> string!
LM.HubSpoke.Models.ArticleAsset.Hash.init -> void
LM.HubSpoke.Models.ArticleAsset.OriginalFilename.get -> string?
LM.HubSpoke.Models.ArticleAsset.OriginalFilename.init -> void
LM.HubSpoke.Models.ArticleAsset.OriginalFolderPath.get -> string?
LM.HubSpoke.Models.ArticleAsset.OriginalFolderPath.init -> void
LM.HubSpoke.Models.ArticleAsset.Purpose.get -> LM.HubSpoke.Models.ArticleAssetPurpose
LM.HubSpoke.Models.ArticleAsset.Purpose.init -> void
LM.HubSpoke.Models.ArticleAsset.StoragePath.get -> string!
LM.HubSpoke.Models.ArticleAsset.StoragePath.init -> void
LM.HubSpoke.Models.ArticleAsset.Title.get -> string!
LM.HubSpoke.Models.ArticleAsset.Title.init -> void
LM.HubSpoke.Models.ArticleAssetPurpose
LM.HubSpoke.Models.ArticleAssetPurpose.Manuscript = 0 -> LM.HubSpoke.Models.ArticleAssetPurpose
LM.HubSpoke.Models.ArticleAssetPurpose.Supplement = 1 -> LM.HubSpoke.Models.ArticleAssetPurpose
LM.HubSpoke.Models.ArticleDates
LM.HubSpoke.Models.ArticleDates.Accepted.get -> System.DateTimeOffset?
LM.HubSpoke.Models.ArticleDates.Accepted.init -> void
LM.HubSpoke.Models.ArticleDates.ArticleDates() -> void
LM.HubSpoke.Models.ArticleDates.Electronic.get -> System.DateTimeOffset?
LM.HubSpoke.Models.ArticleDates.Electronic.init -> void
LM.HubSpoke.Models.ArticleDates.Print.get -> System.DateTimeOffset?
LM.HubSpoke.Models.ArticleDates.Print.init -> void
LM.HubSpoke.Models.ArticleDates.Received.get -> System.DateTimeOffset?
LM.HubSpoke.Models.ArticleDates.Received.init -> void
LM.HubSpoke.Models.ArticleDates.Revised.get -> System.DateTimeOffset?
LM.HubSpoke.Models.ArticleDates.Revised.init -> void
LM.HubSpoke.Models.ArticleDetails
LM.HubSpoke.Models.ArticleDetails.ArticleDetails() -> void
LM.HubSpoke.Models.ArticleDetails.Dates.get -> LM.HubSpoke.Models.ArticleDates!
LM.HubSpoke.Models.ArticleDetails.Dates.init -> void
LM.HubSpoke.Models.ArticleDetails.Language.get -> string?
LM.HubSpoke.Models.ArticleDetails.Language.init -> void
LM.HubSpoke.Models.ArticleDetails.Pagination.get -> LM.HubSpoke.Models.Pagination!
LM.HubSpoke.Models.ArticleDetails.Pagination.init -> void
LM.HubSpoke.Models.ArticleDetails.PublicationTypes.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.ArticleDetails.PublicationTypes.init -> void
LM.HubSpoke.Models.ArticleDetails.Status.get -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.ArticleDetails.Status.init -> void
LM.HubSpoke.Models.ArticleDetails.Title.get -> string!
LM.HubSpoke.Models.ArticleDetails.Title.init -> void
LM.HubSpoke.Models.ArticleHook
LM.HubSpoke.Models.ArticleHook.Abstract.get -> LM.HubSpoke.Models.ArticleAbstract?
LM.HubSpoke.Models.ArticleHook.Abstract.init -> void
LM.HubSpoke.Models.ArticleHook.Article.get -> LM.HubSpoke.Models.ArticleDetails!
LM.HubSpoke.Models.ArticleHook.Article.init -> void
LM.HubSpoke.Models.ArticleHook.ArticleHook() -> void
LM.HubSpoke.Models.ArticleHook.Assets.get -> System.Collections.Generic.List<LM.HubSpoke.Models.ArticleAsset!>!
LM.HubSpoke.Models.ArticleHook.Assets.init -> void
LM.HubSpoke.Models.ArticleHook.Authors.get -> System.Collections.Generic.List<LM.HubSpoke.Models.Author!>!
LM.HubSpoke.Models.ArticleHook.Authors.init -> void
LM.HubSpoke.Models.ArticleHook.Chemicals.get -> System.Collections.Generic.List<LM.HubSpoke.Models.Chemical!>!
LM.HubSpoke.Models.ArticleHook.Chemicals.init -> void
LM.HubSpoke.Models.ArticleHook.ConflictOfInterest.get -> string?
LM.HubSpoke.Models.ArticleHook.ConflictOfInterest.init -> void
LM.HubSpoke.Models.ArticleHook.Copyright.get -> string?
LM.HubSpoke.Models.ArticleHook.Copyright.init -> void
LM.HubSpoke.Models.ArticleHook.Grants.get -> System.Collections.Generic.List<LM.HubSpoke.Models.Grant!>!
LM.HubSpoke.Models.ArticleHook.Grants.init -> void
LM.HubSpoke.Models.ArticleHook.History.get -> LM.HubSpoke.Models.PublicationHistory!
LM.HubSpoke.Models.ArticleHook.History.init -> void
LM.HubSpoke.Models.ArticleHook.Identifier.get -> LM.HubSpoke.Models.ArticleIdentifier!
LM.HubSpoke.Models.ArticleHook.Identifier.init -> void
LM.HubSpoke.Models.ArticleHook.Journal.get -> LM.HubSpoke.Models.JournalInfo!
LM.HubSpoke.Models.ArticleHook.Journal.init -> void
LM.HubSpoke.Models.ArticleHook.Keywords.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.ArticleHook.Keywords.init -> void
LM.HubSpoke.Models.ArticleHook.Medline.get -> LM.HubSpoke.Models.MedlineInfo!
LM.HubSpoke.Models.ArticleHook.Medline.init -> void
LM.HubSpoke.Models.ArticleHook.MeshHeadings.get -> System.Collections.Generic.List<LM.HubSpoke.Models.MeshHeading!>!
LM.HubSpoke.Models.ArticleHook.MeshHeadings.init -> void
LM.HubSpoke.Models.ArticleHook.References.get -> System.Collections.Generic.List<LM.HubSpoke.Models.Citation!>!
LM.HubSpoke.Models.ArticleHook.References.init -> void
LM.HubSpoke.Models.ArticleHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.ArticleHook.SchemaVersion.init -> void
LM.HubSpoke.Models.ArticleIdentifier
LM.HubSpoke.Models.ArticleIdentifier.ArticleIdentifier() -> void
LM.HubSpoke.Models.ArticleIdentifier.DOI.get -> string?
LM.HubSpoke.Models.ArticleIdentifier.DOI.init -> void
LM.HubSpoke.Models.ArticleIdentifier.OtherIds.get -> System.Collections.Generic.Dictionary<string!, string!>!
LM.HubSpoke.Models.ArticleIdentifier.OtherIds.init -> void
LM.HubSpoke.Models.ArticleIdentifier.PII.get -> string?
LM.HubSpoke.Models.ArticleIdentifier.PII.init -> void
LM.HubSpoke.Models.ArticleIdentifier.PMCID.get -> string?
LM.HubSpoke.Models.ArticleIdentifier.PMCID.init -> void
LM.HubSpoke.Models.ArticleIdentifier.PMID.get -> string!
LM.HubSpoke.Models.ArticleIdentifier.PMID.init -> void
LM.HubSpoke.Models.AssetRef
LM.HubSpoke.Models.AssetRef.AssetRef() -> void
LM.HubSpoke.Models.AssetRef.Bytes.get -> long
LM.HubSpoke.Models.AssetRef.Bytes.init -> void
LM.HubSpoke.Models.AssetRef.ContentType.get -> string!
LM.HubSpoke.Models.AssetRef.ContentType.init -> void
LM.HubSpoke.Models.AssetRef.Hash.get -> string!
LM.HubSpoke.Models.AssetRef.Hash.init -> void
LM.HubSpoke.Models.AssetRef.OriginalFilename.get -> string?
LM.HubSpoke.Models.AssetRef.OriginalFilename.init -> void
LM.HubSpoke.Models.AssetRef.Role.get -> string!
LM.HubSpoke.Models.AssetRef.Role.init -> void
LM.HubSpoke.Models.AssetRef.StoragePath.get -> string!
LM.HubSpoke.Models.AssetRef.StoragePath.init -> void
LM.HubSpoke.Models.Author
LM.HubSpoke.Models.Author.Affiliations.get -> System.Collections.Generic.List<LM.HubSpoke.Models.Affiliation!>!
LM.HubSpoke.Models.Author.Affiliations.init -> void
LM.HubSpoke.Models.Author.Author() -> void
LM.HubSpoke.Models.Author.ForeName.get -> string?
LM.HubSpoke.Models.Author.ForeName.init -> void
LM.HubSpoke.Models.Author.Initials.get -> string?
LM.HubSpoke.Models.Author.Initials.init -> void
LM.HubSpoke.Models.Author.LastName.get -> string?
LM.HubSpoke.Models.Author.LastName.init -> void
LM.HubSpoke.Models.Author.ORCID.get -> string?
LM.HubSpoke.Models.Author.ORCID.init -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails
LM.HubSpoke.Models.ChangeLogAttachmentDetails.AttachmentId.get -> string!
LM.HubSpoke.Models.ChangeLogAttachmentDetails.AttachmentId.init -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails.ChangeLogAttachmentDetails() -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails.LibraryPath.get -> string!
LM.HubSpoke.Models.ChangeLogAttachmentDetails.LibraryPath.init -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Purpose.get -> LM.Core.Models.AttachmentKind
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Purpose.init -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Tags.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Tags.init -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Title.get -> string!
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Title.init -> void
LM.HubSpoke.Models.Chemical
LM.HubSpoke.Models.Chemical.Chemical() -> void
LM.HubSpoke.Models.Chemical.Name.get -> string!
LM.HubSpoke.Models.Chemical.Name.init -> void
LM.HubSpoke.Models.Chemical.RegistryNumber.get -> string?
LM.HubSpoke.Models.Chemical.RegistryNumber.init -> void
LM.HubSpoke.Models.Citation
LM.HubSpoke.Models.Citation.Citation() -> void
LM.HubSpoke.Models.Citation.DOI.get -> string?
LM.HubSpoke.Models.Citation.DOI.init -> void
LM.HubSpoke.Models.Citation.PMID.get -> string?
LM.HubSpoke.Models.Citation.PMID.init -> void
LM.HubSpoke.Models.Citation.Text.get -> string!
LM.HubSpoke.Models.Citation.Text.init -> void
LM.HubSpoke.Models.CreationMethod
LM.HubSpoke.Models.CreationMethod.Manual = 0 -> LM.HubSpoke.Models.CreationMethod
LM.HubSpoke.Models.CreationMethod.Search = 1 -> LM.HubSpoke.Models.CreationMethod
LM.HubSpoke.Models.DocumentHook
LM.HubSpoke.Models.DocumentHook.Assets.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.AssetRef!>!
LM.HubSpoke.Models.DocumentHook.Assets.init -> void
LM.HubSpoke.Models.DocumentHook.Description.get -> string?
LM.HubSpoke.Models.DocumentHook.Description.init -> void
LM.HubSpoke.Models.DocumentHook.DocumentHook() -> void
LM.HubSpoke.Models.DocumentHook.DocumentType.get -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentHook.DocumentType.init -> void
LM.HubSpoke.Models.DocumentHook.EffectiveUtc.get -> System.DateTime?
LM.HubSpoke.Models.DocumentHook.EffectiveUtc.init -> void
LM.HubSpoke.Models.DocumentHook.ExpiresUtc.get -> System.DateTime?
LM.HubSpoke.Models.DocumentHook.ExpiresUtc.init -> void
LM.HubSpoke.Models.DocumentHook.Owner.get -> string?
LM.HubSpoke.Models.DocumentHook.Owner.init -> void
LM.HubSpoke.Models.DocumentHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.DocumentHook.SchemaVersion.init -> void
LM.HubSpoke.Models.DocumentHook.Title.get -> string?
LM.HubSpoke.Models.DocumentHook.Title.init -> void
LM.HubSpoke.Models.DocumentHook.Version.get -> string?
LM.HubSpoke.Models.DocumentHook.Version.init -> void
LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.MarketingMaterial = 1 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.Other = 6 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.Poster = 5 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.Presentation = 0 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.Report = 2 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.StandardOperatingProcedure = 3 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.Whitepaper = 4 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.EntryChangeLogEvent
LM.HubSpoke.Models.EntryChangeLogEvent.Action.get -> string!
LM.HubSpoke.Models.EntryChangeLogEvent.Action.init -> void
LM.HubSpoke.Models.EntryChangeLogEvent.Details.get -> LM.HubSpoke.Models.ChangeLogAttachmentDetails?
LM.HubSpoke.Models.EntryChangeLogEvent.Details.init -> void
LM.HubSpoke.Models.EntryChangeLogEvent.EntryChangeLogEvent() -> void
LM.HubSpoke.Models.EntryChangeLogEvent.EventId.get -> string!
LM.HubSpoke.Models.EntryChangeLogEvent.EventId.init -> void
LM.HubSpoke.Models.EntryChangeLogEvent.PerformedBy.get -> string!
LM.HubSpoke.Models.EntryChangeLogEvent.PerformedBy.init -> void
LM.HubSpoke.Models.EntryChangeLogEvent.TimestampUtc.get -> System.DateTime
LM.HubSpoke.Models.EntryChangeLogEvent.TimestampUtc.init -> void
LM.HubSpoke.Models.EntryChangeLogHook
LM.HubSpoke.Models.EntryChangeLogHook.EntryChangeLogHook() -> void
LM.HubSpoke.Models.EntryChangeLogHook.Events.get -> System.Collections.Generic.List<LM.HubSpoke.Models.EntryChangeLogEvent!>!
LM.HubSpoke.Models.EntryChangeLogHook.Events.set -> void
LM.HubSpoke.Models.EntryChangeLogHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.EntryChangeLogHook.SchemaVersion.init -> void
LM.HubSpoke.Models.PdfAnnotationPreview
LM.HubSpoke.Models.PdfAnnotationPreview.AnnotationId.get -> string!
LM.HubSpoke.Models.PdfAnnotationPreview.AnnotationId.init -> void
LM.HubSpoke.Models.PdfAnnotationPreview.ImagePath.get -> string!
LM.HubSpoke.Models.PdfAnnotationPreview.ImagePath.init -> void
LM.HubSpoke.Models.PdfAnnotationPreview.PdfAnnotationPreview() -> void
LM.HubSpoke.Models.PdfAnnotationsHook
LM.HubSpoke.Models.PdfAnnotationsHook.Annotations.get -> System.Collections.Generic.List<LM.HubSpoke.Models.PdfAnnotationMetadata!>!
LM.HubSpoke.Models.PdfAnnotationsHook.Annotations.init -> void
LM.HubSpoke.Models.PdfAnnotationsHook.OverlayPath.get -> string!
LM.HubSpoke.Models.PdfAnnotationsHook.OverlayPath.init -> void
LM.HubSpoke.Models.PdfAnnotationsHook.Previews.get -> System.Collections.Generic.List<LM.HubSpoke.Models.PdfAnnotationPreview!>!
LM.HubSpoke.Models.PdfAnnotationsHook.Previews.init -> void
LM.HubSpoke.Models.PdfAnnotationsHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.PdfAnnotationsHook.SchemaVersion.init -> void
LM.HubSpoke.Models.PdfAnnotationsHook.PdfAnnotationsHook() -> void
LM.HubSpoke.Models.PdfAnnotationMetadata
LM.HubSpoke.Models.PdfAnnotationMetadata.AnnotationId.get -> string!
LM.HubSpoke.Models.PdfAnnotationMetadata.AnnotationId.init -> void
LM.HubSpoke.Models.PdfAnnotationMetadata.Color.get -> LM.HubSpoke.Models.PdfAnnotationColorMetadata?
LM.HubSpoke.Models.PdfAnnotationMetadata.Color.init -> void
LM.HubSpoke.Models.PdfAnnotationMetadata.Note.get -> string?
LM.HubSpoke.Models.PdfAnnotationMetadata.Note.init -> void
LM.HubSpoke.Models.PdfAnnotationMetadata.PdfAnnotationMetadata() -> void
LM.HubSpoke.Models.PdfAnnotationMetadata.Text.get -> string?
LM.HubSpoke.Models.PdfAnnotationMetadata.Text.init -> void
LM.HubSpoke.Models.PdfAnnotationColorMetadata
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Blue.get -> int
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Blue.init -> void
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Green.get -> int
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Green.init -> void
LM.HubSpoke.Models.PdfAnnotationColorMetadata.PdfAnnotationColorMetadata() -> void
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Red.get -> int
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Red.init -> void
LM.HubSpoke.Models.EntryHooks
LM.HubSpoke.Models.EntryHooks.Article.get -> string?
LM.HubSpoke.Models.EntryHooks.Article.init -> void
LM.HubSpoke.Models.EntryHooks.LitSearch.get -> string?
LM.HubSpoke.Models.EntryHooks.LitSearch.init -> void
LM.HubSpoke.Models.EntryHooks.DataExtraction.get -> string?
LM.HubSpoke.Models.EntryHooks.DataExtraction.init -> void
LM.HubSpoke.Models.EntryHooks.Document.get -> string?
LM.HubSpoke.Models.EntryHooks.Document.init -> void
LM.HubSpoke.Models.EntryHooks.PdfAnnotations.get -> string?
LM.HubSpoke.Models.EntryHooks.PdfAnnotations.init -> void
LM.HubSpoke.Models.EntryHooks.EntryHooks() -> void
LM.HubSpoke.Models.EntryHooks.History.get -> string?
LM.HubSpoke.Models.EntryHooks.History.init -> void
LM.HubSpoke.Models.EntryHooks.Notes.get -> string?
LM.HubSpoke.Models.EntryHooks.Notes.init -> void
LM.HubSpoke.Models.EntryHooks.Provenance.get -> string?
LM.HubSpoke.Models.EntryHooks.Provenance.init -> void
LM.HubSpoke.Models.EntryHooks.Relations.get -> string?
LM.HubSpoke.Models.EntryHooks.Relations.init -> void
LM.HubSpoke.Models.EntryHooks.SearchHits.get -> string?
LM.HubSpoke.Models.EntryHooks.SearchHits.init -> void
LM.HubSpoke.Models.EntryHooks.Trial.get -> string?
LM.HubSpoke.Models.EntryHooks.Trial.init -> void
LM.HubSpoke.Models.EntryHub
LM.HubSpoke.Models.EntryHub.ConcurrencyStamp.get -> string!
LM.HubSpoke.Models.EntryHub.ConcurrencyStamp.init -> void
LM.HubSpoke.Models.EntryHub.CreatedBy.get -> LM.HubSpoke.Models.PersonRef
LM.HubSpoke.Models.EntryHub.CreatedBy.init -> void
LM.HubSpoke.Models.EntryHub.CreatedUtc.get -> System.DateTime
LM.HubSpoke.Models.EntryHub.CreatedUtc.init -> void
LM.HubSpoke.Models.EntryHub.CreationMethod.get -> LM.HubSpoke.Models.CreationMethod
LM.HubSpoke.Models.EntryHub.CreationMethod.init -> void
LM.HubSpoke.Models.EntryHub.DisplayTitle.get -> string!
LM.HubSpoke.Models.EntryHub.DisplayTitle.init -> void
LM.HubSpoke.Models.EntryHub.EntryHub() -> void
LM.HubSpoke.Models.EntryHub.EntryId.get -> string!
LM.HubSpoke.Models.EntryHub.EntryId.init -> void
LM.HubSpoke.Models.EntryHub.Flags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Models.EntryHub.Flags.init -> void
LM.HubSpoke.Models.EntryHub.Hooks.get -> LM.HubSpoke.Models.EntryHooks!
LM.HubSpoke.Models.EntryHub.Hooks.init -> void
LM.HubSpoke.Models.DataExtractionHook
LM.HubSpoke.Models.DataExtractionHook.Assignments.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.PopulationInterventionAssignment!>!
LM.HubSpoke.Models.DataExtractionHook.Assignments.init -> void
LM.HubSpoke.Models.DataExtractionHook.DataExtractionHook() -> void
LM.HubSpoke.Models.DataExtractionHook.Endpoints.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.ExtractedEndpoint!>!
LM.HubSpoke.Models.DataExtractionHook.Endpoints.init -> void
LM.HubSpoke.Models.DataExtractionHook.EntryId.get -> string!
LM.HubSpoke.Models.DataExtractionHook.EntryId.init -> void
LM.HubSpoke.Models.DataExtractionHook.Interventions.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.ExtractedIntervention!>!
LM.HubSpoke.Models.DataExtractionHook.Interventions.init -> void
LM.HubSpoke.Models.DataExtractionHook.Populations.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.ExtractedPopulation!>!
LM.HubSpoke.Models.DataExtractionHook.Populations.init -> void
LM.HubSpoke.Models.DataExtractionHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.DataExtractionHook.SchemaVersion.init -> void
LM.HubSpoke.Models.DataExtractionHook.Source.get -> string?
LM.HubSpoke.Models.DataExtractionHook.Source.init -> void
LM.HubSpoke.Models.DataExtractionHook.Title.get -> string?
LM.HubSpoke.Models.DataExtractionHook.Title.init -> void
LM.HubSpoke.Models.DataExtractionHook.Year.get -> int?
LM.HubSpoke.Models.DataExtractionHook.Year.init -> void
LM.HubSpoke.Models.ExtractedEndpoint
LM.HubSpoke.Models.ExtractedEndpoint.Category.get -> string!
LM.HubSpoke.Models.ExtractedEndpoint.Category.init -> void
LM.HubSpoke.Models.ExtractedEndpoint.Description.get -> string?
LM.HubSpoke.Models.ExtractedEndpoint.Description.init -> void
LM.HubSpoke.Models.ExtractedEndpoint.ExtractedEndpoint() -> void
LM.HubSpoke.Models.ExtractedEndpoint.Id.get -> string!
LM.HubSpoke.Models.ExtractedEndpoint.Id.init -> void
LM.HubSpoke.Models.ExtractedEndpoint.Name.get -> string!
LM.HubSpoke.Models.ExtractedEndpoint.Name.init -> void
LM.HubSpoke.Models.ExtractedEndpoint.Readouts.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.EndpointReadout!>!
LM.HubSpoke.Models.ExtractedEndpoint.Readouts.init -> void
LM.HubSpoke.Models.ExtractedIntervention
LM.HubSpoke.Models.ExtractedIntervention.Attributes.get -> System.Collections.Generic.IReadOnlyDictionary<string!, string!>?
LM.HubSpoke.Models.ExtractedIntervention.Attributes.init -> void
LM.HubSpoke.Models.ExtractedIntervention.Description.get -> string?
LM.HubSpoke.Models.ExtractedIntervention.Description.init -> void
LM.HubSpoke.Models.ExtractedIntervention.ExtractedIntervention() -> void
LM.HubSpoke.Models.ExtractedIntervention.Id.get -> string!
LM.HubSpoke.Models.ExtractedIntervention.Id.init -> void
LM.HubSpoke.Models.ExtractedIntervention.Name.get -> string!
LM.HubSpoke.Models.ExtractedIntervention.Name.init -> void
LM.HubSpoke.Models.ExtractedIntervention.Type.get -> string?
LM.HubSpoke.Models.ExtractedIntervention.Type.init -> void
LM.HubSpoke.Models.ExtractedPopulation
LM.HubSpoke.Models.ExtractedPopulation.BaselineCharacteristics.get -> System.Collections.Generic.IReadOnlyDictionary<string!, string!>!
LM.HubSpoke.Models.ExtractedPopulation.BaselineCharacteristics.init -> void
LM.HubSpoke.Models.ExtractedPopulation.Description.get -> string?
LM.HubSpoke.Models.ExtractedPopulation.Description.init -> void
LM.HubSpoke.Models.ExtractedPopulation.ExtractedPopulation() -> void
LM.HubSpoke.Models.ExtractedPopulation.Id.get -> string!
LM.HubSpoke.Models.ExtractedPopulation.Id.init -> void
LM.HubSpoke.Models.ExtractedPopulation.Name.get -> string!
LM.HubSpoke.Models.ExtractedPopulation.Name.init -> void
LM.HubSpoke.Models.EndpointReadout
LM.HubSpoke.Models.EndpointReadout.ComparatorInterventionId.get -> string?
LM.HubSpoke.Models.EndpointReadout.ComparatorInterventionId.init -> void
LM.HubSpoke.Models.EndpointReadout.EndpointReadout() -> void
LM.HubSpoke.Models.EndpointReadout.InterventionId.get -> string?
LM.HubSpoke.Models.EndpointReadout.InterventionId.init -> void
LM.HubSpoke.Models.EndpointReadout.KaplanMeierCurve.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.KaplanMeierPoint!>?
LM.HubSpoke.Models.EndpointReadout.KaplanMeierCurve.init -> void
LM.HubSpoke.Models.EndpointReadout.Metric.get -> string?
LM.HubSpoke.Models.EndpointReadout.Metric.init -> void
LM.HubSpoke.Models.EndpointReadout.PopulationId.get -> string?
LM.HubSpoke.Models.EndpointReadout.PopulationId.init -> void
LM.HubSpoke.Models.EndpointReadout.Timepoint.get -> string?
LM.HubSpoke.Models.EndpointReadout.Timepoint.init -> void
LM.HubSpoke.Models.EndpointReadout.Unit.get -> string?
LM.HubSpoke.Models.EndpointReadout.Unit.init -> void
LM.HubSpoke.Models.EndpointReadout.Value.get -> double?
LM.HubSpoke.Models.EndpointReadout.Value.init -> void
LM.HubSpoke.Models.KaplanMeierPoint
LM.HubSpoke.Models.KaplanMeierPoint.KaplanMeierPoint() -> void
LM.HubSpoke.Models.KaplanMeierPoint.SurvivalProbability.get -> double
LM.HubSpoke.Models.KaplanMeierPoint.SurvivalProbability.init -> void
LM.HubSpoke.Models.KaplanMeierPoint.Time.get -> double
LM.HubSpoke.Models.KaplanMeierPoint.Time.init -> void
LM.HubSpoke.Models.PopulationInterventionAssignment
LM.HubSpoke.Models.PopulationInterventionAssignment.ArmLabel.get -> string?
LM.HubSpoke.Models.PopulationInterventionAssignment.ArmLabel.init -> void
LM.HubSpoke.Models.PopulationInterventionAssignment.PopulationId.get -> string!
LM.HubSpoke.Models.PopulationInterventionAssignment.PopulationId.init -> void
LM.HubSpoke.Models.PopulationInterventionAssignment.InterventionId.get -> string!
LM.HubSpoke.Models.PopulationInterventionAssignment.InterventionId.init -> void
LM.HubSpoke.Models.PopulationInterventionAssignment.PopulationInterventionAssignment() -> void
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.GetEntryOverviewAsync(string! entryId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview?>!
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.GetKaplanMeierOverlaysAsync(string! entryId, string? endpointId = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.GetMortalityComparisonsAsync(string? entryId = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.RefreshEntryAsync(string! entryId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.SearchBaselineCharacteristicsAsync(string! characteristicSearchTerm, string? valueContains = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.KnowledgeGraphHub(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.GetEntryOverviewAsync(string! entryId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview?>!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.GetKaplanMeierOverlaysAsync(string! entryId, string? endpointId = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.GetMortalityComparisonsAsync(string? entryId = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.RefreshEntryAsync(string! entryId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.SearchBaselineCharacteristicsAsync(string! characteristicSearchTerm, string? valueContains = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.BaselineCharacteristicHit(string! entryId, string! entryTitle, string! populationId, string! populationName, string! characteristic, string! value) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.Characteristic.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.EntryId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.EntryTitle.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.PopulationId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.PopulationName.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.Value.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.GraphEdge(string! sourceType, string! sourceId, string! targetType, string! targetId, string! relationship, string? payloadJson) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.PayloadJson.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.Relationship.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.SourceId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.SourceType.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.TargetId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.TargetType.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.Edges.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge!>!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.GraphEntryOverview(string! entryId, string! title, System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode!>! populations, System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode!>! interventions, System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode!>! endpoints, System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge!>! edges) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.EntryId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.Endpoints.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode!>!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.Interventions.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode!>!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.Populations.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode!>!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.Title.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode.Category.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode.Description.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode.EndpointId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode.GraphEndpointNode(string! endpointId, string! name, string! category, string? description) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode.Name.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode.Description.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode.GraphInterventionNode(string! interventionId, string! name, string? type, string? description) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode.InterventionId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode.Name.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode.Type.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode
LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode.Description.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode.GraphPopulationNode(string! populationId, string! name, string? description) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode.Name.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode.PopulationId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.Curve.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto!>!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.EndpointId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.EndpointName.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.EntryId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.EntryTitle.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.InterventionId.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.InterventionName.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.KaplanMeierOverlay(string! entryId, string! entryTitle, string! endpointId, string! endpointName, string? populationId, string? interventionId, string? interventionName, System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto!>! curve) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.PopulationId.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto.KaplanMeierPointDto(double time, double survivalProbability) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto.SurvivalProbability.get -> double
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto.Time.get -> double
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.ComparatorInterventionId.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.ComparatorName.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.EndpointId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.EndpointName.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.EntryId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.EntryTitle.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.InterventionId.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.InterventionName.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.Metric.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.MortalityComparison(string! entryId, string! entryTitle, string! endpointId, string! endpointName, string? populationId, string? interventionId, string? interventionName, string? comparatorInterventionId, string? comparatorName, double? value, string? unit, string? metric, string? timepoint) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.PopulationId.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.Timepoint.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.Unit.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.Value.get -> double?
LM.HubSpoke.Models.EntryHub.LastActivityUtc.get -> System.DateTime?
LM.HubSpoke.Models.EntryHub.LastActivityUtc.init -> void
LM.HubSpoke.Models.EntryHub.Origin.get -> LM.HubSpoke.Models.EntryOrigin
LM.HubSpoke.Models.EntryHub.Origin.init -> void
LM.HubSpoke.Models.EntryHub.PrimaryPurpose.get -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryHub.PrimaryPurpose.init -> void
LM.HubSpoke.Models.EntryHub.PrimaryPurposeSource.get -> LM.HubSpoke.Models.PurposeSource
LM.HubSpoke.Models.EntryHub.PrimaryPurposeSource.init -> void
LM.HubSpoke.Models.EntryHub.RelationsSummary.get -> LM.HubSpoke.Models.EntryRelationsSummary?
LM.HubSpoke.Models.EntryHub.RelationsSummary.init -> void
LM.HubSpoke.Models.EntryHub.SchemaVersion.get -> string!
LM.HubSpoke.Models.EntryHub.SchemaVersion.init -> void
LM.HubSpoke.Models.EntryHub.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Models.EntryHub.Tags.init -> void
LM.HubSpoke.Models.EntryHub.UpdatedBy.get -> LM.HubSpoke.Models.PersonRef
LM.HubSpoke.Models.EntryHub.UpdatedBy.init -> void
LM.HubSpoke.Models.EntryHub.UpdatedUtc.get -> System.DateTime
LM.HubSpoke.Models.EntryHub.UpdatedUtc.init -> void
LM.HubSpoke.Models.EntryNotesHook
LM.HubSpoke.Models.EntryNotesHook.EntryNotesHook() -> void
LM.HubSpoke.Models.EntryNotesHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.EntryNotesHook.SchemaVersion.init -> void
LM.HubSpoke.Models.EntryNotesHook.Summary.get -> LM.HubSpoke.Models.EntryNotesSummary?
LM.HubSpoke.Models.EntryNotesHook.Summary.init -> void
LM.HubSpoke.Models.EntryNotesHook.SummaryText.get -> string?
LM.HubSpoke.Models.EntryNotesHook.UpdatedUtc.get -> System.DateTime
LM.HubSpoke.Models.EntryNotesHook.UpdatedUtc.init -> void
LM.HubSpoke.Models.EntryNotesHook.UserNotes.get -> string?
LM.HubSpoke.Models.EntryNotesHook.UserNotes.init -> void
LM.HubSpoke.Models.EntryNotesSummary
LM.HubSpoke.Models.EntryNotesSummary.EntryNotesSummary() -> void
LM.HubSpoke.Models.EntryNotesSummary.GetRenderedText() -> string?
LM.HubSpoke.Models.EntryNotesSummary.LitSearch.get -> LM.HubSpoke.Models.LitSearchNoteSummary?
LM.HubSpoke.Models.EntryNotesSummary.LitSearch.init -> void
LM.HubSpoke.Models.EntryNotesSummary.RawText.get -> string?
LM.HubSpoke.Models.EntryNotesSummary.RawText.init -> void
LM.HubSpoke.Models.EntryNotesSummary.Rendered.get -> string?
LM.HubSpoke.Models.EntryNotesSummary.Rendered.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary
LM.HubSpoke.Models.LitSearchNoteRunSummary.ExecutedBy.get -> string?
LM.HubSpoke.Models.LitSearchNoteRunSummary.ExecutedBy.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.From.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchNoteRunSummary.From.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.LitSearchNoteRunSummary() -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.RunId.get -> string!
LM.HubSpoke.Models.LitSearchNoteRunSummary.RunId.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.RunUtc.get -> System.DateTime
LM.HubSpoke.Models.LitSearchNoteRunSummary.RunUtc.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.To.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchNoteRunSummary.To.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.TotalHits.get -> int
LM.HubSpoke.Models.LitSearchNoteRunSummary.TotalHits.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary
LM.HubSpoke.Models.LitSearchNoteSummary.CreatedBy.get -> string?
LM.HubSpoke.Models.LitSearchNoteSummary.CreatedBy.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.CreatedUtc.get -> System.DateTime
LM.HubSpoke.Models.LitSearchNoteSummary.CreatedUtc.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.DerivedFromEntryId.get -> string?
LM.HubSpoke.Models.LitSearchNoteSummary.DerivedFromEntryId.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.LatestRun.get -> LM.HubSpoke.Models.LitSearchNoteRunSummary?
LM.HubSpoke.Models.LitSearchNoteSummary.LatestRun.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.LitSearchNoteSummary() -> void
LM.HubSpoke.Models.LitSearchNoteSummary.Provider.get -> string!
LM.HubSpoke.Models.LitSearchNoteSummary.Provider.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.Query.get -> string!
LM.HubSpoke.Models.LitSearchNoteSummary.Query.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.RunCount.get -> int
LM.HubSpoke.Models.LitSearchNoteSummary.RunCount.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.Title.get -> string?
LM.HubSpoke.Models.LitSearchNoteSummary.Title.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.ToDisplayString() -> string!
LM.HubSpoke.Models.EntryOrigin
LM.HubSpoke.Models.EntryOrigin.External = 0 -> LM.HubSpoke.Models.EntryOrigin
LM.HubSpoke.Models.EntryOrigin.Internal = 1 -> LM.HubSpoke.Models.EntryOrigin
LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Code = 5 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Dataset = 4 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Document = 3 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Manuscript = 1 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Trial = 2 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Unknown = 0 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryRelationsSummary
LM.HubSpoke.Models.EntryRelationsSummary.EntryRelationsSummary() -> void
LM.HubSpoke.Models.EntryRelationsSummary.RelatedCount.get -> int
LM.HubSpoke.Models.EntryRelationsSummary.RelatedCount.init -> void
LM.HubSpoke.Models.EntryRelationsSummary.RelationsUpdatedUtc.get -> System.DateTime?
LM.HubSpoke.Models.EntryRelationsSummary.RelationsUpdatedUtc.init -> void
LM.HubSpoke.Models.EntryRelationsSummary.VariantOfCount.get -> int
LM.HubSpoke.Models.EntryRelationsSummary.VariantOfCount.init -> void
LM.HubSpoke.Models.Grant
LM.HubSpoke.Models.Grant.Agency.get -> string?
LM.HubSpoke.Models.Grant.Agency.init -> void
LM.HubSpoke.Models.Grant.Country.get -> string?
LM.HubSpoke.Models.Grant.Country.init -> void
LM.HubSpoke.Models.Grant.Grant() -> void
LM.HubSpoke.Models.Grant.GrantId.get -> string?
LM.HubSpoke.Models.Grant.GrantId.init -> void
LM.HubSpoke.Models.JournalInfo
LM.HubSpoke.Models.JournalInfo.Country.get -> string?
LM.HubSpoke.Models.JournalInfo.Country.init -> void
LM.HubSpoke.Models.JournalInfo.ISOAbbreviation.get -> string?
LM.HubSpoke.Models.JournalInfo.ISOAbbreviation.init -> void
LM.HubSpoke.Models.JournalInfo.ISSN.get -> string?
LM.HubSpoke.Models.JournalInfo.ISSN.init -> void
LM.HubSpoke.Models.JournalInfo.ISSNElectronic.get -> string?
LM.HubSpoke.Models.JournalInfo.ISSNElectronic.init -> void
LM.HubSpoke.Models.JournalInfo.ISSNPrint.get -> string?
LM.HubSpoke.Models.JournalInfo.ISSNPrint.init -> void
LM.HubSpoke.Models.JournalInfo.Issue.get -> LM.HubSpoke.Models.JournalIssue!
LM.HubSpoke.Models.JournalInfo.Issue.init -> void
LM.HubSpoke.Models.JournalInfo.JournalInfo() -> void
LM.HubSpoke.Models.JournalInfo.NlmUniqueId.get -> string?
LM.HubSpoke.Models.JournalInfo.NlmUniqueId.init -> void
LM.HubSpoke.Models.JournalInfo.Title.get -> string!
LM.HubSpoke.Models.JournalInfo.Title.init -> void
LM.HubSpoke.Models.JournalIssue
LM.HubSpoke.Models.JournalIssue.JournalIssue() -> void
LM.HubSpoke.Models.JournalIssue.Number.get -> string?
LM.HubSpoke.Models.JournalIssue.Number.init -> void
LM.HubSpoke.Models.JournalIssue.PubDate.get -> LM.HubSpoke.Models.PartialDate?
LM.HubSpoke.Models.JournalIssue.PubDate.init -> void
LM.HubSpoke.Models.JournalIssue.Volume.get -> string?
LM.HubSpoke.Models.JournalIssue.Volume.init -> void
LM.HubSpoke.Models.JsonStd
LM.HubSpoke.Models.LitSearchHook
LM.HubSpoke.Models.LitSearchHook.CreatedBy.get -> string?
LM.HubSpoke.Models.LitSearchHook.CreatedBy.init -> void
LM.HubSpoke.Models.LitSearchHook.CreatedUtc.get -> System.DateTime
LM.HubSpoke.Models.LitSearchHook.CreatedUtc.init -> void
LM.HubSpoke.Models.LitSearchHook.From.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchHook.From.init -> void
LM.HubSpoke.Models.LitSearchHook.Keywords.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Models.LitSearchHook.Keywords.init -> void
LM.HubSpoke.Models.LitSearchHook.DerivedFromEntryId.get -> string?
LM.HubSpoke.Models.LitSearchHook.DerivedFromEntryId.init -> void
LM.HubSpoke.Models.LitSearchHook.LitSearchHook() -> void
LM.HubSpoke.Models.LitSearchHook.Provider.get -> string!
LM.HubSpoke.Models.LitSearchHook.Provider.init -> void
LM.HubSpoke.Models.LitSearchHook.Query.get -> string!
LM.HubSpoke.Models.LitSearchHook.Query.init -> void
LM.HubSpoke.Models.LitSearchHook.LegacyNotes.get -> string?
LM.HubSpoke.Models.LitSearchHook.LegacyNotes.init -> void
LM.HubSpoke.Models.LitSearchHook.NotesSummary.get -> string?
LM.HubSpoke.Models.LitSearchHook.NotesSummary.set -> void
LM.HubSpoke.Models.LitSearchHook.UserNotes.get -> string?
LM.HubSpoke.Models.LitSearchHook.UserNotes.set -> void
LM.HubSpoke.Models.LitSearchHook.Runs.get -> System.Collections.Generic.List<LM.HubSpoke.Models.LitSearchRun!>!
LM.HubSpoke.Models.LitSearchHook.Runs.init -> void
LM.HubSpoke.Models.LitSearchHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.LitSearchHook.SchemaVersion.init -> void
LM.HubSpoke.Models.LitSearchHook.Title.get -> string!
LM.HubSpoke.Models.LitSearchHook.Title.init -> void
LM.HubSpoke.Models.LitSearchHook.To.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchHook.To.init -> void
LM.HubSpoke.Models.LitSearchRun
LM.HubSpoke.Models.LitSearchRun.IsFavorite.get -> bool
LM.HubSpoke.Models.LitSearchRun.IsFavorite.init -> void
LM.HubSpoke.Models.LitSearchRun.LitSearchRun() -> void
LM.HubSpoke.Models.LitSearchRun.RawAttachments.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.LitSearchRun.RawAttachments.init -> void
LM.HubSpoke.Models.LitSearchRun.CheckedEntryIdsPath.get -> string?
LM.HubSpoke.Models.LitSearchRun.CheckedEntryIdsPath.set -> void
LM.HubSpoke.Models.LitSearchRun.RunId.get -> string!
LM.HubSpoke.Models.LitSearchRun.RunId.init -> void
LM.HubSpoke.Models.LitSearchRun.RunUtc.get -> System.DateTime
LM.HubSpoke.Models.LitSearchRun.RunUtc.init -> void
LM.HubSpoke.Models.LitSearchRun.ExecutedBy.get -> string?
LM.HubSpoke.Models.LitSearchRun.ExecutedBy.init -> void
LM.HubSpoke.Models.LitSearchRun.From.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchRun.From.init -> void
LM.HubSpoke.Models.LitSearchRun.To.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchRun.To.init -> void
LM.HubSpoke.Models.LitSearchRun.TotalHits.get -> int
LM.HubSpoke.Models.LitSearchRun.TotalHits.init -> void
LM.HubSpoke.Models.MedlineInfo
LM.HubSpoke.Models.MedlineInfo.CitationSubset.get -> string?
LM.HubSpoke.Models.MedlineInfo.CitationSubset.init -> void
LM.HubSpoke.Models.MedlineInfo.MedlineInfo() -> void
LM.HubSpoke.Models.MedlineInfo.PublicationStatusRaw.get -> string?
LM.HubSpoke.Models.MedlineInfo.PublicationStatusRaw.init -> void
LM.HubSpoke.Models.MeshHeading
LM.HubSpoke.Models.MeshHeading.Descriptor.get -> string!
LM.HubSpoke.Models.MeshHeading.Descriptor.init -> void
LM.HubSpoke.Models.MeshHeading.MajorTopic.get -> bool
LM.HubSpoke.Models.MeshHeading.MajorTopic.init -> void
LM.HubSpoke.Models.MeshHeading.MeshHeading() -> void
LM.HubSpoke.Models.MeshHeading.Qualifiers.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.MeshHeading.Qualifiers.init -> void
LM.HubSpoke.Models.NullableUtcDateTimeConverter
LM.HubSpoke.Models.NullableUtcDateTimeConverter.NullableUtcDateTimeConverter() -> void
LM.HubSpoke.Models.Pagination
LM.HubSpoke.Models.Pagination.ArticleNumber.get -> string?
LM.HubSpoke.Models.Pagination.ArticleNumber.init -> void
LM.HubSpoke.Models.Pagination.EndPage.get -> string?
LM.HubSpoke.Models.Pagination.EndPage.init -> void
LM.HubSpoke.Models.Pagination.Pagination() -> void
LM.HubSpoke.Models.Pagination.StartPage.get -> string?
LM.HubSpoke.Models.Pagination.StartPage.init -> void
LM.HubSpoke.Models.PartialDate
LM.HubSpoke.Models.PartialDate.Day.get -> int?
LM.HubSpoke.Models.PartialDate.Day.init -> void
LM.HubSpoke.Models.PartialDate.Month.get -> int?
LM.HubSpoke.Models.PartialDate.Month.init -> void
LM.HubSpoke.Models.PartialDate.PartialDate() -> void
LM.HubSpoke.Models.PartialDate.ToDateTimeOrNull() -> System.DateTime?
LM.HubSpoke.Models.PartialDate.Year.get -> int
LM.HubSpoke.Models.PartialDate.Year.init -> void
LM.HubSpoke.Models.PersonRef
LM.HubSpoke.Models.PersonRef.DisplayName.get -> string?
LM.HubSpoke.Models.PersonRef.DisplayName.init -> void
LM.HubSpoke.Models.PersonRef.Id.get -> string!
LM.HubSpoke.Models.PersonRef.Id.init -> void
LM.HubSpoke.Models.PersonRef.PersonRef() -> void
LM.HubSpoke.Models.PersonRef.PersonRef(string! Id, string? DisplayName) -> void
LM.HubSpoke.Models.PersonRef.TimestampUtc.get -> System.DateTime?
LM.HubSpoke.Models.PersonRef.TimestampUtc.init -> void
LM.HubSpoke.Models.PublicationHistory
LM.HubSpoke.Models.PublicationHistory.Accepted.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.Accepted.init -> void
LM.HubSpoke.Models.PublicationHistory.Entrez.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.Entrez.init -> void
LM.HubSpoke.Models.PublicationHistory.Medline.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.Medline.init -> void
LM.HubSpoke.Models.PublicationHistory.PublicationHistory() -> void
LM.HubSpoke.Models.PublicationHistory.PubMed.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.PubMed.init -> void
LM.HubSpoke.Models.PublicationHistory.Received.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.Received.init -> void
LM.HubSpoke.Models.PublicationHistory.Revised.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.Revised.init -> void
LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.AheadOfPrint = 1 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.EPublish = 2 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.Medline = 4 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.PPublish = 3 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.PubMedNotMedline = 5 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.Unknown = 0 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PurposeSource
LM.HubSpoke.Models.PurposeSource.Inferred = 0 -> LM.HubSpoke.Models.PurposeSource
LM.HubSpoke.Models.PurposeSource.Manual = 1 -> LM.HubSpoke.Models.PurposeSource
LM.HubSpoke.Models.UtcDateTimeConverter
LM.HubSpoke.Models.UtcDateTimeConverter.UtcDateTimeConverter() -> void
LM.HubSpoke.Spokes.ArticleSpokeHandler
LM.HubSpoke.Spokes.ArticleSpokeHandler.ArticleSpokeHandler() -> void
LM.HubSpoke.Spokes.ArticleSpokeHandler.BuildHookAsync(LM.Core.Models.Entry! entry, LM.HubSpoke.Abstractions.CasResult primary, System.Collections.Generic.IEnumerable<string!>! attachmentRelPaths, System.Func<string!, System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.HubSpoke.Abstractions.CasResult>!>! moveToCas, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.ArticleSpokeHandler.BuildIndex(LM.HubSpoke.Models.EntryHub! hub, object? hookObj, string? fullText) -> LM.HubSpoke.Abstractions.SpokeIndexContribution
LM.HubSpoke.Spokes.ArticleSpokeHandler.Handles.get -> LM.Core.Models.EntryType
LM.HubSpoke.Spokes.ArticleSpokeHandler.HookPath.get -> string!
LM.HubSpoke.Spokes.ArticleSpokeHandler.LoadHookAsync(LM.Core.Abstractions.IWorkSpaceService! ws, string! entryId, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.ArticleSpokeHandler.MapToEntry(LM.HubSpoke.Models.EntryHub! hub, object? hookObj) -> LM.Core.Models.Entry!
LM.HubSpoke.Spokes.DocumentSpokeHandler
LM.HubSpoke.Spokes.DocumentSpokeHandler.BuildHookAsync(LM.Core.Models.Entry! entry, LM.HubSpoke.Abstractions.CasResult primary, System.Collections.Generic.IEnumerable<string!>! attachmentRelPaths, System.Func<string!, System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.HubSpoke.Abstractions.CasResult>!>! moveToCas, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.DocumentSpokeHandler.BuildIndex(LM.HubSpoke.Models.EntryHub! hub, object? hookObj, string? fullText) -> LM.HubSpoke.Abstractions.SpokeIndexContribution
LM.HubSpoke.Spokes.DocumentSpokeHandler.DocumentSpokeHandler() -> void
LM.HubSpoke.Spokes.DocumentSpokeHandler.Handles.get -> LM.Core.Models.EntryType
LM.HubSpoke.Spokes.DocumentSpokeHandler.HookPath.get -> string!
LM.HubSpoke.Spokes.DocumentSpokeHandler.LoadHookAsync(LM.Core.Abstractions.IWorkSpaceService! ws, string! entryId, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.DocumentSpokeHandler.MapToEntry(LM.HubSpoke.Models.EntryHub! hub, object? hookObj) -> LM.Core.Models.Entry!
LM.HubSpoke.Spokes.LitSearchSpokeHandler
LM.HubSpoke.Spokes.LitSearchSpokeHandler.BuildHookAsync(LM.Core.Models.Entry! entry, LM.HubSpoke.Abstractions.CasResult primary, System.Collections.Generic.IEnumerable<string!>! attachmentRelPaths, System.Func<string!, System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.HubSpoke.Abstractions.CasResult>!>! moveToCas, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.LitSearchSpokeHandler.BuildIndex(LM.HubSpoke.Models.EntryHub! hub, object? hookObj, string? extractedFullText) -> LM.HubSpoke.Abstractions.SpokeIndexContribution
LM.HubSpoke.Spokes.LitSearchSpokeHandler.Handles.get -> LM.Core.Models.EntryType
LM.HubSpoke.Spokes.LitSearchSpokeHandler.HookPath.get -> string!
LM.HubSpoke.Spokes.LitSearchSpokeHandler.LitSearchSpokeHandler(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.HubSpoke.Spokes.LitSearchSpokeHandler.LoadHookAsync(LM.Core.Abstractions.IWorkSpaceService! ws, string! entryId, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.LitSearchSpokeHandler.MapToEntry(LM.HubSpoke.Models.EntryHub! hub, object? hookObj) -> LM.Core.Models.Entry!
override LM.HubSpoke.Models.NullableUtcDateTimeConverter.Read(ref System.Text.Json.Utf8JsonReader reader, System.Type! typeToConvert, System.Text.Json.JsonSerializerOptions! options) -> System.DateTime?
override LM.HubSpoke.Models.NullableUtcDateTimeConverter.Write(System.Text.Json.Utf8JsonWriter! writer, System.DateTime? value, System.Text.Json.JsonSerializerOptions! options) -> void
override LM.HubSpoke.Models.UtcDateTimeConverter.Read(ref System.Text.Json.Utf8JsonReader reader, System.Type! typeToConvert, System.Text.Json.JsonSerializerOptions! options) -> System.DateTime
override LM.HubSpoke.Models.UtcDateTimeConverter.Write(System.Text.Json.Utf8JsonWriter! writer, System.DateTime value, System.Text.Json.JsonSerializerOptions! options) -> void
static LM.HubSpoke.Models.EntryNotesSummary.FromLitSearch(LM.HubSpoke.Models.LitSearchNoteSummary! summary, string? renderedText) -> LM.HubSpoke.Models.EntryNotesSummary!
static LM.HubSpoke.Models.EntryNotesSummary.FromRawText(string! text) -> LM.HubSpoke.Models.EntryNotesSummary!
static LM.HubSpoke.Models.PersonRef.Unknown.get -> LM.HubSpoke.Models.PersonRef
static readonly LM.HubSpoke.Models.JsonStd.Options -> System.Text.Json.JsonSerializerOptions!
---------- LM.Review.Core ----------
#nullable enable
LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConflictState.None = 0 -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConflictState.Conflict = 1 -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConflictState.Escalated = 2 -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConflictState.Resolved = 3 -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.Pending = 0 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.InProgress = 1 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.Included = 2 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.Excluded = 3 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.Escalated = 4 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewerRole.Primary = 0 -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewerRole.Secondary = 1 -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewerRole.TieBreaker = 2 -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewerRole.Arbitrator = 3 -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewStageType.TitleScreening = 0 -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewStageType.FullTextReview = 1 -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewStageType.ConsensusMeeting = 2 -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewStageType.QualityAssurance = 3 -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewerDecision
LM.Review.Core.Models.ReviewerDecision.AssignmentId.get -> string!
static LM.Review.Core.Models.ReviewerDecision.Create(string! assignmentId, string! reviewerId, LM.Review.Core.Models.ScreeningStatus decision, System.DateTimeOffset decidedAtUtc, string? notes = null) -> LM.Review.Core.Models.ReviewerDecision!
LM.Review.Core.Models.ReviewerDecision.DecidedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ReviewerDecision.Decision.get -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ReviewerDecision.Notes.get -> string?
LM.Review.Core.Models.ReviewerDecision.ReviewerId.get -> string!
LM.Review.Core.Models.ConsensusOutcome
LM.Review.Core.Models.ConsensusOutcome.Approved.get -> bool
static LM.Review.Core.Models.ConsensusOutcome.Create(string! stageId, bool approved, LM.Review.Core.Models.ConflictState resultingState, System.DateTimeOffset resolvedAtUtc, string? notes = null, string? resolvedBy = null) -> LM.Review.Core.Models.ConsensusOutcome!
LM.Review.Core.Models.ConsensusOutcome.Notes.get -> string?
LM.Review.Core.Models.ConsensusOutcome.ResolvedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ConsensusOutcome.ResolvedBy.get -> string?
LM.Review.Core.Models.ConsensusOutcome.ResultingState.get -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConsensusOutcome.StageId.get -> string!
LM.Review.Core.Models.ReviewAuditTrail
LM.Review.Core.Models.ReviewAuditTrail.Append(LM.Review.Core.Models.ReviewAuditTrail.AuditEntry! entry) -> LM.Review.Core.Models.ReviewAuditTrail!
static LM.Review.Core.Models.ReviewAuditTrail.Create(System.Collections.Generic.IEnumerable<LM.Review.Core.Models.ReviewAuditTrail.AuditEntry!>? entries = null) -> LM.Review.Core.Models.ReviewAuditTrail!
LM.Review.Core.Models.ReviewAuditTrail.Entries.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewAuditTrail.AuditEntry!>!
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Action.get -> string!
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Actor.get -> string!
static LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Create(string! id, string! actor, string! action, System.DateTimeOffset occurredAtUtc, string? details = null) -> LM.Review.Core.Models.ReviewAuditTrail.AuditEntry!
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Details.get -> string?
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Id.get -> string!
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.OccurredAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ReviewProject
LM.Review.Core.Models.ReviewProject.AuditTrail.get -> LM.Review.Core.Models.ReviewAuditTrail!
static LM.Review.Core.Models.ReviewProject.Create(string! id, string! name, System.DateTimeOffset createdAtUtc, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.StageDefinition!>! stageDefinitions, LM.Review.Core.Models.ReviewProjectMetadata? metadata = null, LM.Review.Core.Models.ReviewAuditTrail? auditTrail = null) -> LM.Review.Core.Models.ReviewProject!
LM.Review.Core.Models.ReviewProject.CreatedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ReviewProject.Id.get -> string!
LM.Review.Core.Models.ReviewProject.Name.get -> string!
LM.Review.Core.Models.ReviewProject.Metadata.get -> LM.Review.Core.Models.ReviewProjectMetadata!
LM.Review.Core.Models.ReviewProject.StageDefinitions.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.StageDefinition!>!
LM.Review.Core.Models.ReviewStage
LM.Review.Core.Models.ReviewStage.ActivatedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ReviewStage.Assignments.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ScreeningAssignment!>!
LM.Review.Core.Models.ReviewStage.CompletedAt.get -> System.DateTimeOffset?
LM.Review.Core.Models.ReviewStage.Consensus.get -> LM.Review.Core.Models.ConsensusOutcome?
LM.Review.Core.Models.ReviewStage.ConflictState.get -> LM.Review.Core.Models.ConflictState
static LM.Review.Core.Models.ReviewStage.Create(string! id, string! projectId, LM.Review.Core.Models.StageDefinition! definition, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.ScreeningAssignment!>! assignments, LM.Review.Core.Models.ConflictState conflictState, System.DateTimeOffset activatedAtUtc, System.DateTimeOffset? completedAtUtc = null, LM.Review.Core.Models.ConsensusOutcome? consensus = null) -> LM.Review.Core.Models.ReviewStage!
LM.Review.Core.Models.ReviewStage.Definition.get -> LM.Review.Core.Models.StageDefinition!
LM.Review.Core.Models.ReviewStage.Id.get -> string!
LM.Review.Core.Models.ReviewStage.IsComplete.get -> bool
LM.Review.Core.Models.ReviewStage.ProjectId.get -> string!
LM.Review.Core.Models.StageDefinition
LM.Review.Core.Models.StageDefinition.ConsensusPolicy.get -> LM.Review.Core.Models.StageConsensusPolicy!
static LM.Review.Core.Models.StageDefinition.Create(string! id, string! name, LM.Review.Core.Models.ReviewStageType stageType, LM.Review.Core.Models.ReviewerRequirement! reviewerRequirement, LM.Review.Core.Models.StageConsensusPolicy! consensusPolicy, LM.Review.Core.Models.StageDisplayProfile! displayProfile) -> LM.Review.Core.Models.StageDefinition!
LM.Review.Core.Models.StageDefinition.Id.get -> string!
LM.Review.Core.Models.StageDefinition.Name.get -> string!
LM.Review.Core.Models.StageDefinition.ReviewerRequirement.get -> LM.Review.Core.Models.ReviewerRequirement!
LM.Review.Core.Models.StageDefinition.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.StageDefinition.DisplayProfile.get -> LM.Review.Core.Models.StageDisplayProfile!
LM.Review.Core.Models.StageConsensusPolicy
LM.Review.Core.Models.StageConsensusPolicy.ArbitrationRole.get -> LM.Review.Core.Models.ReviewerRole?
static LM.Review.Core.Models.StageConsensusPolicy.Disabled() -> LM.Review.Core.Models.StageConsensusPolicy!
LM.Review.Core.Models.StageConsensusPolicy.EscalateOnDisagreement.get -> bool
LM.Review.Core.Models.StageConsensusPolicy.MinimumAgreements.get -> int
static LM.Review.Core.Models.StageConsensusPolicy.RequireAgreement(int minimumAgreements, bool escalateOnDisagreement, LM.Review.Core.Models.ReviewerRole? arbitrationRole) -> LM.Review.Core.Models.StageConsensusPolicy!
LM.Review.Core.Models.StageConsensusPolicy.RequiresConsensus.get -> bool
LM.Review.Core.Models.ReviewerRequirement
static LM.Review.Core.Models.ReviewerRequirement.Create(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<LM.Review.Core.Models.ReviewerRole, int>>! requirements) -> LM.Review.Core.Models.ReviewerRequirement!
LM.Review.Core.Models.ReviewerRequirement.GetRequirement(LM.Review.Core.Models.ReviewerRole role) -> int
LM.Review.Core.Models.ReviewerRequirement.Requirements.get -> System.Collections.Generic.IReadOnlyDictionary<LM.Review.Core.Models.ReviewerRole, int>!
LM.Review.Core.Models.ReviewerRequirement.TotalRequired.get -> int
LM.Review.Core.Models.ScreeningAssignment
LM.Review.Core.Models.ScreeningAssignment.AssignedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ScreeningAssignment.CompletedAt.get -> System.DateTimeOffset?
static LM.Review.Core.Models.ScreeningAssignment.Create(string! id, string! stageId, string! reviewerId, LM.Review.Core.Models.ReviewerRole role, LM.Review.Core.Models.ScreeningStatus status, System.DateTimeOffset assignedAtUtc, System.DateTimeOffset? completedAtUtc = null, LM.Review.Core.Models.ReviewerDecision? decision = null) -> LM.Review.Core.Models.ScreeningAssignment!
LM.Review.Core.Models.ScreeningAssignment.Decision.get -> LM.Review.Core.Models.ReviewerDecision?
LM.Review.Core.Models.ScreeningAssignment.Id.get -> string!
LM.Review.Core.Models.ScreeningAssignment.ReviewerId.get -> string!
LM.Review.Core.Models.ScreeningAssignment.Role.get -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ScreeningAssignment.StageId.get -> string!
LM.Review.Core.Models.ScreeningAssignment.Status.get -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.Forms.ExtractionForm
LM.Review.Core.Models.Forms.ExtractionForm.Category.get -> string?
static LM.Review.Core.Models.Forms.ExtractionForm.Create(string! id, string! name, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.Forms.FormSection!>! sections, string? description = null, string? category = null) -> LM.Review.Core.Models.Forms.ExtractionForm!
LM.Review.Core.Models.Forms.ExtractionForm.Description.get -> string?
LM.Review.Core.Models.Forms.ExtractionForm.Id.get -> string!
LM.Review.Core.Models.Forms.ExtractionForm.Name.get -> string!
LM.Review.Core.Models.Forms.ExtractionForm.Sections.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.Forms.FormSection!>!
LM.Review.Core.Models.Forms.FormField
LM.Review.Core.Models.Forms.FormField.AllowFreeTextFallback.get -> bool
LM.Review.Core.Models.Forms.FormField.Description.get -> string?
LM.Review.Core.Models.Forms.FormField.FieldType.get -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormField.Id.get -> string!
LM.Review.Core.Models.Forms.FormField.Options.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.Forms.FormFieldOption!>!
LM.Review.Core.Models.Forms.FormField.Title.get -> string!
LM.Review.Core.Models.Forms.FormField.Validation.get -> LM.Review.Core.Models.Forms.FormFieldValidation?
LM.Review.Core.Models.Forms.FormField.Visibility.get -> LM.Review.Core.Models.Forms.FormVisibilityRule?
static LM.Review.Core.Models.Forms.FormField.Create(string! id, string! title, LM.Review.Core.Models.Forms.FormFieldType fieldType, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.Forms.FormFieldOption!>? options = null, string? description = null, LM.Review.Core.Models.Forms.FormFieldValidation? validation = null, LM.Review.Core.Models.Forms.FormVisibilityRule? visibility = null, bool allowFreeTextFallback = false) -> LM.Review.Core.Models.Forms.FormField!
LM.Review.Core.Models.Forms.FormFieldOption
LM.Review.Core.Models.Forms.FormFieldOption.Description.get -> string?
LM.Review.Core.Models.Forms.FormFieldOption.Id.get -> string!
LM.Review.Core.Models.Forms.FormFieldOption.IsDefault.get -> bool
LM.Review.Core.Models.Forms.FormFieldOption.Label.get -> string!
static LM.Review.Core.Models.Forms.FormFieldOption.Create(string! id, string! label, string? description = null, bool isDefault = false) -> LM.Review.Core.Models.Forms.FormFieldOption!
LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.SingleSelect = 0 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.MultiSelect = 1 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.Text = 2 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.Numeric = 3 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.Date = 4 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.Reference = 5 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldValidation
LM.Review.Core.Models.Forms.FormFieldValidation.Expression.get -> string?
LM.Review.Core.Models.Forms.FormFieldValidation.Maximum.get -> decimal?
LM.Review.Core.Models.Forms.FormFieldValidation.MaximumDateUtc.get -> System.DateTime?
LM.Review.Core.Models.Forms.FormFieldValidation.Minimum.get -> decimal?
LM.Review.Core.Models.Forms.FormFieldValidation.MinimumDateUtc.get -> System.DateTime?
LM.Review.Core.Models.Forms.FormFieldValidation.Mode.get -> LM.Review.Core.Models.Forms.FormValidationMode
static LM.Review.Core.Models.Forms.FormFieldValidation.CreateDateRange(System.DateTime? minimumUtc, System.DateTime? maximumUtc) -> LM.Review.Core.Models.Forms.FormFieldValidation!
static LM.Review.Core.Models.Forms.FormFieldValidation.CreateNumericRange(decimal? minimum, decimal? maximum) -> LM.Review.Core.Models.Forms.FormFieldValidation!
static LM.Review.Core.Models.Forms.FormFieldValidation.CreateRegex(string! pattern) -> LM.Review.Core.Models.Forms.FormFieldValidation!
static LM.Review.Core.Models.Forms.FormFieldValidation.CreateRequired() -> LM.Review.Core.Models.Forms.FormFieldValidation!
LM.Review.Core.Models.Forms.FormIdentifier
static bool LM.Review.Core.Models.Forms.FormIdentifier.IsNormalized(string! identifier) -> bool
static string LM.Review.Core.Models.Forms.FormIdentifier.Normalize(string! identifier) -> string!
LM.Review.Core.Models.Forms.FormSection
LM.Review.Core.Models.Forms.FormSection.Children.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.Forms.FormSection!>!
LM.Review.Core.Models.Forms.FormSection.Description.get -> string?
LM.Review.Core.Models.Forms.FormSection.Fields.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.Forms.FormField!>!
LM.Review.Core.Models.Forms.FormSection.Id.get -> string!
LM.Review.Core.Models.Forms.FormSection.IsRepeatable.get -> bool
LM.Review.Core.Models.Forms.FormSection.Title.get -> string!
LM.Review.Core.Models.Forms.FormSection.Visibility.get -> LM.Review.Core.Models.Forms.FormVisibilityRule?
static LM.Review.Core.Models.Forms.FormSection.Create(string! id, string! title, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.Forms.FormField!>! fields, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.Forms.FormSection!>? children = null, bool isRepeatable = false, string? description = null, LM.Review.Core.Models.Forms.FormVisibilityRule? visibility = null) -> LM.Review.Core.Models.Forms.FormSection!
LM.Review.Core.Models.Forms.FormValidationMode
LM.Review.Core.Models.Forms.FormValidationMode.Required = 0 -> LM.Review.Core.Models.Forms.FormValidationMode
LM.Review.Core.Models.Forms.FormValidationMode.Range = 1 -> LM.Review.Core.Models.Forms.FormValidationMode
LM.Review.Core.Models.Forms.FormValidationMode.Regex = 2 -> LM.Review.Core.Models.Forms.FormValidationMode
LM.Review.Core.Models.Forms.FormVisibilityRule
LM.Review.Core.Models.Forms.FormVisibilityRule.ExpectedValues.get -> System.Collections.Generic.IReadOnlyList<string>!
LM.Review.Core.Models.Forms.FormVisibilityRule.IsVisibleWhenMatches.get -> bool
LM.Review.Core.Models.Forms.FormVisibilityRule.SourceFieldId.get -> string!
static LM.Review.Core.Models.Forms.FormVisibilityRule.Create(string! sourceFieldId, System.Collections.Generic.IEnumerable<string>? expectedValues = null, bool isVisibleWhenMatches = true) -> LM.Review.Core.Models.Forms.FormVisibilityRule!
LM.Review.Core.Models.Forms.ExtractionFormSnapshot
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.CapturedBy.get -> string!
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.CapturedUtc.get -> System.DateTime
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.FormId.get -> string!
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.Values.get -> System.Collections.Generic.IReadOnlyDictionary<string, object?>!
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.VersionId.get -> string!
static LM.Review.Core.Models.Forms.ExtractionFormSnapshot.Create(string! formId, string! versionId, System.Collections.Generic.IDictionary<string, object?>! values, string? capturedBy = null, System.DateTime? capturedUtc = null) -> LM.Review.Core.Models.Forms.ExtractionFormSnapshot!
LM.Review.Core.Models.Forms.ExtractionFormVersion
LM.Review.Core.Models.Forms.ExtractionFormVersion.CreatedBy.get -> string!
LM.Review.Core.Models.Forms.ExtractionFormVersion.CreatedUtc.get -> System.DateTime
LM.Review.Core.Models.Forms.ExtractionFormVersion.Form.get -> LM.Review.Core.Models.Forms.ExtractionForm!
LM.Review.Core.Models.Forms.ExtractionFormVersion.Metadata.get -> System.Collections.Generic.IReadOnlyDictionary<string, string>!
LM.Review.Core.Models.Forms.ExtractionFormVersion.VersionId.get -> string!
static LM.Review.Core.Models.Forms.ExtractionFormVersion.Create(string! versionId, LM.Review.Core.Models.Forms.ExtractionForm! form, System.Collections.Generic.IDictionary<string, string>? metadata = null, string? createdBy = null, System.DateTime? createdUtc = null) -> LM.Review.Core.Models.Forms.ExtractionFormVersion!
LM.Review.Core.Validation.FormSchemaIssue
LM.Review.Core.Validation.FormSchemaIssue.Code.get -> string!
LM.Review.Core.Validation.FormSchemaIssue.FieldId.get -> string?
LM.Review.Core.Validation.FormSchemaIssue.Message.get -> string!
LM.Review.Core.Validation.FormSchemaIssue.SectionId.get -> string?
LM.Review.Core.Validation.FormSchemaIssue.Severity.get -> LM.Review.Core.Validation.FormSchemaSeverity
static LM.Review.Core.Validation.FormSchemaIssue.Error(string! code, string! message, string? sectionId = null, string? fieldId = null) -> LM.Review.Core.Validation.FormSchemaIssue!
static LM.Review.Core.Validation.FormSchemaIssue.Warning(string! code, string! message, string? sectionId = null, string? fieldId = null) -> LM.Review.Core.Validation.FormSchemaIssue!
LM.Review.Core.Validation.FormSchemaSeverity
LM.Review.Core.Validation.FormSchemaSeverity.Warning = 0 -> LM.Review.Core.Validation.FormSchemaSeverity
LM.Review.Core.Validation.FormSchemaSeverity.Error = 1 -> LM.Review.Core.Validation.FormSchemaSeverity
LM.Review.Core.Validation.FormSchemaValidator
LM.Review.Core.Validation.FormSchemaValidator.Validate(LM.Review.Core.Models.Forms.ExtractionForm! form) -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Validation.FormSchemaIssue!>!
LM.Review.Core.Validation.FormSchemaValidator.Validate(LM.Review.Core.Models.Forms.ExtractionFormSnapshot! snapshot, LM.Review.Core.Models.Forms.ExtractionFormVersion! version) -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Validation.FormSchemaIssue!>!
LM.Review.Core.Validation.FormSchemaValidator.Validate(LM.Review.Core.Models.Forms.ExtractionFormVersion! version) -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Validation.FormSchemaIssue!>!
#nullable enable
LM.Review.Core.Services.IReviewHookContext
LM.Review.Core.Services.IReviewHookContextFactory
LM.Review.Core.Services.IReviewHookContextFactory.CreateAssignmentUpdated(LM.Review.Core.Models.ReviewStage! stage, LM.Review.Core.Models.ScreeningAssignment! assignment) -> LM.Review.Core.Services.IReviewHookContext!
LM.Review.Core.Services.IReviewHookContextFactory.CreateReviewerDecisionRecorded(LM.Review.Core.Models.ScreeningAssignment! assignment, LM.Review.Core.Models.ReviewerDecision! decision) -> LM.Review.Core.Services.IReviewHookContext!
LM.Review.Core.Services.IReviewHookContextFactory.CreateStageTransition(LM.Review.Core.Models.ReviewStage! stage, LM.Review.Core.Models.ConflictState previousState, LM.Review.Core.Models.ConflictState currentState) -> LM.Review.Core.Services.IReviewHookContext!
LM.Review.Core.Services.IReviewHookOrchestrator
LM.Review.Core.Services.IReviewHookOrchestrator.ProcessAsync(string! entryId, LM.Review.Core.Services.IReviewHookContext! context, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Review.Core.Services.IReviewWorkflowService
LM.Review.Core.Services.IReviewWorkflowService.CreateStageAsync(string! projectId, string! stageDefinitionId, System.Collections.Generic.IReadOnlyCollection<LM.Review.Core.Services.ReviewerAssignmentRequest!>! assignments, System.Threading.CancellationToken cancellationToken = default) -> LM.Review.Core.Models.ReviewStage!
LM.Review.Core.Services.IReviewWorkflowService.SubmitDecisionAsync(string! assignmentId, LM.Review.Core.Models.ScreeningStatus decision, string? notes, System.Threading.CancellationToken cancellationToken = default) -> LM.Review.Core.Models.ScreeningAssignment!
LM.Review.Core.Services.IReviewWorkflowStore
LM.Review.Core.Services.IReviewWorkflowStore.GetAssignmentAsync(string! assignmentId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ScreeningAssignment?>!
LM.Review.Core.Services.IReviewWorkflowStore.GetAssignmentsByStageAsync(string! stageId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ScreeningAssignment!>>!
LM.Review.Core.Services.IReviewWorkflowStore.GetProjectAsync(string! projectId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ReviewProject?>!
LM.Review.Core.Services.IReviewWorkflowStore.GetProjectsAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewProject!>!>!
LM.Review.Core.Services.IReviewWorkflowStore.GetStageAsync(string! stageId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ReviewStage?>!
LM.Review.Core.Services.IReviewWorkflowStore.GetStagesByProjectAsync(string! projectId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStage!>>!
LM.Review.Core.Services.IReviewWorkflowStore.SaveAssignmentAsync(string! projectId, LM.Review.Core.Models.ScreeningAssignment! assignment, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Review.Core.Services.IReviewWorkflowStore.SaveProjectAsync(LM.Review.Core.Models.ReviewProject! project, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Review.Core.Services.IReviewWorkflowStore.SaveStageAsync(LM.Review.Core.Models.ReviewStage! stage, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Review.Core.Services.ReviewWorkflowService
LM.Review.Core.Services.ReviewWorkflowService.CreateStageAsync(string! projectId, string! stageDefinitionId, System.Collections.Generic.IReadOnlyCollection<LM.Review.Core.Services.ReviewerAssignmentRequest!>! assignments, System.Threading.CancellationToken cancellationToken = default) -> LM.Review.Core.Models.ReviewStage!
LM.Review.Core.Services.ReviewWorkflowService.ReviewWorkflowService(LM.Review.Core.Services.IReviewWorkflowStore! store, LM.Review.Core.Services.IReviewHookOrchestrator! hookOrchestrator, LM.Review.Core.Services.IReviewHookContextFactory! hookContextFactory, System.TimeProvider? timeProvider = null)
LM.Review.Core.Services.ReviewWorkflowService.SubmitDecisionAsync(string! assignmentId, LM.Review.Core.Models.ScreeningStatus decision, string? notes, System.Threading.CancellationToken cancellationToken = default) -> LM.Review.Core.Models.ScreeningAssignment!
LM.Review.Core.Services.ReviewerAssignmentRequest
LM.Review.Core.Services.ReviewerAssignmentRequest.ReviewerAssignmentRequest(string! ReviewerId, LM.Review.Core.Models.ReviewerRole Role)
LM.Review.Core.Services.ReviewerAssignmentRequest.ReviewerId.get -> string!
LM.Review.Core.Services.ReviewerAssignmentRequest.ReviewerId.init -> void
LM.Review.Core.Services.ReviewerAssignmentRequest.Role.get -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Services.ReviewerAssignmentRequest.Role.init -> void
LM.Review.Core.Models.ReviewStageType.DataExtraction = 4 -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewProjectMetadata
static LM.Review.Core.Models.ReviewProjectMetadata.Create(LM.Review.Core.Models.ReviewTemplateKind template, string? notes) -> LM.Review.Core.Models.ReviewProjectMetadata!
LM.Review.Core.Models.ReviewProjectMetadata.Notes.get -> string!
LM.Review.Core.Models.ReviewProjectMetadata.Template.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.ReviewTemplateKind.Custom = 1 -> LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.ReviewTemplateKind.DataExtraction = 3 -> LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.ReviewTemplateKind.Picos = 0 -> LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.ReviewTemplateKind.RapidAssessment = 2 -> LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.BibliographySummary = 0 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.DataExtractionWorkspace = 4 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.FullTextViewer = 2 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.InclusionExclusionChecklist = 1 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.NotesPane = 5 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.ReviewerDecisionPanel = 3 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageDisplayProfile
static LM.Review.Core.Models.StageDisplayProfile.Create(System.Collections.Generic.IEnumerable<LM.Review.Core.Models.StageContentArea!>! contentAreas) -> LM.Review.Core.Models.StageDisplayProfile!
LM.Review.Core.Models.StageDisplayProfile.ContentAreas.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.StageContentArea>!
---------- LM.Infrastructure ----------
#nullable enable
#nullable enable
LM.Infrastructure.Content.CompositeContentExtractor
LM.Infrastructure.Content.CompositeContentExtractor.CompositeContentExtractor() -> void
LM.Infrastructure.Content.CompositeContentExtractor.ExtractTextAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Content.OpenXmlContentExtractor
LM.Infrastructure.Content.OpenXmlContentExtractor.ExtractTextAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Content.OpenXmlContentExtractor.OpenXmlContentExtractor() -> void
LM.Infrastructure.Content.PdfPigContentExtractor
LM.Infrastructure.Content.PdfPigContentExtractor.ExtractTextAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Content.PdfPigContentExtractor.PdfPigContentExtractor() -> void
LM.Infrastructure.Content.PlainTextContentExtractor
LM.Infrastructure.Content.PlainTextContentExtractor.ExtractTextAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Content.PlainTextContentExtractor.PlainTextContentExtractor() -> void
LM.Infrastructure.Entries.JsonEntryStore
LM.Infrastructure.Entries.JsonEntryStore.EnumerateAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<LM.Core.Models.Entry!>!
LM.Infrastructure.Entries.JsonEntryStore.FindByHashAsync(string! sha256, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Infrastructure.Entries.JsonEntryStore.FindByIdsAsync(string? doi, string? pmid, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Infrastructure.Entries.JsonEntryStore.FindSimilarByNameYearAsync(string! title, int? year, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.Infrastructure.Entries.JsonEntryStore.GetByIdAsync(string! id, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Infrastructure.Entries.JsonEntryStore.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Infrastructure.Entries.JsonEntryStore.JsonEntryStore(LM.Core.Abstractions.IWorkSpaceService! ws, LM.Core.Abstractions.IDoiNormalizer? doiNormalizer = null, LM.Core.Abstractions.IPmidNormalizer? pmidNormalizer = null) -> void
LM.Infrastructure.Entries.JsonEntryStore.SaveAsync(LM.Core.Models.Entry! entry, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Infrastructure.Entries.JsonEntryStore.SearchAsync(LM.Core.Models.Filters.EntryFilter! f, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.Infrastructure.Entries.EntryTagVocabularyProvider
LM.Infrastructure.Entries.EntryTagVocabularyProvider.EntryTagVocabularyProvider(LM.Core.Abstractions.IEntryStore! store) -> void
LM.Infrastructure.Entries.EntryTagVocabularyProvider.GetAllTagsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>!>!
LM.Infrastructure.Export.MetadataDebugSlideExporter
LM.Infrastructure.Export.MetadataDebugSlideExporter.ExportAsync(System.Collections.Generic.IEnumerable<LM.Core.Models.FileMetadata!>! items, string! outPath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Export.MetadataDebugSlideExporter.MetadataDebugSlideExporter() -> void
LM.Infrastructure.FileSystem.WorkspaceService
LM.Infrastructure.FileSystem.WorkspaceService.EnsureWorkspaceAsync(string! absoluteWorkspacePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Infrastructure.FileSystem.WorkspaceService.GetAbsolutePath(string! relativePath) -> string!
LM.Infrastructure.FileSystem.WorkspaceService.GetLocalDbPath() -> string!
LM.Infrastructure.FileSystem.WorkspaceService.GetWorkspaceRoot() -> string!
LM.Infrastructure.FileSystem.WorkspaceService.WorkspacePath.get -> string?
LM.Infrastructure.FileSystem.WorkspaceService.WorkspaceService() -> void
LM.Infrastructure.FileSystem.WorkspacePreferenceStore
LM.Infrastructure.FileSystem.WorkspacePreferenceStore.SetLastWorkspacePath(string! workspacePath) -> void
LM.Infrastructure.FileSystem.WorkspacePreferenceStore.TryGetLastWorkspacePath() -> string?
LM.Infrastructure.FileSystem.WorkspacePreferenceStore.WorkspacePreferenceStore(string? settingsFilePath = null) -> void
LM.Infrastructure.Hooks.ArticleHookFactory
LM.Infrastructure.Hooks.HookContext
LM.Infrastructure.Hooks.HookContext.Article.get -> LM.HubSpoke.Models.ArticleHook?
LM.Infrastructure.Hooks.HookContext.Article.init -> void
LM.Infrastructure.Hooks.HookContext.Attachments.get -> LM.HubSpoke.Models.AttachmentHook?
LM.Infrastructure.Hooks.HookContext.Attachments.init -> void
LM.Infrastructure.Hooks.HookContext.ChangeLog.get -> LM.HubSpoke.Models.EntryChangeLogHook?
LM.Infrastructure.Hooks.HookContext.ChangeLog.init -> void
LM.Infrastructure.Hooks.HookContext.HookContext() -> void
LM.Infrastructure.Hooks.HookOrchestrator
LM.Infrastructure.Hooks.HookOrchestrator.HookOrchestrator(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Hooks.HookOrchestrator.ProcessAsync(string! entryId, LM.Infrastructure.Hooks.HookContext! ctx, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.Infrastructure.Hooks.HookPersister
LM.Infrastructure.Hooks.HookPersister.HookPersister(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Hooks.HookPersister.SaveArticleIfAnyAsync(string! entryId, LM.HubSpoke.Models.ArticleHook? hook, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.Infrastructure.Metadata.CompositeMetadataExtractor
LM.Infrastructure.Metadata.CompositeMetadataExtractor.CompositeMetadataExtractor(LM.Core.Abstractions.IContentExtractor! content) -> void
LM.Infrastructure.Metadata.CompositeMetadataExtractor.ExtractAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.FileMetadata!>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetAssignmentsByStageAsync(string! stageId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ScreeningAssignment!>!>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetStagesByProjectAsync(string! projectId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStage!>!>!
LM.Infrastructure.Search.ClinicalTrialsGovSearchProvider
LM.Infrastructure.Search.ClinicalTrialsGovSearchProvider.ClinicalTrialsGovSearchProvider() -> void
LM.Infrastructure.Search.ClinicalTrialsGovSearchProvider.Database.get -> LM.Core.Models.SearchDatabase
LM.Infrastructure.Search.ClinicalTrialsGovSearchProvider.SearchAsync(string! query, System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.SearchHit!>!>!
LM.Infrastructure.PubMed.PubMedClient
LM.Infrastructure.PubMed.PubMedClient.PubMedClient() -> void
LM.Infrastructure.PubMed.PubMedClient.TryGetByDoiAsync(string! doi, bool includeCitedBy, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<LM.Core.Models.PublicationRecord?>!
LM.Infrastructure.Pdf.PdfAnnotationPersistenceService
LM.Infrastructure.Pdf.PdfAnnotationPersistenceService.PdfAnnotationPersistenceService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Pdf.PdfAnnotationPersistenceService.PersistAsync(string! entryId, string! pdfHash, string! overlayJson, System.Collections.Generic.IReadOnlyDictionary<string!, byte[]!>! previewImages, string? overlaySidecarRelativePath, string? pdfRelativePath, System.Collections.Generic.IReadOnlyList<LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata!>! annotations, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Infrastructure.Pdf.PdfAnnotationPreviewStorage
LM.Infrastructure.Pdf.PdfAnnotationPreviewStorage.PdfAnnotationPreviewStorage(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Pdf.PdfAnnotationPreviewStorage.SaveAsync(string! pdfHash, string! annotationId, byte[]! pngBytes, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Pdf.PdfAnnotationOverlayReader
LM.Infrastructure.Pdf.PdfAnnotationOverlayReader.PdfAnnotationOverlayReader(LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IEntryStore! entryStore) -> void
LM.Infrastructure.Pdf.PdfAnnotationOverlayReader.GetOverlayJsonAsync(string! entryId, string! pdfHash, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string?>!
LM.Infrastructure.Search.PubMedSearchProvider
LM.Infrastructure.Search.PubMedSearchProvider.PubMedSearchProvider() -> void
LM.Infrastructure.Search.PubMedSearchProvider.Database.get -> LM.Core.Models.SearchDatabase
LM.Infrastructure.Search.PubMedSearchProvider.SearchAsync(string! query, System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.SearchHit!>!>!
LM.Infrastructure.Search.PubMedSearchProvider.FetchFullRecordXmlAsync(string! pubmedId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string?>!
LM.Infrastructure.Search.SearchExecutionService
LM.Infrastructure.Search.SearchExecutionService.SearchExecutionService(System.Collections.Generic.IEnumerable<LM.Core.Abstractions.Search.ISearchProvider!>! providers, LM.Core.Abstractions.IEntryStore! store) -> void
LM.Infrastructure.Search.SearchExecutionService.ExecuteAsync(LM.Core.Models.Search.SearchExecutionRequest! request, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Search.SearchExecutionResult!>!
LM.Infrastructure.Settings.JsonWatchedFolderSettingsStore
LM.Infrastructure.Storage.FileStorageService
LM.Infrastructure.Storage.FileStorageService.FileStorageService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Storage.FileStorageService.SaveNewAsync(string! sourcePath, string! relativeTargetDir, string? preferredFileName = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Text.DoiNormalizer
LM.Infrastructure.Text.DoiNormalizer.DoiNormalizer() -> void
LM.Infrastructure.Text.DoiNormalizer.Normalize(string? raw) -> string?
LM.Infrastructure.Text.PmidNormalizer
LM.Infrastructure.Text.PmidNormalizer.Normalize(string? raw) -> string?
LM.Infrastructure.Text.PmidNormalizer.PmidNormalizer() -> void
LM.Infrastructure.Utils.BibliographyHelper
LM.Infrastructure.Utils.ContentAwareSimilarityService
LM.Infrastructure.Utils.ContentAwareSimilarityService.ComputeFileSimilarityAsync(string! filePathA, string! filePathB, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
LM.Infrastructure.Utils.ContentAwareSimilarityService.ContentAwareSimilarityService(LM.Core.Abstractions.IContentExtractor! extractor) -> void
LM.Infrastructure.Utils.HashingService
LM.Infrastructure.Utils.HashingService.ComputeSha256Async(string! filePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Utils.HashingService.HashingService() -> void
LM.Infrastructure.Utils.SimilarityService
LM.Infrastructure.Utils.SimilarityService.ComputeFileSimilarityAsync(string! filePathA, string! filePathB, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
LM.Infrastructure.Utils.SimilarityService.SimilarityService() -> void
LM.Infrastructure.Utils.TagMerger
LM.Infrastructure.Utils.TagNormalizer
static LM.Infrastructure.Hooks.ArticleHookFactory.CreateFromPublication(LM.Core.Models.PublicationRecord! r) -> LM.HubSpoke.Models.ArticleHook!
static LM.Infrastructure.Utils.BibliographyHelper.GenerateShortTitle(string? title, System.Collections.Generic.IEnumerable<string!>! authors, string? source, int? year) -> string!
static LM.Infrastructure.Utils.TagMerger.Merge(string? existingCsv, System.Collections.Generic.IEnumerable<string!>? add) -> string?
LM.Infrastructure.Settings.JsonWatchedFolderSettingsStore.JsonWatchedFolderSettingsStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Settings.JsonWatchedFolderSettingsStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.WatchedFolderSettings!>!
LM.Infrastructure.Settings.JsonWatchedFolderSettingsStore.SaveAsync(LM.Core.Models.WatchedFolderSettings! settings, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Infrastructure.Settings.JsonSearchHistoryStore
LM.Infrastructure.Settings.JsonSearchHistoryStore.JsonSearchHistoryStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Settings.JsonSearchHistoryStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Search.SearchHistoryDocument!>!
LM.Infrastructure.Settings.JsonSearchHistoryStore.SaveAsync(LM.Core.Models.Search.SearchHistoryDocument! document, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Infrastructure.Settings.JsonUserPreferencesStore
LM.Infrastructure.Settings.JsonUserPreferencesStore.JsonUserPreferencesStore() -> void
LM.Infrastructure.Settings.JsonUserPreferencesStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.UserPreferences!>!
LM.Infrastructure.Settings.JsonUserPreferencesStore.SaveAsync(LM.Core.Models.UserPreferences! preferences, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
static LM.Infrastructure.Utils.TagNormalizer.SplitAndNormalize(string! raw) -> System.Collections.Generic.IEnumerable<string!>!
LM.Infrastructure.Review.ReviewHookContextFactory
LM.Infrastructure.Review.ReviewHookContextFactory.CreateProjectCreated(LM.Review.Core.Models.ReviewProject! project) -> LM.Review.Core.Services.IReviewHookContext!
LM.Infrastructure.Review.ReviewHookContextFactory.CreateAssignmentUpdated(LM.Review.Core.Models.ReviewStage! stage, LM.Review.Core.Models.ScreeningAssignment! assignment) -> LM.Review.Core.Services.IReviewHookContext!
LM.Infrastructure.Review.ReviewHookContextFactory.CreateConsensusResolved(LM.Review.Core.Models.ReviewStage! stage, LM.Review.Core.Models.ConsensusOutcome! consensus) -> LM.Review.Core.Services.IReviewHookContext!
LM.Infrastructure.Review.ReviewHookContextFactory.CreateReviewerDecisionRecorded(LM.Review.Core.Models.ScreeningAssignment! assignment, LM.Review.Core.Models.ReviewerDecision! decision) -> LM.Review.Core.Services.IReviewHookContext!
LM.Infrastructure.Review.ReviewHookContextFactory.CreateStageTransition(LM.Review.Core.Models.ReviewStage! stage, LM.Review.Core.Models.ConflictState previousState, LM.Review.Core.Models.ConflictState currentState) -> LM.Review.Core.Services.IReviewHookContext!
LM.Infrastructure.Review.ReviewHookContextFactory.ReviewHookContextFactory() -> void
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetAssignmentAsync(string! assignmentId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ScreeningAssignment?>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetProjectAsync(string! projectId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ReviewProject?>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetProjectsAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewProject!>!>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetStageAsync(string! stageId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ReviewStage?>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.SaveAssignmentAsync(string! projectId, LM.Review.Core.Models.ScreeningAssignment! assignment, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.SaveProjectAsync(LM.Review.Core.Models.ReviewProject! project, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.SaveStageAsync(LM.Review.Core.Models.ReviewStage! stage, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.WorkspaceReviewWorkflowStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
---------- LM.Core ----------
#nullable enable
#nullable enable
IPublicationLookup
IPublicationLookup.TryGetByDoiAsync(string! doi, bool includeCitedBy, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<LM.Core.Models.PublicationRecord?>!
LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore
LM.Core.Abstractions.IContentExtractor
LM.Core.Abstractions.IContentExtractor.ExtractTextAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Core.Abstractions.IEntryStore
LM.Core.Abstractions.IEntryStore.EnumerateAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<LM.Core.Models.Entry!>!
LM.Core.Abstractions.IEntryStore.FindByHashAsync(string! sha256, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Core.Abstractions.IEntryStore.FindByIdsAsync(string? doi, string? pmid, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Core.Abstractions.IEntryStore.FindSimilarByNameYearAsync(string! title, int? year, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.Core.Abstractions.IEntryStore.GetByIdAsync(string! id, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Core.Abstractions.IEntryStore.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.IEntryStore.SaveAsync(LM.Core.Models.Entry! entry, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.IEntryStore.SearchAsync(LM.Core.Models.Filters.EntryFilter! filter, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.Core.Abstractions.IFullTextSearchService
LM.Core.Abstractions.IFullTextSearchService.SearchAsync(LM.Core.Models.Search.FullTextSearchQuery! query, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.FullTextSearchHit!>!>!
LM.Core.Abstractions.Search.ISearchExecutionService
LM.Core.Abstractions.Search.ISearchExecutionService.ExecuteAsync(LM.Core.Models.Search.SearchExecutionRequest! request, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Search.SearchExecutionResult!>!
LM.Core.Abstractions.Search.ISearchProvider
LM.Core.Abstractions.Search.ISearchProvider.Database.get -> LM.Core.Models.SearchDatabase
LM.Core.Abstractions.Search.ISearchProvider.SearchAsync(string! query, System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.SearchHit!>!>!
LM.Core.Abstractions.IFileStorageRepository
LM.Core.Abstractions.IFileStorageRepository.SaveNewAsync(string! sourcePath, string! relativeTargetDir, string? preferredFileName = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Core.Abstractions.IHasher
LM.Core.Abstractions.IHasher.ComputeSha256Async(string! filePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Core.Abstractions.IPdfAnnotationPersistenceService
LM.Core.Abstractions.IPdfAnnotationPersistenceService.PersistAsync(string! entryId, string! pdfHash, string! overlayJson, System.Collections.Generic.IReadOnlyDictionary<string!, byte[]!>! previewImages, string? overlaySidecarRelativePath, string? pdfRelativePath, System.Collections.Generic.IReadOnlyList<LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata!>! annotations, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata.AnnotationId.get -> string!
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata.Note.get -> string?
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata.ColorHex.get -> string?
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata.PdfAnnotationBridgeMetadata(string! annotationId, string? text, string? note, string? colorHex = null) -> void
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata.Text.get -> string?
LM.Core.Abstractions.IPdfAnnotationPreviewStorage
LM.Core.Abstractions.IPdfAnnotationPreviewStorage.SaveAsync(string! pdfHash, string! annotationId, byte[]! pngBytes, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<string!>!
LM.Core.Abstractions.IPdfAnnotationOverlayReader
LM.Core.Abstractions.IPdfAnnotationOverlayReader.GetOverlayJsonAsync(string! entryId, string! pdfHash, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string?>!
LM.Core.Abstractions.IMetadataDebugSlideExporter
LM.Core.Abstractions.IMetadataDebugSlideExporter.ExportAsync(System.Collections.Generic.IEnumerable<LM.Core.Models.FileMetadata!>! items, string! outputPath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Core.Abstractions.IMetadataExtractor
LM.Core.Abstractions.IMetadataExtractor.ExtractAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.FileMetadata!>!
LM.Core.Abstractions.IPmidNormalizer
LM.Core.Abstractions.IPmidNormalizer.Normalize(string? raw) -> string?
LM.Core.Abstractions.ISimilarityService
LM.Core.Abstractions.ISimilarityService.ComputeFileSimilarityAsync(string! filePathA, string! filePathB, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
LM.Core.Abstractions.ITagVocabularyProvider
LM.Core.Abstractions.ITagVocabularyProvider.GetAllTagsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>!>!
LM.Core.Abstractions.IWorkSpaceService
LM.Core.Abstractions.IWorkSpaceService.EnsureWorkspaceAsync(string! absoluteWorkspacePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.IWorkSpaceService.GetAbsolutePath(string! relativePath) -> string!
LM.Core.Abstractions.IWorkSpaceService.GetLocalDbPath() -> string!
LM.Core.Abstractions.IWorkSpaceService.GetWorkspaceRoot() -> string!
LM.Core.Abstractions.IWorkSpaceService.WorkspacePath.get -> string?
LM.Core.Abstractions.IDoiNormalizer
LM.Core.Abstractions.IDoiNormalizer.Normalize(string? raw) -> string?
LM.Core.Models.AbstractSection
LM.Core.Models.AbstractSection.Label.get -> string?
LM.Core.Models.AbstractSection.Label.init -> void
LM.Core.Models.AbstractSection.Text.get -> string?
LM.Core.Models.AbstractSection.Text.init -> void
LM.Core.Models.Attachment
LM.Core.Models.Attachment.Attachment() -> void
LM.Core.Models.Attachment.Id.get -> string!
LM.Core.Models.Attachment.Id.set -> void
LM.Core.Models.Attachment.Notes.get -> string?
LM.Core.Models.Attachment.Notes.set -> void
LM.Core.Models.Attachment.RelativePath.get -> string!
LM.Core.Models.Attachment.RelativePath.set -> void
LM.Core.Models.Attachment.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Attachment.Tags.set -> void
LM.Core.Models.Attachment.Title.get -> string!
LM.Core.Models.Attachment.Title.set -> void
LM.Core.Models.Attachment.Kind.get -> LM.Core.Models.AttachmentKind
LM.Core.Models.Attachment.Kind.set -> void
LM.Core.Models.Attachment.AddedBy.get -> string!
LM.Core.Models.Attachment.AddedBy.set -> void
LM.Core.Models.Attachment.AddedUtc.get -> System.DateTime
LM.Core.Models.Attachment.AddedUtc.set -> void
LM.Core.Models.AttachmentKind
LM.Core.Models.AttachmentKind.Supplement = 0 -> LM.Core.Models.AttachmentKind
LM.Core.Models.AttachmentKind.Version = 1 -> LM.Core.Models.AttachmentKind
LM.Core.Models.AttachmentKind.Presentation = 2 -> LM.Core.Models.AttachmentKind
LM.Core.Models.AttachmentKind.ExternalNotes = 3 -> LM.Core.Models.AttachmentKind
LM.Core.Models.AttachmentKind.Metadata = 4 -> LM.Core.Models.AttachmentKind
LM.Core.Models.AuthorName
LM.Core.Models.AuthorName.Affiliations.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.AuthorName.Affiliations.init -> void
LM.Core.Models.AuthorName.CollectiveName.get -> string?
LM.Core.Models.AuthorName.CollectiveName.init -> void
LM.Core.Models.AuthorName.Family.get -> string?
LM.Core.Models.AuthorName.Family.init -> void
LM.Core.Models.AuthorName.Given.get -> string?
LM.Core.Models.AuthorName.Given.init -> void
LM.Core.Models.AuthorName.LastFromLiteral() -> string?
LM.Core.Models.AuthorName.Literal.get -> string?
LM.Core.Models.AuthorName.Literal.init -> void
LM.Core.Models.AuthorName.Orcid.get -> string?
LM.Core.Models.AuthorName.Orcid.init -> void
LM.Core.Models.AuthorName.ToCsvPart() -> string!
LM.Core.Models.Entry
LM.Core.Models.Entry.AddedBy.get -> string?
LM.Core.Models.Entry.AddedBy.set -> void
LM.Core.Models.Entry.AddedOnUtc.get -> System.DateTime
LM.Core.Models.Entry.AddedOnUtc.set -> void
LM.Core.Models.Entry.Attachments.get -> System.Collections.Generic.List<LM.Core.Models.Attachment!>!
LM.Core.Models.Entry.Attachments.set -> void
LM.Core.Models.Entry.Authors.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Entry.Authors.set -> void
LM.Core.Models.Entry.DisplayName.get -> string?
LM.Core.Models.Entry.DisplayName.set -> void
LM.Core.Models.Entry.Doi.get -> string?
LM.Core.Models.Entry.Doi.set -> void
LM.Core.Models.Entry.Entry() -> void
LM.Core.Models.Entry.Id.get -> string!
LM.Core.Models.Entry.Id.set -> void
LM.Core.Models.Entry.InternalId.get -> string?
LM.Core.Models.Entry.InternalId.set -> void
LM.Core.Models.Entry.IsInternal.get -> bool
LM.Core.Models.Entry.IsInternal.set -> void
LM.Core.Models.Entry.IsBlacklisted.get -> bool
LM.Core.Models.Entry.IsBlacklisted.set -> void
LM.Core.Models.Entry.Links.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Entry.Links.set -> void
LM.Core.Models.Entry.MainFileHashSha256.get -> string?
LM.Core.Models.Entry.MainFileHashSha256.set -> void
LM.Core.Models.Entry.MainFilePath.get -> string!
LM.Core.Models.Entry.MainFilePath.set -> void
LM.Core.Models.Entry.Nct.get -> string?
LM.Core.Models.Entry.Nct.set -> void
LM.Core.Models.Entry.Notes.get -> string?
LM.Core.Models.Entry.Notes.set -> void
LM.Core.Models.Entry.UserNotes.get -> string?
LM.Core.Models.Entry.UserNotes.set -> void
LM.Core.Models.Entry.OriginalFileName.get -> string?
LM.Core.Models.Entry.OriginalFileName.set -> void
LM.Core.Models.Entry.Pmid.get -> string?
LM.Core.Models.Entry.Pmid.set -> void
LM.Core.Models.Entry.Relations.get -> System.Collections.Generic.List<LM.Core.Models.Relation!>!
LM.Core.Models.Entry.Relations.set -> void
LM.Core.Models.Entry.ShortTitle.get -> string?
LM.Core.Models.Entry.ShortTitle.set -> void
LM.Core.Models.Entry.Source.get -> string?
LM.Core.Models.Entry.Source.set -> void
LM.Core.Models.Entry.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Entry.Tags.set -> void
LM.Core.Models.Entry.Title.get -> string!
LM.Core.Models.Entry.Title.set -> void
LM.Core.Models.Entry.Type.get -> LM.Core.Models.EntryType
LM.Core.Models.Entry.Type.set -> void
LM.Core.Models.Entry.Version.get -> int
LM.Core.Models.Entry.Version.set -> void
LM.Core.Models.Entry.Year.get -> int?
LM.Core.Models.Entry.Year.set -> void
LM.Core.Models.EntryDocument
LM.Core.Models.EntryDocument.Authors.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.EntryDocument.Authors.set -> void
LM.Core.Models.EntryDocument.CreatedUtc.get -> System.DateTimeOffset
LM.Core.Models.EntryDocument.CreatedUtc.set -> void
LM.Core.Models.EntryDocument.Doi.get -> string?
LM.Core.Models.EntryDocument.Doi.set -> void
LM.Core.Models.EntryDocument.EntryDocument() -> void
LM.Core.Models.EntryDocument.Files.get -> System.Collections.Generic.List<LM.Core.Models.EntryFile!>!
LM.Core.Models.EntryDocument.Files.set -> void
LM.Core.Models.EntryDocument.Id.get -> string!
LM.Core.Models.EntryDocument.Id.set -> void
LM.Core.Models.EntryDocument.Internal.get -> bool
LM.Core.Models.EntryDocument.Internal.set -> void
LM.Core.Models.EntryDocument.Pmid.get -> string?
LM.Core.Models.EntryDocument.Pmid.set -> void
LM.Core.Models.EntryDocument.Source.get -> string?
LM.Core.Models.EntryDocument.Source.set -> void
LM.Core.Models.EntryDocument.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.EntryDocument.Tags.set -> void
LM.Core.Models.EntryDocument.Title.get -> string?
LM.Core.Models.EntryDocument.Title.set -> void
LM.Core.Models.EntryDocument.UpdatedUtc.get -> System.DateTimeOffset
LM.Core.Models.EntryDocument.UpdatedUtc.set -> void
LM.Core.Models.EntryDocument.Year.get -> int?
LM.Core.Models.EntryDocument.Year.set -> void
LM.Core.Models.EntryFile
LM.Core.Models.EntryFile.EntryFile() -> void
LM.Core.Models.EntryFile.Hash.get -> string!
LM.Core.Models.EntryFile.Hash.set -> void
LM.Core.Models.EntryFile.MimeType.get -> string!
LM.Core.Models.EntryFile.MimeType.set -> void
LM.Core.Models.EntryFile.OriginalFileName.get -> string!
LM.Core.Models.EntryFile.OriginalFileName.set -> void
LM.Core.Models.EntryFile.RelativePath.get -> string!
LM.Core.Models.EntryFile.RelativePath.set -> void
LM.Core.Models.EntryFile.SizeBytes.get -> long
LM.Core.Models.EntryFile.SizeBytes.set -> void
LM.Core.Models.EntryFile.StoredFileName.get -> string!
LM.Core.Models.EntryFile.StoredFileName.set -> void
LM.Core.Models.EntryType
LM.Core.Models.EntryType.LitSearch = 6 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.Other = 5 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.Presentation = 1 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.Publication = 0 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.Report = 4 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.SlideDeck = 3 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.WhitePaper = 2 -> LM.Core.Models.EntryType
LM.Core.Models.FileMetadata
LM.Core.Models.FileMetadata.Authors.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.FileMetadata.Authors.set -> void
LM.Core.Models.FileMetadata.Doi.get -> string?
LM.Core.Models.FileMetadata.Doi.set -> void
LM.Core.Models.FileMetadata.FileMetadata() -> void
LM.Core.Models.FileMetadata.Pmid.get -> string?
LM.Core.Models.FileMetadata.Pmid.set -> void
LM.Core.Models.FileMetadata.Source.get -> string?
LM.Core.Models.FileMetadata.Source.set -> void
LM.Core.Models.FileMetadata.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.FileMetadata.Tags.set -> void
LM.Core.Models.FileMetadata.Title.get -> string?
LM.Core.Models.FileMetadata.Title.set -> void
LM.Core.Models.FileMetadata.Year.get -> int?
LM.Core.Models.FileMetadata.Year.set -> void
LM.Core.Models.Filters.EntryFilter
LM.Core.Models.Filters.EntryFilter.AuthorContains.get -> string?
LM.Core.Models.Filters.EntryFilter.AuthorContains.set -> void
LM.Core.Models.Filters.EntryFilter.EntryFilter() -> void
LM.Core.Models.Filters.EntryFilter.IsInternal.get -> bool?
LM.Core.Models.Filters.EntryFilter.IsInternal.set -> void
LM.Core.Models.Filters.EntryFilter.TagMatchMode.get -> LM.Core.Models.Filters.TagMatchMode
LM.Core.Models.Filters.EntryFilter.TagMatchMode.set -> void
LM.Core.Models.Filters.EntryFilter.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Filters.EntryFilter.Tags.set -> void
LM.Core.Models.Filters.TagMatchMode
LM.Core.Models.Filters.TagMatchMode.Any = 0 -> LM.Core.Models.Filters.TagMatchMode
LM.Core.Models.Filters.TagMatchMode.All = 1 -> LM.Core.Models.Filters.TagMatchMode
LM.Core.Models.Filters.TagMatchMode.Not = 2 -> LM.Core.Models.Filters.TagMatchMode
LM.Core.Models.Filters.EntryFilter.TitleContains.get -> string?
LM.Core.Models.Filters.EntryFilter.TitleContains.set -> void
LM.Core.Models.Filters.EntryFilter.TypesAny.get -> LM.Core.Models.EntryType[]?
LM.Core.Models.Filters.EntryFilter.TypesAny.set -> void
LM.Core.Models.Filters.EntryFilter.YearFrom.get -> int?
LM.Core.Models.Filters.EntryFilter.YearFrom.set -> void
LM.Core.Models.Filters.EntryFilter.YearTo.get -> int?
LM.Core.Models.Filters.EntryFilter.YearTo.set -> void
LM.Core.Models.Filters.EntryFilter.SourceContains.get -> string?
LM.Core.Models.Filters.EntryFilter.SourceContains.set -> void
LM.Core.Models.Filters.EntryFilter.InternalIdContains.get -> string?
LM.Core.Models.Filters.EntryFilter.InternalIdContains.set -> void
LM.Core.Models.Filters.EntryFilter.DoiContains.get -> string?
LM.Core.Models.Filters.EntryFilter.DoiContains.set -> void
LM.Core.Models.Filters.EntryFilter.PmidContains.get -> string?
LM.Core.Models.Filters.EntryFilter.PmidContains.set -> void
LM.Core.Models.Filters.EntryFilter.NctContains.get -> string?
LM.Core.Models.Filters.EntryFilter.NctContains.set -> void
LM.Core.Models.Filters.EntryFilter.AddedByContains.get -> string?
LM.Core.Models.Filters.EntryFilter.AddedByContains.set -> void
LM.Core.Models.Filters.EntryFilter.AddedOnFromUtc.get -> System.DateTime?
LM.Core.Models.Filters.EntryFilter.AddedOnFromUtc.set -> void
LM.Core.Models.Filters.EntryFilter.AddedOnToUtc.get -> System.DateTime?
LM.Core.Models.Filters.EntryFilter.AddedOnToUtc.set -> void
LM.Core.Models.GrantInfo
LM.Core.Models.GrantInfo.Agency.get -> string?
LM.Core.Models.GrantInfo.Agency.init -> void
LM.Core.Models.GrantInfo.Country.get -> string?
LM.Core.Models.GrantInfo.Country.init -> void
LM.Core.Models.GrantInfo.GrantId.get -> string?
LM.Core.Models.GrantInfo.GrantId.init -> void
LM.Core.Models.PublicationRecord
LM.Core.Models.PublicationRecord.AbstractPlain.get -> string?
LM.Core.Models.PublicationRecord.AbstractPlain.init -> void
LM.Core.Models.PublicationRecord.AbstractSections.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.AbstractSection!>!
LM.Core.Models.PublicationRecord.AbstractSections.init -> void
LM.Core.Models.PublicationRecord.Affiliations.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.Affiliations.init -> void
LM.Core.Models.PublicationRecord.Authors.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.AuthorName!>!
LM.Core.Models.PublicationRecord.Authors.init -> void
LM.Core.Models.PublicationRecord.AuthorsCsv.get -> string!
LM.Core.Models.PublicationRecord.CitedByCount.get -> int?
LM.Core.Models.PublicationRecord.CitedByCount.init -> void
LM.Core.Models.PublicationRecord.CitedByPmids.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.CitedByPmids.init -> void
LM.Core.Models.PublicationRecord.CommentsCorrections.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.CommentsCorrections.init -> void
LM.Core.Models.PublicationRecord.Country.get -> string?
LM.Core.Models.PublicationRecord.Country.init -> void
LM.Core.Models.PublicationRecord.Doi.get -> string?
LM.Core.Models.PublicationRecord.Doi.init -> void
LM.Core.Models.PublicationRecord.FirstAuthorLast.get -> string!
LM.Core.Models.PublicationRecord.Grants.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.GrantInfo!>!
LM.Core.Models.PublicationRecord.Grants.init -> void
LM.Core.Models.PublicationRecord.Issue.get -> string?
LM.Core.Models.PublicationRecord.Issue.init -> void
LM.Core.Models.PublicationRecord.JournalIsoAbbrev.get -> string?
LM.Core.Models.PublicationRecord.JournalIsoAbbrev.init -> void
LM.Core.Models.PublicationRecord.JournalTitle.get -> string?
LM.Core.Models.PublicationRecord.JournalTitle.init -> void
LM.Core.Models.PublicationRecord.Keywords.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.Keywords.init -> void
LM.Core.Models.PublicationRecord.Language.get -> string?
LM.Core.Models.PublicationRecord.Language.init -> void
LM.Core.Models.PublicationRecord.MeshHeadings.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.MeshHeadings.init -> void
LM.Core.Models.PublicationRecord.Pages.get -> string?
LM.Core.Models.PublicationRecord.Pages.init -> void
LM.Core.Models.PublicationRecord.Pmcid.get -> string?
LM.Core.Models.PublicationRecord.Pmcid.init -> void
LM.Core.Models.PublicationRecord.Pmid.get -> string?
LM.Core.Models.PublicationRecord.Pmid.init -> void
LM.Core.Models.PublicationRecord.PublicationTypes.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.PublicationTypes.init -> void
LM.Core.Models.PublicationRecord.PublishedEpub.get -> System.DateOnly?
LM.Core.Models.PublicationRecord.PublishedEpub.init -> void
LM.Core.Models.PublicationRecord.PublishedPrint.get -> System.DateOnly?
LM.Core.Models.PublicationRecord.PublishedPrint.init -> void
LM.Core.Models.PublicationRecord.ReferencedPmids.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.ReferencedPmids.init -> void
LM.Core.Models.PublicationRecord.Title.get -> string?
LM.Core.Models.PublicationRecord.Title.init -> void
LM.Core.Models.PublicationRecord.UrlPubMed.get -> string?
LM.Core.Models.PublicationRecord.UrlPubMed.init -> void
LM.Core.Models.PublicationRecord.Volume.get -> string?
LM.Core.Models.PublicationRecord.Volume.init -> void
LM.Core.Models.PublicationRecord.Year.get -> int?
LM.Core.Models.PublicationRecord.Year.init -> void
LM.Core.Models.Relation
LM.Core.Models.Relation.Relation() -> void
LM.Core.Models.Relation.TargetEntryId.get -> string!
LM.Core.Models.Relation.TargetEntryId.set -> void
LM.Core.Models.Relation.Type.get -> string!
LM.Core.Models.Relation.Type.set -> void
LM.Core.Models.Search.FullTextSearchHit.EntryId.init -> void
LM.Core.Models.Search.FullTextSearchHit.Highlight.init -> void
LM.Core.Models.Search.FullTextSearchHit.Score.init -> void
LM.Core.Models.Search.FullTextSearchQuery.TypesAny.get -> LM.Core.Models.EntryType[]?
LM.Core.Models.SearchDatabase
LM.Core.Models.SearchDatabase.ClinicalTrialsGov = 1 -> LM.Core.Models.SearchDatabase
LM.Core.Models.SearchDatabase.PubMed = 0 -> LM.Core.Models.SearchDatabase
LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchField.Abstract = 2 -> LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchField.Content = 4 -> LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchField.None = 0 -> LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchField.Title = 1 -> LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchHit
LM.Core.Models.Search.FullTextSearchHit.EntryId.get -> string!
LM.Core.Models.Search.FullTextSearchHit.FullTextSearchHit(string! EntryId, double Score, string? Highlight) -> void
LM.Core.Models.Search.FullTextSearchHit.Highlight.get -> string?
LM.Core.Models.Search.FullTextSearchHit.Score.get -> double
LM.Core.Models.Search.FullTextSearchQuery
LM.Core.Models.Search.FullTextSearchQuery.Fields.get -> LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchQuery.Fields.set -> void
LM.Core.Models.Search.FullTextSearchQuery.FullTextSearchQuery() -> void
LM.Core.Models.Search.FullTextSearchQuery.IsInternal.get -> bool?
LM.Core.Models.Search.FullTextSearchQuery.IsInternal.set -> void
LM.Core.Models.Search.FullTextSearchQuery.Limit.get -> int
LM.Core.Models.Search.FullTextSearchQuery.Limit.set -> void
LM.Core.Models.Search.FullTextSearchQuery.Text.get -> string?
LM.Core.Models.Search.FullTextSearchQuery.Text.set -> void
LM.Core.Models.Search.FullTextSearchQuery.TypesAny.set -> void
LM.Core.Models.Search.FullTextSearchQuery.YearFrom.get -> int?
LM.Core.Models.Search.FullTextSearchQuery.YearFrom.set -> void
LM.Core.Models.Search.FullTextSearchQuery.YearTo.get -> int?
LM.Core.Models.Search.FullTextSearchQuery.YearTo.set -> void
LM.Core.Models.SearchHit
LM.Core.Models.SearchHit.AlreadyInDb.get -> bool
LM.Core.Models.SearchHit.AlreadyInDb.set -> void
LM.Core.Models.SearchHit.Authors.get -> string!
LM.Core.Models.SearchHit.Authors.init -> void
LM.Core.Models.SearchHit.Doi.get -> string?
LM.Core.Models.SearchHit.Doi.init -> void
LM.Core.Models.SearchHit.ExternalId.get -> string!
LM.Core.Models.SearchHit.ExternalId.init -> void
LM.Core.Models.SearchHit.ExistingEntryId.get -> string?
LM.Core.Models.SearchHit.ExistingEntryId.set -> void
LM.Core.Models.SearchHit.JournalOrSource.get -> string?
LM.Core.Models.SearchHit.JournalOrSource.init -> void
LM.Core.Models.SearchHit.SearchHit() -> void
LM.Core.Models.SearchHit.Selected.get -> bool
LM.Core.Models.SearchHit.Selected.set -> void
LM.Core.Models.SearchHit.Source.get -> LM.Core.Models.SearchDatabase
LM.Core.Models.SearchHit.Source.init -> void
LM.Core.Models.SearchHit.Title.get -> string!
LM.Core.Models.SearchHit.Title.init -> void
LM.Core.Models.SearchHit.Url.get -> string?
LM.Core.Models.SearchHit.Url.init -> void
LM.Core.Models.SearchHit.Year.get -> int?
LM.Core.Models.SearchHit.Year.init -> void
LM.Core.Models.SearchHit.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.Core.Models.WatchedFolderState.WatchedFolderState(string! Path, System.DateTimeOffset? LastScanUtc, string? AggregatedHash, bool LastScanWasUnchanged) -> void
LM.Core.Utils.Hashes
LM.Core.Utils.IdGen
LM.Core.Utils.JsonEx
static LM.Core.Utils.Hashes.Sha1(string! input) -> string!
static LM.Core.Utils.Hashes.Sha256File(string! path) -> string!
static LM.Core.Utils.IdGen.NewId() -> string!
static LM.Core.Utils.JsonEx.Deserialize<T>(string! s) -> T?
static LM.Core.Utils.JsonEx.Serialize<T>(T v) -> string!
LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.WatchedFolderSettings!>!
LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore.SaveAsync(LM.Core.Models.WatchedFolderSettings! settings, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.Configuration.ISearchHistoryStore
LM.Core.Abstractions.Configuration.ISearchHistoryStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Search.SearchHistoryDocument!>!
LM.Core.Abstractions.Configuration.ISearchHistoryStore.SaveAsync(LM.Core.Models.Search.SearchHistoryDocument! document, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.Configuration.IUserPreferencesStore
LM.Core.Abstractions.Configuration.IUserPreferencesStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.UserPreferences!>!
LM.Core.Abstractions.Configuration.IUserPreferencesStore.SaveAsync(LM.Core.Models.UserPreferences! preferences, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Models.Search.SearchHistoryDocument
LM.Core.Models.Search.SearchHistoryDocument.Entries.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.Core.Models.Search.SearchHistoryDocument.Entries.init -> void
LM.Core.Models.Search.SearchHistoryEntry
LM.Core.Models.Search.SearchHistoryEntry.Database.get -> LM.Core.Models.SearchDatabase
LM.Core.Models.Search.SearchHistoryEntry.Database.init -> void
LM.Core.Models.Search.SearchHistoryEntry.ExecutedUtc.get -> System.DateTimeOffset
LM.Core.Models.Search.SearchHistoryEntry.ExecutedUtc.init -> void
LM.Core.Models.Search.SearchHistoryEntry.From.get -> System.DateTime?
LM.Core.Models.Search.SearchHistoryEntry.From.init -> void
LM.Core.Models.Search.SearchHistoryEntry.Query.get -> string!
LM.Core.Models.Search.SearchHistoryEntry.Query.init -> void
LM.Core.Models.Search.SearchHistoryEntry.To.get -> System.DateTime?
LM.Core.Models.Search.SearchHistoryEntry.To.init -> void
LM.Core.Models.Search.SearchExecutionRequest
LM.Core.Models.Search.SearchExecutionRequest.Database.get -> LM.Core.Models.SearchDatabase
LM.Core.Models.Search.SearchExecutionRequest.Database.init -> void
LM.Core.Models.Search.SearchExecutionRequest.From.get -> System.DateTime?
LM.Core.Models.Search.SearchExecutionRequest.From.init -> void
LM.Core.Models.Search.SearchExecutionRequest.Query.get -> string!
LM.Core.Models.Search.SearchExecutionRequest.Query.init -> void
LM.Core.Models.Search.SearchExecutionRequest.To.get -> System.DateTime?
LM.Core.Models.Search.SearchExecutionRequest.To.init -> void
LM.Core.Models.Search.SearchExecutionResult
LM.Core.Models.Search.SearchExecutionResult.ExecutedUtc.get -> System.DateTimeOffset
LM.Core.Models.Search.SearchExecutionResult.ExecutedUtc.init -> void
LM.Core.Models.Search.SearchExecutionResult.Hits.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.SearchHit!>!
LM.Core.Models.Search.SearchExecutionResult.Hits.init -> void
LM.Core.Models.Search.SearchExecutionResult.Request.get -> LM.Core.Models.Search.SearchExecutionRequest!
LM.Core.Models.Search.SearchExecutionResult.Request.init -> void
LM.Core.Models.UserPreferences
LM.Core.Models.UserPreferences.Search.get -> LM.Core.Models.SearchPreferences!
LM.Core.Models.UserPreferences.Search.init -> void
LM.Core.Models.UserPreferences.Library.get -> LM.Core.Models.LibraryPreferences!
LM.Core.Models.UserPreferences.Library.init -> void
LM.Core.Models.SearchPreferences
LM.Core.Models.SearchPreferences.LastSelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.Core.Models.SearchPreferences.LastSelectedDatabase.init -> void
LM.Core.Models.SearchPreferences.LastUpdatedUtc.get -> System.DateTimeOffset
LM.Core.Models.SearchPreferences.LastUpdatedUtc.init -> void
LM.Core.Models.LibraryPreferences
LM.Core.Models.LibraryPreferences.VisibleColumns.get -> string![]!
LM.Core.Models.LibraryPreferences.VisibleColumns.init -> void
LM.Core.Models.LibraryPreferences.LastUpdatedUtc.get -> System.DateTimeOffset
LM.Core.Models.LibraryPreferences.LastUpdatedUtc.init -> void
LM.Core.Models.WatchedFolderSettings
LM.Core.Models.WatchedFolderSettings.Folders.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.WatchedFolderSettingsFolder!>!
LM.Core.Models.WatchedFolderSettings.Folders.init -> void
LM.Core.Models.WatchedFolderSettings.States.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.WatchedFolderState!>!
LM.Core.Models.WatchedFolderSettings.States.init -> void
LM.Core.Models.WatchedFolderSettingsFolder
LM.Core.Models.WatchedFolderSettingsFolder.IsEnabled.get -> bool
LM.Core.Models.WatchedFolderSettingsFolder.IsEnabled.init -> void
LM.Core.Models.WatchedFolderSettingsFolder.Path.get -> string!
LM.Core.Models.WatchedFolderSettingsFolder.Path.init -> void
LM.Core.Models.WatchedFolderState
LM.Core.Models.WatchedFolderState.AggregatedHash.get -> string?
LM.Core.Models.WatchedFolderState.AggregatedHash.init -> void
LM.Core.Models.WatchedFolderState.LastScanUtc.get -> System.DateTimeOffset?
LM.Core.Models.WatchedFolderState.LastScanUtc.init -> void
LM.Core.Models.WatchedFolderState.LastScanWasUnchanged.get -> bool
LM.Core.Models.WatchedFolderState.LastScanWasUnchanged.init -> void
LM.Core.Models.WatchedFolderState.Path.get -> string!
LM.Core.Models.WatchedFolderState.Path.init -> void
static readonly LM.Core.Utils.JsonEx.Options -> System.Text.Json.JsonSerializerOptions!
---------- LM.HubSpoke ----------
#nullable enable
#nullable enable
LM.HubSpoke.Abstractions.CasResult
LM.HubSpoke.Abstractions.CasResult.Bytes.get -> long
LM.HubSpoke.Abstractions.CasResult.Bytes.init -> void
LM.HubSpoke.Abstractions.CasResult.CasResult() -> void
LM.HubSpoke.Abstractions.CasResult.CasResult(string? RelPath, string? Sha, long Bytes, string? Mime, string? Original) -> void
LM.HubSpoke.Abstractions.CasResult.Mime.get -> string?
LM.HubSpoke.Abstractions.CasResult.Mime.init -> void
LM.HubSpoke.Abstractions.CasResult.Original.get -> string?
LM.HubSpoke.Abstractions.CasResult.Original.init -> void
LM.HubSpoke.Abstractions.CasResult.RelPath.get -> string?
LM.HubSpoke.Abstractions.CasResult.RelPath.init -> void
LM.HubSpoke.Abstractions.CasResult.Sha.get -> string?
LM.HubSpoke.Abstractions.CasResult.Sha.init -> void
LM.HubSpoke.Abstractions.ISimilarityLog
LM.HubSpoke.Abstractions.ISimilarityLog.LogAsync(string! sessionId, string! stagedPath, string! candidateEntryId, double score, string! method, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Abstractions.ISimilarityLog.NewSessionId() -> string!
LM.HubSpoke.Abstractions.ISpokeHandler
LM.HubSpoke.Abstractions.ISpokeHandler.BuildHookAsync(LM.Core.Models.Entry! entry, LM.HubSpoke.Abstractions.CasResult primary, System.Collections.Generic.IEnumerable<string!>! attachmentRelPaths, System.Func<string!, System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.HubSpoke.Abstractions.CasResult>!>! moveToCas, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Abstractions.ISpokeHandler.BuildIndex(LM.HubSpoke.Models.EntryHub! hub, object? hook, string? extractedFullText) -> LM.HubSpoke.Abstractions.SpokeIndexContribution
LM.HubSpoke.Abstractions.ISpokeHandler.Handles.get -> LM.Core.Models.EntryType
LM.HubSpoke.Abstractions.ISpokeHandler.HookPath.get -> string!
LM.HubSpoke.Abstractions.ISpokeHandler.LoadHookAsync(LM.Core.Abstractions.IWorkSpaceService! ws, string! entryId, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Abstractions.ISpokeHandler.MapToEntry(LM.HubSpoke.Models.EntryHub! hub, object? hook) -> LM.Core.Models.Entry!
LM.HubSpoke.Abstractions.SpokeIndexContribution
LM.HubSpoke.Abstractions.SpokeIndexContribution.Abstract.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Abstract.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.AssetHashes.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Abstractions.SpokeIndexContribution.AssetHashes.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Authors.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Abstractions.SpokeIndexContribution.Authors.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Doi.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Doi.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.FullText.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.FullText.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Journal.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Journal.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Keywords.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Abstractions.SpokeIndexContribution.Keywords.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Pmid.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Pmid.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.SpokeIndexContribution() -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.SpokeIndexContribution(string? Title, string? Abstract, System.Collections.Generic.IReadOnlyList<string!>! Authors, System.Collections.Generic.IReadOnlyList<string!>! Keywords, string? Journal, string? Doi, string? Pmid, int? Year, System.Collections.Generic.IReadOnlyList<string!>! AssetHashes, string? FullText) -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Title.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Title.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Year.get -> int?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Year.init -> void
LM.HubSpoke.Entries.HubSpokeStore
LM.HubSpoke.Entries.HubSpokeStore.EnumerateAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<LM.Core.Models.Entry!>!
LM.HubSpoke.Entries.HubSpokeStore.FindByHashAsync(string! sha256, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.HubSpoke.Entries.HubSpokeStore.FindByIdsAsync(string? doi, string? pmid, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.HubSpoke.Entries.HubSpokeStore.FindSimilarByNameYearAsync(string! title, int? year, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.HubSpoke.Entries.HubSpokeStore.FullTextSearch.get -> LM.Core.Abstractions.IFullTextSearchService!
LM.HubSpoke.Entries.HubSpokeStore.GetByIdAsync(string! id, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.HubSpoke.Entries.HubSpokeStore.HubSpokeStore(LM.Core.Abstractions.IWorkSpaceService! ws, LM.Core.Abstractions.IHasher! hasher, System.Collections.Generic.IEnumerable<LM.HubSpoke.Abstractions.ISpokeHandler!>! handlers, LM.Core.Abstractions.IContentExtractor? contentExtractor = null, LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub? graphHub = null) -> void
LM.HubSpoke.Entries.HubSpokeStore.HubSpokeStore(LM.Core.Abstractions.IWorkSpaceService! ws, LM.Core.Abstractions.IHasher! hasher, System.Collections.Generic.IEnumerable<LM.HubSpoke.Abstractions.ISpokeHandler!>! handlers, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.Core.Abstractions.IContentExtractor? contentExtractor = null, LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub? graphHub = null) -> void
LM.HubSpoke.Entries.HubSpokeStore.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Entries.HubSpokeStore.SaveAsync(LM.Core.Models.Entry! entry, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Entries.HubSpokeStore.SearchAsync(LM.Core.Models.Filters.EntryFilter! filter, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.HubSpoke.Indexing.SimilarityLog
LM.HubSpoke.Indexing.SimilarityLog.LogAsync(string! sessionId, string! stagedPath, string! candidateEntryId, double score, string! method, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Indexing.SimilarityLog.NewSessionId() -> string!
LM.HubSpoke.Indexing.SimilarityLog.SimilarityLog(LM.Core.Abstractions.IWorkSpaceService! ws) -> void
LM.HubSpoke.Models.AbstractSection
LM.HubSpoke.Models.AbstractSection.AbstractSection() -> void
LM.HubSpoke.Models.AbstractSection.Label.get -> string?
LM.HubSpoke.Models.AbstractSection.Label.init -> void
LM.HubSpoke.Models.AbstractSection.Text.get -> string!
LM.HubSpoke.Models.AbstractSection.Text.init -> void
LM.HubSpoke.Models.Affiliation
LM.HubSpoke.Models.Affiliation.Affiliation() -> void
LM.HubSpoke.Models.Affiliation.Email.get -> string?
LM.HubSpoke.Models.Affiliation.Email.init -> void
LM.HubSpoke.Models.Affiliation.Text.get -> string!
LM.HubSpoke.Models.Affiliation.Text.init -> void
LM.HubSpoke.Models.AttachmentHook
LM.HubSpoke.Models.AttachmentHook.AttachmentHook() -> void
LM.HubSpoke.Models.AttachmentHook.Attachments.get -> System.Collections.Generic.List<LM.HubSpoke.Models.AttachmentHookItem!>!
LM.HubSpoke.Models.AttachmentHook.Attachments.set -> void
LM.HubSpoke.Models.AttachmentHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.AttachmentHook.SchemaVersion.init -> void
LM.HubSpoke.Models.AttachmentHookItem
LM.HubSpoke.Models.AttachmentHookItem.AddedBy.get -> string!
LM.HubSpoke.Models.AttachmentHookItem.AddedBy.init -> void
LM.HubSpoke.Models.AttachmentHookItem.AddedUtc.get -> System.DateTime
LM.HubSpoke.Models.AttachmentHookItem.AddedUtc.init -> void
LM.HubSpoke.Models.AttachmentHookItem.AttachmentHookItem() -> void
LM.HubSpoke.Models.AttachmentHookItem.AttachmentId.get -> string!
LM.HubSpoke.Models.AttachmentHookItem.AttachmentId.init -> void
LM.HubSpoke.Models.AttachmentHookItem.LibraryPath.get -> string!
LM.HubSpoke.Models.AttachmentHookItem.LibraryPath.init -> void
LM.HubSpoke.Models.AttachmentHookItem.Notes.get -> string?
LM.HubSpoke.Models.AttachmentHookItem.Notes.init -> void
LM.HubSpoke.Models.AttachmentHookItem.Purpose.get -> LM.Core.Models.AttachmentKind
LM.HubSpoke.Models.AttachmentHookItem.Purpose.init -> void
LM.HubSpoke.Models.AttachmentHookItem.Tags.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.AttachmentHookItem.Tags.init -> void
LM.HubSpoke.Models.AttachmentHookItem.Title.get -> string!
LM.HubSpoke.Models.AttachmentHookItem.Title.init -> void
LM.HubSpoke.Models.ArticleAbstract
LM.HubSpoke.Models.ArticleAbstract.ArticleAbstract() -> void
LM.HubSpoke.Models.ArticleAbstract.Sections.get -> System.Collections.Generic.List<LM.HubSpoke.Models.AbstractSection!>!
LM.HubSpoke.Models.ArticleAbstract.Sections.init -> void
LM.HubSpoke.Models.ArticleAbstract.Text.get -> string?
LM.HubSpoke.Models.ArticleAbstract.Text.init -> void
LM.HubSpoke.Models.ArticleAsset
LM.HubSpoke.Models.ArticleAsset.ArticleAsset() -> void
LM.HubSpoke.Models.ArticleAsset.Bytes.get -> long
LM.HubSpoke.Models.ArticleAsset.Bytes.init -> void
LM.HubSpoke.Models.ArticleAsset.ContentType.get -> string!
LM.HubSpoke.Models.ArticleAsset.ContentType.init -> void
LM.HubSpoke.Models.ArticleAsset.Hash.get -> string!
LM.HubSpoke.Models.ArticleAsset.Hash.init -> void
LM.HubSpoke.Models.ArticleAsset.OriginalFilename.get -> string?
LM.HubSpoke.Models.ArticleAsset.OriginalFilename.init -> void
LM.HubSpoke.Models.ArticleAsset.OriginalFolderPath.get -> string?
LM.HubSpoke.Models.ArticleAsset.OriginalFolderPath.init -> void
LM.HubSpoke.Models.ArticleAsset.Purpose.get -> LM.HubSpoke.Models.ArticleAssetPurpose
LM.HubSpoke.Models.ArticleAsset.Purpose.init -> void
LM.HubSpoke.Models.ArticleAsset.StoragePath.get -> string!
LM.HubSpoke.Models.ArticleAsset.StoragePath.init -> void
LM.HubSpoke.Models.ArticleAsset.Title.get -> string!
LM.HubSpoke.Models.ArticleAsset.Title.init -> void
LM.HubSpoke.Models.ArticleAssetPurpose
LM.HubSpoke.Models.ArticleAssetPurpose.Manuscript = 0 -> LM.HubSpoke.Models.ArticleAssetPurpose
LM.HubSpoke.Models.ArticleAssetPurpose.Supplement = 1 -> LM.HubSpoke.Models.ArticleAssetPurpose
LM.HubSpoke.Models.ArticleDates
LM.HubSpoke.Models.ArticleDates.Accepted.get -> System.DateTimeOffset?
LM.HubSpoke.Models.ArticleDates.Accepted.init -> void
LM.HubSpoke.Models.ArticleDates.ArticleDates() -> void
LM.HubSpoke.Models.ArticleDates.Electronic.get -> System.DateTimeOffset?
LM.HubSpoke.Models.ArticleDates.Electronic.init -> void
LM.HubSpoke.Models.ArticleDates.Print.get -> System.DateTimeOffset?
LM.HubSpoke.Models.ArticleDates.Print.init -> void
LM.HubSpoke.Models.ArticleDates.Received.get -> System.DateTimeOffset?
LM.HubSpoke.Models.ArticleDates.Received.init -> void
LM.HubSpoke.Models.ArticleDates.Revised.get -> System.DateTimeOffset?
LM.HubSpoke.Models.ArticleDates.Revised.init -> void
LM.HubSpoke.Models.ArticleDetails
LM.HubSpoke.Models.ArticleDetails.ArticleDetails() -> void
LM.HubSpoke.Models.ArticleDetails.Dates.get -> LM.HubSpoke.Models.ArticleDates!
LM.HubSpoke.Models.ArticleDetails.Dates.init -> void
LM.HubSpoke.Models.ArticleDetails.Language.get -> string?
LM.HubSpoke.Models.ArticleDetails.Language.init -> void
LM.HubSpoke.Models.ArticleDetails.Pagination.get -> LM.HubSpoke.Models.Pagination!
LM.HubSpoke.Models.ArticleDetails.Pagination.init -> void
LM.HubSpoke.Models.ArticleDetails.PublicationTypes.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.ArticleDetails.PublicationTypes.init -> void
LM.HubSpoke.Models.ArticleDetails.Status.get -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.ArticleDetails.Status.init -> void
LM.HubSpoke.Models.ArticleDetails.Title.get -> string!
LM.HubSpoke.Models.ArticleDetails.Title.init -> void
LM.HubSpoke.Models.ArticleHook
LM.HubSpoke.Models.ArticleHook.Abstract.get -> LM.HubSpoke.Models.ArticleAbstract?
LM.HubSpoke.Models.ArticleHook.Abstract.init -> void
LM.HubSpoke.Models.ArticleHook.Article.get -> LM.HubSpoke.Models.ArticleDetails!
LM.HubSpoke.Models.ArticleHook.Article.init -> void
LM.HubSpoke.Models.ArticleHook.ArticleHook() -> void
LM.HubSpoke.Models.ArticleHook.Assets.get -> System.Collections.Generic.List<LM.HubSpoke.Models.ArticleAsset!>!
LM.HubSpoke.Models.ArticleHook.Assets.init -> void
LM.HubSpoke.Models.ArticleHook.Authors.get -> System.Collections.Generic.List<LM.HubSpoke.Models.Author!>!
LM.HubSpoke.Models.ArticleHook.Authors.init -> void
LM.HubSpoke.Models.ArticleHook.Chemicals.get -> System.Collections.Generic.List<LM.HubSpoke.Models.Chemical!>!
LM.HubSpoke.Models.ArticleHook.Chemicals.init -> void
LM.HubSpoke.Models.ArticleHook.ConflictOfInterest.get -> string?
LM.HubSpoke.Models.ArticleHook.ConflictOfInterest.init -> void
LM.HubSpoke.Models.ArticleHook.Copyright.get -> string?
LM.HubSpoke.Models.ArticleHook.Copyright.init -> void
LM.HubSpoke.Models.ArticleHook.Grants.get -> System.Collections.Generic.List<LM.HubSpoke.Models.Grant!>!
LM.HubSpoke.Models.ArticleHook.Grants.init -> void
LM.HubSpoke.Models.ArticleHook.History.get -> LM.HubSpoke.Models.PublicationHistory!
LM.HubSpoke.Models.ArticleHook.History.init -> void
LM.HubSpoke.Models.ArticleHook.Identifier.get -> LM.HubSpoke.Models.ArticleIdentifier!
LM.HubSpoke.Models.ArticleHook.Identifier.init -> void
LM.HubSpoke.Models.ArticleHook.Journal.get -> LM.HubSpoke.Models.JournalInfo!
LM.HubSpoke.Models.ArticleHook.Journal.init -> void
LM.HubSpoke.Models.ArticleHook.Keywords.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.ArticleHook.Keywords.init -> void
LM.HubSpoke.Models.ArticleHook.Medline.get -> LM.HubSpoke.Models.MedlineInfo!
LM.HubSpoke.Models.ArticleHook.Medline.init -> void
LM.HubSpoke.Models.ArticleHook.MeshHeadings.get -> System.Collections.Generic.List<LM.HubSpoke.Models.MeshHeading!>!
LM.HubSpoke.Models.ArticleHook.MeshHeadings.init -> void
LM.HubSpoke.Models.ArticleHook.References.get -> System.Collections.Generic.List<LM.HubSpoke.Models.Citation!>!
LM.HubSpoke.Models.ArticleHook.References.init -> void
LM.HubSpoke.Models.ArticleHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.ArticleHook.SchemaVersion.init -> void
LM.HubSpoke.Models.ArticleIdentifier
LM.HubSpoke.Models.ArticleIdentifier.ArticleIdentifier() -> void
LM.HubSpoke.Models.ArticleIdentifier.DOI.get -> string?
LM.HubSpoke.Models.ArticleIdentifier.DOI.init -> void
LM.HubSpoke.Models.ArticleIdentifier.OtherIds.get -> System.Collections.Generic.Dictionary<string!, string!>!
LM.HubSpoke.Models.ArticleIdentifier.OtherIds.init -> void
LM.HubSpoke.Models.ArticleIdentifier.PII.get -> string?
LM.HubSpoke.Models.ArticleIdentifier.PII.init -> void
LM.HubSpoke.Models.ArticleIdentifier.PMCID.get -> string?
LM.HubSpoke.Models.ArticleIdentifier.PMCID.init -> void
LM.HubSpoke.Models.ArticleIdentifier.PMID.get -> string!
LM.HubSpoke.Models.ArticleIdentifier.PMID.init -> void
LM.HubSpoke.Models.AssetRef
LM.HubSpoke.Models.AssetRef.AssetRef() -> void
LM.HubSpoke.Models.AssetRef.Bytes.get -> long
LM.HubSpoke.Models.AssetRef.Bytes.init -> void
LM.HubSpoke.Models.AssetRef.ContentType.get -> string!
LM.HubSpoke.Models.AssetRef.ContentType.init -> void
LM.HubSpoke.Models.AssetRef.Hash.get -> string!
LM.HubSpoke.Models.AssetRef.Hash.init -> void
LM.HubSpoke.Models.AssetRef.OriginalFilename.get -> string?
LM.HubSpoke.Models.AssetRef.OriginalFilename.init -> void
LM.HubSpoke.Models.AssetRef.Role.get -> string!
LM.HubSpoke.Models.AssetRef.Role.init -> void
LM.HubSpoke.Models.AssetRef.StoragePath.get -> string!
LM.HubSpoke.Models.AssetRef.StoragePath.init -> void
LM.HubSpoke.Models.Author
LM.HubSpoke.Models.Author.Affiliations.get -> System.Collections.Generic.List<LM.HubSpoke.Models.Affiliation!>!
LM.HubSpoke.Models.Author.Affiliations.init -> void
LM.HubSpoke.Models.Author.Author() -> void
LM.HubSpoke.Models.Author.ForeName.get -> string?
LM.HubSpoke.Models.Author.ForeName.init -> void
LM.HubSpoke.Models.Author.Initials.get -> string?
LM.HubSpoke.Models.Author.Initials.init -> void
LM.HubSpoke.Models.Author.LastName.get -> string?
LM.HubSpoke.Models.Author.LastName.init -> void
LM.HubSpoke.Models.Author.ORCID.get -> string?
LM.HubSpoke.Models.Author.ORCID.init -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails
LM.HubSpoke.Models.ChangeLogAttachmentDetails.AttachmentId.get -> string!
LM.HubSpoke.Models.ChangeLogAttachmentDetails.AttachmentId.init -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails.ChangeLogAttachmentDetails() -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails.LibraryPath.get -> string!
LM.HubSpoke.Models.ChangeLogAttachmentDetails.LibraryPath.init -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Purpose.get -> LM.Core.Models.AttachmentKind
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Purpose.init -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Tags.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Tags.init -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Title.get -> string!
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Title.init -> void
LM.HubSpoke.Models.Chemical
LM.HubSpoke.Models.Chemical.Chemical() -> void
LM.HubSpoke.Models.Chemical.Name.get -> string!
LM.HubSpoke.Models.Chemical.Name.init -> void
LM.HubSpoke.Models.Chemical.RegistryNumber.get -> string?
LM.HubSpoke.Models.Chemical.RegistryNumber.init -> void
LM.HubSpoke.Models.Citation
LM.HubSpoke.Models.Citation.Citation() -> void
LM.HubSpoke.Models.Citation.DOI.get -> string?
LM.HubSpoke.Models.Citation.DOI.init -> void
LM.HubSpoke.Models.Citation.PMID.get -> string?
LM.HubSpoke.Models.Citation.PMID.init -> void
LM.HubSpoke.Models.Citation.Text.get -> string!
LM.HubSpoke.Models.Citation.Text.init -> void
LM.HubSpoke.Models.CreationMethod
LM.HubSpoke.Models.CreationMethod.Manual = 0 -> LM.HubSpoke.Models.CreationMethod
LM.HubSpoke.Models.CreationMethod.Search = 1 -> LM.HubSpoke.Models.CreationMethod
LM.HubSpoke.Models.DocumentHook
LM.HubSpoke.Models.DocumentHook.Assets.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.AssetRef!>!
LM.HubSpoke.Models.DocumentHook.Assets.init -> void
LM.HubSpoke.Models.DocumentHook.Description.get -> string?
LM.HubSpoke.Models.DocumentHook.Description.init -> void
LM.HubSpoke.Models.DocumentHook.DocumentHook() -> void
LM.HubSpoke.Models.DocumentHook.DocumentType.get -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentHook.DocumentType.init -> void
LM.HubSpoke.Models.DocumentHook.EffectiveUtc.get -> System.DateTime?
LM.HubSpoke.Models.DocumentHook.EffectiveUtc.init -> void
LM.HubSpoke.Models.DocumentHook.ExpiresUtc.get -> System.DateTime?
LM.HubSpoke.Models.DocumentHook.ExpiresUtc.init -> void
LM.HubSpoke.Models.DocumentHook.Owner.get -> string?
LM.HubSpoke.Models.DocumentHook.Owner.init -> void
LM.HubSpoke.Models.DocumentHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.DocumentHook.SchemaVersion.init -> void
LM.HubSpoke.Models.DocumentHook.Title.get -> string?
LM.HubSpoke.Models.DocumentHook.Title.init -> void
LM.HubSpoke.Models.DocumentHook.Version.get -> string?
LM.HubSpoke.Models.DocumentHook.Version.init -> void
LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.MarketingMaterial = 1 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.Other = 6 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.Poster = 5 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.Presentation = 0 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.Report = 2 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.StandardOperatingProcedure = 3 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.Whitepaper = 4 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.EntryChangeLogEvent
LM.HubSpoke.Models.EntryChangeLogEvent.Action.get -> string!
LM.HubSpoke.Models.EntryChangeLogEvent.Action.init -> void
LM.HubSpoke.Models.EntryChangeLogEvent.Details.get -> LM.HubSpoke.Models.ChangeLogAttachmentDetails?
LM.HubSpoke.Models.EntryChangeLogEvent.Details.init -> void
LM.HubSpoke.Models.EntryChangeLogEvent.EntryChangeLogEvent() -> void
LM.HubSpoke.Models.EntryChangeLogEvent.EventId.get -> string!
LM.HubSpoke.Models.EntryChangeLogEvent.EventId.init -> void
LM.HubSpoke.Models.EntryChangeLogEvent.PerformedBy.get -> string!
LM.HubSpoke.Models.EntryChangeLogEvent.PerformedBy.init -> void
LM.HubSpoke.Models.EntryChangeLogEvent.TimestampUtc.get -> System.DateTime
LM.HubSpoke.Models.EntryChangeLogEvent.TimestampUtc.init -> void
LM.HubSpoke.Models.EntryChangeLogHook
LM.HubSpoke.Models.EntryChangeLogHook.EntryChangeLogHook() -> void
LM.HubSpoke.Models.EntryChangeLogHook.Events.get -> System.Collections.Generic.List<LM.HubSpoke.Models.EntryChangeLogEvent!>!
LM.HubSpoke.Models.EntryChangeLogHook.Events.set -> void
LM.HubSpoke.Models.EntryChangeLogHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.EntryChangeLogHook.SchemaVersion.init -> void
LM.HubSpoke.Models.PdfAnnotationPreview
LM.HubSpoke.Models.PdfAnnotationPreview.AnnotationId.get -> string!
LM.HubSpoke.Models.PdfAnnotationPreview.AnnotationId.init -> void
LM.HubSpoke.Models.PdfAnnotationPreview.ImagePath.get -> string!
LM.HubSpoke.Models.PdfAnnotationPreview.ImagePath.init -> void
LM.HubSpoke.Models.PdfAnnotationPreview.PdfAnnotationPreview() -> void
LM.HubSpoke.Models.PdfAnnotationsHook
LM.HubSpoke.Models.PdfAnnotationsHook.Annotations.get -> System.Collections.Generic.List<LM.HubSpoke.Models.PdfAnnotationMetadata!>!
LM.HubSpoke.Models.PdfAnnotationsHook.Annotations.init -> void
LM.HubSpoke.Models.PdfAnnotationsHook.OverlayPath.get -> string!
LM.HubSpoke.Models.PdfAnnotationsHook.OverlayPath.init -> void
LM.HubSpoke.Models.PdfAnnotationsHook.Previews.get -> System.Collections.Generic.List<LM.HubSpoke.Models.PdfAnnotationPreview!>!
LM.HubSpoke.Models.PdfAnnotationsHook.Previews.init -> void
LM.HubSpoke.Models.PdfAnnotationsHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.PdfAnnotationsHook.SchemaVersion.init -> void
LM.HubSpoke.Models.PdfAnnotationsHook.PdfAnnotationsHook() -> void
LM.HubSpoke.Models.PdfAnnotationMetadata
LM.HubSpoke.Models.PdfAnnotationMetadata.AnnotationId.get -> string!
LM.HubSpoke.Models.PdfAnnotationMetadata.AnnotationId.init -> void
LM.HubSpoke.Models.PdfAnnotationMetadata.Color.get -> LM.HubSpoke.Models.PdfAnnotationColorMetadata?
LM.HubSpoke.Models.PdfAnnotationMetadata.Color.init -> void
LM.HubSpoke.Models.PdfAnnotationMetadata.Note.get -> string?
LM.HubSpoke.Models.PdfAnnotationMetadata.Note.init -> void
LM.HubSpoke.Models.PdfAnnotationMetadata.PdfAnnotationMetadata() -> void
LM.HubSpoke.Models.PdfAnnotationMetadata.Text.get -> string?
LM.HubSpoke.Models.PdfAnnotationMetadata.Text.init -> void
LM.HubSpoke.Models.PdfAnnotationColorMetadata
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Blue.get -> int
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Blue.init -> void
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Green.get -> int
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Green.init -> void
LM.HubSpoke.Models.PdfAnnotationColorMetadata.PdfAnnotationColorMetadata() -> void
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Red.get -> int
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Red.init -> void
LM.HubSpoke.Models.EntryHooks
LM.HubSpoke.Models.EntryHooks.Article.get -> string?
LM.HubSpoke.Models.EntryHooks.Article.init -> void
LM.HubSpoke.Models.EntryHooks.LitSearch.get -> string?
LM.HubSpoke.Models.EntryHooks.LitSearch.init -> void
LM.HubSpoke.Models.EntryHooks.DataExtraction.get -> string?
LM.HubSpoke.Models.EntryHooks.DataExtraction.init -> void
LM.HubSpoke.Models.EntryHooks.Document.get -> string?
LM.HubSpoke.Models.EntryHooks.Document.init -> void
LM.HubSpoke.Models.EntryHooks.PdfAnnotations.get -> string?
LM.HubSpoke.Models.EntryHooks.PdfAnnotations.init -> void
LM.HubSpoke.Models.EntryHooks.EntryHooks() -> void
LM.HubSpoke.Models.EntryHooks.History.get -> string?
LM.HubSpoke.Models.EntryHooks.History.init -> void
LM.HubSpoke.Models.EntryHooks.Notes.get -> string?
LM.HubSpoke.Models.EntryHooks.Notes.init -> void
LM.HubSpoke.Models.EntryHooks.Provenance.get -> string?
LM.HubSpoke.Models.EntryHooks.Provenance.init -> void
LM.HubSpoke.Models.EntryHooks.Relations.get -> string?
LM.HubSpoke.Models.EntryHooks.Relations.init -> void
LM.HubSpoke.Models.EntryHooks.SearchHits.get -> string?
LM.HubSpoke.Models.EntryHooks.SearchHits.init -> void
LM.HubSpoke.Models.EntryHooks.Trial.get -> string?
LM.HubSpoke.Models.EntryHooks.Trial.init -> void
LM.HubSpoke.Models.EntryHub
LM.HubSpoke.Models.EntryHub.ConcurrencyStamp.get -> string!
LM.HubSpoke.Models.EntryHub.ConcurrencyStamp.init -> void
LM.HubSpoke.Models.EntryHub.CreatedBy.get -> LM.HubSpoke.Models.PersonRef
LM.HubSpoke.Models.EntryHub.CreatedBy.init -> void
LM.HubSpoke.Models.EntryHub.CreatedUtc.get -> System.DateTime
LM.HubSpoke.Models.EntryHub.CreatedUtc.init -> void
LM.HubSpoke.Models.EntryHub.CreationMethod.get -> LM.HubSpoke.Models.CreationMethod
LM.HubSpoke.Models.EntryHub.CreationMethod.init -> void
LM.HubSpoke.Models.EntryHub.DisplayTitle.get -> string!
LM.HubSpoke.Models.EntryHub.DisplayTitle.init -> void
LM.HubSpoke.Models.EntryHub.EntryHub() -> void
LM.HubSpoke.Models.EntryHub.EntryId.get -> string!
LM.HubSpoke.Models.EntryHub.EntryId.init -> void
LM.HubSpoke.Models.EntryHub.Flags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Models.EntryHub.Flags.init -> void
LM.HubSpoke.Models.EntryHub.Hooks.get -> LM.HubSpoke.Models.EntryHooks!
LM.HubSpoke.Models.EntryHub.Hooks.init -> void
LM.HubSpoke.Models.DataExtractionHook
LM.HubSpoke.Models.DataExtractionHook.Assignments.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.PopulationInterventionAssignment!>!
LM.HubSpoke.Models.DataExtractionHook.Assignments.init -> void
LM.HubSpoke.Models.DataExtractionHook.DataExtractionHook() -> void
LM.HubSpoke.Models.DataExtractionHook.Endpoints.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.ExtractedEndpoint!>!
LM.HubSpoke.Models.DataExtractionHook.Endpoints.init -> void
LM.HubSpoke.Models.DataExtractionHook.EntryId.get -> string!
LM.HubSpoke.Models.DataExtractionHook.EntryId.init -> void
LM.HubSpoke.Models.DataExtractionHook.Interventions.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.ExtractedIntervention!>!
LM.HubSpoke.Models.DataExtractionHook.Interventions.init -> void
LM.HubSpoke.Models.DataExtractionHook.Populations.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.ExtractedPopulation!>!
LM.HubSpoke.Models.DataExtractionHook.Populations.init -> void
LM.HubSpoke.Models.DataExtractionHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.DataExtractionHook.SchemaVersion.init -> void
LM.HubSpoke.Models.DataExtractionHook.Source.get -> string?
LM.HubSpoke.Models.DataExtractionHook.Source.init -> void
LM.HubSpoke.Models.DataExtractionHook.Title.get -> string?
LM.HubSpoke.Models.DataExtractionHook.Title.init -> void
LM.HubSpoke.Models.DataExtractionHook.Year.get -> int?
LM.HubSpoke.Models.DataExtractionHook.Year.init -> void
LM.HubSpoke.Models.ExtractedEndpoint
LM.HubSpoke.Models.ExtractedEndpoint.Category.get -> string!
LM.HubSpoke.Models.ExtractedEndpoint.Category.init -> void
LM.HubSpoke.Models.ExtractedEndpoint.Description.get -> string?
LM.HubSpoke.Models.ExtractedEndpoint.Description.init -> void
LM.HubSpoke.Models.ExtractedEndpoint.ExtractedEndpoint() -> void
LM.HubSpoke.Models.ExtractedEndpoint.Id.get -> string!
LM.HubSpoke.Models.ExtractedEndpoint.Id.init -> void
LM.HubSpoke.Models.ExtractedEndpoint.Name.get -> string!
LM.HubSpoke.Models.ExtractedEndpoint.Name.init -> void
LM.HubSpoke.Models.ExtractedEndpoint.Readouts.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.EndpointReadout!>!
LM.HubSpoke.Models.ExtractedEndpoint.Readouts.init -> void
LM.HubSpoke.Models.ExtractedIntervention
LM.HubSpoke.Models.ExtractedIntervention.Attributes.get -> System.Collections.Generic.IReadOnlyDictionary<string!, string!>?
LM.HubSpoke.Models.ExtractedIntervention.Attributes.init -> void
LM.HubSpoke.Models.ExtractedIntervention.Description.get -> string?
LM.HubSpoke.Models.ExtractedIntervention.Description.init -> void
LM.HubSpoke.Models.ExtractedIntervention.ExtractedIntervention() -> void
LM.HubSpoke.Models.ExtractedIntervention.Id.get -> string!
LM.HubSpoke.Models.ExtractedIntervention.Id.init -> void
LM.HubSpoke.Models.ExtractedIntervention.Name.get -> string!
LM.HubSpoke.Models.ExtractedIntervention.Name.init -> void
LM.HubSpoke.Models.ExtractedIntervention.Type.get -> string?
LM.HubSpoke.Models.ExtractedIntervention.Type.init -> void
LM.HubSpoke.Models.ExtractedPopulation
LM.HubSpoke.Models.ExtractedPopulation.BaselineCharacteristics.get -> System.Collections.Generic.IReadOnlyDictionary<string!, string!>!
LM.HubSpoke.Models.ExtractedPopulation.BaselineCharacteristics.init -> void
LM.HubSpoke.Models.ExtractedPopulation.Description.get -> string?
LM.HubSpoke.Models.ExtractedPopulation.Description.init -> void
LM.HubSpoke.Models.ExtractedPopulation.ExtractedPopulation() -> void
LM.HubSpoke.Models.ExtractedPopulation.Id.get -> string!
LM.HubSpoke.Models.ExtractedPopulation.Id.init -> void
LM.HubSpoke.Models.ExtractedPopulation.Name.get -> string!
LM.HubSpoke.Models.ExtractedPopulation.Name.init -> void
LM.HubSpoke.Models.EndpointReadout
LM.HubSpoke.Models.EndpointReadout.ComparatorInterventionId.get -> string?
LM.HubSpoke.Models.EndpointReadout.ComparatorInterventionId.init -> void
LM.HubSpoke.Models.EndpointReadout.EndpointReadout() -> void
LM.HubSpoke.Models.EndpointReadout.InterventionId.get -> string?
LM.HubSpoke.Models.EndpointReadout.InterventionId.init -> void
LM.HubSpoke.Models.EndpointReadout.KaplanMeierCurve.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.KaplanMeierPoint!>?
LM.HubSpoke.Models.EndpointReadout.KaplanMeierCurve.init -> void
LM.HubSpoke.Models.EndpointReadout.Metric.get -> string?
LM.HubSpoke.Models.EndpointReadout.Metric.init -> void
LM.HubSpoke.Models.EndpointReadout.PopulationId.get -> string?
LM.HubSpoke.Models.EndpointReadout.PopulationId.init -> void
LM.HubSpoke.Models.EndpointReadout.Timepoint.get -> string?
LM.HubSpoke.Models.EndpointReadout.Timepoint.init -> void
LM.HubSpoke.Models.EndpointReadout.Unit.get -> string?
LM.HubSpoke.Models.EndpointReadout.Unit.init -> void
LM.HubSpoke.Models.EndpointReadout.Value.get -> double?
LM.HubSpoke.Models.EndpointReadout.Value.init -> void
LM.HubSpoke.Models.KaplanMeierPoint
LM.HubSpoke.Models.KaplanMeierPoint.KaplanMeierPoint() -> void
LM.HubSpoke.Models.KaplanMeierPoint.SurvivalProbability.get -> double
LM.HubSpoke.Models.KaplanMeierPoint.SurvivalProbability.init -> void
LM.HubSpoke.Models.KaplanMeierPoint.Time.get -> double
LM.HubSpoke.Models.KaplanMeierPoint.Time.init -> void
LM.HubSpoke.Models.PopulationInterventionAssignment
LM.HubSpoke.Models.PopulationInterventionAssignment.ArmLabel.get -> string?
LM.HubSpoke.Models.PopulationInterventionAssignment.ArmLabel.init -> void
LM.HubSpoke.Models.PopulationInterventionAssignment.PopulationId.get -> string!
LM.HubSpoke.Models.PopulationInterventionAssignment.PopulationId.init -> void
LM.HubSpoke.Models.PopulationInterventionAssignment.InterventionId.get -> string!
LM.HubSpoke.Models.PopulationInterventionAssignment.InterventionId.init -> void
LM.HubSpoke.Models.PopulationInterventionAssignment.PopulationInterventionAssignment() -> void
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.GetEntryOverviewAsync(string! entryId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview?>!
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.GetKaplanMeierOverlaysAsync(string! entryId, string? endpointId = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.GetMortalityComparisonsAsync(string? entryId = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.RefreshEntryAsync(string! entryId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.SearchBaselineCharacteristicsAsync(string! characteristicSearchTerm, string? valueContains = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.KnowledgeGraphHub(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.GetEntryOverviewAsync(string! entryId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview?>!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.GetKaplanMeierOverlaysAsync(string! entryId, string? endpointId = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.GetMortalityComparisonsAsync(string? entryId = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.RefreshEntryAsync(string! entryId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.SearchBaselineCharacteristicsAsync(string! characteristicSearchTerm, string? valueContains = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.BaselineCharacteristicHit(string! entryId, string! entryTitle, string! populationId, string! populationName, string! characteristic, string! value) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.Characteristic.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.EntryId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.EntryTitle.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.PopulationId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.PopulationName.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.Value.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.GraphEdge(string! sourceType, string! sourceId, string! targetType, string! targetId, string! relationship, string? payloadJson) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.PayloadJson.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.Relationship.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.SourceId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.SourceType.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.TargetId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.TargetType.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.Edges.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge!>!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.GraphEntryOverview(string! entryId, string! title, System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode!>! populations, System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode!>! interventions, System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode!>! endpoints, System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge!>! edges) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.EntryId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.Endpoints.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode!>!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.Interventions.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode!>!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.Populations.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode!>!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.Title.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode.Category.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode.Description.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode.EndpointId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode.GraphEndpointNode(string! endpointId, string! name, string! category, string? description) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode.Name.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode.Description.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode.GraphInterventionNode(string! interventionId, string! name, string? type, string? description) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode.InterventionId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode.Name.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode.Type.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode
LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode.Description.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode.GraphPopulationNode(string! populationId, string! name, string? description) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode.Name.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode.PopulationId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.Curve.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto!>!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.EndpointId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.EndpointName.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.EntryId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.EntryTitle.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.InterventionId.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.InterventionName.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.KaplanMeierOverlay(string! entryId, string! entryTitle, string! endpointId, string! endpointName, string? populationId, string? interventionId, string? interventionName, System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto!>! curve) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.PopulationId.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto.KaplanMeierPointDto(double time, double survivalProbability) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto.SurvivalProbability.get -> double
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto.Time.get -> double
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.ComparatorInterventionId.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.ComparatorName.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.EndpointId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.EndpointName.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.EntryId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.EntryTitle.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.InterventionId.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.InterventionName.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.Metric.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.MortalityComparison(string! entryId, string! entryTitle, string! endpointId, string! endpointName, string? populationId, string? interventionId, string? interventionName, string? comparatorInterventionId, string? comparatorName, double? value, string? unit, string? metric, string? timepoint) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.PopulationId.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.Timepoint.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.Unit.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.Value.get -> double?
LM.HubSpoke.Models.EntryHub.LastActivityUtc.get -> System.DateTime?
LM.HubSpoke.Models.EntryHub.LastActivityUtc.init -> void
LM.HubSpoke.Models.EntryHub.Origin.get -> LM.HubSpoke.Models.EntryOrigin
LM.HubSpoke.Models.EntryHub.Origin.init -> void
LM.HubSpoke.Models.EntryHub.PrimaryPurpose.get -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryHub.PrimaryPurpose.init -> void
LM.HubSpoke.Models.EntryHub.PrimaryPurposeSource.get -> LM.HubSpoke.Models.PurposeSource
LM.HubSpoke.Models.EntryHub.PrimaryPurposeSource.init -> void
LM.HubSpoke.Models.EntryHub.RelationsSummary.get -> LM.HubSpoke.Models.EntryRelationsSummary?
LM.HubSpoke.Models.EntryHub.RelationsSummary.init -> void
LM.HubSpoke.Models.EntryHub.SchemaVersion.get -> string!
LM.HubSpoke.Models.EntryHub.SchemaVersion.init -> void
LM.HubSpoke.Models.EntryHub.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Models.EntryHub.Tags.init -> void
LM.HubSpoke.Models.EntryHub.UpdatedBy.get -> LM.HubSpoke.Models.PersonRef
LM.HubSpoke.Models.EntryHub.UpdatedBy.init -> void
LM.HubSpoke.Models.EntryHub.UpdatedUtc.get -> System.DateTime
LM.HubSpoke.Models.EntryHub.UpdatedUtc.init -> void
LM.HubSpoke.Models.EntryNotesHook
LM.HubSpoke.Models.EntryNotesHook.EntryNotesHook() -> void
LM.HubSpoke.Models.EntryNotesHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.EntryNotesHook.SchemaVersion.init -> void
LM.HubSpoke.Models.EntryNotesHook.Summary.get -> LM.HubSpoke.Models.EntryNotesSummary?
LM.HubSpoke.Models.EntryNotesHook.Summary.init -> void
LM.HubSpoke.Models.EntryNotesHook.SummaryText.get -> string?
LM.HubSpoke.Models.EntryNotesHook.UpdatedUtc.get -> System.DateTime
LM.HubSpoke.Models.EntryNotesHook.UpdatedUtc.init -> void
LM.HubSpoke.Models.EntryNotesHook.UserNotes.get -> string?
LM.HubSpoke.Models.EntryNotesHook.UserNotes.init -> void
LM.HubSpoke.Models.EntryNotesSummary
LM.HubSpoke.Models.EntryNotesSummary.EntryNotesSummary() -> void
LM.HubSpoke.Models.EntryNotesSummary.GetRenderedText() -> string?
LM.HubSpoke.Models.EntryNotesSummary.LitSearch.get -> LM.HubSpoke.Models.LitSearchNoteSummary?
LM.HubSpoke.Models.EntryNotesSummary.LitSearch.init -> void
LM.HubSpoke.Models.EntryNotesSummary.RawText.get -> string?
LM.HubSpoke.Models.EntryNotesSummary.RawText.init -> void
LM.HubSpoke.Models.EntryNotesSummary.Rendered.get -> string?
LM.HubSpoke.Models.EntryNotesSummary.Rendered.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary
LM.HubSpoke.Models.LitSearchNoteRunSummary.ExecutedBy.get -> string?
LM.HubSpoke.Models.LitSearchNoteRunSummary.ExecutedBy.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.From.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchNoteRunSummary.From.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.LitSearchNoteRunSummary() -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.RunId.get -> string!
LM.HubSpoke.Models.LitSearchNoteRunSummary.RunId.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.RunUtc.get -> System.DateTime
LM.HubSpoke.Models.LitSearchNoteRunSummary.RunUtc.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.To.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchNoteRunSummary.To.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.TotalHits.get -> int
LM.HubSpoke.Models.LitSearchNoteRunSummary.TotalHits.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary
LM.HubSpoke.Models.LitSearchNoteSummary.CreatedBy.get -> string?
LM.HubSpoke.Models.LitSearchNoteSummary.CreatedBy.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.CreatedUtc.get -> System.DateTime
LM.HubSpoke.Models.LitSearchNoteSummary.CreatedUtc.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.DerivedFromEntryId.get -> string?
LM.HubSpoke.Models.LitSearchNoteSummary.DerivedFromEntryId.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.LatestRun.get -> LM.HubSpoke.Models.LitSearchNoteRunSummary?
LM.HubSpoke.Models.LitSearchNoteSummary.LatestRun.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.LitSearchNoteSummary() -> void
LM.HubSpoke.Models.LitSearchNoteSummary.Provider.get -> string!
LM.HubSpoke.Models.LitSearchNoteSummary.Provider.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.Query.get -> string!
LM.HubSpoke.Models.LitSearchNoteSummary.Query.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.RunCount.get -> int
LM.HubSpoke.Models.LitSearchNoteSummary.RunCount.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.Title.get -> string?
LM.HubSpoke.Models.LitSearchNoteSummary.Title.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.ToDisplayString() -> string!
LM.HubSpoke.Models.EntryOrigin
LM.HubSpoke.Models.EntryOrigin.External = 0 -> LM.HubSpoke.Models.EntryOrigin
LM.HubSpoke.Models.EntryOrigin.Internal = 1 -> LM.HubSpoke.Models.EntryOrigin
LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Code = 5 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Dataset = 4 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Document = 3 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Manuscript = 1 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Trial = 2 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Unknown = 0 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryRelationsSummary
LM.HubSpoke.Models.EntryRelationsSummary.EntryRelationsSummary() -> void
LM.HubSpoke.Models.EntryRelationsSummary.RelatedCount.get -> int
LM.HubSpoke.Models.EntryRelationsSummary.RelatedCount.init -> void
LM.HubSpoke.Models.EntryRelationsSummary.RelationsUpdatedUtc.get -> System.DateTime?
LM.HubSpoke.Models.EntryRelationsSummary.RelationsUpdatedUtc.init -> void
LM.HubSpoke.Models.EntryRelationsSummary.VariantOfCount.get -> int
LM.HubSpoke.Models.EntryRelationsSummary.VariantOfCount.init -> void
LM.HubSpoke.Models.Grant
LM.HubSpoke.Models.Grant.Agency.get -> string?
LM.HubSpoke.Models.Grant.Agency.init -> void
LM.HubSpoke.Models.Grant.Country.get -> string?
LM.HubSpoke.Models.Grant.Country.init -> void
LM.HubSpoke.Models.Grant.Grant() -> void
LM.HubSpoke.Models.Grant.GrantId.get -> string?
LM.HubSpoke.Models.Grant.GrantId.init -> void
LM.HubSpoke.Models.JournalInfo
LM.HubSpoke.Models.JournalInfo.Country.get -> string?
LM.HubSpoke.Models.JournalInfo.Country.init -> void
LM.HubSpoke.Models.JournalInfo.ISOAbbreviation.get -> string?
LM.HubSpoke.Models.JournalInfo.ISOAbbreviation.init -> void
LM.HubSpoke.Models.JournalInfo.ISSN.get -> string?
LM.HubSpoke.Models.JournalInfo.ISSN.init -> void
LM.HubSpoke.Models.JournalInfo.ISSNElectronic.get -> string?
LM.HubSpoke.Models.JournalInfo.ISSNElectronic.init -> void
LM.HubSpoke.Models.JournalInfo.ISSNPrint.get -> string?
LM.HubSpoke.Models.JournalInfo.ISSNPrint.init -> void
LM.HubSpoke.Models.JournalInfo.Issue.get -> LM.HubSpoke.Models.JournalIssue!
LM.HubSpoke.Models.JournalInfo.Issue.init -> void
LM.HubSpoke.Models.JournalInfo.JournalInfo() -> void
LM.HubSpoke.Models.JournalInfo.NlmUniqueId.get -> string?
LM.HubSpoke.Models.JournalInfo.NlmUniqueId.init -> void
LM.HubSpoke.Models.JournalInfo.Title.get -> string!
LM.HubSpoke.Models.JournalInfo.Title.init -> void
LM.HubSpoke.Models.JournalIssue
LM.HubSpoke.Models.JournalIssue.JournalIssue() -> void
LM.HubSpoke.Models.JournalIssue.Number.get -> string?
LM.HubSpoke.Models.JournalIssue.Number.init -> void
LM.HubSpoke.Models.JournalIssue.PubDate.get -> LM.HubSpoke.Models.PartialDate?
LM.HubSpoke.Models.JournalIssue.PubDate.init -> void
LM.HubSpoke.Models.JournalIssue.Volume.get -> string?
LM.HubSpoke.Models.JournalIssue.Volume.init -> void
LM.HubSpoke.Models.JsonStd
LM.HubSpoke.Models.LitSearchHook
LM.HubSpoke.Models.LitSearchHook.CreatedBy.get -> string?
LM.HubSpoke.Models.LitSearchHook.CreatedBy.init -> void
LM.HubSpoke.Models.LitSearchHook.CreatedUtc.get -> System.DateTime
LM.HubSpoke.Models.LitSearchHook.CreatedUtc.init -> void
LM.HubSpoke.Models.LitSearchHook.From.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchHook.From.init -> void
LM.HubSpoke.Models.LitSearchHook.Keywords.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Models.LitSearchHook.Keywords.init -> void
LM.HubSpoke.Models.LitSearchHook.DerivedFromEntryId.get -> string?
LM.HubSpoke.Models.LitSearchHook.DerivedFromEntryId.init -> void
LM.HubSpoke.Models.LitSearchHook.LitSearchHook() -> void
LM.HubSpoke.Models.LitSearchHook.Provider.get -> string!
LM.HubSpoke.Models.LitSearchHook.Provider.init -> void
LM.HubSpoke.Models.LitSearchHook.Query.get -> string!
LM.HubSpoke.Models.LitSearchHook.Query.init -> void
LM.HubSpoke.Models.LitSearchHook.LegacyNotes.get -> string?
LM.HubSpoke.Models.LitSearchHook.LegacyNotes.init -> void
LM.HubSpoke.Models.LitSearchHook.NotesSummary.get -> string?
LM.HubSpoke.Models.LitSearchHook.NotesSummary.set -> void
LM.HubSpoke.Models.LitSearchHook.UserNotes.get -> string?
LM.HubSpoke.Models.LitSearchHook.UserNotes.set -> void
LM.HubSpoke.Models.LitSearchHook.Runs.get -> System.Collections.Generic.List<LM.HubSpoke.Models.LitSearchRun!>!
LM.HubSpoke.Models.LitSearchHook.Runs.init -> void
LM.HubSpoke.Models.LitSearchHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.LitSearchHook.SchemaVersion.init -> void
LM.HubSpoke.Models.LitSearchHook.Title.get -> string!
LM.HubSpoke.Models.LitSearchHook.Title.init -> void
LM.HubSpoke.Models.LitSearchHook.To.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchHook.To.init -> void
LM.HubSpoke.Models.LitSearchRun
LM.HubSpoke.Models.LitSearchRun.IsFavorite.get -> bool
LM.HubSpoke.Models.LitSearchRun.IsFavorite.init -> void
LM.HubSpoke.Models.LitSearchRun.LitSearchRun() -> void
LM.HubSpoke.Models.LitSearchRun.RawAttachments.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.LitSearchRun.RawAttachments.init -> void
LM.HubSpoke.Models.LitSearchRun.CheckedEntryIdsPath.get -> string?
LM.HubSpoke.Models.LitSearchRun.CheckedEntryIdsPath.set -> void
LM.HubSpoke.Models.LitSearchRun.RunId.get -> string!
LM.HubSpoke.Models.LitSearchRun.RunId.init -> void
LM.HubSpoke.Models.LitSearchRun.RunUtc.get -> System.DateTime
LM.HubSpoke.Models.LitSearchRun.RunUtc.init -> void
LM.HubSpoke.Models.LitSearchRun.ExecutedBy.get -> string?
LM.HubSpoke.Models.LitSearchRun.ExecutedBy.init -> void
LM.HubSpoke.Models.LitSearchRun.From.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchRun.From.init -> void
LM.HubSpoke.Models.LitSearchRun.To.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchRun.To.init -> void
LM.HubSpoke.Models.LitSearchRun.TotalHits.get -> int
LM.HubSpoke.Models.LitSearchRun.TotalHits.init -> void
LM.HubSpoke.Models.MedlineInfo
LM.HubSpoke.Models.MedlineInfo.CitationSubset.get -> string?
LM.HubSpoke.Models.MedlineInfo.CitationSubset.init -> void
LM.HubSpoke.Models.MedlineInfo.MedlineInfo() -> void
LM.HubSpoke.Models.MedlineInfo.PublicationStatusRaw.get -> string?
LM.HubSpoke.Models.MedlineInfo.PublicationStatusRaw.init -> void
LM.HubSpoke.Models.MeshHeading
LM.HubSpoke.Models.MeshHeading.Descriptor.get -> string!
LM.HubSpoke.Models.MeshHeading.Descriptor.init -> void
LM.HubSpoke.Models.MeshHeading.MajorTopic.get -> bool
LM.HubSpoke.Models.MeshHeading.MajorTopic.init -> void
LM.HubSpoke.Models.MeshHeading.MeshHeading() -> void
LM.HubSpoke.Models.MeshHeading.Qualifiers.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.MeshHeading.Qualifiers.init -> void
LM.HubSpoke.Models.NullableUtcDateTimeConverter
LM.HubSpoke.Models.NullableUtcDateTimeConverter.NullableUtcDateTimeConverter() -> void
LM.HubSpoke.Models.Pagination
LM.HubSpoke.Models.Pagination.ArticleNumber.get -> string?
LM.HubSpoke.Models.Pagination.ArticleNumber.init -> void
LM.HubSpoke.Models.Pagination.EndPage.get -> string?
LM.HubSpoke.Models.Pagination.EndPage.init -> void
LM.HubSpoke.Models.Pagination.Pagination() -> void
LM.HubSpoke.Models.Pagination.StartPage.get -> string?
LM.HubSpoke.Models.Pagination.StartPage.init -> void
LM.HubSpoke.Models.PartialDate
LM.HubSpoke.Models.PartialDate.Day.get -> int?
LM.HubSpoke.Models.PartialDate.Day.init -> void
LM.HubSpoke.Models.PartialDate.Month.get -> int?
LM.HubSpoke.Models.PartialDate.Month.init -> void
LM.HubSpoke.Models.PartialDate.PartialDate() -> void
LM.HubSpoke.Models.PartialDate.ToDateTimeOrNull() -> System.DateTime?
LM.HubSpoke.Models.PartialDate.Year.get -> int
LM.HubSpoke.Models.PartialDate.Year.init -> void
LM.HubSpoke.Models.PersonRef
LM.HubSpoke.Models.PersonRef.DisplayName.get -> string?
LM.HubSpoke.Models.PersonRef.DisplayName.init -> void
LM.HubSpoke.Models.PersonRef.Id.get -> string!
LM.HubSpoke.Models.PersonRef.Id.init -> void
LM.HubSpoke.Models.PersonRef.PersonRef() -> void
LM.HubSpoke.Models.PersonRef.PersonRef(string! Id, string? DisplayName) -> void
LM.HubSpoke.Models.PersonRef.TimestampUtc.get -> System.DateTime?
LM.HubSpoke.Models.PersonRef.TimestampUtc.init -> void
LM.HubSpoke.Models.PublicationHistory
LM.HubSpoke.Models.PublicationHistory.Accepted.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.Accepted.init -> void
LM.HubSpoke.Models.PublicationHistory.Entrez.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.Entrez.init -> void
LM.HubSpoke.Models.PublicationHistory.Medline.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.Medline.init -> void
LM.HubSpoke.Models.PublicationHistory.PublicationHistory() -> void
LM.HubSpoke.Models.PublicationHistory.PubMed.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.PubMed.init -> void
LM.HubSpoke.Models.PublicationHistory.Received.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.Received.init -> void
LM.HubSpoke.Models.PublicationHistory.Revised.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.Revised.init -> void
LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.AheadOfPrint = 1 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.EPublish = 2 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.Medline = 4 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.PPublish = 3 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.PubMedNotMedline = 5 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.Unknown = 0 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PurposeSource
LM.HubSpoke.Models.PurposeSource.Inferred = 0 -> LM.HubSpoke.Models.PurposeSource
LM.HubSpoke.Models.PurposeSource.Manual = 1 -> LM.HubSpoke.Models.PurposeSource
LM.HubSpoke.Models.UtcDateTimeConverter
LM.HubSpoke.Models.UtcDateTimeConverter.UtcDateTimeConverter() -> void
LM.HubSpoke.Spokes.ArticleSpokeHandler
LM.HubSpoke.Spokes.ArticleSpokeHandler.ArticleSpokeHandler() -> void
LM.HubSpoke.Spokes.ArticleSpokeHandler.BuildHookAsync(LM.Core.Models.Entry! entry, LM.HubSpoke.Abstractions.CasResult primary, System.Collections.Generic.IEnumerable<string!>! attachmentRelPaths, System.Func<string!, System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.HubSpoke.Abstractions.CasResult>!>! moveToCas, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.ArticleSpokeHandler.BuildIndex(LM.HubSpoke.Models.EntryHub! hub, object? hookObj, string? fullText) -> LM.HubSpoke.Abstractions.SpokeIndexContribution
LM.HubSpoke.Spokes.ArticleSpokeHandler.Handles.get -> LM.Core.Models.EntryType
LM.HubSpoke.Spokes.ArticleSpokeHandler.HookPath.get -> string!
LM.HubSpoke.Spokes.ArticleSpokeHandler.LoadHookAsync(LM.Core.Abstractions.IWorkSpaceService! ws, string! entryId, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.ArticleSpokeHandler.MapToEntry(LM.HubSpoke.Models.EntryHub! hub, object? hookObj) -> LM.Core.Models.Entry!
LM.HubSpoke.Spokes.DocumentSpokeHandler
LM.HubSpoke.Spokes.DocumentSpokeHandler.BuildHookAsync(LM.Core.Models.Entry! entry, LM.HubSpoke.Abstractions.CasResult primary, System.Collections.Generic.IEnumerable<string!>! attachmentRelPaths, System.Func<string!, System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.HubSpoke.Abstractions.CasResult>!>! moveToCas, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.DocumentSpokeHandler.BuildIndex(LM.HubSpoke.Models.EntryHub! hub, object? hookObj, string? fullText) -> LM.HubSpoke.Abstractions.SpokeIndexContribution
LM.HubSpoke.Spokes.DocumentSpokeHandler.DocumentSpokeHandler() -> void
LM.HubSpoke.Spokes.DocumentSpokeHandler.Handles.get -> LM.Core.Models.EntryType
LM.HubSpoke.Spokes.DocumentSpokeHandler.HookPath.get -> string!
LM.HubSpoke.Spokes.DocumentSpokeHandler.LoadHookAsync(LM.Core.Abstractions.IWorkSpaceService! ws, string! entryId, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.DocumentSpokeHandler.MapToEntry(LM.HubSpoke.Models.EntryHub! hub, object? hookObj) -> LM.Core.Models.Entry!
LM.HubSpoke.Spokes.LitSearchSpokeHandler
LM.HubSpoke.Spokes.LitSearchSpokeHandler.BuildHookAsync(LM.Core.Models.Entry! entry, LM.HubSpoke.Abstractions.CasResult primary, System.Collections.Generic.IEnumerable<string!>! attachmentRelPaths, System.Func<string!, System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.HubSpoke.Abstractions.CasResult>!>! moveToCas, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.LitSearchSpokeHandler.BuildIndex(LM.HubSpoke.Models.EntryHub! hub, object? hookObj, string? extractedFullText) -> LM.HubSpoke.Abstractions.SpokeIndexContribution
LM.HubSpoke.Spokes.LitSearchSpokeHandler.Handles.get -> LM.Core.Models.EntryType
LM.HubSpoke.Spokes.LitSearchSpokeHandler.HookPath.get -> string!
LM.HubSpoke.Spokes.LitSearchSpokeHandler.LitSearchSpokeHandler(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.HubSpoke.Spokes.LitSearchSpokeHandler.LoadHookAsync(LM.Core.Abstractions.IWorkSpaceService! ws, string! entryId, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.LitSearchSpokeHandler.MapToEntry(LM.HubSpoke.Models.EntryHub! hub, object? hookObj) -> LM.Core.Models.Entry!
override LM.HubSpoke.Models.NullableUtcDateTimeConverter.Read(ref System.Text.Json.Utf8JsonReader reader, System.Type! typeToConvert, System.Text.Json.JsonSerializerOptions! options) -> System.DateTime?
override LM.HubSpoke.Models.NullableUtcDateTimeConverter.Write(System.Text.Json.Utf8JsonWriter! writer, System.DateTime? value, System.Text.Json.JsonSerializerOptions! options) -> void
override LM.HubSpoke.Models.UtcDateTimeConverter.Read(ref System.Text.Json.Utf8JsonReader reader, System.Type! typeToConvert, System.Text.Json.JsonSerializerOptions! options) -> System.DateTime
override LM.HubSpoke.Models.UtcDateTimeConverter.Write(System.Text.Json.Utf8JsonWriter! writer, System.DateTime value, System.Text.Json.JsonSerializerOptions! options) -> void
static LM.HubSpoke.Models.EntryNotesSummary.FromLitSearch(LM.HubSpoke.Models.LitSearchNoteSummary! summary, string? renderedText) -> LM.HubSpoke.Models.EntryNotesSummary!
static LM.HubSpoke.Models.EntryNotesSummary.FromRawText(string! text) -> LM.HubSpoke.Models.EntryNotesSummary!
static LM.HubSpoke.Models.PersonRef.Unknown.get -> LM.HubSpoke.Models.PersonRef
static readonly LM.HubSpoke.Models.JsonStd.Options -> System.Text.Json.JsonSerializerOptions!
---------- LM.Review.Core ----------
#nullable enable
LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConflictState.None = 0 -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConflictState.Conflict = 1 -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConflictState.Escalated = 2 -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConflictState.Resolved = 3 -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.Pending = 0 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.InProgress = 1 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.Included = 2 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.Excluded = 3 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.Escalated = 4 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewerRole.Primary = 0 -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewerRole.Secondary = 1 -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewerRole.TieBreaker = 2 -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewerRole.Arbitrator = 3 -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewStageType.TitleScreening = 0 -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewStageType.FullTextReview = 1 -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewStageType.ConsensusMeeting = 2 -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewStageType.QualityAssurance = 3 -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewerDecision
LM.Review.Core.Models.ReviewerDecision.AssignmentId.get -> string!
static LM.Review.Core.Models.ReviewerDecision.Create(string! assignmentId, string! reviewerId, LM.Review.Core.Models.ScreeningStatus decision, System.DateTimeOffset decidedAtUtc, string? notes = null) -> LM.Review.Core.Models.ReviewerDecision!
LM.Review.Core.Models.ReviewerDecision.DecidedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ReviewerDecision.Decision.get -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ReviewerDecision.Notes.get -> string?
LM.Review.Core.Models.ReviewerDecision.ReviewerId.get -> string!
LM.Review.Core.Models.ConsensusOutcome
LM.Review.Core.Models.ConsensusOutcome.Approved.get -> bool
static LM.Review.Core.Models.ConsensusOutcome.Create(string! stageId, bool approved, LM.Review.Core.Models.ConflictState resultingState, System.DateTimeOffset resolvedAtUtc, string? notes = null, string? resolvedBy = null) -> LM.Review.Core.Models.ConsensusOutcome!
LM.Review.Core.Models.ConsensusOutcome.Notes.get -> string?
LM.Review.Core.Models.ConsensusOutcome.ResolvedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ConsensusOutcome.ResolvedBy.get -> string?
LM.Review.Core.Models.ConsensusOutcome.ResultingState.get -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConsensusOutcome.StageId.get -> string!
LM.Review.Core.Models.ReviewAuditTrail
LM.Review.Core.Models.ReviewAuditTrail.Append(LM.Review.Core.Models.ReviewAuditTrail.AuditEntry! entry) -> LM.Review.Core.Models.ReviewAuditTrail!
static LM.Review.Core.Models.ReviewAuditTrail.Create(System.Collections.Generic.IEnumerable<LM.Review.Core.Models.ReviewAuditTrail.AuditEntry!>? entries = null) -> LM.Review.Core.Models.ReviewAuditTrail!
LM.Review.Core.Models.ReviewAuditTrail.Entries.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewAuditTrail.AuditEntry!>!
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Action.get -> string!
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Actor.get -> string!
static LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Create(string! id, string! actor, string! action, System.DateTimeOffset occurredAtUtc, string? details = null) -> LM.Review.Core.Models.ReviewAuditTrail.AuditEntry!
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Details.get -> string?
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Id.get -> string!
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.OccurredAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ReviewProject
LM.Review.Core.Models.ReviewProject.AuditTrail.get -> LM.Review.Core.Models.ReviewAuditTrail!
static LM.Review.Core.Models.ReviewProject.Create(string! id, string! name, System.DateTimeOffset createdAtUtc, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.StageDefinition!>! stageDefinitions, LM.Review.Core.Models.ReviewProjectMetadata? metadata = null, LM.Review.Core.Models.ReviewAuditTrail? auditTrail = null) -> LM.Review.Core.Models.ReviewProject!
LM.Review.Core.Models.ReviewProject.CreatedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ReviewProject.Id.get -> string!
LM.Review.Core.Models.ReviewProject.Name.get -> string!
LM.Review.Core.Models.ReviewProject.Metadata.get -> LM.Review.Core.Models.ReviewProjectMetadata!
LM.Review.Core.Models.ReviewProject.StageDefinitions.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.StageDefinition!>!
LM.Review.Core.Models.ReviewStage
LM.Review.Core.Models.ReviewStage.ActivatedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ReviewStage.Assignments.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ScreeningAssignment!>!
LM.Review.Core.Models.ReviewStage.CompletedAt.get -> System.DateTimeOffset?
LM.Review.Core.Models.ReviewStage.Consensus.get -> LM.Review.Core.Models.ConsensusOutcome?
LM.Review.Core.Models.ReviewStage.ConflictState.get -> LM.Review.Core.Models.ConflictState
static LM.Review.Core.Models.ReviewStage.Create(string! id, string! projectId, LM.Review.Core.Models.StageDefinition! definition, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.ScreeningAssignment!>! assignments, LM.Review.Core.Models.ConflictState conflictState, System.DateTimeOffset activatedAtUtc, System.DateTimeOffset? completedAtUtc = null, LM.Review.Core.Models.ConsensusOutcome? consensus = null) -> LM.Review.Core.Models.ReviewStage!
LM.Review.Core.Models.ReviewStage.Definition.get -> LM.Review.Core.Models.StageDefinition!
LM.Review.Core.Models.ReviewStage.Id.get -> string!
LM.Review.Core.Models.ReviewStage.IsComplete.get -> bool
LM.Review.Core.Models.ReviewStage.ProjectId.get -> string!
LM.Review.Core.Models.StageDefinition
LM.Review.Core.Models.StageDefinition.ConsensusPolicy.get -> LM.Review.Core.Models.StageConsensusPolicy!
static LM.Review.Core.Models.StageDefinition.Create(string! id, string! name, LM.Review.Core.Models.ReviewStageType stageType, LM.Review.Core.Models.ReviewerRequirement! reviewerRequirement, LM.Review.Core.Models.StageConsensusPolicy! consensusPolicy, LM.Review.Core.Models.StageDisplayProfile! displayProfile) -> LM.Review.Core.Models.StageDefinition!
LM.Review.Core.Models.StageDefinition.Id.get -> string!
LM.Review.Core.Models.StageDefinition.Name.get -> string!
LM.Review.Core.Models.StageDefinition.ReviewerRequirement.get -> LM.Review.Core.Models.ReviewerRequirement!
LM.Review.Core.Models.StageDefinition.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.StageDefinition.DisplayProfile.get -> LM.Review.Core.Models.StageDisplayProfile!
LM.Review.Core.Models.StageConsensusPolicy
LM.Review.Core.Models.StageConsensusPolicy.ArbitrationRole.get -> LM.Review.Core.Models.ReviewerRole?
static LM.Review.Core.Models.StageConsensusPolicy.Disabled() -> LM.Review.Core.Models.StageConsensusPolicy!
LM.Review.Core.Models.StageConsensusPolicy.EscalateOnDisagreement.get -> bool
LM.Review.Core.Models.StageConsensusPolicy.MinimumAgreements.get -> int
static LM.Review.Core.Models.StageConsensusPolicy.RequireAgreement(int minimumAgreements, bool escalateOnDisagreement, LM.Review.Core.Models.ReviewerRole? arbitrationRole) -> LM.Review.Core.Models.StageConsensusPolicy!
LM.Review.Core.Models.StageConsensusPolicy.RequiresConsensus.get -> bool
LM.Review.Core.Models.ReviewerRequirement
static LM.Review.Core.Models.ReviewerRequirement.Create(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<LM.Review.Core.Models.ReviewerRole, int>>! requirements) -> LM.Review.Core.Models.ReviewerRequirement!
LM.Review.Core.Models.ReviewerRequirement.GetRequirement(LM.Review.Core.Models.ReviewerRole role) -> int
LM.Review.Core.Models.ReviewerRequirement.Requirements.get -> System.Collections.Generic.IReadOnlyDictionary<LM.Review.Core.Models.ReviewerRole, int>!
LM.Review.Core.Models.ReviewerRequirement.TotalRequired.get -> int
LM.Review.Core.Models.ScreeningAssignment
LM.Review.Core.Models.ScreeningAssignment.AssignedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ScreeningAssignment.CompletedAt.get -> System.DateTimeOffset?
static LM.Review.Core.Models.ScreeningAssignment.Create(string! id, string! stageId, string! reviewerId, LM.Review.Core.Models.ReviewerRole role, LM.Review.Core.Models.ScreeningStatus status, System.DateTimeOffset assignedAtUtc, System.DateTimeOffset? completedAtUtc = null, LM.Review.Core.Models.ReviewerDecision? decision = null) -> LM.Review.Core.Models.ScreeningAssignment!
LM.Review.Core.Models.ScreeningAssignment.Decision.get -> LM.Review.Core.Models.ReviewerDecision?
LM.Review.Core.Models.ScreeningAssignment.Id.get -> string!
LM.Review.Core.Models.ScreeningAssignment.ReviewerId.get -> string!
LM.Review.Core.Models.ScreeningAssignment.Role.get -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ScreeningAssignment.StageId.get -> string!
LM.Review.Core.Models.ScreeningAssignment.Status.get -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.Forms.ExtractionForm
LM.Review.Core.Models.Forms.ExtractionForm.Category.get -> string?
static LM.Review.Core.Models.Forms.ExtractionForm.Create(string! id, string! name, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.Forms.FormSection!>! sections, string? description = null, string? category = null) -> LM.Review.Core.Models.Forms.ExtractionForm!
LM.Review.Core.Models.Forms.ExtractionForm.Description.get -> string?
LM.Review.Core.Models.Forms.ExtractionForm.Id.get -> string!
LM.Review.Core.Models.Forms.ExtractionForm.Name.get -> string!
LM.Review.Core.Models.Forms.ExtractionForm.Sections.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.Forms.FormSection!>!
LM.Review.Core.Models.Forms.FormField
LM.Review.Core.Models.Forms.FormField.AllowFreeTextFallback.get -> bool
LM.Review.Core.Models.Forms.FormField.Description.get -> string?
LM.Review.Core.Models.Forms.FormField.FieldType.get -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormField.Id.get -> string!
LM.Review.Core.Models.Forms.FormField.Options.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.Forms.FormFieldOption!>!
LM.Review.Core.Models.Forms.FormField.Title.get -> string!
LM.Review.Core.Models.Forms.FormField.Validation.get -> LM.Review.Core.Models.Forms.FormFieldValidation?
LM.Review.Core.Models.Forms.FormField.Visibility.get -> LM.Review.Core.Models.Forms.FormVisibilityRule?
static LM.Review.Core.Models.Forms.FormField.Create(string! id, string! title, LM.Review.Core.Models.Forms.FormFieldType fieldType, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.Forms.FormFieldOption!>? options = null, string? description = null, LM.Review.Core.Models.Forms.FormFieldValidation? validation = null, LM.Review.Core.Models.Forms.FormVisibilityRule? visibility = null, bool allowFreeTextFallback = false) -> LM.Review.Core.Models.Forms.FormField!
LM.Review.Core.Models.Forms.FormFieldOption
LM.Review.Core.Models.Forms.FormFieldOption.Description.get -> string?
LM.Review.Core.Models.Forms.FormFieldOption.Id.get -> string!
LM.Review.Core.Models.Forms.FormFieldOption.IsDefault.get -> bool
LM.Review.Core.Models.Forms.FormFieldOption.Label.get -> string!
static LM.Review.Core.Models.Forms.FormFieldOption.Create(string! id, string! label, string? description = null, bool isDefault = false) -> LM.Review.Core.Models.Forms.FormFieldOption!
LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.SingleSelect = 0 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.MultiSelect = 1 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.Text = 2 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.Numeric = 3 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.Date = 4 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.Reference = 5 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldValidation
LM.Review.Core.Models.Forms.FormFieldValidation.Expression.get -> string?
LM.Review.Core.Models.Forms.FormFieldValidation.Maximum.get -> decimal?
LM.Review.Core.Models.Forms.FormFieldValidation.MaximumDateUtc.get -> System.DateTime?
LM.Review.Core.Models.Forms.FormFieldValidation.Minimum.get -> decimal?
LM.Review.Core.Models.Forms.FormFieldValidation.MinimumDateUtc.get -> System.DateTime?
LM.Review.Core.Models.Forms.FormFieldValidation.Mode.get -> LM.Review.Core.Models.Forms.FormValidationMode
static LM.Review.Core.Models.Forms.FormFieldValidation.CreateDateRange(System.DateTime? minimumUtc, System.DateTime? maximumUtc) -> LM.Review.Core.Models.Forms.FormFieldValidation!
static LM.Review.Core.Models.Forms.FormFieldValidation.CreateNumericRange(decimal? minimum, decimal? maximum) -> LM.Review.Core.Models.Forms.FormFieldValidation!
static LM.Review.Core.Models.Forms.FormFieldValidation.CreateRegex(string! pattern) -> LM.Review.Core.Models.Forms.FormFieldValidation!
static LM.Review.Core.Models.Forms.FormFieldValidation.CreateRequired() -> LM.Review.Core.Models.Forms.FormFieldValidation!
LM.Review.Core.Models.Forms.FormIdentifier
static bool LM.Review.Core.Models.Forms.FormIdentifier.IsNormalized(string! identifier) -> bool
static string LM.Review.Core.Models.Forms.FormIdentifier.Normalize(string! identifier) -> string!
LM.Review.Core.Models.Forms.FormSection
LM.Review.Core.Models.Forms.FormSection.Children.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.Forms.FormSection!>!
LM.Review.Core.Models.Forms.FormSection.Description.get -> string?
LM.Review.Core.Models.Forms.FormSection.Fields.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.Forms.FormField!>!
LM.Review.Core.Models.Forms.FormSection.Id.get -> string!
LM.Review.Core.Models.Forms.FormSection.IsRepeatable.get -> bool
LM.Review.Core.Models.Forms.FormSection.Title.get -> string!
LM.Review.Core.Models.Forms.FormSection.Visibility.get -> LM.Review.Core.Models.Forms.FormVisibilityRule?
static LM.Review.Core.Models.Forms.FormSection.Create(string! id, string! title, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.Forms.FormField!>! fields, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.Forms.FormSection!>? children = null, bool isRepeatable = false, string? description = null, LM.Review.Core.Models.Forms.FormVisibilityRule? visibility = null) -> LM.Review.Core.Models.Forms.FormSection!
LM.Review.Core.Models.Forms.FormValidationMode
LM.Review.Core.Models.Forms.FormValidationMode.Required = 0 -> LM.Review.Core.Models.Forms.FormValidationMode
LM.Review.Core.Models.Forms.FormValidationMode.Range = 1 -> LM.Review.Core.Models.Forms.FormValidationMode
LM.Review.Core.Models.Forms.FormValidationMode.Regex = 2 -> LM.Review.Core.Models.Forms.FormValidationMode
LM.Review.Core.Models.Forms.FormVisibilityRule
LM.Review.Core.Models.Forms.FormVisibilityRule.ExpectedValues.get -> System.Collections.Generic.IReadOnlyList<string>!
LM.Review.Core.Models.Forms.FormVisibilityRule.IsVisibleWhenMatches.get -> bool
LM.Review.Core.Models.Forms.FormVisibilityRule.SourceFieldId.get -> string!
static LM.Review.Core.Models.Forms.FormVisibilityRule.Create(string! sourceFieldId, System.Collections.Generic.IEnumerable<string>? expectedValues = null, bool isVisibleWhenMatches = true) -> LM.Review.Core.Models.Forms.FormVisibilityRule!
LM.Review.Core.Models.Forms.ExtractionFormSnapshot
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.CapturedBy.get -> string!
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.CapturedUtc.get -> System.DateTime
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.FormId.get -> string!
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.Values.get -> System.Collections.Generic.IReadOnlyDictionary<string, object?>!
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.VersionId.get -> string!
static LM.Review.Core.Models.Forms.ExtractionFormSnapshot.Create(string! formId, string! versionId, System.Collections.Generic.IDictionary<string, object?>! values, string? capturedBy = null, System.DateTime? capturedUtc = null) -> LM.Review.Core.Models.Forms.ExtractionFormSnapshot!
LM.Review.Core.Models.Forms.ExtractionFormVersion
LM.Review.Core.Models.Forms.ExtractionFormVersion.CreatedBy.get -> string!
LM.Review.Core.Models.Forms.ExtractionFormVersion.CreatedUtc.get -> System.DateTime
LM.Review.Core.Models.Forms.ExtractionFormVersion.Form.get -> LM.Review.Core.Models.Forms.ExtractionForm!
LM.Review.Core.Models.Forms.ExtractionFormVersion.Metadata.get -> System.Collections.Generic.IReadOnlyDictionary<string, string>!
LM.Review.Core.Models.Forms.ExtractionFormVersion.VersionId.get -> string!
static LM.Review.Core.Models.Forms.ExtractionFormVersion.Create(string! versionId, LM.Review.Core.Models.Forms.ExtractionForm! form, System.Collections.Generic.IDictionary<string, string>? metadata = null, string? createdBy = null, System.DateTime? createdUtc = null) -> LM.Review.Core.Models.Forms.ExtractionFormVersion!
LM.Review.Core.Validation.FormSchemaIssue
LM.Review.Core.Validation.FormSchemaIssue.Code.get -> string!
LM.Review.Core.Validation.FormSchemaIssue.FieldId.get -> string?
LM.Review.Core.Validation.FormSchemaIssue.Message.get -> string!
LM.Review.Core.Validation.FormSchemaIssue.SectionId.get -> string?
LM.Review.Core.Validation.FormSchemaIssue.Severity.get -> LM.Review.Core.Validation.FormSchemaSeverity
static LM.Review.Core.Validation.FormSchemaIssue.Error(string! code, string! message, string? sectionId = null, string? fieldId = null) -> LM.Review.Core.Validation.FormSchemaIssue!
static LM.Review.Core.Validation.FormSchemaIssue.Warning(string! code, string! message, string? sectionId = null, string? fieldId = null) -> LM.Review.Core.Validation.FormSchemaIssue!
LM.Review.Core.Validation.FormSchemaSeverity
LM.Review.Core.Validation.FormSchemaSeverity.Warning = 0 -> LM.Review.Core.Validation.FormSchemaSeverity
LM.Review.Core.Validation.FormSchemaSeverity.Error = 1 -> LM.Review.Core.Validation.FormSchemaSeverity
LM.Review.Core.Validation.FormSchemaValidator
LM.Review.Core.Validation.FormSchemaValidator.Validate(LM.Review.Core.Models.Forms.ExtractionForm! form) -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Validation.FormSchemaIssue!>!
LM.Review.Core.Validation.FormSchemaValidator.Validate(LM.Review.Core.Models.Forms.ExtractionFormSnapshot! snapshot, LM.Review.Core.Models.Forms.ExtractionFormVersion! version) -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Validation.FormSchemaIssue!>!
LM.Review.Core.Validation.FormSchemaValidator.Validate(LM.Review.Core.Models.Forms.ExtractionFormVersion! version) -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Validation.FormSchemaIssue!>!
#nullable enable
LM.Review.Core.Services.IReviewHookContext
LM.Review.Core.Services.IReviewHookContextFactory
LM.Review.Core.Services.IReviewHookContextFactory.CreateAssignmentUpdated(LM.Review.Core.Models.ReviewStage! stage, LM.Review.Core.Models.ScreeningAssignment! assignment) -> LM.Review.Core.Services.IReviewHookContext!
LM.Review.Core.Services.IReviewHookContextFactory.CreateReviewerDecisionRecorded(LM.Review.Core.Models.ScreeningAssignment! assignment, LM.Review.Core.Models.ReviewerDecision! decision) -> LM.Review.Core.Services.IReviewHookContext!
LM.Review.Core.Services.IReviewHookContextFactory.CreateStageTransition(LM.Review.Core.Models.ReviewStage! stage, LM.Review.Core.Models.ConflictState previousState, LM.Review.Core.Models.ConflictState currentState) -> LM.Review.Core.Services.IReviewHookContext!
LM.Review.Core.Services.IReviewHookOrchestrator
LM.Review.Core.Services.IReviewHookOrchestrator.ProcessAsync(string! entryId, LM.Review.Core.Services.IReviewHookContext! context, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Review.Core.Services.IReviewWorkflowService
LM.Review.Core.Services.IReviewWorkflowService.CreateStageAsync(string! projectId, string! stageDefinitionId, System.Collections.Generic.IReadOnlyCollection<LM.Review.Core.Services.ReviewerAssignmentRequest!>! assignments, System.Threading.CancellationToken cancellationToken = default) -> LM.Review.Core.Models.ReviewStage!
LM.Review.Core.Services.IReviewWorkflowService.SubmitDecisionAsync(string! assignmentId, LM.Review.Core.Models.ScreeningStatus decision, string? notes, System.Threading.CancellationToken cancellationToken = default) -> LM.Review.Core.Models.ScreeningAssignment!
LM.Review.Core.Services.IReviewWorkflowStore
LM.Review.Core.Services.IReviewWorkflowStore.GetAssignmentAsync(string! assignmentId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ScreeningAssignment?>!
LM.Review.Core.Services.IReviewWorkflowStore.GetAssignmentsByStageAsync(string! stageId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ScreeningAssignment!>>!
LM.Review.Core.Services.IReviewWorkflowStore.GetProjectAsync(string! projectId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ReviewProject?>!
LM.Review.Core.Services.IReviewWorkflowStore.GetProjectsAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewProject!>!>!
LM.Review.Core.Services.IReviewWorkflowStore.GetStageAsync(string! stageId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ReviewStage?>!
LM.Review.Core.Services.IReviewWorkflowStore.GetStagesByProjectAsync(string! projectId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStage!>>!
LM.Review.Core.Services.IReviewWorkflowStore.SaveAssignmentAsync(string! projectId, LM.Review.Core.Models.ScreeningAssignment! assignment, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Review.Core.Services.IReviewWorkflowStore.SaveProjectAsync(LM.Review.Core.Models.ReviewProject! project, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Review.Core.Services.IReviewWorkflowStore.SaveStageAsync(LM.Review.Core.Models.ReviewStage! stage, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Review.Core.Services.ReviewWorkflowService
LM.Review.Core.Services.ReviewWorkflowService.CreateStageAsync(string! projectId, string! stageDefinitionId, System.Collections.Generic.IReadOnlyCollection<LM.Review.Core.Services.ReviewerAssignmentRequest!>! assignments, System.Threading.CancellationToken cancellationToken = default) -> LM.Review.Core.Models.ReviewStage!
LM.Review.Core.Services.ReviewWorkflowService.ReviewWorkflowService(LM.Review.Core.Services.IReviewWorkflowStore! store, LM.Review.Core.Services.IReviewHookOrchestrator! hookOrchestrator, LM.Review.Core.Services.IReviewHookContextFactory! hookContextFactory, System.TimeProvider? timeProvider = null)
LM.Review.Core.Services.ReviewWorkflowService.SubmitDecisionAsync(string! assignmentId, LM.Review.Core.Models.ScreeningStatus decision, string? notes, System.Threading.CancellationToken cancellationToken = default) -> LM.Review.Core.Models.ScreeningAssignment!
LM.Review.Core.Services.ReviewerAssignmentRequest
LM.Review.Core.Services.ReviewerAssignmentRequest.ReviewerAssignmentRequest(string! ReviewerId, LM.Review.Core.Models.ReviewerRole Role)
LM.Review.Core.Services.ReviewerAssignmentRequest.ReviewerId.get -> string!
LM.Review.Core.Services.ReviewerAssignmentRequest.ReviewerId.init -> void
LM.Review.Core.Services.ReviewerAssignmentRequest.Role.get -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Services.ReviewerAssignmentRequest.Role.init -> void
LM.Review.Core.Models.ReviewStageType.DataExtraction = 4 -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewProjectMetadata
static LM.Review.Core.Models.ReviewProjectMetadata.Create(LM.Review.Core.Models.ReviewTemplateKind template, string? notes) -> LM.Review.Core.Models.ReviewProjectMetadata!
LM.Review.Core.Models.ReviewProjectMetadata.Notes.get -> string!
LM.Review.Core.Models.ReviewProjectMetadata.Template.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.ReviewTemplateKind.Custom = 1 -> LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.ReviewTemplateKind.DataExtraction = 3 -> LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.ReviewTemplateKind.Picos = 0 -> LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.ReviewTemplateKind.RapidAssessment = 2 -> LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.BibliographySummary = 0 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.DataExtractionWorkspace = 4 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.FullTextViewer = 2 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.InclusionExclusionChecklist = 1 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.NotesPane = 5 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.ReviewerDecisionPanel = 3 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageDisplayProfile
static LM.Review.Core.Models.StageDisplayProfile.Create(System.Collections.Generic.IEnumerable<LM.Review.Core.Models.StageContentArea!>! contentAreas) -> LM.Review.Core.Models.StageDisplayProfile!
LM.Review.Core.Models.StageDisplayProfile.ContentAreas.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.StageContentArea>!
---------- LM.Infrastructure ----------
#nullable enable
#nullable enable
LM.Infrastructure.Content.CompositeContentExtractor
LM.Infrastructure.Content.CompositeContentExtractor.CompositeContentExtractor() -> void
LM.Infrastructure.Content.CompositeContentExtractor.ExtractTextAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Content.OpenXmlContentExtractor
LM.Infrastructure.Content.OpenXmlContentExtractor.ExtractTextAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Content.OpenXmlContentExtractor.OpenXmlContentExtractor() -> void
LM.Infrastructure.Content.PdfPigContentExtractor
LM.Infrastructure.Content.PdfPigContentExtractor.ExtractTextAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Content.PdfPigContentExtractor.PdfPigContentExtractor() -> void
LM.Infrastructure.Content.PlainTextContentExtractor
LM.Infrastructure.Content.PlainTextContentExtractor.ExtractTextAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Content.PlainTextContentExtractor.PlainTextContentExtractor() -> void
LM.Infrastructure.Entries.JsonEntryStore
LM.Infrastructure.Entries.JsonEntryStore.EnumerateAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<LM.Core.Models.Entry!>!
LM.Infrastructure.Entries.JsonEntryStore.FindByHashAsync(string! sha256, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Infrastructure.Entries.JsonEntryStore.FindByIdsAsync(string? doi, string? pmid, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Infrastructure.Entries.JsonEntryStore.FindSimilarByNameYearAsync(string! title, int? year, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.Infrastructure.Entries.JsonEntryStore.GetByIdAsync(string! id, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Infrastructure.Entries.JsonEntryStore.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Infrastructure.Entries.JsonEntryStore.JsonEntryStore(LM.Core.Abstractions.IWorkSpaceService! ws, LM.Core.Abstractions.IDoiNormalizer? doiNormalizer = null, LM.Core.Abstractions.IPmidNormalizer? pmidNormalizer = null) -> void
LM.Infrastructure.Entries.JsonEntryStore.SaveAsync(LM.Core.Models.Entry! entry, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Infrastructure.Entries.JsonEntryStore.SearchAsync(LM.Core.Models.Filters.EntryFilter! f, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.Infrastructure.Entries.EntryTagVocabularyProvider
LM.Infrastructure.Entries.EntryTagVocabularyProvider.EntryTagVocabularyProvider(LM.Core.Abstractions.IEntryStore! store) -> void
LM.Infrastructure.Entries.EntryTagVocabularyProvider.GetAllTagsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>!>!
LM.Infrastructure.Export.MetadataDebugSlideExporter
LM.Infrastructure.Export.MetadataDebugSlideExporter.ExportAsync(System.Collections.Generic.IEnumerable<LM.Core.Models.FileMetadata!>! items, string! outPath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Export.MetadataDebugSlideExporter.MetadataDebugSlideExporter() -> void
LM.Infrastructure.FileSystem.WorkspaceService
LM.Infrastructure.FileSystem.WorkspaceService.EnsureWorkspaceAsync(string! absoluteWorkspacePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Infrastructure.FileSystem.WorkspaceService.GetAbsolutePath(string! relativePath) -> string!
LM.Infrastructure.FileSystem.WorkspaceService.GetLocalDbPath() -> string!
LM.Infrastructure.FileSystem.WorkspaceService.GetWorkspaceRoot() -> string!
LM.Infrastructure.FileSystem.WorkspaceService.WorkspacePath.get -> string?
LM.Infrastructure.FileSystem.WorkspaceService.WorkspaceService() -> void
LM.Infrastructure.FileSystem.WorkspacePreferenceStore
LM.Infrastructure.FileSystem.WorkspacePreferenceStore.SetLastWorkspacePath(string! workspacePath) -> void
LM.Infrastructure.FileSystem.WorkspacePreferenceStore.TryGetLastWorkspacePath() -> string?
LM.Infrastructure.FileSystem.WorkspacePreferenceStore.WorkspacePreferenceStore(string? settingsFilePath = null) -> void
LM.Infrastructure.Hooks.ArticleHookFactory
LM.Infrastructure.Hooks.HookContext
LM.Infrastructure.Hooks.HookContext.Article.get -> LM.HubSpoke.Models.ArticleHook?
LM.Infrastructure.Hooks.HookContext.Article.init -> void
LM.Infrastructure.Hooks.HookContext.Attachments.get -> LM.HubSpoke.Models.AttachmentHook?
LM.Infrastructure.Hooks.HookContext.Attachments.init -> void
LM.Infrastructure.Hooks.HookContext.ChangeLog.get -> LM.HubSpoke.Models.EntryChangeLogHook?
LM.Infrastructure.Hooks.HookContext.ChangeLog.init -> void
LM.Infrastructure.Hooks.HookContext.HookContext() -> void
LM.Infrastructure.Hooks.HookOrchestrator
LM.Infrastructure.Hooks.HookOrchestrator.HookOrchestrator(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Hooks.HookOrchestrator.ProcessAsync(string! entryId, LM.Infrastructure.Hooks.HookContext! ctx, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.Infrastructure.Hooks.HookPersister
LM.Infrastructure.Hooks.HookPersister.HookPersister(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Hooks.HookPersister.SaveArticleIfAnyAsync(string! entryId, LM.HubSpoke.Models.ArticleHook? hook, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.Infrastructure.Metadata.CompositeMetadataExtractor
LM.Infrastructure.Metadata.CompositeMetadataExtractor.CompositeMetadataExtractor(LM.Core.Abstractions.IContentExtractor! content) -> void
LM.Infrastructure.Metadata.CompositeMetadataExtractor.ExtractAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.FileMetadata!>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetAssignmentsByStageAsync(string! stageId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ScreeningAssignment!>!>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetStagesByProjectAsync(string! projectId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStage!>!>!
LM.Infrastructure.Search.ClinicalTrialsGovSearchProvider
LM.Infrastructure.Search.ClinicalTrialsGovSearchProvider.ClinicalTrialsGovSearchProvider() -> void
LM.Infrastructure.Search.ClinicalTrialsGovSearchProvider.Database.get -> LM.Core.Models.SearchDatabase
LM.Infrastructure.Search.ClinicalTrialsGovSearchProvider.SearchAsync(string! query, System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.SearchHit!>!>!
LM.Infrastructure.PubMed.PubMedClient
LM.Infrastructure.PubMed.PubMedClient.PubMedClient() -> void
LM.Infrastructure.PubMed.PubMedClient.TryGetByDoiAsync(string! doi, bool includeCitedBy, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<LM.Core.Models.PublicationRecord?>!
LM.Infrastructure.Pdf.PdfAnnotationPersistenceService
LM.Infrastructure.Pdf.PdfAnnotationPersistenceService.PdfAnnotationPersistenceService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Pdf.PdfAnnotationPersistenceService.PersistAsync(string! entryId, string! pdfHash, string! overlayJson, System.Collections.Generic.IReadOnlyDictionary<string!, byte[]!>! previewImages, string? overlaySidecarRelativePath, string? pdfRelativePath, System.Collections.Generic.IReadOnlyList<LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata!>! annotations, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Infrastructure.Pdf.PdfAnnotationPreviewStorage
LM.Infrastructure.Pdf.PdfAnnotationPreviewStorage.PdfAnnotationPreviewStorage(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Pdf.PdfAnnotationPreviewStorage.SaveAsync(string! pdfHash, string! annotationId, byte[]! pngBytes, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Pdf.PdfAnnotationOverlayReader
LM.Infrastructure.Pdf.PdfAnnotationOverlayReader.PdfAnnotationOverlayReader(LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IEntryStore! entryStore) -> void
LM.Infrastructure.Pdf.PdfAnnotationOverlayReader.GetOverlayJsonAsync(string! entryId, string! pdfHash, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string?>!
LM.Infrastructure.Search.PubMedSearchProvider
LM.Infrastructure.Search.PubMedSearchProvider.PubMedSearchProvider() -> void
LM.Infrastructure.Search.PubMedSearchProvider.Database.get -> LM.Core.Models.SearchDatabase
LM.Infrastructure.Search.PubMedSearchProvider.SearchAsync(string! query, System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.SearchHit!>!>!
LM.Infrastructure.Search.PubMedSearchProvider.FetchFullRecordXmlAsync(string! pubmedId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string?>!
LM.Infrastructure.Search.SearchExecutionService
LM.Infrastructure.Search.SearchExecutionService.SearchExecutionService(System.Collections.Generic.IEnumerable<LM.Core.Abstractions.Search.ISearchProvider!>! providers, LM.Core.Abstractions.IEntryStore! store) -> void
LM.Infrastructure.Search.SearchExecutionService.ExecuteAsync(LM.Core.Models.Search.SearchExecutionRequest! request, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Search.SearchExecutionResult!>!
LM.Infrastructure.Settings.JsonWatchedFolderSettingsStore
LM.Infrastructure.Storage.FileStorageService
LM.Infrastructure.Storage.FileStorageService.FileStorageService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Storage.FileStorageService.SaveNewAsync(string! sourcePath, string! relativeTargetDir, string? preferredFileName = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Text.DoiNormalizer
LM.Infrastructure.Text.DoiNormalizer.DoiNormalizer() -> void
LM.Infrastructure.Text.DoiNormalizer.Normalize(string? raw) -> string?
LM.Infrastructure.Text.PmidNormalizer
LM.Infrastructure.Text.PmidNormalizer.Normalize(string? raw) -> string?
LM.Infrastructure.Text.PmidNormalizer.PmidNormalizer() -> void
LM.Infrastructure.Utils.BibliographyHelper
LM.Infrastructure.Utils.ContentAwareSimilarityService
LM.Infrastructure.Utils.ContentAwareSimilarityService.ComputeFileSimilarityAsync(string! filePathA, string! filePathB, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
LM.Infrastructure.Utils.ContentAwareSimilarityService.ContentAwareSimilarityService(LM.Core.Abstractions.IContentExtractor! extractor) -> void
LM.Infrastructure.Utils.HashingService
LM.Infrastructure.Utils.HashingService.ComputeSha256Async(string! filePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Utils.HashingService.HashingService() -> void
LM.Infrastructure.Utils.SimilarityService
LM.Infrastructure.Utils.SimilarityService.ComputeFileSimilarityAsync(string! filePathA, string! filePathB, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
LM.Infrastructure.Utils.SimilarityService.SimilarityService() -> void
LM.Infrastructure.Utils.TagMerger
LM.Infrastructure.Utils.TagNormalizer
static LM.Infrastructure.Hooks.ArticleHookFactory.CreateFromPublication(LM.Core.Models.PublicationRecord! r) -> LM.HubSpoke.Models.ArticleHook!
static LM.Infrastructure.Utils.BibliographyHelper.GenerateShortTitle(string? title, System.Collections.Generic.IEnumerable<string!>! authors, string? source, int? year) -> string!
static LM.Infrastructure.Utils.TagMerger.Merge(string? existingCsv, System.Collections.Generic.IEnumerable<string!>? add) -> string?
LM.Infrastructure.Settings.JsonWatchedFolderSettingsStore.JsonWatchedFolderSettingsStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Settings.JsonWatchedFolderSettingsStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.WatchedFolderSettings!>!
LM.Infrastructure.Settings.JsonWatchedFolderSettingsStore.SaveAsync(LM.Core.Models.WatchedFolderSettings! settings, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Infrastructure.Settings.JsonSearchHistoryStore
LM.Infrastructure.Settings.JsonSearchHistoryStore.JsonSearchHistoryStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Settings.JsonSearchHistoryStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Search.SearchHistoryDocument!>!
LM.Infrastructure.Settings.JsonSearchHistoryStore.SaveAsync(LM.Core.Models.Search.SearchHistoryDocument! document, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Infrastructure.Settings.JsonUserPreferencesStore
LM.Infrastructure.Settings.JsonUserPreferencesStore.JsonUserPreferencesStore() -> void
LM.Infrastructure.Settings.JsonUserPreferencesStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.UserPreferences!>!
LM.Infrastructure.Settings.JsonUserPreferencesStore.SaveAsync(LM.Core.Models.UserPreferences! preferences, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
static LM.Infrastructure.Utils.TagNormalizer.SplitAndNormalize(string! raw) -> System.Collections.Generic.IEnumerable<string!>!
LM.Infrastructure.Review.ReviewHookContextFactory
LM.Infrastructure.Review.ReviewHookContextFactory.CreateProjectCreated(LM.Review.Core.Models.ReviewProject! project) -> LM.Review.Core.Services.IReviewHookContext!
LM.Infrastructure.Review.ReviewHookContextFactory.CreateAssignmentUpdated(LM.Review.Core.Models.ReviewStage! stage, LM.Review.Core.Models.ScreeningAssignment! assignment) -> LM.Review.Core.Services.IReviewHookContext!
LM.Infrastructure.Review.ReviewHookContextFactory.CreateConsensusResolved(LM.Review.Core.Models.ReviewStage! stage, LM.Review.Core.Models.ConsensusOutcome! consensus) -> LM.Review.Core.Services.IReviewHookContext!
LM.Infrastructure.Review.ReviewHookContextFactory.CreateReviewerDecisionRecorded(LM.Review.Core.Models.ScreeningAssignment! assignment, LM.Review.Core.Models.ReviewerDecision! decision) -> LM.Review.Core.Services.IReviewHookContext!
LM.Infrastructure.Review.ReviewHookContextFactory.CreateStageTransition(LM.Review.Core.Models.ReviewStage! stage, LM.Review.Core.Models.ConflictState previousState, LM.Review.Core.Models.ConflictState currentState) -> LM.Review.Core.Services.IReviewHookContext!
LM.Infrastructure.Review.ReviewHookContextFactory.ReviewHookContextFactory() -> void
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetAssignmentAsync(string! assignmentId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ScreeningAssignment?>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetProjectAsync(string! projectId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ReviewProject?>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetProjectsAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewProject!>!>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetStageAsync(string! stageId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ReviewStage?>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.SaveAssignmentAsync(string! projectId, LM.Review.Core.Models.ScreeningAssignment! assignment, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.SaveProjectAsync(LM.Review.Core.Models.ReviewProject! project, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.SaveStageAsync(LM.Review.Core.Models.ReviewStage! stage, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.WorkspaceReviewWorkflowStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
---------- LM.Core ----------
#nullable enable
#nullable enable
IPublicationLookup
IPublicationLookup.TryGetByDoiAsync(string! doi, bool includeCitedBy, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<LM.Core.Models.PublicationRecord?>!
LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore
LM.Core.Abstractions.IContentExtractor
LM.Core.Abstractions.IContentExtractor.ExtractTextAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Core.Abstractions.IEntryStore
LM.Core.Abstractions.IEntryStore.EnumerateAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<LM.Core.Models.Entry!>!
LM.Core.Abstractions.IEntryStore.FindByHashAsync(string! sha256, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Core.Abstractions.IEntryStore.FindByIdsAsync(string? doi, string? pmid, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Core.Abstractions.IEntryStore.FindSimilarByNameYearAsync(string! title, int? year, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.Core.Abstractions.IEntryStore.GetByIdAsync(string! id, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Core.Abstractions.IEntryStore.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.IEntryStore.SaveAsync(LM.Core.Models.Entry! entry, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.IEntryStore.SearchAsync(LM.Core.Models.Filters.EntryFilter! filter, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.Core.Abstractions.IFullTextSearchService
LM.Core.Abstractions.IFullTextSearchService.SearchAsync(LM.Core.Models.Search.FullTextSearchQuery! query, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.FullTextSearchHit!>!>!
LM.Core.Abstractions.Search.ISearchExecutionService
LM.Core.Abstractions.Search.ISearchExecutionService.ExecuteAsync(LM.Core.Models.Search.SearchExecutionRequest! request, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Search.SearchExecutionResult!>!
LM.Core.Abstractions.Search.ISearchProvider
LM.Core.Abstractions.Search.ISearchProvider.Database.get -> LM.Core.Models.SearchDatabase
LM.Core.Abstractions.Search.ISearchProvider.SearchAsync(string! query, System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.SearchHit!>!>!
LM.Core.Abstractions.IFileStorageRepository
LM.Core.Abstractions.IFileStorageRepository.SaveNewAsync(string! sourcePath, string! relativeTargetDir, string? preferredFileName = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Core.Abstractions.IHasher
LM.Core.Abstractions.IHasher.ComputeSha256Async(string! filePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Core.Abstractions.IPdfAnnotationPersistenceService
LM.Core.Abstractions.IPdfAnnotationPersistenceService.PersistAsync(string! entryId, string! pdfHash, string! overlayJson, System.Collections.Generic.IReadOnlyDictionary<string!, byte[]!>! previewImages, string? overlaySidecarRelativePath, string? pdfRelativePath, System.Collections.Generic.IReadOnlyList<LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata!>! annotations, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata.AnnotationId.get -> string!
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata.Note.get -> string?
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata.ColorHex.get -> string?
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata.PdfAnnotationBridgeMetadata(string! annotationId, string? text, string? note, string? colorHex = null) -> void
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata.Text.get -> string?
LM.Core.Abstractions.IPdfAnnotationPreviewStorage
LM.Core.Abstractions.IPdfAnnotationPreviewStorage.SaveAsync(string! pdfHash, string! annotationId, byte[]! pngBytes, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<string!>!
LM.Core.Abstractions.IPdfAnnotationOverlayReader
LM.Core.Abstractions.IPdfAnnotationOverlayReader.GetOverlayJsonAsync(string! entryId, string! pdfHash, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string?>!
LM.Core.Abstractions.IMetadataDebugSlideExporter
LM.Core.Abstractions.IMetadataDebugSlideExporter.ExportAsync(System.Collections.Generic.IEnumerable<LM.Core.Models.FileMetadata!>! items, string! outputPath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Core.Abstractions.IMetadataExtractor
LM.Core.Abstractions.IMetadataExtractor.ExtractAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.FileMetadata!>!
LM.Core.Abstractions.IPmidNormalizer
LM.Core.Abstractions.IPmidNormalizer.Normalize(string? raw) -> string?
LM.Core.Abstractions.ISimilarityService
LM.Core.Abstractions.ISimilarityService.ComputeFileSimilarityAsync(string! filePathA, string! filePathB, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
LM.Core.Abstractions.ITagVocabularyProvider
LM.Core.Abstractions.ITagVocabularyProvider.GetAllTagsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>!>!
LM.Core.Abstractions.IWorkSpaceService
LM.Core.Abstractions.IWorkSpaceService.EnsureWorkspaceAsync(string! absoluteWorkspacePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.IWorkSpaceService.GetAbsolutePath(string! relativePath) -> string!
LM.Core.Abstractions.IWorkSpaceService.GetLocalDbPath() -> string!
LM.Core.Abstractions.IWorkSpaceService.GetWorkspaceRoot() -> string!
LM.Core.Abstractions.IWorkSpaceService.WorkspacePath.get -> string?
LM.Core.Abstractions.IDoiNormalizer
LM.Core.Abstractions.IDoiNormalizer.Normalize(string? raw) -> string?
LM.Core.Models.AbstractSection
LM.Core.Models.AbstractSection.Label.get -> string?
LM.Core.Models.AbstractSection.Label.init -> void
LM.Core.Models.AbstractSection.Text.get -> string?
LM.Core.Models.AbstractSection.Text.init -> void
LM.Core.Models.Attachment
LM.Core.Models.Attachment.Attachment() -> void
LM.Core.Models.Attachment.Id.get -> string!
LM.Core.Models.Attachment.Id.set -> void
LM.Core.Models.Attachment.Notes.get -> string?
LM.Core.Models.Attachment.Notes.set -> void
LM.Core.Models.Attachment.RelativePath.get -> string!
LM.Core.Models.Attachment.RelativePath.set -> void
LM.Core.Models.Attachment.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Attachment.Tags.set -> void
LM.Core.Models.Attachment.Title.get -> string!
LM.Core.Models.Attachment.Title.set -> void
LM.Core.Models.Attachment.Kind.get -> LM.Core.Models.AttachmentKind
LM.Core.Models.Attachment.Kind.set -> void
LM.Core.Models.Attachment.AddedBy.get -> string!
LM.Core.Models.Attachment.AddedBy.set -> void
LM.Core.Models.Attachment.AddedUtc.get -> System.DateTime
LM.Core.Models.Attachment.AddedUtc.set -> void
LM.Core.Models.AttachmentKind
LM.Core.Models.AttachmentKind.Supplement = 0 -> LM.Core.Models.AttachmentKind
LM.Core.Models.AttachmentKind.Version = 1 -> LM.Core.Models.AttachmentKind
LM.Core.Models.AttachmentKind.Presentation = 2 -> LM.Core.Models.AttachmentKind
LM.Core.Models.AttachmentKind.ExternalNotes = 3 -> LM.Core.Models.AttachmentKind
LM.Core.Models.AttachmentKind.Metadata = 4 -> LM.Core.Models.AttachmentKind
LM.Core.Models.AuthorName
LM.Core.Models.AuthorName.Affiliations.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.AuthorName.Affiliations.init -> void
LM.Core.Models.AuthorName.CollectiveName.get -> string?
LM.Core.Models.AuthorName.CollectiveName.init -> void
LM.Core.Models.AuthorName.Family.get -> string?
LM.Core.Models.AuthorName.Family.init -> void
LM.Core.Models.AuthorName.Given.get -> string?
LM.Core.Models.AuthorName.Given.init -> void
LM.Core.Models.AuthorName.LastFromLiteral() -> string?
LM.Core.Models.AuthorName.Literal.get -> string?
LM.Core.Models.AuthorName.Literal.init -> void
LM.Core.Models.AuthorName.Orcid.get -> string?
LM.Core.Models.AuthorName.Orcid.init -> void
LM.Core.Models.AuthorName.ToCsvPart() -> string!
LM.Core.Models.Entry
LM.Core.Models.Entry.AddedBy.get -> string?
LM.Core.Models.Entry.AddedBy.set -> void
LM.Core.Models.Entry.AddedOnUtc.get -> System.DateTime
LM.Core.Models.Entry.AddedOnUtc.set -> void
LM.Core.Models.Entry.Attachments.get -> System.Collections.Generic.List<LM.Core.Models.Attachment!>!
LM.Core.Models.Entry.Attachments.set -> void
LM.Core.Models.Entry.Authors.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Entry.Authors.set -> void
LM.Core.Models.Entry.DisplayName.get -> string?
LM.Core.Models.Entry.DisplayName.set -> void
LM.Core.Models.Entry.Doi.get -> string?
LM.Core.Models.Entry.Doi.set -> void
LM.Core.Models.Entry.Entry() -> void
LM.Core.Models.Entry.Id.get -> string!
LM.Core.Models.Entry.Id.set -> void
LM.Core.Models.Entry.InternalId.get -> string?
LM.Core.Models.Entry.InternalId.set -> void
LM.Core.Models.Entry.IsInternal.get -> bool
LM.Core.Models.Entry.IsInternal.set -> void
LM.Core.Models.Entry.IsBlacklisted.get -> bool
LM.Core.Models.Entry.IsBlacklisted.set -> void
LM.Core.Models.Entry.Links.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Entry.Links.set -> void
LM.Core.Models.Entry.MainFileHashSha256.get -> string?
LM.Core.Models.Entry.MainFileHashSha256.set -> void
LM.Core.Models.Entry.MainFilePath.get -> string!
LM.Core.Models.Entry.MainFilePath.set -> void
LM.Core.Models.Entry.Nct.get -> string?
LM.Core.Models.Entry.Nct.set -> void
LM.Core.Models.Entry.Notes.get -> string?
LM.Core.Models.Entry.Notes.set -> void
LM.Core.Models.Entry.UserNotes.get -> string?
LM.Core.Models.Entry.UserNotes.set -> void
LM.Core.Models.Entry.OriginalFileName.get -> string?
LM.Core.Models.Entry.OriginalFileName.set -> void
LM.Core.Models.Entry.Pmid.get -> string?
LM.Core.Models.Entry.Pmid.set -> void
LM.Core.Models.Entry.Relations.get -> System.Collections.Generic.List<LM.Core.Models.Relation!>!
LM.Core.Models.Entry.Relations.set -> void
LM.Core.Models.Entry.ShortTitle.get -> string?
LM.Core.Models.Entry.ShortTitle.set -> void
LM.Core.Models.Entry.Source.get -> string?
LM.Core.Models.Entry.Source.set -> void
LM.Core.Models.Entry.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Entry.Tags.set -> void
LM.Core.Models.Entry.Title.get -> string!
LM.Core.Models.Entry.Title.set -> void
LM.Core.Models.Entry.Type.get -> LM.Core.Models.EntryType
LM.Core.Models.Entry.Type.set -> void
LM.Core.Models.Entry.Version.get -> int
LM.Core.Models.Entry.Version.set -> void
LM.Core.Models.Entry.Year.get -> int?
LM.Core.Models.Entry.Year.set -> void
LM.Core.Models.EntryDocument
LM.Core.Models.EntryDocument.Authors.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.EntryDocument.Authors.set -> void
LM.Core.Models.EntryDocument.CreatedUtc.get -> System.DateTimeOffset
LM.Core.Models.EntryDocument.CreatedUtc.set -> void
LM.Core.Models.EntryDocument.Doi.get -> string?
LM.Core.Models.EntryDocument.Doi.set -> void
LM.Core.Models.EntryDocument.EntryDocument() -> void
LM.Core.Models.EntryDocument.Files.get -> System.Collections.Generic.List<LM.Core.Models.EntryFile!>!
LM.Core.Models.EntryDocument.Files.set -> void
LM.Core.Models.EntryDocument.Id.get -> string!
LM.Core.Models.EntryDocument.Id.set -> void
LM.Core.Models.EntryDocument.Internal.get -> bool
LM.Core.Models.EntryDocument.Internal.set -> void
LM.Core.Models.EntryDocument.Pmid.get -> string?
LM.Core.Models.EntryDocument.Pmid.set -> void
LM.Core.Models.EntryDocument.Source.get -> string?
LM.Core.Models.EntryDocument.Source.set -> void
LM.Core.Models.EntryDocument.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.EntryDocument.Tags.set -> void
LM.Core.Models.EntryDocument.Title.get -> string?
LM.Core.Models.EntryDocument.Title.set -> void
LM.Core.Models.EntryDocument.UpdatedUtc.get -> System.DateTimeOffset
LM.Core.Models.EntryDocument.UpdatedUtc.set -> void
LM.Core.Models.EntryDocument.Year.get -> int?
LM.Core.Models.EntryDocument.Year.set -> void
LM.Core.Models.EntryFile
LM.Core.Models.EntryFile.EntryFile() -> void
LM.Core.Models.EntryFile.Hash.get -> string!
LM.Core.Models.EntryFile.Hash.set -> void
LM.Core.Models.EntryFile.MimeType.get -> string!
LM.Core.Models.EntryFile.MimeType.set -> void
LM.Core.Models.EntryFile.OriginalFileName.get -> string!
LM.Core.Models.EntryFile.OriginalFileName.set -> void
LM.Core.Models.EntryFile.RelativePath.get -> string!
LM.Core.Models.EntryFile.RelativePath.set -> void
LM.Core.Models.EntryFile.SizeBytes.get -> long
LM.Core.Models.EntryFile.SizeBytes.set -> void
LM.Core.Models.EntryFile.StoredFileName.get -> string!
LM.Core.Models.EntryFile.StoredFileName.set -> void
LM.Core.Models.EntryType
LM.Core.Models.EntryType.LitSearch = 6 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.Other = 5 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.Presentation = 1 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.Publication = 0 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.Report = 4 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.SlideDeck = 3 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.WhitePaper = 2 -> LM.Core.Models.EntryType
LM.Core.Models.FileMetadata
LM.Core.Models.FileMetadata.Authors.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.FileMetadata.Authors.set -> void
LM.Core.Models.FileMetadata.Doi.get -> string?
LM.Core.Models.FileMetadata.Doi.set -> void
LM.Core.Models.FileMetadata.FileMetadata() -> void
LM.Core.Models.FileMetadata.Pmid.get -> string?
LM.Core.Models.FileMetadata.Pmid.set -> void
LM.Core.Models.FileMetadata.Source.get -> string?
LM.Core.Models.FileMetadata.Source.set -> void
LM.Core.Models.FileMetadata.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.FileMetadata.Tags.set -> void
LM.Core.Models.FileMetadata.Title.get -> string?
LM.Core.Models.FileMetadata.Title.set -> void
LM.Core.Models.FileMetadata.Year.get -> int?
LM.Core.Models.FileMetadata.Year.set -> void
LM.Core.Models.Filters.EntryFilter
LM.Core.Models.Filters.EntryFilter.AuthorContains.get -> string?
LM.Core.Models.Filters.EntryFilter.AuthorContains.set -> void
LM.Core.Models.Filters.EntryFilter.EntryFilter() -> void
LM.Core.Models.Filters.EntryFilter.IsInternal.get -> bool?
LM.Core.Models.Filters.EntryFilter.IsInternal.set -> void
LM.Core.Models.Filters.EntryFilter.TagMatchMode.get -> LM.Core.Models.Filters.TagMatchMode
LM.Core.Models.Filters.EntryFilter.TagMatchMode.set -> void
LM.Core.Models.Filters.EntryFilter.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Filters.EntryFilter.Tags.set -> void
LM.Core.Models.Filters.TagMatchMode
LM.Core.Models.Filters.TagMatchMode.Any = 0 -> LM.Core.Models.Filters.TagMatchMode
LM.Core.Models.Filters.TagMatchMode.All = 1 -> LM.Core.Models.Filters.TagMatchMode
LM.Core.Models.Filters.TagMatchMode.Not = 2 -> LM.Core.Models.Filters.TagMatchMode
LM.Core.Models.Filters.EntryFilter.TitleContains.get -> string?
LM.Core.Models.Filters.EntryFilter.TitleContains.set -> void
LM.Core.Models.Filters.EntryFilter.TypesAny.get -> LM.Core.Models.EntryType[]?
LM.Core.Models.Filters.EntryFilter.TypesAny.set -> void
LM.Core.Models.Filters.EntryFilter.YearFrom.get -> int?
LM.Core.Models.Filters.EntryFilter.YearFrom.set -> void
LM.Core.Models.Filters.EntryFilter.YearTo.get -> int?
LM.Core.Models.Filters.EntryFilter.YearTo.set -> void
LM.Core.Models.Filters.EntryFilter.SourceContains.get -> string?
LM.Core.Models.Filters.EntryFilter.SourceContains.set -> void
LM.Core.Models.Filters.EntryFilter.InternalIdContains.get -> string?
LM.Core.Models.Filters.EntryFilter.InternalIdContains.set -> void
LM.Core.Models.Filters.EntryFilter.DoiContains.get -> string?
LM.Core.Models.Filters.EntryFilter.DoiContains.set -> void
LM.Core.Models.Filters.EntryFilter.PmidContains.get -> string?
LM.Core.Models.Filters.EntryFilter.PmidContains.set -> void
LM.Core.Models.Filters.EntryFilter.NctContains.get -> string?
LM.Core.Models.Filters.EntryFilter.NctContains.set -> void
LM.Core.Models.Filters.EntryFilter.AddedByContains.get -> string?
LM.Core.Models.Filters.EntryFilter.AddedByContains.set -> void
LM.Core.Models.Filters.EntryFilter.AddedOnFromUtc.get -> System.DateTime?
LM.Core.Models.Filters.EntryFilter.AddedOnFromUtc.set -> void
LM.Core.Models.Filters.EntryFilter.AddedOnToUtc.get -> System.DateTime?
LM.Core.Models.Filters.EntryFilter.AddedOnToUtc.set -> void
LM.Core.Models.GrantInfo
LM.Core.Models.GrantInfo.Agency.get -> string?
LM.Core.Models.GrantInfo.Agency.init -> void
LM.Core.Models.GrantInfo.Country.get -> string?
LM.Core.Models.GrantInfo.Country.init -> void
LM.Core.Models.GrantInfo.GrantId.get -> string?
LM.Core.Models.GrantInfo.GrantId.init -> void
LM.Core.Models.PublicationRecord
LM.Core.Models.PublicationRecord.AbstractPlain.get -> string?
LM.Core.Models.PublicationRecord.AbstractPlain.init -> void
LM.Core.Models.PublicationRecord.AbstractSections.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.AbstractSection!>!
LM.Core.Models.PublicationRecord.AbstractSections.init -> void
LM.Core.Models.PublicationRecord.Affiliations.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.Affiliations.init -> void
LM.Core.Models.PublicationRecord.Authors.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.AuthorName!>!
LM.Core.Models.PublicationRecord.Authors.init -> void
LM.Core.Models.PublicationRecord.AuthorsCsv.get -> string!
LM.Core.Models.PublicationRecord.CitedByCount.get -> int?
LM.Core.Models.PublicationRecord.CitedByCount.init -> void
LM.Core.Models.PublicationRecord.CitedByPmids.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.CitedByPmids.init -> void
LM.Core.Models.PublicationRecord.CommentsCorrections.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.CommentsCorrections.init -> void
LM.Core.Models.PublicationRecord.Country.get -> string?
LM.Core.Models.PublicationRecord.Country.init -> void
LM.Core.Models.PublicationRecord.Doi.get -> string?
LM.Core.Models.PublicationRecord.Doi.init -> void
LM.Core.Models.PublicationRecord.FirstAuthorLast.get -> string!
LM.Core.Models.PublicationRecord.Grants.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.GrantInfo!>!
LM.Core.Models.PublicationRecord.Grants.init -> void
LM.Core.Models.PublicationRecord.Issue.get -> string?
LM.Core.Models.PublicationRecord.Issue.init -> void
LM.Core.Models.PublicationRecord.JournalIsoAbbrev.get -> string?
LM.Core.Models.PublicationRecord.JournalIsoAbbrev.init -> void
LM.Core.Models.PublicationRecord.JournalTitle.get -> string?
LM.Core.Models.PublicationRecord.JournalTitle.init -> void
LM.Core.Models.PublicationRecord.Keywords.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.Keywords.init -> void
LM.Core.Models.PublicationRecord.Language.get -> string?
LM.Core.Models.PublicationRecord.Language.init -> void
LM.Core.Models.PublicationRecord.MeshHeadings.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.MeshHeadings.init -> void
LM.Core.Models.PublicationRecord.Pages.get -> string?
LM.Core.Models.PublicationRecord.Pages.init -> void
LM.Core.Models.PublicationRecord.Pmcid.get -> string?
LM.Core.Models.PublicationRecord.Pmcid.init -> void
LM.Core.Models.PublicationRecord.Pmid.get -> string?
LM.Core.Models.PublicationRecord.Pmid.init -> void
LM.Core.Models.PublicationRecord.PublicationTypes.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.PublicationTypes.init -> void
LM.Core.Models.PublicationRecord.PublishedEpub.get -> System.DateOnly?
LM.Core.Models.PublicationRecord.PublishedEpub.init -> void
LM.Core.Models.PublicationRecord.PublishedPrint.get -> System.DateOnly?
LM.Core.Models.PublicationRecord.PublishedPrint.init -> void
LM.Core.Models.PublicationRecord.ReferencedPmids.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.ReferencedPmids.init -> void
LM.Core.Models.PublicationRecord.Title.get -> string?
LM.Core.Models.PublicationRecord.Title.init -> void
LM.Core.Models.PublicationRecord.UrlPubMed.get -> string?
LM.Core.Models.PublicationRecord.UrlPubMed.init -> void
LM.Core.Models.PublicationRecord.Volume.get -> string?
LM.Core.Models.PublicationRecord.Volume.init -> void
LM.Core.Models.PublicationRecord.Year.get -> int?
LM.Core.Models.PublicationRecord.Year.init -> void
LM.Core.Models.Relation
LM.Core.Models.Relation.Relation() -> void
LM.Core.Models.Relation.TargetEntryId.get -> string!
LM.Core.Models.Relation.TargetEntryId.set -> void
LM.Core.Models.Relation.Type.get -> string!
LM.Core.Models.Relation.Type.set -> void
LM.Core.Models.Search.FullTextSearchHit.EntryId.init -> void
LM.Core.Models.Search.FullTextSearchHit.Highlight.init -> void
LM.Core.Models.Search.FullTextSearchHit.Score.init -> void
LM.Core.Models.Search.FullTextSearchQuery.TypesAny.get -> LM.Core.Models.EntryType[]?
LM.Core.Models.SearchDatabase
LM.Core.Models.SearchDatabase.ClinicalTrialsGov = 1 -> LM.Core.Models.SearchDatabase
LM.Core.Models.SearchDatabase.PubMed = 0 -> LM.Core.Models.SearchDatabase
LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchField.Abstract = 2 -> LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchField.Content = 4 -> LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchField.None = 0 -> LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchField.Title = 1 -> LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchHit
LM.Core.Models.Search.FullTextSearchHit.EntryId.get -> string!
LM.Core.Models.Search.FullTextSearchHit.FullTextSearchHit(string! EntryId, double Score, string? Highlight) -> void
LM.Core.Models.Search.FullTextSearchHit.Highlight.get -> string?
LM.Core.Models.Search.FullTextSearchHit.Score.get -> double
LM.Core.Models.Search.FullTextSearchQuery
LM.Core.Models.Search.FullTextSearchQuery.Fields.get -> LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchQuery.Fields.set -> void
LM.Core.Models.Search.FullTextSearchQuery.FullTextSearchQuery() -> void
LM.Core.Models.Search.FullTextSearchQuery.IsInternal.get -> bool?
LM.Core.Models.Search.FullTextSearchQuery.IsInternal.set -> void
LM.Core.Models.Search.FullTextSearchQuery.Limit.get -> int
LM.Core.Models.Search.FullTextSearchQuery.Limit.set -> void
LM.Core.Models.Search.FullTextSearchQuery.Text.get -> string?
LM.Core.Models.Search.FullTextSearchQuery.Text.set -> void
LM.Core.Models.Search.FullTextSearchQuery.TypesAny.set -> void
LM.Core.Models.Search.FullTextSearchQuery.YearFrom.get -> int?
LM.Core.Models.Search.FullTextSearchQuery.YearFrom.set -> void
LM.Core.Models.Search.FullTextSearchQuery.YearTo.get -> int?
LM.Core.Models.Search.FullTextSearchQuery.YearTo.set -> void
LM.Core.Models.SearchHit
LM.Core.Models.SearchHit.AlreadyInDb.get -> bool
LM.Core.Models.SearchHit.AlreadyInDb.set -> void
LM.Core.Models.SearchHit.Authors.get -> string!
LM.Core.Models.SearchHit.Authors.init -> void
LM.Core.Models.SearchHit.Doi.get -> string?
LM.Core.Models.SearchHit.Doi.init -> void
LM.Core.Models.SearchHit.ExternalId.get -> string!
LM.Core.Models.SearchHit.ExternalId.init -> void
LM.Core.Models.SearchHit.ExistingEntryId.get -> string?
LM.Core.Models.SearchHit.ExistingEntryId.set -> void
LM.Core.Models.SearchHit.JournalOrSource.get -> string?
LM.Core.Models.SearchHit.JournalOrSource.init -> void
LM.Core.Models.SearchHit.SearchHit() -> void
LM.Core.Models.SearchHit.Selected.get -> bool
LM.Core.Models.SearchHit.Selected.set -> void
LM.Core.Models.SearchHit.Source.get -> LM.Core.Models.SearchDatabase
LM.Core.Models.SearchHit.Source.init -> void
LM.Core.Models.SearchHit.Title.get -> string!
LM.Core.Models.SearchHit.Title.init -> void
LM.Core.Models.SearchHit.Url.get -> string?
LM.Core.Models.SearchHit.Url.init -> void
LM.Core.Models.SearchHit.Year.get -> int?
LM.Core.Models.SearchHit.Year.init -> void
LM.Core.Models.SearchHit.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.Core.Models.WatchedFolderState.WatchedFolderState(string! Path, System.DateTimeOffset? LastScanUtc, string? AggregatedHash, bool LastScanWasUnchanged) -> void
LM.Core.Utils.Hashes
LM.Core.Utils.IdGen
LM.Core.Utils.JsonEx
static LM.Core.Utils.Hashes.Sha1(string! input) -> string!
static LM.Core.Utils.Hashes.Sha256File(string! path) -> string!
static LM.Core.Utils.IdGen.NewId() -> string!
static LM.Core.Utils.JsonEx.Deserialize<T>(string! s) -> T?
static LM.Core.Utils.JsonEx.Serialize<T>(T v) -> string!
LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.WatchedFolderSettings!>!
LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore.SaveAsync(LM.Core.Models.WatchedFolderSettings! settings, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.Configuration.ISearchHistoryStore
LM.Core.Abstractions.Configuration.ISearchHistoryStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Search.SearchHistoryDocument!>!
LM.Core.Abstractions.Configuration.ISearchHistoryStore.SaveAsync(LM.Core.Models.Search.SearchHistoryDocument! document, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.Configuration.IUserPreferencesStore
LM.Core.Abstractions.Configuration.IUserPreferencesStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.UserPreferences!>!
LM.Core.Abstractions.Configuration.IUserPreferencesStore.SaveAsync(LM.Core.Models.UserPreferences! preferences, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Models.Search.SearchHistoryDocument
LM.Core.Models.Search.SearchHistoryDocument.Entries.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.Core.Models.Search.SearchHistoryDocument.Entries.init -> void
LM.Core.Models.Search.SearchHistoryEntry
LM.Core.Models.Search.SearchHistoryEntry.Database.get -> LM.Core.Models.SearchDatabase
LM.Core.Models.Search.SearchHistoryEntry.Database.init -> void
LM.Core.Models.Search.SearchHistoryEntry.ExecutedUtc.get -> System.DateTimeOffset
LM.Core.Models.Search.SearchHistoryEntry.ExecutedUtc.init -> void
LM.Core.Models.Search.SearchHistoryEntry.From.get -> System.DateTime?
LM.Core.Models.Search.SearchHistoryEntry.From.init -> void
LM.Core.Models.Search.SearchHistoryEntry.Query.get -> string!
LM.Core.Models.Search.SearchHistoryEntry.Query.init -> void
LM.Core.Models.Search.SearchHistoryEntry.To.get -> System.DateTime?
LM.Core.Models.Search.SearchHistoryEntry.To.init -> void
LM.Core.Models.Search.SearchExecutionRequest
LM.Core.Models.Search.SearchExecutionRequest.Database.get -> LM.Core.Models.SearchDatabase
LM.Core.Models.Search.SearchExecutionRequest.Database.init -> void
LM.Core.Models.Search.SearchExecutionRequest.From.get -> System.DateTime?
LM.Core.Models.Search.SearchExecutionRequest.From.init -> void
LM.Core.Models.Search.SearchExecutionRequest.Query.get -> string!
LM.Core.Models.Search.SearchExecutionRequest.Query.init -> void
LM.Core.Models.Search.SearchExecutionRequest.To.get -> System.DateTime?
LM.Core.Models.Search.SearchExecutionRequest.To.init -> void
LM.Core.Models.Search.SearchExecutionResult
LM.Core.Models.Search.SearchExecutionResult.ExecutedUtc.get -> System.DateTimeOffset
LM.Core.Models.Search.SearchExecutionResult.ExecutedUtc.init -> void
LM.Core.Models.Search.SearchExecutionResult.Hits.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.SearchHit!>!
LM.Core.Models.Search.SearchExecutionResult.Hits.init -> void
LM.Core.Models.Search.SearchExecutionResult.Request.get -> LM.Core.Models.Search.SearchExecutionRequest!
LM.Core.Models.Search.SearchExecutionResult.Request.init -> void
LM.Core.Models.UserPreferences
LM.Core.Models.UserPreferences.Search.get -> LM.Core.Models.SearchPreferences!
LM.Core.Models.UserPreferences.Search.init -> void
LM.Core.Models.UserPreferences.Library.get -> LM.Core.Models.LibraryPreferences!
LM.Core.Models.UserPreferences.Library.init -> void
LM.Core.Models.SearchPreferences
LM.Core.Models.SearchPreferences.LastSelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.Core.Models.SearchPreferences.LastSelectedDatabase.init -> void
LM.Core.Models.SearchPreferences.LastUpdatedUtc.get -> System.DateTimeOffset
LM.Core.Models.SearchPreferences.LastUpdatedUtc.init -> void
LM.Core.Models.LibraryPreferences
LM.Core.Models.LibraryPreferences.VisibleColumns.get -> string![]!
LM.Core.Models.LibraryPreferences.VisibleColumns.init -> void
LM.Core.Models.LibraryPreferences.LastUpdatedUtc.get -> System.DateTimeOffset
LM.Core.Models.LibraryPreferences.LastUpdatedUtc.init -> void
LM.Core.Models.WatchedFolderSettings
LM.Core.Models.WatchedFolderSettings.Folders.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.WatchedFolderSettingsFolder!>!
LM.Core.Models.WatchedFolderSettings.Folders.init -> void
LM.Core.Models.WatchedFolderSettings.States.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.WatchedFolderState!>!
LM.Core.Models.WatchedFolderSettings.States.init -> void
LM.Core.Models.WatchedFolderSettingsFolder
LM.Core.Models.WatchedFolderSettingsFolder.IsEnabled.get -> bool
LM.Core.Models.WatchedFolderSettingsFolder.IsEnabled.init -> void
LM.Core.Models.WatchedFolderSettingsFolder.Path.get -> string!
LM.Core.Models.WatchedFolderSettingsFolder.Path.init -> void
LM.Core.Models.WatchedFolderState
LM.Core.Models.WatchedFolderState.AggregatedHash.get -> string?
LM.Core.Models.WatchedFolderState.AggregatedHash.init -> void
LM.Core.Models.WatchedFolderState.LastScanUtc.get -> System.DateTimeOffset?
LM.Core.Models.WatchedFolderState.LastScanUtc.init -> void
LM.Core.Models.WatchedFolderState.LastScanWasUnchanged.get -> bool
LM.Core.Models.WatchedFolderState.LastScanWasUnchanged.init -> void
LM.Core.Models.WatchedFolderState.Path.get -> string!
LM.Core.Models.WatchedFolderState.Path.init -> void
static readonly LM.Core.Utils.JsonEx.Options -> System.Text.Json.JsonSerializerOptions!
---------- LM.HubSpoke ----------
#nullable enable
#nullable enable
LM.HubSpoke.Abstractions.CasResult
LM.HubSpoke.Abstractions.CasResult.Bytes.get -> long
LM.HubSpoke.Abstractions.CasResult.Bytes.init -> void
LM.HubSpoke.Abstractions.CasResult.CasResult() -> void
LM.HubSpoke.Abstractions.CasResult.CasResult(string? RelPath, string? Sha, long Bytes, string? Mime, string? Original) -> void
LM.HubSpoke.Abstractions.CasResult.Mime.get -> string?
LM.HubSpoke.Abstractions.CasResult.Mime.init -> void
LM.HubSpoke.Abstractions.CasResult.Original.get -> string?
LM.HubSpoke.Abstractions.CasResult.Original.init -> void
LM.HubSpoke.Abstractions.CasResult.RelPath.get -> string?
LM.HubSpoke.Abstractions.CasResult.RelPath.init -> void
LM.HubSpoke.Abstractions.CasResult.Sha.get -> string?
LM.HubSpoke.Abstractions.CasResult.Sha.init -> void
LM.HubSpoke.Abstractions.ISimilarityLog
LM.HubSpoke.Abstractions.ISimilarityLog.LogAsync(string! sessionId, string! stagedPath, string! candidateEntryId, double score, string! method, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Abstractions.ISimilarityLog.NewSessionId() -> string!
LM.HubSpoke.Abstractions.ISpokeHandler
LM.HubSpoke.Abstractions.ISpokeHandler.BuildHookAsync(LM.Core.Models.Entry! entry, LM.HubSpoke.Abstractions.CasResult primary, System.Collections.Generic.IEnumerable<string!>! attachmentRelPaths, System.Func<string!, System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.HubSpoke.Abstractions.CasResult>!>! moveToCas, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Abstractions.ISpokeHandler.BuildIndex(LM.HubSpoke.Models.EntryHub! hub, object? hook, string? extractedFullText) -> LM.HubSpoke.Abstractions.SpokeIndexContribution
LM.HubSpoke.Abstractions.ISpokeHandler.Handles.get -> LM.Core.Models.EntryType
LM.HubSpoke.Abstractions.ISpokeHandler.HookPath.get -> string!
LM.HubSpoke.Abstractions.ISpokeHandler.LoadHookAsync(LM.Core.Abstractions.IWorkSpaceService! ws, string! entryId, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Abstractions.ISpokeHandler.MapToEntry(LM.HubSpoke.Models.EntryHub! hub, object? hook) -> LM.Core.Models.Entry!
LM.HubSpoke.Abstractions.SpokeIndexContribution
LM.HubSpoke.Abstractions.SpokeIndexContribution.Abstract.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Abstract.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.AssetHashes.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Abstractions.SpokeIndexContribution.AssetHashes.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Authors.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Abstractions.SpokeIndexContribution.Authors.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Doi.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Doi.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.FullText.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.FullText.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Journal.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Journal.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Keywords.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Abstractions.SpokeIndexContribution.Keywords.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Pmid.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Pmid.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.SpokeIndexContribution() -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.SpokeIndexContribution(string? Title, string? Abstract, System.Collections.Generic.IReadOnlyList<string!>! Authors, System.Collections.Generic.IReadOnlyList<string!>! Keywords, string? Journal, string? Doi, string? Pmid, int? Year, System.Collections.Generic.IReadOnlyList<string!>! AssetHashes, string? FullText) -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Title.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Title.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Year.get -> int?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Year.init -> void
LM.HubSpoke.Entries.HubSpokeStore
LM.HubSpoke.Entries.HubSpokeStore.EnumerateAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<LM.Core.Models.Entry!>!
LM.HubSpoke.Entries.HubSpokeStore.FindByHashAsync(string! sha256, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.HubSpoke.Entries.HubSpokeStore.FindByIdsAsync(string? doi, string? pmid, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.HubSpoke.Entries.HubSpokeStore.FindSimilarByNameYearAsync(string! title, int? year, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.HubSpoke.Entries.HubSpokeStore.FullTextSearch.get -> LM.Core.Abstractions.IFullTextSearchService!
LM.HubSpoke.Entries.HubSpokeStore.GetByIdAsync(string! id, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.HubSpoke.Entries.HubSpokeStore.HubSpokeStore(LM.Core.Abstractions.IWorkSpaceService! ws, LM.Core.Abstractions.IHasher! hasher, System.Collections.Generic.IEnumerable<LM.HubSpoke.Abstractions.ISpokeHandler!>! handlers, LM.Core.Abstractions.IContentExtractor? contentExtractor = null, LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub? graphHub = null) -> void
LM.HubSpoke.Entries.HubSpokeStore.HubSpokeStore(LM.Core.Abstractions.IWorkSpaceService! ws, LM.Core.Abstractions.IHasher! hasher, System.Collections.Generic.IEnumerable<LM.HubSpoke.Abstractions.ISpokeHandler!>! handlers, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.Core.Abstractions.IContentExtractor? contentExtractor = null, LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub? graphHub = null) -> void
LM.HubSpoke.Entries.HubSpokeStore.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Entries.HubSpokeStore.SaveAsync(LM.Core.Models.Entry! entry, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Entries.HubSpokeStore.SearchAsync(LM.Core.Models.Filters.EntryFilter! filter, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.HubSpoke.Indexing.SimilarityLog
LM.HubSpoke.Indexing.SimilarityLog.LogAsync(string! sessionId, string! stagedPath, string! candidateEntryId, double score, string! method, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Indexing.SimilarityLog.NewSessionId() -> string!
LM.HubSpoke.Indexing.SimilarityLog.SimilarityLog(LM.Core.Abstractions.IWorkSpaceService! ws) -> void
LM.HubSpoke.Models.AbstractSection
LM.HubSpoke.Models.AbstractSection.AbstractSection() -> void
LM.HubSpoke.Models.AbstractSection.Label.get -> string?
LM.HubSpoke.Models.AbstractSection.Label.init -> void
LM.HubSpoke.Models.AbstractSection.Text.get -> string!
LM.HubSpoke.Models.AbstractSection.Text.init -> void
LM.HubSpoke.Models.Affiliation
LM.HubSpoke.Models.Affiliation.Affiliation() -> void
LM.HubSpoke.Models.Affiliation.Email.get -> string?
LM.HubSpoke.Models.Affiliation.Email.init -> void
LM.HubSpoke.Models.Affiliation.Text.get -> string!
LM.HubSpoke.Models.Affiliation.Text.init -> void
LM.HubSpoke.Models.AttachmentHook
LM.HubSpoke.Models.AttachmentHook.AttachmentHook() -> void
LM.HubSpoke.Models.AttachmentHook.Attachments.get -> System.Collections.Generic.List<LM.HubSpoke.Models.AttachmentHookItem!>!
LM.HubSpoke.Models.AttachmentHook.Attachments.set -> void
LM.HubSpoke.Models.AttachmentHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.AttachmentHook.SchemaVersion.init -> void
LM.HubSpoke.Models.AttachmentHookItem
LM.HubSpoke.Models.AttachmentHookItem.AddedBy.get -> string!
LM.HubSpoke.Models.AttachmentHookItem.AddedBy.init -> void
LM.HubSpoke.Models.AttachmentHookItem.AddedUtc.get -> System.DateTime
LM.HubSpoke.Models.AttachmentHookItem.AddedUtc.init -> void
LM.HubSpoke.Models.AttachmentHookItem.AttachmentHookItem() -> void
LM.HubSpoke.Models.AttachmentHookItem.AttachmentId.get -> string!
LM.HubSpoke.Models.AttachmentHookItem.AttachmentId.init -> void
LM.HubSpoke.Models.AttachmentHookItem.LibraryPath.get -> string!
LM.HubSpoke.Models.AttachmentHookItem.LibraryPath.init -> void
LM.HubSpoke.Models.AttachmentHookItem.Notes.get -> string?
LM.HubSpoke.Models.AttachmentHookItem.Notes.init -> void
LM.HubSpoke.Models.AttachmentHookItem.Purpose.get -> LM.Core.Models.AttachmentKind
LM.HubSpoke.Models.AttachmentHookItem.Purpose.init -> void
LM.HubSpoke.Models.AttachmentHookItem.Tags.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.AttachmentHookItem.Tags.init -> void
LM.HubSpoke.Models.AttachmentHookItem.Title.get -> string!
LM.HubSpoke.Models.AttachmentHookItem.Title.init -> void
LM.HubSpoke.Models.ArticleAbstract
LM.HubSpoke.Models.ArticleAbstract.ArticleAbstract() -> void
LM.HubSpoke.Models.ArticleAbstract.Sections.get -> System.Collections.Generic.List<LM.HubSpoke.Models.AbstractSection!>!
LM.HubSpoke.Models.ArticleAbstract.Sections.init -> void
LM.HubSpoke.Models.ArticleAbstract.Text.get -> string?
LM.HubSpoke.Models.ArticleAbstract.Text.init -> void
LM.HubSpoke.Models.ArticleAsset
LM.HubSpoke.Models.ArticleAsset.ArticleAsset() -> void
LM.HubSpoke.Models.ArticleAsset.Bytes.get -> long
LM.HubSpoke.Models.ArticleAsset.Bytes.init -> void
LM.HubSpoke.Models.ArticleAsset.ContentType.get -> string!
LM.HubSpoke.Models.ArticleAsset.ContentType.init -> void
LM.HubSpoke.Models.ArticleAsset.Hash.get -> string!
LM.HubSpoke.Models.ArticleAsset.Hash.init -> void
LM.HubSpoke.Models.ArticleAsset.OriginalFilename.get -> string?
LM.HubSpoke.Models.ArticleAsset.OriginalFilename.init -> void
LM.HubSpoke.Models.ArticleAsset.OriginalFolderPath.get -> string?
LM.HubSpoke.Models.ArticleAsset.OriginalFolderPath.init -> void
LM.HubSpoke.Models.ArticleAsset.Purpose.get -> LM.HubSpoke.Models.ArticleAssetPurpose
LM.HubSpoke.Models.ArticleAsset.Purpose.init -> void
LM.HubSpoke.Models.ArticleAsset.StoragePath.get -> string!
LM.HubSpoke.Models.ArticleAsset.StoragePath.init -> void
LM.HubSpoke.Models.ArticleAsset.Title.get -> string!
LM.HubSpoke.Models.ArticleAsset.Title.init -> void
LM.HubSpoke.Models.ArticleAssetPurpose
LM.HubSpoke.Models.ArticleAssetPurpose.Manuscript = 0 -> LM.HubSpoke.Models.ArticleAssetPurpose
LM.HubSpoke.Models.ArticleAssetPurpose.Supplement = 1 -> LM.HubSpoke.Models.ArticleAssetPurpose
LM.HubSpoke.Models.ArticleDates
LM.HubSpoke.Models.ArticleDates.Accepted.get -> System.DateTimeOffset?
LM.HubSpoke.Models.ArticleDates.Accepted.init -> void
LM.HubSpoke.Models.ArticleDates.ArticleDates() -> void
LM.HubSpoke.Models.ArticleDates.Electronic.get -> System.DateTimeOffset?
LM.HubSpoke.Models.ArticleDates.Electronic.init -> void
LM.HubSpoke.Models.ArticleDates.Print.get -> System.DateTimeOffset?
LM.HubSpoke.Models.ArticleDates.Print.init -> void
LM.HubSpoke.Models.ArticleDates.Received.get -> System.DateTimeOffset?
LM.HubSpoke.Models.ArticleDates.Received.init -> void
LM.HubSpoke.Models.ArticleDates.Revised.get -> System.DateTimeOffset?
LM.HubSpoke.Models.ArticleDates.Revised.init -> void
LM.HubSpoke.Models.ArticleDetails
LM.HubSpoke.Models.ArticleDetails.ArticleDetails() -> void
LM.HubSpoke.Models.ArticleDetails.Dates.get -> LM.HubSpoke.Models.ArticleDates!
LM.HubSpoke.Models.ArticleDetails.Dates.init -> void
LM.HubSpoke.Models.ArticleDetails.Language.get -> string?
LM.HubSpoke.Models.ArticleDetails.Language.init -> void
LM.HubSpoke.Models.ArticleDetails.Pagination.get -> LM.HubSpoke.Models.Pagination!
LM.HubSpoke.Models.ArticleDetails.Pagination.init -> void
LM.HubSpoke.Models.ArticleDetails.PublicationTypes.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.ArticleDetails.PublicationTypes.init -> void
LM.HubSpoke.Models.ArticleDetails.Status.get -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.ArticleDetails.Status.init -> void
LM.HubSpoke.Models.ArticleDetails.Title.get -> string!
LM.HubSpoke.Models.ArticleDetails.Title.init -> void
LM.HubSpoke.Models.ArticleHook
LM.HubSpoke.Models.ArticleHook.Abstract.get -> LM.HubSpoke.Models.ArticleAbstract?
LM.HubSpoke.Models.ArticleHook.Abstract.init -> void
LM.HubSpoke.Models.ArticleHook.Article.get -> LM.HubSpoke.Models.ArticleDetails!
LM.HubSpoke.Models.ArticleHook.Article.init -> void
LM.HubSpoke.Models.ArticleHook.ArticleHook() -> void
LM.HubSpoke.Models.ArticleHook.Assets.get -> System.Collections.Generic.List<LM.HubSpoke.Models.ArticleAsset!>!
LM.HubSpoke.Models.ArticleHook.Assets.init -> void
LM.HubSpoke.Models.ArticleHook.Authors.get -> System.Collections.Generic.List<LM.HubSpoke.Models.Author!>!
LM.HubSpoke.Models.ArticleHook.Authors.init -> void
LM.HubSpoke.Models.ArticleHook.Chemicals.get -> System.Collections.Generic.List<LM.HubSpoke.Models.Chemical!>!
LM.HubSpoke.Models.ArticleHook.Chemicals.init -> void
LM.HubSpoke.Models.ArticleHook.ConflictOfInterest.get -> string?
LM.HubSpoke.Models.ArticleHook.ConflictOfInterest.init -> void
LM.HubSpoke.Models.ArticleHook.Copyright.get -> string?
LM.HubSpoke.Models.ArticleHook.Copyright.init -> void
LM.HubSpoke.Models.ArticleHook.Grants.get -> System.Collections.Generic.List<LM.HubSpoke.Models.Grant!>!
LM.HubSpoke.Models.ArticleHook.Grants.init -> void
LM.HubSpoke.Models.ArticleHook.History.get -> LM.HubSpoke.Models.PublicationHistory!
LM.HubSpoke.Models.ArticleHook.History.init -> void
LM.HubSpoke.Models.ArticleHook.Identifier.get -> LM.HubSpoke.Models.ArticleIdentifier!
LM.HubSpoke.Models.ArticleHook.Identifier.init -> void
LM.HubSpoke.Models.ArticleHook.Journal.get -> LM.HubSpoke.Models.JournalInfo!
LM.HubSpoke.Models.ArticleHook.Journal.init -> void
LM.HubSpoke.Models.ArticleHook.Keywords.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.ArticleHook.Keywords.init -> void
LM.HubSpoke.Models.ArticleHook.Medline.get -> LM.HubSpoke.Models.MedlineInfo!
LM.HubSpoke.Models.ArticleHook.Medline.init -> void
LM.HubSpoke.Models.ArticleHook.MeshHeadings.get -> System.Collections.Generic.List<LM.HubSpoke.Models.MeshHeading!>!
LM.HubSpoke.Models.ArticleHook.MeshHeadings.init -> void
LM.HubSpoke.Models.ArticleHook.References.get -> System.Collections.Generic.List<LM.HubSpoke.Models.Citation!>!
LM.HubSpoke.Models.ArticleHook.References.init -> void
LM.HubSpoke.Models.ArticleHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.ArticleHook.SchemaVersion.init -> void
LM.HubSpoke.Models.ArticleIdentifier
LM.HubSpoke.Models.ArticleIdentifier.ArticleIdentifier() -> void
LM.HubSpoke.Models.ArticleIdentifier.DOI.get -> string?
LM.HubSpoke.Models.ArticleIdentifier.DOI.init -> void
LM.HubSpoke.Models.ArticleIdentifier.OtherIds.get -> System.Collections.Generic.Dictionary<string!, string!>!
LM.HubSpoke.Models.ArticleIdentifier.OtherIds.init -> void
LM.HubSpoke.Models.ArticleIdentifier.PII.get -> string?
LM.HubSpoke.Models.ArticleIdentifier.PII.init -> void
LM.HubSpoke.Models.ArticleIdentifier.PMCID.get -> string?
LM.HubSpoke.Models.ArticleIdentifier.PMCID.init -> void
LM.HubSpoke.Models.ArticleIdentifier.PMID.get -> string!
LM.HubSpoke.Models.ArticleIdentifier.PMID.init -> void
LM.HubSpoke.Models.AssetRef
LM.HubSpoke.Models.AssetRef.AssetRef() -> void
LM.HubSpoke.Models.AssetRef.Bytes.get -> long
LM.HubSpoke.Models.AssetRef.Bytes.init -> void
LM.HubSpoke.Models.AssetRef.ContentType.get -> string!
LM.HubSpoke.Models.AssetRef.ContentType.init -> void
LM.HubSpoke.Models.AssetRef.Hash.get -> string!
LM.HubSpoke.Models.AssetRef.Hash.init -> void
LM.HubSpoke.Models.AssetRef.OriginalFilename.get -> string?
LM.HubSpoke.Models.AssetRef.OriginalFilename.init -> void
LM.HubSpoke.Models.AssetRef.Role.get -> string!
LM.HubSpoke.Models.AssetRef.Role.init -> void
LM.HubSpoke.Models.AssetRef.StoragePath.get -> string!
LM.HubSpoke.Models.AssetRef.StoragePath.init -> void
LM.HubSpoke.Models.Author
LM.HubSpoke.Models.Author.Affiliations.get -> System.Collections.Generic.List<LM.HubSpoke.Models.Affiliation!>!
LM.HubSpoke.Models.Author.Affiliations.init -> void
LM.HubSpoke.Models.Author.Author() -> void
LM.HubSpoke.Models.Author.ForeName.get -> string?
LM.HubSpoke.Models.Author.ForeName.init -> void
LM.HubSpoke.Models.Author.Initials.get -> string?
LM.HubSpoke.Models.Author.Initials.init -> void
LM.HubSpoke.Models.Author.LastName.get -> string?
LM.HubSpoke.Models.Author.LastName.init -> void
LM.HubSpoke.Models.Author.ORCID.get -> string?
LM.HubSpoke.Models.Author.ORCID.init -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails
LM.HubSpoke.Models.ChangeLogAttachmentDetails.AttachmentId.get -> string!
LM.HubSpoke.Models.ChangeLogAttachmentDetails.AttachmentId.init -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails.ChangeLogAttachmentDetails() -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails.LibraryPath.get -> string!
LM.HubSpoke.Models.ChangeLogAttachmentDetails.LibraryPath.init -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Purpose.get -> LM.Core.Models.AttachmentKind
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Purpose.init -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Tags.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Tags.init -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Title.get -> string!
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Title.init -> void
LM.HubSpoke.Models.Chemical
LM.HubSpoke.Models.Chemical.Chemical() -> void
LM.HubSpoke.Models.Chemical.Name.get -> string!
LM.HubSpoke.Models.Chemical.Name.init -> void
LM.HubSpoke.Models.Chemical.RegistryNumber.get -> string?
LM.HubSpoke.Models.Chemical.RegistryNumber.init -> void
LM.HubSpoke.Models.Citation
LM.HubSpoke.Models.Citation.Citation() -> void
LM.HubSpoke.Models.Citation.DOI.get -> string?
LM.HubSpoke.Models.Citation.DOI.init -> void
LM.HubSpoke.Models.Citation.PMID.get -> string?
LM.HubSpoke.Models.Citation.PMID.init -> void
LM.HubSpoke.Models.Citation.Text.get -> string!
LM.HubSpoke.Models.Citation.Text.init -> void
LM.HubSpoke.Models.CreationMethod
LM.HubSpoke.Models.CreationMethod.Manual = 0 -> LM.HubSpoke.Models.CreationMethod
LM.HubSpoke.Models.CreationMethod.Search = 1 -> LM.HubSpoke.Models.CreationMethod
LM.HubSpoke.Models.DocumentHook
LM.HubSpoke.Models.DocumentHook.Assets.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.AssetRef!>!
LM.HubSpoke.Models.DocumentHook.Assets.init -> void
LM.HubSpoke.Models.DocumentHook.Description.get -> string?
LM.HubSpoke.Models.DocumentHook.Description.init -> void
LM.HubSpoke.Models.DocumentHook.DocumentHook() -> void
LM.HubSpoke.Models.DocumentHook.DocumentType.get -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentHook.DocumentType.init -> void
LM.HubSpoke.Models.DocumentHook.EffectiveUtc.get -> System.DateTime?
LM.HubSpoke.Models.DocumentHook.EffectiveUtc.init -> void
LM.HubSpoke.Models.DocumentHook.ExpiresUtc.get -> System.DateTime?
LM.HubSpoke.Models.DocumentHook.ExpiresUtc.init -> void
LM.HubSpoke.Models.DocumentHook.Owner.get -> string?
LM.HubSpoke.Models.DocumentHook.Owner.init -> void
LM.HubSpoke.Models.DocumentHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.DocumentHook.SchemaVersion.init -> void
LM.HubSpoke.Models.DocumentHook.Title.get -> string?
LM.HubSpoke.Models.DocumentHook.Title.init -> void
LM.HubSpoke.Models.DocumentHook.Version.get -> string?
LM.HubSpoke.Models.DocumentHook.Version.init -> void
LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.MarketingMaterial = 1 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.Other = 6 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.Poster = 5 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.Presentation = 0 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.Report = 2 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.StandardOperatingProcedure = 3 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.Whitepaper = 4 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.EntryChangeLogEvent
LM.HubSpoke.Models.EntryChangeLogEvent.Action.get -> string!
LM.HubSpoke.Models.EntryChangeLogEvent.Action.init -> void
LM.HubSpoke.Models.EntryChangeLogEvent.Details.get -> LM.HubSpoke.Models.ChangeLogAttachmentDetails?
LM.HubSpoke.Models.EntryChangeLogEvent.Details.init -> void
LM.HubSpoke.Models.EntryChangeLogEvent.EntryChangeLogEvent() -> void
LM.HubSpoke.Models.EntryChangeLogEvent.EventId.get -> string!
LM.HubSpoke.Models.EntryChangeLogEvent.EventId.init -> void
LM.HubSpoke.Models.EntryChangeLogEvent.PerformedBy.get -> string!
LM.HubSpoke.Models.EntryChangeLogEvent.PerformedBy.init -> void
LM.HubSpoke.Models.EntryChangeLogEvent.TimestampUtc.get -> System.DateTime
LM.HubSpoke.Models.EntryChangeLogEvent.TimestampUtc.init -> void
LM.HubSpoke.Models.EntryChangeLogHook
LM.HubSpoke.Models.EntryChangeLogHook.EntryChangeLogHook() -> void
LM.HubSpoke.Models.EntryChangeLogHook.Events.get -> System.Collections.Generic.List<LM.HubSpoke.Models.EntryChangeLogEvent!>!
LM.HubSpoke.Models.EntryChangeLogHook.Events.set -> void
LM.HubSpoke.Models.EntryChangeLogHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.EntryChangeLogHook.SchemaVersion.init -> void
LM.HubSpoke.Models.PdfAnnotationPreview
LM.HubSpoke.Models.PdfAnnotationPreview.AnnotationId.get -> string!
LM.HubSpoke.Models.PdfAnnotationPreview.AnnotationId.init -> void
LM.HubSpoke.Models.PdfAnnotationPreview.ImagePath.get -> string!
LM.HubSpoke.Models.PdfAnnotationPreview.ImagePath.init -> void
LM.HubSpoke.Models.PdfAnnotationPreview.PdfAnnotationPreview() -> void
LM.HubSpoke.Models.PdfAnnotationsHook
LM.HubSpoke.Models.PdfAnnotationsHook.Annotations.get -> System.Collections.Generic.List<LM.HubSpoke.Models.PdfAnnotationMetadata!>!
LM.HubSpoke.Models.PdfAnnotationsHook.Annotations.init -> void
LM.HubSpoke.Models.PdfAnnotationsHook.OverlayPath.get -> string!
LM.HubSpoke.Models.PdfAnnotationsHook.OverlayPath.init -> void
LM.HubSpoke.Models.PdfAnnotationsHook.Previews.get -> System.Collections.Generic.List<LM.HubSpoke.Models.PdfAnnotationPreview!>!
LM.HubSpoke.Models.PdfAnnotationsHook.Previews.init -> void
LM.HubSpoke.Models.PdfAnnotationsHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.PdfAnnotationsHook.SchemaVersion.init -> void
LM.HubSpoke.Models.PdfAnnotationsHook.PdfAnnotationsHook() -> void
LM.HubSpoke.Models.PdfAnnotationMetadata
LM.HubSpoke.Models.PdfAnnotationMetadata.AnnotationId.get -> string!
LM.HubSpoke.Models.PdfAnnotationMetadata.AnnotationId.init -> void
LM.HubSpoke.Models.PdfAnnotationMetadata.Color.get -> LM.HubSpoke.Models.PdfAnnotationColorMetadata?
LM.HubSpoke.Models.PdfAnnotationMetadata.Color.init -> void
LM.HubSpoke.Models.PdfAnnotationMetadata.Note.get -> string?
LM.HubSpoke.Models.PdfAnnotationMetadata.Note.init -> void
LM.HubSpoke.Models.PdfAnnotationMetadata.PdfAnnotationMetadata() -> void
LM.HubSpoke.Models.PdfAnnotationMetadata.Text.get -> string?
LM.HubSpoke.Models.PdfAnnotationMetadata.Text.init -> void
LM.HubSpoke.Models.PdfAnnotationColorMetadata
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Blue.get -> int
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Blue.init -> void
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Green.get -> int
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Green.init -> void
LM.HubSpoke.Models.PdfAnnotationColorMetadata.PdfAnnotationColorMetadata() -> void
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Red.get -> int
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Red.init -> void
LM.HubSpoke.Models.EntryHooks
LM.HubSpoke.Models.EntryHooks.Article.get -> string?
LM.HubSpoke.Models.EntryHooks.Article.init -> void
LM.HubSpoke.Models.EntryHooks.LitSearch.get -> string?
LM.HubSpoke.Models.EntryHooks.LitSearch.init -> void
LM.HubSpoke.Models.EntryHooks.DataExtraction.get -> string?
LM.HubSpoke.Models.EntryHooks.DataExtraction.init -> void
LM.HubSpoke.Models.EntryHooks.Document.get -> string?
LM.HubSpoke.Models.EntryHooks.Document.init -> void
LM.HubSpoke.Models.EntryHooks.PdfAnnotations.get -> string?
LM.HubSpoke.Models.EntryHooks.PdfAnnotations.init -> void
LM.HubSpoke.Models.EntryHooks.EntryHooks() -> void
LM.HubSpoke.Models.EntryHooks.History.get -> string?
LM.HubSpoke.Models.EntryHooks.History.init -> void
LM.HubSpoke.Models.EntryHooks.Notes.get -> string?
LM.HubSpoke.Models.EntryHooks.Notes.init -> void
LM.HubSpoke.Models.EntryHooks.Provenance.get -> string?
LM.HubSpoke.Models.EntryHooks.Provenance.init -> void
LM.HubSpoke.Models.EntryHooks.Relations.get -> string?
LM.HubSpoke.Models.EntryHooks.Relations.init -> void
LM.HubSpoke.Models.EntryHooks.SearchHits.get -> string?
LM.HubSpoke.Models.EntryHooks.SearchHits.init -> void
LM.HubSpoke.Models.EntryHooks.Trial.get -> string?
LM.HubSpoke.Models.EntryHooks.Trial.init -> void
LM.HubSpoke.Models.EntryHub
LM.HubSpoke.Models.EntryHub.ConcurrencyStamp.get -> string!
LM.HubSpoke.Models.EntryHub.ConcurrencyStamp.init -> void
LM.HubSpoke.Models.EntryHub.CreatedBy.get -> LM.HubSpoke.Models.PersonRef
LM.HubSpoke.Models.EntryHub.CreatedBy.init -> void
LM.HubSpoke.Models.EntryHub.CreatedUtc.get -> System.DateTime
LM.HubSpoke.Models.EntryHub.CreatedUtc.init -> void
LM.HubSpoke.Models.EntryHub.CreationMethod.get -> LM.HubSpoke.Models.CreationMethod
LM.HubSpoke.Models.EntryHub.CreationMethod.init -> void
LM.HubSpoke.Models.EntryHub.DisplayTitle.get -> string!
LM.HubSpoke.Models.EntryHub.DisplayTitle.init -> void
LM.HubSpoke.Models.EntryHub.EntryHub() -> void
LM.HubSpoke.Models.EntryHub.EntryId.get -> string!
LM.HubSpoke.Models.EntryHub.EntryId.init -> void
LM.HubSpoke.Models.EntryHub.Flags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Models.EntryHub.Flags.init -> void
LM.HubSpoke.Models.EntryHub.Hooks.get -> LM.HubSpoke.Models.EntryHooks!
LM.HubSpoke.Models.EntryHub.Hooks.init -> void
LM.HubSpoke.Models.DataExtractionHook
LM.HubSpoke.Models.DataExtractionHook.Assignments.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.PopulationInterventionAssignment!>!
LM.HubSpoke.Models.DataExtractionHook.Assignments.init -> void
LM.HubSpoke.Models.DataExtractionHook.DataExtractionHook() -> void
LM.HubSpoke.Models.DataExtractionHook.Endpoints.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.ExtractedEndpoint!>!
LM.HubSpoke.Models.DataExtractionHook.Endpoints.init -> void
LM.HubSpoke.Models.DataExtractionHook.EntryId.get -> string!
LM.HubSpoke.Models.DataExtractionHook.EntryId.init -> void
LM.HubSpoke.Models.DataExtractionHook.Interventions.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.ExtractedIntervention!>!
LM.HubSpoke.Models.DataExtractionHook.Interventions.init -> void
LM.HubSpoke.Models.DataExtractionHook.Populations.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.ExtractedPopulation!>!
LM.HubSpoke.Models.DataExtractionHook.Populations.init -> void
LM.HubSpoke.Models.DataExtractionHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.DataExtractionHook.SchemaVersion.init -> void
LM.HubSpoke.Models.DataExtractionHook.Source.get -> string?
LM.HubSpoke.Models.DataExtractionHook.Source.init -> void
LM.HubSpoke.Models.DataExtractionHook.Title.get -> string?
LM.HubSpoke.Models.DataExtractionHook.Title.init -> void
LM.HubSpoke.Models.DataExtractionHook.Year.get -> int?
LM.HubSpoke.Models.DataExtractionHook.Year.init -> void
LM.HubSpoke.Models.ExtractedEndpoint
LM.HubSpoke.Models.ExtractedEndpoint.Category.get -> string!
LM.HubSpoke.Models.ExtractedEndpoint.Category.init -> void
LM.HubSpoke.Models.ExtractedEndpoint.Description.get -> string?
LM.HubSpoke.Models.ExtractedEndpoint.Description.init -> void
LM.HubSpoke.Models.ExtractedEndpoint.ExtractedEndpoint() -> void
LM.HubSpoke.Models.ExtractedEndpoint.Id.get -> string!
LM.HubSpoke.Models.ExtractedEndpoint.Id.init -> void
LM.HubSpoke.Models.ExtractedEndpoint.Name.get -> string!
LM.HubSpoke.Models.ExtractedEndpoint.Name.init -> void
LM.HubSpoke.Models.ExtractedEndpoint.Readouts.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.EndpointReadout!>!
LM.HubSpoke.Models.ExtractedEndpoint.Readouts.init -> void
LM.HubSpoke.Models.ExtractedIntervention
LM.HubSpoke.Models.ExtractedIntervention.Attributes.get -> System.Collections.Generic.IReadOnlyDictionary<string!, string!>?
LM.HubSpoke.Models.ExtractedIntervention.Attributes.init -> void
LM.HubSpoke.Models.ExtractedIntervention.Description.get -> string?
LM.HubSpoke.Models.ExtractedIntervention.Description.init -> void
LM.HubSpoke.Models.ExtractedIntervention.ExtractedIntervention() -> void
LM.HubSpoke.Models.ExtractedIntervention.Id.get -> string!
LM.HubSpoke.Models.ExtractedIntervention.Id.init -> void
LM.HubSpoke.Models.ExtractedIntervention.Name.get -> string!
LM.HubSpoke.Models.ExtractedIntervention.Name.init -> void
LM.HubSpoke.Models.ExtractedIntervention.Type.get -> string?
LM.HubSpoke.Models.ExtractedIntervention.Type.init -> void
LM.HubSpoke.Models.ExtractedPopulation
LM.HubSpoke.Models.ExtractedPopulation.BaselineCharacteristics.get -> System.Collections.Generic.IReadOnlyDictionary<string!, string!>!
LM.HubSpoke.Models.ExtractedPopulation.BaselineCharacteristics.init -> void
LM.HubSpoke.Models.ExtractedPopulation.Description.get -> string?
LM.HubSpoke.Models.ExtractedPopulation.Description.init -> void
LM.HubSpoke.Models.ExtractedPopulation.ExtractedPopulation() -> void
LM.HubSpoke.Models.ExtractedPopulation.Id.get -> string!
LM.HubSpoke.Models.ExtractedPopulation.Id.init -> void
LM.HubSpoke.Models.ExtractedPopulation.Name.get -> string!
LM.HubSpoke.Models.ExtractedPopulation.Name.init -> void
LM.HubSpoke.Models.EndpointReadout
LM.HubSpoke.Models.EndpointReadout.ComparatorInterventionId.get -> string?
LM.HubSpoke.Models.EndpointReadout.ComparatorInterventionId.init -> void
LM.HubSpoke.Models.EndpointReadout.EndpointReadout() -> void
LM.HubSpoke.Models.EndpointReadout.InterventionId.get -> string?
LM.HubSpoke.Models.EndpointReadout.InterventionId.init -> void
LM.HubSpoke.Models.EndpointReadout.KaplanMeierCurve.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.KaplanMeierPoint!>?
LM.HubSpoke.Models.EndpointReadout.KaplanMeierCurve.init -> void
LM.HubSpoke.Models.EndpointReadout.Metric.get -> string?
LM.HubSpoke.Models.EndpointReadout.Metric.init -> void
LM.HubSpoke.Models.EndpointReadout.PopulationId.get -> string?
LM.HubSpoke.Models.EndpointReadout.PopulationId.init -> void
LM.HubSpoke.Models.EndpointReadout.Timepoint.get -> string?
LM.HubSpoke.Models.EndpointReadout.Timepoint.init -> void
LM.HubSpoke.Models.EndpointReadout.Unit.get -> string?
LM.HubSpoke.Models.EndpointReadout.Unit.init -> void
LM.HubSpoke.Models.EndpointReadout.Value.get -> double?
LM.HubSpoke.Models.EndpointReadout.Value.init -> void
LM.HubSpoke.Models.KaplanMeierPoint
LM.HubSpoke.Models.KaplanMeierPoint.KaplanMeierPoint() -> void
LM.HubSpoke.Models.KaplanMeierPoint.SurvivalProbability.get -> double
LM.HubSpoke.Models.KaplanMeierPoint.SurvivalProbability.init -> void
LM.HubSpoke.Models.KaplanMeierPoint.Time.get -> double
LM.HubSpoke.Models.KaplanMeierPoint.Time.init -> void
LM.HubSpoke.Models.PopulationInterventionAssignment
LM.HubSpoke.Models.PopulationInterventionAssignment.ArmLabel.get -> string?
LM.HubSpoke.Models.PopulationInterventionAssignment.ArmLabel.init -> void
LM.HubSpoke.Models.PopulationInterventionAssignment.PopulationId.get -> string!
LM.HubSpoke.Models.PopulationInterventionAssignment.PopulationId.init -> void
LM.HubSpoke.Models.PopulationInterventionAssignment.InterventionId.get -> string!
LM.HubSpoke.Models.PopulationInterventionAssignment.InterventionId.init -> void
LM.HubSpoke.Models.PopulationInterventionAssignment.PopulationInterventionAssignment() -> void
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.GetEntryOverviewAsync(string! entryId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview?>!
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.GetKaplanMeierOverlaysAsync(string! entryId, string? endpointId = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.GetMortalityComparisonsAsync(string? entryId = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.RefreshEntryAsync(string! entryId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.SearchBaselineCharacteristicsAsync(string! characteristicSearchTerm, string? valueContains = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.KnowledgeGraphHub(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.GetEntryOverviewAsync(string! entryId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview?>!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.GetKaplanMeierOverlaysAsync(string! entryId, string? endpointId = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.GetMortalityComparisonsAsync(string? entryId = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.RefreshEntryAsync(string! entryId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.SearchBaselineCharacteristicsAsync(string! characteristicSearchTerm, string? valueContains = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.BaselineCharacteristicHit(string! entryId, string! entryTitle, string! populationId, string! populationName, string! characteristic, string! value) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.Characteristic.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.EntryId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.EntryTitle.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.PopulationId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.PopulationName.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.Value.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.GraphEdge(string! sourceType, string! sourceId, string! targetType, string! targetId, string! relationship, string? payloadJson) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.PayloadJson.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.Relationship.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.SourceId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.SourceType.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.TargetId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.TargetType.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.Edges.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge!>!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.GraphEntryOverview(string! entryId, string! title, System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode!>! populations, System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode!>! interventions, System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode!>! endpoints, System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge!>! edges) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.EntryId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.Endpoints.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode!>!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.Interventions.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode!>!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.Populations.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode!>!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.Title.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode.Category.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode.Description.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode.EndpointId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode.GraphEndpointNode(string! endpointId, string! name, string! category, string? description) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode.Name.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode.Description.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode.GraphInterventionNode(string! interventionId, string! name, string? type, string? description) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode.InterventionId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode.Name.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode.Type.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode
LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode.Description.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode.GraphPopulationNode(string! populationId, string! name, string? description) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode.Name.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode.PopulationId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.Curve.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto!>!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.EndpointId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.EndpointName.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.EntryId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.EntryTitle.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.InterventionId.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.InterventionName.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.KaplanMeierOverlay(string! entryId, string! entryTitle, string! endpointId, string! endpointName, string? populationId, string? interventionId, string? interventionName, System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto!>! curve) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.PopulationId.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto.KaplanMeierPointDto(double time, double survivalProbability) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto.SurvivalProbability.get -> double
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto.Time.get -> double
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.ComparatorInterventionId.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.ComparatorName.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.EndpointId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.EndpointName.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.EntryId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.EntryTitle.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.InterventionId.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.InterventionName.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.Metric.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.MortalityComparison(string! entryId, string! entryTitle, string! endpointId, string! endpointName, string? populationId, string? interventionId, string? interventionName, string? comparatorInterventionId, string? comparatorName, double? value, string? unit, string? metric, string? timepoint) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.PopulationId.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.Timepoint.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.Unit.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.Value.get -> double?
LM.HubSpoke.Models.EntryHub.LastActivityUtc.get -> System.DateTime?
LM.HubSpoke.Models.EntryHub.LastActivityUtc.init -> void
LM.HubSpoke.Models.EntryHub.Origin.get -> LM.HubSpoke.Models.EntryOrigin
LM.HubSpoke.Models.EntryHub.Origin.init -> void
LM.HubSpoke.Models.EntryHub.PrimaryPurpose.get -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryHub.PrimaryPurpose.init -> void
LM.HubSpoke.Models.EntryHub.PrimaryPurposeSource.get -> LM.HubSpoke.Models.PurposeSource
LM.HubSpoke.Models.EntryHub.PrimaryPurposeSource.init -> void
LM.HubSpoke.Models.EntryHub.RelationsSummary.get -> LM.HubSpoke.Models.EntryRelationsSummary?
LM.HubSpoke.Models.EntryHub.RelationsSummary.init -> void
LM.HubSpoke.Models.EntryHub.SchemaVersion.get -> string!
LM.HubSpoke.Models.EntryHub.SchemaVersion.init -> void
LM.HubSpoke.Models.EntryHub.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Models.EntryHub.Tags.init -> void
LM.HubSpoke.Models.EntryHub.UpdatedBy.get -> LM.HubSpoke.Models.PersonRef
LM.HubSpoke.Models.EntryHub.UpdatedBy.init -> void
LM.HubSpoke.Models.EntryHub.UpdatedUtc.get -> System.DateTime
LM.HubSpoke.Models.EntryHub.UpdatedUtc.init -> void
LM.HubSpoke.Models.EntryNotesHook
LM.HubSpoke.Models.EntryNotesHook.EntryNotesHook() -> void
LM.HubSpoke.Models.EntryNotesHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.EntryNotesHook.SchemaVersion.init -> void
LM.HubSpoke.Models.EntryNotesHook.Summary.get -> LM.HubSpoke.Models.EntryNotesSummary?
LM.HubSpoke.Models.EntryNotesHook.Summary.init -> void
LM.HubSpoke.Models.EntryNotesHook.SummaryText.get -> string?
LM.HubSpoke.Models.EntryNotesHook.UpdatedUtc.get -> System.DateTime
LM.HubSpoke.Models.EntryNotesHook.UpdatedUtc.init -> void
LM.HubSpoke.Models.EntryNotesHook.UserNotes.get -> string?
LM.HubSpoke.Models.EntryNotesHook.UserNotes.init -> void
LM.HubSpoke.Models.EntryNotesSummary
LM.HubSpoke.Models.EntryNotesSummary.EntryNotesSummary() -> void
LM.HubSpoke.Models.EntryNotesSummary.GetRenderedText() -> string?
LM.HubSpoke.Models.EntryNotesSummary.LitSearch.get -> LM.HubSpoke.Models.LitSearchNoteSummary?
LM.HubSpoke.Models.EntryNotesSummary.LitSearch.init -> void
LM.HubSpoke.Models.EntryNotesSummary.RawText.get -> string?
LM.HubSpoke.Models.EntryNotesSummary.RawText.init -> void
LM.HubSpoke.Models.EntryNotesSummary.Rendered.get -> string?
LM.HubSpoke.Models.EntryNotesSummary.Rendered.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary
LM.HubSpoke.Models.LitSearchNoteRunSummary.ExecutedBy.get -> string?
LM.HubSpoke.Models.LitSearchNoteRunSummary.ExecutedBy.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.From.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchNoteRunSummary.From.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.LitSearchNoteRunSummary() -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.RunId.get -> string!
LM.HubSpoke.Models.LitSearchNoteRunSummary.RunId.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.RunUtc.get -> System.DateTime
LM.HubSpoke.Models.LitSearchNoteRunSummary.RunUtc.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.To.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchNoteRunSummary.To.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.TotalHits.get -> int
LM.HubSpoke.Models.LitSearchNoteRunSummary.TotalHits.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary
LM.HubSpoke.Models.LitSearchNoteSummary.CreatedBy.get -> string?
LM.HubSpoke.Models.LitSearchNoteSummary.CreatedBy.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.CreatedUtc.get -> System.DateTime
LM.HubSpoke.Models.LitSearchNoteSummary.CreatedUtc.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.DerivedFromEntryId.get -> string?
LM.HubSpoke.Models.LitSearchNoteSummary.DerivedFromEntryId.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.LatestRun.get -> LM.HubSpoke.Models.LitSearchNoteRunSummary?
LM.HubSpoke.Models.LitSearchNoteSummary.LatestRun.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.LitSearchNoteSummary() -> void
LM.HubSpoke.Models.LitSearchNoteSummary.Provider.get -> string!
LM.HubSpoke.Models.LitSearchNoteSummary.Provider.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.Query.get -> string!
LM.HubSpoke.Models.LitSearchNoteSummary.Query.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.RunCount.get -> int
LM.HubSpoke.Models.LitSearchNoteSummary.RunCount.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.Title.get -> string?
LM.HubSpoke.Models.LitSearchNoteSummary.Title.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.ToDisplayString() -> string!
LM.HubSpoke.Models.EntryOrigin
LM.HubSpoke.Models.EntryOrigin.External = 0 -> LM.HubSpoke.Models.EntryOrigin
LM.HubSpoke.Models.EntryOrigin.Internal = 1 -> LM.HubSpoke.Models.EntryOrigin
LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Code = 5 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Dataset = 4 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Document = 3 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Manuscript = 1 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Trial = 2 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Unknown = 0 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryRelationsSummary
LM.HubSpoke.Models.EntryRelationsSummary.EntryRelationsSummary() -> void
LM.HubSpoke.Models.EntryRelationsSummary.RelatedCount.get -> int
LM.HubSpoke.Models.EntryRelationsSummary.RelatedCount.init -> void
LM.HubSpoke.Models.EntryRelationsSummary.RelationsUpdatedUtc.get -> System.DateTime?
LM.HubSpoke.Models.EntryRelationsSummary.RelationsUpdatedUtc.init -> void
LM.HubSpoke.Models.EntryRelationsSummary.VariantOfCount.get -> int
LM.HubSpoke.Models.EntryRelationsSummary.VariantOfCount.init -> void
LM.HubSpoke.Models.Grant
LM.HubSpoke.Models.Grant.Agency.get -> string?
LM.HubSpoke.Models.Grant.Agency.init -> void
LM.HubSpoke.Models.Grant.Country.get -> string?
LM.HubSpoke.Models.Grant.Country.init -> void
LM.HubSpoke.Models.Grant.Grant() -> void
LM.HubSpoke.Models.Grant.GrantId.get -> string?
LM.HubSpoke.Models.Grant.GrantId.init -> void
LM.HubSpoke.Models.JournalInfo
LM.HubSpoke.Models.JournalInfo.Country.get -> string?
LM.HubSpoke.Models.JournalInfo.Country.init -> void
LM.HubSpoke.Models.JournalInfo.ISOAbbreviation.get -> string?
LM.HubSpoke.Models.JournalInfo.ISOAbbreviation.init -> void
LM.HubSpoke.Models.JournalInfo.ISSN.get -> string?
LM.HubSpoke.Models.JournalInfo.ISSN.init -> void
LM.HubSpoke.Models.JournalInfo.ISSNElectronic.get -> string?
LM.HubSpoke.Models.JournalInfo.ISSNElectronic.init -> void
LM.HubSpoke.Models.JournalInfo.ISSNPrint.get -> string?
LM.HubSpoke.Models.JournalInfo.ISSNPrint.init -> void
LM.HubSpoke.Models.JournalInfo.Issue.get -> LM.HubSpoke.Models.JournalIssue!
LM.HubSpoke.Models.JournalInfo.Issue.init -> void
LM.HubSpoke.Models.JournalInfo.JournalInfo() -> void
LM.HubSpoke.Models.JournalInfo.NlmUniqueId.get -> string?
LM.HubSpoke.Models.JournalInfo.NlmUniqueId.init -> void
LM.HubSpoke.Models.JournalInfo.Title.get -> string!
LM.HubSpoke.Models.JournalInfo.Title.init -> void
LM.HubSpoke.Models.JournalIssue
LM.HubSpoke.Models.JournalIssue.JournalIssue() -> void
LM.HubSpoke.Models.JournalIssue.Number.get -> string?
LM.HubSpoke.Models.JournalIssue.Number.init -> void
LM.HubSpoke.Models.JournalIssue.PubDate.get -> LM.HubSpoke.Models.PartialDate?
LM.HubSpoke.Models.JournalIssue.PubDate.init -> void
LM.HubSpoke.Models.JournalIssue.Volume.get -> string?
LM.HubSpoke.Models.JournalIssue.Volume.init -> void
LM.HubSpoke.Models.JsonStd
LM.HubSpoke.Models.LitSearchHook
LM.HubSpoke.Models.LitSearchHook.CreatedBy.get -> string?
LM.HubSpoke.Models.LitSearchHook.CreatedBy.init -> void
LM.HubSpoke.Models.LitSearchHook.CreatedUtc.get -> System.DateTime
LM.HubSpoke.Models.LitSearchHook.CreatedUtc.init -> void
LM.HubSpoke.Models.LitSearchHook.From.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchHook.From.init -> void
LM.HubSpoke.Models.LitSearchHook.Keywords.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Models.LitSearchHook.Keywords.init -> void
LM.HubSpoke.Models.LitSearchHook.DerivedFromEntryId.get -> string?
LM.HubSpoke.Models.LitSearchHook.DerivedFromEntryId.init -> void
LM.HubSpoke.Models.LitSearchHook.LitSearchHook() -> void
LM.HubSpoke.Models.LitSearchHook.Provider.get -> string!
LM.HubSpoke.Models.LitSearchHook.Provider.init -> void
LM.HubSpoke.Models.LitSearchHook.Query.get -> string!
LM.HubSpoke.Models.LitSearchHook.Query.init -> void
LM.HubSpoke.Models.LitSearchHook.LegacyNotes.get -> string?
LM.HubSpoke.Models.LitSearchHook.LegacyNotes.init -> void
LM.HubSpoke.Models.LitSearchHook.NotesSummary.get -> string?
LM.HubSpoke.Models.LitSearchHook.NotesSummary.set -> void
LM.HubSpoke.Models.LitSearchHook.UserNotes.get -> string?
LM.HubSpoke.Models.LitSearchHook.UserNotes.set -> void
LM.HubSpoke.Models.LitSearchHook.Runs.get -> System.Collections.Generic.List<LM.HubSpoke.Models.LitSearchRun!>!
LM.HubSpoke.Models.LitSearchHook.Runs.init -> void
LM.HubSpoke.Models.LitSearchHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.LitSearchHook.SchemaVersion.init -> void
LM.HubSpoke.Models.LitSearchHook.Title.get -> string!
LM.HubSpoke.Models.LitSearchHook.Title.init -> void
LM.HubSpoke.Models.LitSearchHook.To.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchHook.To.init -> void
LM.HubSpoke.Models.LitSearchRun
LM.HubSpoke.Models.LitSearchRun.IsFavorite.get -> bool
LM.HubSpoke.Models.LitSearchRun.IsFavorite.init -> void
LM.HubSpoke.Models.LitSearchRun.LitSearchRun() -> void
LM.HubSpoke.Models.LitSearchRun.RawAttachments.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.LitSearchRun.RawAttachments.init -> void
LM.HubSpoke.Models.LitSearchRun.CheckedEntryIdsPath.get -> string?
LM.HubSpoke.Models.LitSearchRun.CheckedEntryIdsPath.set -> void
LM.HubSpoke.Models.LitSearchRun.RunId.get -> string!
LM.HubSpoke.Models.LitSearchRun.RunId.init -> void
LM.HubSpoke.Models.LitSearchRun.RunUtc.get -> System.DateTime
LM.HubSpoke.Models.LitSearchRun.RunUtc.init -> void
LM.HubSpoke.Models.LitSearchRun.ExecutedBy.get -> string?
LM.HubSpoke.Models.LitSearchRun.ExecutedBy.init -> void
LM.HubSpoke.Models.LitSearchRun.From.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchRun.From.init -> void
LM.HubSpoke.Models.LitSearchRun.To.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchRun.To.init -> void
LM.HubSpoke.Models.LitSearchRun.TotalHits.get -> int
LM.HubSpoke.Models.LitSearchRun.TotalHits.init -> void
LM.HubSpoke.Models.MedlineInfo
LM.HubSpoke.Models.MedlineInfo.CitationSubset.get -> string?
LM.HubSpoke.Models.MedlineInfo.CitationSubset.init -> void
LM.HubSpoke.Models.MedlineInfo.MedlineInfo() -> void
LM.HubSpoke.Models.MedlineInfo.PublicationStatusRaw.get -> string?
LM.HubSpoke.Models.MedlineInfo.PublicationStatusRaw.init -> void
LM.HubSpoke.Models.MeshHeading
LM.HubSpoke.Models.MeshHeading.Descriptor.get -> string!
LM.HubSpoke.Models.MeshHeading.Descriptor.init -> void
LM.HubSpoke.Models.MeshHeading.MajorTopic.get -> bool
LM.HubSpoke.Models.MeshHeading.MajorTopic.init -> void
LM.HubSpoke.Models.MeshHeading.MeshHeading() -> void
LM.HubSpoke.Models.MeshHeading.Qualifiers.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.MeshHeading.Qualifiers.init -> void
LM.HubSpoke.Models.NullableUtcDateTimeConverter
LM.HubSpoke.Models.NullableUtcDateTimeConverter.NullableUtcDateTimeConverter() -> void
LM.HubSpoke.Models.Pagination
LM.HubSpoke.Models.Pagination.ArticleNumber.get -> string?
LM.HubSpoke.Models.Pagination.ArticleNumber.init -> void
LM.HubSpoke.Models.Pagination.EndPage.get -> string?
LM.HubSpoke.Models.Pagination.EndPage.init -> void
LM.HubSpoke.Models.Pagination.Pagination() -> void
LM.HubSpoke.Models.Pagination.StartPage.get -> string?
LM.HubSpoke.Models.Pagination.StartPage.init -> void
LM.HubSpoke.Models.PartialDate
LM.HubSpoke.Models.PartialDate.Day.get -> int?
LM.HubSpoke.Models.PartialDate.Day.init -> void
LM.HubSpoke.Models.PartialDate.Month.get -> int?
LM.HubSpoke.Models.PartialDate.Month.init -> void
LM.HubSpoke.Models.PartialDate.PartialDate() -> void
LM.HubSpoke.Models.PartialDate.ToDateTimeOrNull() -> System.DateTime?
LM.HubSpoke.Models.PartialDate.Year.get -> int
LM.HubSpoke.Models.PartialDate.Year.init -> void
LM.HubSpoke.Models.PersonRef
LM.HubSpoke.Models.PersonRef.DisplayName.get -> string?
LM.HubSpoke.Models.PersonRef.DisplayName.init -> void
LM.HubSpoke.Models.PersonRef.Id.get -> string!
LM.HubSpoke.Models.PersonRef.Id.init -> void
LM.HubSpoke.Models.PersonRef.PersonRef() -> void
LM.HubSpoke.Models.PersonRef.PersonRef(string! Id, string? DisplayName) -> void
LM.HubSpoke.Models.PersonRef.TimestampUtc.get -> System.DateTime?
LM.HubSpoke.Models.PersonRef.TimestampUtc.init -> void
LM.HubSpoke.Models.PublicationHistory
LM.HubSpoke.Models.PublicationHistory.Accepted.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.Accepted.init -> void
LM.HubSpoke.Models.PublicationHistory.Entrez.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.Entrez.init -> void
LM.HubSpoke.Models.PublicationHistory.Medline.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.Medline.init -> void
LM.HubSpoke.Models.PublicationHistory.PublicationHistory() -> void
LM.HubSpoke.Models.PublicationHistory.PubMed.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.PubMed.init -> void
LM.HubSpoke.Models.PublicationHistory.Received.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.Received.init -> void
LM.HubSpoke.Models.PublicationHistory.Revised.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.Revised.init -> void
LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.AheadOfPrint = 1 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.EPublish = 2 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.Medline = 4 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.PPublish = 3 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.PubMedNotMedline = 5 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.Unknown = 0 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PurposeSource
LM.HubSpoke.Models.PurposeSource.Inferred = 0 -> LM.HubSpoke.Models.PurposeSource
LM.HubSpoke.Models.PurposeSource.Manual = 1 -> LM.HubSpoke.Models.PurposeSource
LM.HubSpoke.Models.UtcDateTimeConverter
LM.HubSpoke.Models.UtcDateTimeConverter.UtcDateTimeConverter() -> void
LM.HubSpoke.Spokes.ArticleSpokeHandler
LM.HubSpoke.Spokes.ArticleSpokeHandler.ArticleSpokeHandler() -> void
LM.HubSpoke.Spokes.ArticleSpokeHandler.BuildHookAsync(LM.Core.Models.Entry! entry, LM.HubSpoke.Abstractions.CasResult primary, System.Collections.Generic.IEnumerable<string!>! attachmentRelPaths, System.Func<string!, System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.HubSpoke.Abstractions.CasResult>!>! moveToCas, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.ArticleSpokeHandler.BuildIndex(LM.HubSpoke.Models.EntryHub! hub, object? hookObj, string? fullText) -> LM.HubSpoke.Abstractions.SpokeIndexContribution
LM.HubSpoke.Spokes.ArticleSpokeHandler.Handles.get -> LM.Core.Models.EntryType
LM.HubSpoke.Spokes.ArticleSpokeHandler.HookPath.get -> string!
LM.HubSpoke.Spokes.ArticleSpokeHandler.LoadHookAsync(LM.Core.Abstractions.IWorkSpaceService! ws, string! entryId, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.ArticleSpokeHandler.MapToEntry(LM.HubSpoke.Models.EntryHub! hub, object? hookObj) -> LM.Core.Models.Entry!
LM.HubSpoke.Spokes.DocumentSpokeHandler
LM.HubSpoke.Spokes.DocumentSpokeHandler.BuildHookAsync(LM.Core.Models.Entry! entry, LM.HubSpoke.Abstractions.CasResult primary, System.Collections.Generic.IEnumerable<string!>! attachmentRelPaths, System.Func<string!, System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.HubSpoke.Abstractions.CasResult>!>! moveToCas, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.DocumentSpokeHandler.BuildIndex(LM.HubSpoke.Models.EntryHub! hub, object? hookObj, string? fullText) -> LM.HubSpoke.Abstractions.SpokeIndexContribution
LM.HubSpoke.Spokes.DocumentSpokeHandler.DocumentSpokeHandler() -> void
LM.HubSpoke.Spokes.DocumentSpokeHandler.Handles.get -> LM.Core.Models.EntryType
LM.HubSpoke.Spokes.DocumentSpokeHandler.HookPath.get -> string!
LM.HubSpoke.Spokes.DocumentSpokeHandler.LoadHookAsync(LM.Core.Abstractions.IWorkSpaceService! ws, string! entryId, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.DocumentSpokeHandler.MapToEntry(LM.HubSpoke.Models.EntryHub! hub, object? hookObj) -> LM.Core.Models.Entry!
LM.HubSpoke.Spokes.LitSearchSpokeHandler
LM.HubSpoke.Spokes.LitSearchSpokeHandler.BuildHookAsync(LM.Core.Models.Entry! entry, LM.HubSpoke.Abstractions.CasResult primary, System.Collections.Generic.IEnumerable<string!>! attachmentRelPaths, System.Func<string!, System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.HubSpoke.Abstractions.CasResult>!>! moveToCas, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.LitSearchSpokeHandler.BuildIndex(LM.HubSpoke.Models.EntryHub! hub, object? hookObj, string? extractedFullText) -> LM.HubSpoke.Abstractions.SpokeIndexContribution
LM.HubSpoke.Spokes.LitSearchSpokeHandler.Handles.get -> LM.Core.Models.EntryType
LM.HubSpoke.Spokes.LitSearchSpokeHandler.HookPath.get -> string!
LM.HubSpoke.Spokes.LitSearchSpokeHandler.LitSearchSpokeHandler(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.HubSpoke.Spokes.LitSearchSpokeHandler.LoadHookAsync(LM.Core.Abstractions.IWorkSpaceService! ws, string! entryId, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.LitSearchSpokeHandler.MapToEntry(LM.HubSpoke.Models.EntryHub! hub, object? hookObj) -> LM.Core.Models.Entry!
override LM.HubSpoke.Models.NullableUtcDateTimeConverter.Read(ref System.Text.Json.Utf8JsonReader reader, System.Type! typeToConvert, System.Text.Json.JsonSerializerOptions! options) -> System.DateTime?
override LM.HubSpoke.Models.NullableUtcDateTimeConverter.Write(System.Text.Json.Utf8JsonWriter! writer, System.DateTime? value, System.Text.Json.JsonSerializerOptions! options) -> void
override LM.HubSpoke.Models.UtcDateTimeConverter.Read(ref System.Text.Json.Utf8JsonReader reader, System.Type! typeToConvert, System.Text.Json.JsonSerializerOptions! options) -> System.DateTime
override LM.HubSpoke.Models.UtcDateTimeConverter.Write(System.Text.Json.Utf8JsonWriter! writer, System.DateTime value, System.Text.Json.JsonSerializerOptions! options) -> void
static LM.HubSpoke.Models.EntryNotesSummary.FromLitSearch(LM.HubSpoke.Models.LitSearchNoteSummary! summary, string? renderedText) -> LM.HubSpoke.Models.EntryNotesSummary!
static LM.HubSpoke.Models.EntryNotesSummary.FromRawText(string! text) -> LM.HubSpoke.Models.EntryNotesSummary!
static LM.HubSpoke.Models.PersonRef.Unknown.get -> LM.HubSpoke.Models.PersonRef
static readonly LM.HubSpoke.Models.JsonStd.Options -> System.Text.Json.JsonSerializerOptions!
---------- LM.Review.Core ----------
#nullable enable
LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConflictState.None = 0 -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConflictState.Conflict = 1 -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConflictState.Escalated = 2 -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConflictState.Resolved = 3 -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.Pending = 0 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.InProgress = 1 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.Included = 2 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.Excluded = 3 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.Escalated = 4 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewerRole.Primary = 0 -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewerRole.Secondary = 1 -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewerRole.TieBreaker = 2 -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewerRole.Arbitrator = 3 -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewStageType.TitleScreening = 0 -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewStageType.FullTextReview = 1 -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewStageType.ConsensusMeeting = 2 -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewStageType.QualityAssurance = 3 -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewerDecision
LM.Review.Core.Models.ReviewerDecision.AssignmentId.get -> string!
static LM.Review.Core.Models.ReviewerDecision.Create(string! assignmentId, string! reviewerId, LM.Review.Core.Models.ScreeningStatus decision, System.DateTimeOffset decidedAtUtc, string? notes = null) -> LM.Review.Core.Models.ReviewerDecision!
LM.Review.Core.Models.ReviewerDecision.DecidedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ReviewerDecision.Decision.get -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ReviewerDecision.Notes.get -> string?
LM.Review.Core.Models.ReviewerDecision.ReviewerId.get -> string!
LM.Review.Core.Models.ConsensusOutcome
LM.Review.Core.Models.ConsensusOutcome.Approved.get -> bool
static LM.Review.Core.Models.ConsensusOutcome.Create(string! stageId, bool approved, LM.Review.Core.Models.ConflictState resultingState, System.DateTimeOffset resolvedAtUtc, string? notes = null, string? resolvedBy = null) -> LM.Review.Core.Models.ConsensusOutcome!
LM.Review.Core.Models.ConsensusOutcome.Notes.get -> string?
LM.Review.Core.Models.ConsensusOutcome.ResolvedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ConsensusOutcome.ResolvedBy.get -> string?
LM.Review.Core.Models.ConsensusOutcome.ResultingState.get -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConsensusOutcome.StageId.get -> string!
LM.Review.Core.Models.ReviewAuditTrail
LM.Review.Core.Models.ReviewAuditTrail.Append(LM.Review.Core.Models.ReviewAuditTrail.AuditEntry! entry) -> LM.Review.Core.Models.ReviewAuditTrail!
static LM.Review.Core.Models.ReviewAuditTrail.Create(System.Collections.Generic.IEnumerable<LM.Review.Core.Models.ReviewAuditTrail.AuditEntry!>? entries = null) -> LM.Review.Core.Models.ReviewAuditTrail!
LM.Review.Core.Models.ReviewAuditTrail.Entries.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewAuditTrail.AuditEntry!>!
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Action.get -> string!
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Actor.get -> string!
static LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Create(string! id, string! actor, string! action, System.DateTimeOffset occurredAtUtc, string? details = null) -> LM.Review.Core.Models.ReviewAuditTrail.AuditEntry!
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Details.get -> string?
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Id.get -> string!
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.OccurredAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ReviewProject
LM.Review.Core.Models.ReviewProject.AuditTrail.get -> LM.Review.Core.Models.ReviewAuditTrail!
static LM.Review.Core.Models.ReviewProject.Create(string! id, string! name, System.DateTimeOffset createdAtUtc, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.StageDefinition!>! stageDefinitions, LM.Review.Core.Models.ReviewProjectMetadata? metadata = null, LM.Review.Core.Models.ReviewAuditTrail? auditTrail = null) -> LM.Review.Core.Models.ReviewProject!
LM.Review.Core.Models.ReviewProject.CreatedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ReviewProject.Id.get -> string!
LM.Review.Core.Models.ReviewProject.Name.get -> string!
LM.Review.Core.Models.ReviewProject.Metadata.get -> LM.Review.Core.Models.ReviewProjectMetadata!
LM.Review.Core.Models.ReviewProject.StageDefinitions.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.StageDefinition!>!
LM.Review.Core.Models.ReviewStage
LM.Review.Core.Models.ReviewStage.ActivatedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ReviewStage.Assignments.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ScreeningAssignment!>!
LM.Review.Core.Models.ReviewStage.CompletedAt.get -> System.DateTimeOffset?
LM.Review.Core.Models.ReviewStage.Consensus.get -> LM.Review.Core.Models.ConsensusOutcome?
LM.Review.Core.Models.ReviewStage.ConflictState.get -> LM.Review.Core.Models.ConflictState
static LM.Review.Core.Models.ReviewStage.Create(string! id, string! projectId, LM.Review.Core.Models.StageDefinition! definition, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.ScreeningAssignment!>! assignments, LM.Review.Core.Models.ConflictState conflictState, System.DateTimeOffset activatedAtUtc, System.DateTimeOffset? completedAtUtc = null, LM.Review.Core.Models.ConsensusOutcome? consensus = null) -> LM.Review.Core.Models.ReviewStage!
LM.Review.Core.Models.ReviewStage.Definition.get -> LM.Review.Core.Models.StageDefinition!
LM.Review.Core.Models.ReviewStage.Id.get -> string!
LM.Review.Core.Models.ReviewStage.IsComplete.get -> bool
LM.Review.Core.Models.ReviewStage.ProjectId.get -> string!
LM.Review.Core.Models.StageDefinition
LM.Review.Core.Models.StageDefinition.ConsensusPolicy.get -> LM.Review.Core.Models.StageConsensusPolicy!
static LM.Review.Core.Models.StageDefinition.Create(string! id, string! name, LM.Review.Core.Models.ReviewStageType stageType, LM.Review.Core.Models.ReviewerRequirement! reviewerRequirement, LM.Review.Core.Models.StageConsensusPolicy! consensusPolicy, LM.Review.Core.Models.StageDisplayProfile! displayProfile) -> LM.Review.Core.Models.StageDefinition!
LM.Review.Core.Models.StageDefinition.Id.get -> string!
LM.Review.Core.Models.StageDefinition.Name.get -> string!
LM.Review.Core.Models.StageDefinition.ReviewerRequirement.get -> LM.Review.Core.Models.ReviewerRequirement!
LM.Review.Core.Models.StageDefinition.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.StageDefinition.DisplayProfile.get -> LM.Review.Core.Models.StageDisplayProfile!
LM.Review.Core.Models.StageConsensusPolicy
LM.Review.Core.Models.StageConsensusPolicy.ArbitrationRole.get -> LM.Review.Core.Models.ReviewerRole?
static LM.Review.Core.Models.StageConsensusPolicy.Disabled() -> LM.Review.Core.Models.StageConsensusPolicy!
LM.Review.Core.Models.StageConsensusPolicy.EscalateOnDisagreement.get -> bool
LM.Review.Core.Models.StageConsensusPolicy.MinimumAgreements.get -> int
static LM.Review.Core.Models.StageConsensusPolicy.RequireAgreement(int minimumAgreements, bool escalateOnDisagreement, LM.Review.Core.Models.ReviewerRole? arbitrationRole) -> LM.Review.Core.Models.StageConsensusPolicy!
LM.Review.Core.Models.StageConsensusPolicy.RequiresConsensus.get -> bool
LM.Review.Core.Models.ReviewerRequirement
static LM.Review.Core.Models.ReviewerRequirement.Create(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<LM.Review.Core.Models.ReviewerRole, int>>! requirements) -> LM.Review.Core.Models.ReviewerRequirement!
LM.Review.Core.Models.ReviewerRequirement.GetRequirement(LM.Review.Core.Models.ReviewerRole role) -> int
LM.Review.Core.Models.ReviewerRequirement.Requirements.get -> System.Collections.Generic.IReadOnlyDictionary<LM.Review.Core.Models.ReviewerRole, int>!
LM.Review.Core.Models.ReviewerRequirement.TotalRequired.get -> int
LM.Review.Core.Models.ScreeningAssignment
LM.Review.Core.Models.ScreeningAssignment.AssignedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ScreeningAssignment.CompletedAt.get -> System.DateTimeOffset?
static LM.Review.Core.Models.ScreeningAssignment.Create(string! id, string! stageId, string! reviewerId, LM.Review.Core.Models.ReviewerRole role, LM.Review.Core.Models.ScreeningStatus status, System.DateTimeOffset assignedAtUtc, System.DateTimeOffset? completedAtUtc = null, LM.Review.Core.Models.ReviewerDecision? decision = null) -> LM.Review.Core.Models.ScreeningAssignment!
LM.Review.Core.Models.ScreeningAssignment.Decision.get -> LM.Review.Core.Models.ReviewerDecision?
LM.Review.Core.Models.ScreeningAssignment.Id.get -> string!
LM.Review.Core.Models.ScreeningAssignment.ReviewerId.get -> string!
LM.Review.Core.Models.ScreeningAssignment.Role.get -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ScreeningAssignment.StageId.get -> string!
LM.Review.Core.Models.ScreeningAssignment.Status.get -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.Forms.ExtractionForm
LM.Review.Core.Models.Forms.ExtractionForm.Category.get -> string?
static LM.Review.Core.Models.Forms.ExtractionForm.Create(string! id, string! name, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.Forms.FormSection!>! sections, string? description = null, string? category = null) -> LM.Review.Core.Models.Forms.ExtractionForm!
LM.Review.Core.Models.Forms.ExtractionForm.Description.get -> string?
LM.Review.Core.Models.Forms.ExtractionForm.Id.get -> string!
LM.Review.Core.Models.Forms.ExtractionForm.Name.get -> string!
LM.Review.Core.Models.Forms.ExtractionForm.Sections.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.Forms.FormSection!>!
LM.Review.Core.Models.Forms.FormField
LM.Review.Core.Models.Forms.FormField.AllowFreeTextFallback.get -> bool
LM.Review.Core.Models.Forms.FormField.Description.get -> string?
LM.Review.Core.Models.Forms.FormField.FieldType.get -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormField.Id.get -> string!
LM.Review.Core.Models.Forms.FormField.Options.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.Forms.FormFieldOption!>!
LM.Review.Core.Models.Forms.FormField.Title.get -> string!
LM.Review.Core.Models.Forms.FormField.Validation.get -> LM.Review.Core.Models.Forms.FormFieldValidation?
LM.Review.Core.Models.Forms.FormField.Visibility.get -> LM.Review.Core.Models.Forms.FormVisibilityRule?
static LM.Review.Core.Models.Forms.FormField.Create(string! id, string! title, LM.Review.Core.Models.Forms.FormFieldType fieldType, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.Forms.FormFieldOption!>? options = null, string? description = null, LM.Review.Core.Models.Forms.FormFieldValidation? validation = null, LM.Review.Core.Models.Forms.FormVisibilityRule? visibility = null, bool allowFreeTextFallback = false) -> LM.Review.Core.Models.Forms.FormField!
LM.Review.Core.Models.Forms.FormFieldOption
LM.Review.Core.Models.Forms.FormFieldOption.Description.get -> string?
LM.Review.Core.Models.Forms.FormFieldOption.Id.get -> string!
LM.Review.Core.Models.Forms.FormFieldOption.IsDefault.get -> bool
LM.Review.Core.Models.Forms.FormFieldOption.Label.get -> string!
static LM.Review.Core.Models.Forms.FormFieldOption.Create(string! id, string! label, string? description = null, bool isDefault = false) -> LM.Review.Core.Models.Forms.FormFieldOption!
LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.SingleSelect = 0 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.MultiSelect = 1 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.Text = 2 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.Numeric = 3 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.Date = 4 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.Reference = 5 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldValidation
LM.Review.Core.Models.Forms.FormFieldValidation.Expression.get -> string?
LM.Review.Core.Models.Forms.FormFieldValidation.Maximum.get -> decimal?
LM.Review.Core.Models.Forms.FormFieldValidation.MaximumDateUtc.get -> System.DateTime?
LM.Review.Core.Models.Forms.FormFieldValidation.Minimum.get -> decimal?
LM.Review.Core.Models.Forms.FormFieldValidation.MinimumDateUtc.get -> System.DateTime?
LM.Review.Core.Models.Forms.FormFieldValidation.Mode.get -> LM.Review.Core.Models.Forms.FormValidationMode
static LM.Review.Core.Models.Forms.FormFieldValidation.CreateDateRange(System.DateTime? minimumUtc, System.DateTime? maximumUtc) -> LM.Review.Core.Models.Forms.FormFieldValidation!
static LM.Review.Core.Models.Forms.FormFieldValidation.CreateNumericRange(decimal? minimum, decimal? maximum) -> LM.Review.Core.Models.Forms.FormFieldValidation!
static LM.Review.Core.Models.Forms.FormFieldValidation.CreateRegex(string! pattern) -> LM.Review.Core.Models.Forms.FormFieldValidation!
static LM.Review.Core.Models.Forms.FormFieldValidation.CreateRequired() -> LM.Review.Core.Models.Forms.FormFieldValidation!
LM.Review.Core.Models.Forms.FormIdentifier
static bool LM.Review.Core.Models.Forms.FormIdentifier.IsNormalized(string! identifier) -> bool
static string LM.Review.Core.Models.Forms.FormIdentifier.Normalize(string! identifier) -> string!
LM.Review.Core.Models.Forms.FormSection
LM.Review.Core.Models.Forms.FormSection.Children.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.Forms.FormSection!>!
LM.Review.Core.Models.Forms.FormSection.Description.get -> string?
LM.Review.Core.Models.Forms.FormSection.Fields.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.Forms.FormField!>!
LM.Review.Core.Models.Forms.FormSection.Id.get -> string!
LM.Review.Core.Models.Forms.FormSection.IsRepeatable.get -> bool
LM.Review.Core.Models.Forms.FormSection.Title.get -> string!
LM.Review.Core.Models.Forms.FormSection.Visibility.get -> LM.Review.Core.Models.Forms.FormVisibilityRule?
static LM.Review.Core.Models.Forms.FormSection.Create(string! id, string! title, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.Forms.FormField!>! fields, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.Forms.FormSection!>? children = null, bool isRepeatable = false, string? description = null, LM.Review.Core.Models.Forms.FormVisibilityRule? visibility = null) -> LM.Review.Core.Models.Forms.FormSection!
LM.Review.Core.Models.Forms.FormValidationMode
LM.Review.Core.Models.Forms.FormValidationMode.Required = 0 -> LM.Review.Core.Models.Forms.FormValidationMode
LM.Review.Core.Models.Forms.FormValidationMode.Range = 1 -> LM.Review.Core.Models.Forms.FormValidationMode
LM.Review.Core.Models.Forms.FormValidationMode.Regex = 2 -> LM.Review.Core.Models.Forms.FormValidationMode
LM.Review.Core.Models.Forms.FormVisibilityRule
LM.Review.Core.Models.Forms.FormVisibilityRule.ExpectedValues.get -> System.Collections.Generic.IReadOnlyList<string>!
LM.Review.Core.Models.Forms.FormVisibilityRule.IsVisibleWhenMatches.get -> bool
LM.Review.Core.Models.Forms.FormVisibilityRule.SourceFieldId.get -> string!
static LM.Review.Core.Models.Forms.FormVisibilityRule.Create(string! sourceFieldId, System.Collections.Generic.IEnumerable<string>? expectedValues = null, bool isVisibleWhenMatches = true) -> LM.Review.Core.Models.Forms.FormVisibilityRule!
LM.Review.Core.Models.Forms.ExtractionFormSnapshot
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.CapturedBy.get -> string!
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.CapturedUtc.get -> System.DateTime
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.FormId.get -> string!
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.Values.get -> System.Collections.Generic.IReadOnlyDictionary<string, object?>!
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.VersionId.get -> string!
static LM.Review.Core.Models.Forms.ExtractionFormSnapshot.Create(string! formId, string! versionId, System.Collections.Generic.IDictionary<string, object?>! values, string? capturedBy = null, System.DateTime? capturedUtc = null) -> LM.Review.Core.Models.Forms.ExtractionFormSnapshot!
LM.Review.Core.Models.Forms.ExtractionFormVersion
LM.Review.Core.Models.Forms.ExtractionFormVersion.CreatedBy.get -> string!
LM.Review.Core.Models.Forms.ExtractionFormVersion.CreatedUtc.get -> System.DateTime
LM.Review.Core.Models.Forms.ExtractionFormVersion.Form.get -> LM.Review.Core.Models.Forms.ExtractionForm!
LM.Review.Core.Models.Forms.ExtractionFormVersion.Metadata.get -> System.Collections.Generic.IReadOnlyDictionary<string, string>!
LM.Review.Core.Models.Forms.ExtractionFormVersion.VersionId.get -> string!
static LM.Review.Core.Models.Forms.ExtractionFormVersion.Create(string! versionId, LM.Review.Core.Models.Forms.ExtractionForm! form, System.Collections.Generic.IDictionary<string, string>? metadata = null, string? createdBy = null, System.DateTime? createdUtc = null) -> LM.Review.Core.Models.Forms.ExtractionFormVersion!
LM.Review.Core.Validation.FormSchemaIssue
LM.Review.Core.Validation.FormSchemaIssue.Code.get -> string!
LM.Review.Core.Validation.FormSchemaIssue.FieldId.get -> string?
LM.Review.Core.Validation.FormSchemaIssue.Message.get -> string!
LM.Review.Core.Validation.FormSchemaIssue.SectionId.get -> string?
LM.Review.Core.Validation.FormSchemaIssue.Severity.get -> LM.Review.Core.Validation.FormSchemaSeverity
static LM.Review.Core.Validation.FormSchemaIssue.Error(string! code, string! message, string? sectionId = null, string? fieldId = null) -> LM.Review.Core.Validation.FormSchemaIssue!
static LM.Review.Core.Validation.FormSchemaIssue.Warning(string! code, string! message, string? sectionId = null, string? fieldId = null) -> LM.Review.Core.Validation.FormSchemaIssue!
LM.Review.Core.Validation.FormSchemaSeverity
LM.Review.Core.Validation.FormSchemaSeverity.Warning = 0 -> LM.Review.Core.Validation.FormSchemaSeverity
LM.Review.Core.Validation.FormSchemaSeverity.Error = 1 -> LM.Review.Core.Validation.FormSchemaSeverity
LM.Review.Core.Validation.FormSchemaValidator
LM.Review.Core.Validation.FormSchemaValidator.Validate(LM.Review.Core.Models.Forms.ExtractionForm! form) -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Validation.FormSchemaIssue!>!
LM.Review.Core.Validation.FormSchemaValidator.Validate(LM.Review.Core.Models.Forms.ExtractionFormSnapshot! snapshot, LM.Review.Core.Models.Forms.ExtractionFormVersion! version) -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Validation.FormSchemaIssue!>!
LM.Review.Core.Validation.FormSchemaValidator.Validate(LM.Review.Core.Models.Forms.ExtractionFormVersion! version) -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Validation.FormSchemaIssue!>!
#nullable enable
LM.Review.Core.Services.IReviewHookContext
LM.Review.Core.Services.IReviewHookContextFactory
LM.Review.Core.Services.IReviewHookContextFactory.CreateAssignmentUpdated(LM.Review.Core.Models.ReviewStage! stage, LM.Review.Core.Models.ScreeningAssignment! assignment) -> LM.Review.Core.Services.IReviewHookContext!
LM.Review.Core.Services.IReviewHookContextFactory.CreateReviewerDecisionRecorded(LM.Review.Core.Models.ScreeningAssignment! assignment, LM.Review.Core.Models.ReviewerDecision! decision) -> LM.Review.Core.Services.IReviewHookContext!
LM.Review.Core.Services.IReviewHookContextFactory.CreateStageTransition(LM.Review.Core.Models.ReviewStage! stage, LM.Review.Core.Models.ConflictState previousState, LM.Review.Core.Models.ConflictState currentState) -> LM.Review.Core.Services.IReviewHookContext!
LM.Review.Core.Services.IReviewHookOrchestrator
LM.Review.Core.Services.IReviewHookOrchestrator.ProcessAsync(string! entryId, LM.Review.Core.Services.IReviewHookContext! context, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Review.Core.Services.IReviewWorkflowService
LM.Review.Core.Services.IReviewWorkflowService.CreateStageAsync(string! projectId, string! stageDefinitionId, System.Collections.Generic.IReadOnlyCollection<LM.Review.Core.Services.ReviewerAssignmentRequest!>! assignments, System.Threading.CancellationToken cancellationToken = default) -> LM.Review.Core.Models.ReviewStage!
LM.Review.Core.Services.IReviewWorkflowService.SubmitDecisionAsync(string! assignmentId, LM.Review.Core.Models.ScreeningStatus decision, string? notes, System.Threading.CancellationToken cancellationToken = default) -> LM.Review.Core.Models.ScreeningAssignment!
LM.Review.Core.Services.IReviewWorkflowStore
LM.Review.Core.Services.IReviewWorkflowStore.GetAssignmentAsync(string! assignmentId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ScreeningAssignment?>!
LM.Review.Core.Services.IReviewWorkflowStore.GetAssignmentsByStageAsync(string! stageId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ScreeningAssignment!>>!
LM.Review.Core.Services.IReviewWorkflowStore.GetProjectAsync(string! projectId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ReviewProject?>!
LM.Review.Core.Services.IReviewWorkflowStore.GetProjectsAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewProject!>!>!
LM.Review.Core.Services.IReviewWorkflowStore.GetStageAsync(string! stageId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ReviewStage?>!
LM.Review.Core.Services.IReviewWorkflowStore.GetStagesByProjectAsync(string! projectId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStage!>>!
LM.Review.Core.Services.IReviewWorkflowStore.SaveAssignmentAsync(string! projectId, LM.Review.Core.Models.ScreeningAssignment! assignment, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Review.Core.Services.IReviewWorkflowStore.SaveProjectAsync(LM.Review.Core.Models.ReviewProject! project, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Review.Core.Services.IReviewWorkflowStore.SaveStageAsync(LM.Review.Core.Models.ReviewStage! stage, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Review.Core.Services.ReviewWorkflowService
LM.Review.Core.Services.ReviewWorkflowService.CreateStageAsync(string! projectId, string! stageDefinitionId, System.Collections.Generic.IReadOnlyCollection<LM.Review.Core.Services.ReviewerAssignmentRequest!>! assignments, System.Threading.CancellationToken cancellationToken = default) -> LM.Review.Core.Models.ReviewStage!
LM.Review.Core.Services.ReviewWorkflowService.ReviewWorkflowService(LM.Review.Core.Services.IReviewWorkflowStore! store, LM.Review.Core.Services.IReviewHookOrchestrator! hookOrchestrator, LM.Review.Core.Services.IReviewHookContextFactory! hookContextFactory, System.TimeProvider? timeProvider = null)
LM.Review.Core.Services.ReviewWorkflowService.SubmitDecisionAsync(string! assignmentId, LM.Review.Core.Models.ScreeningStatus decision, string? notes, System.Threading.CancellationToken cancellationToken = default) -> LM.Review.Core.Models.ScreeningAssignment!
LM.Review.Core.Services.ReviewerAssignmentRequest
LM.Review.Core.Services.ReviewerAssignmentRequest.ReviewerAssignmentRequest(string! ReviewerId, LM.Review.Core.Models.ReviewerRole Role)
LM.Review.Core.Services.ReviewerAssignmentRequest.ReviewerId.get -> string!
LM.Review.Core.Services.ReviewerAssignmentRequest.ReviewerId.init -> void
LM.Review.Core.Services.ReviewerAssignmentRequest.Role.get -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Services.ReviewerAssignmentRequest.Role.init -> void
LM.Review.Core.Models.ReviewStageType.DataExtraction = 4 -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewProjectMetadata
static LM.Review.Core.Models.ReviewProjectMetadata.Create(LM.Review.Core.Models.ReviewTemplateKind template, string? notes) -> LM.Review.Core.Models.ReviewProjectMetadata!
LM.Review.Core.Models.ReviewProjectMetadata.Notes.get -> string!
LM.Review.Core.Models.ReviewProjectMetadata.Template.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.ReviewTemplateKind.Custom = 1 -> LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.ReviewTemplateKind.DataExtraction = 3 -> LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.ReviewTemplateKind.Picos = 0 -> LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.ReviewTemplateKind.RapidAssessment = 2 -> LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.BibliographySummary = 0 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.DataExtractionWorkspace = 4 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.FullTextViewer = 2 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.InclusionExclusionChecklist = 1 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.NotesPane = 5 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.ReviewerDecisionPanel = 3 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageDisplayProfile
static LM.Review.Core.Models.StageDisplayProfile.Create(System.Collections.Generic.IEnumerable<LM.Review.Core.Models.StageContentArea!>! contentAreas) -> LM.Review.Core.Models.StageDisplayProfile!
LM.Review.Core.Models.StageDisplayProfile.ContentAreas.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.StageContentArea>!
---------- LM.Infrastructure ----------
#nullable enable
#nullable enable
LM.Infrastructure.Content.CompositeContentExtractor
LM.Infrastructure.Content.CompositeContentExtractor.CompositeContentExtractor() -> void
LM.Infrastructure.Content.CompositeContentExtractor.ExtractTextAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Content.OpenXmlContentExtractor
LM.Infrastructure.Content.OpenXmlContentExtractor.ExtractTextAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Content.OpenXmlContentExtractor.OpenXmlContentExtractor() -> void
LM.Infrastructure.Content.PdfPigContentExtractor
LM.Infrastructure.Content.PdfPigContentExtractor.ExtractTextAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Content.PdfPigContentExtractor.PdfPigContentExtractor() -> void
LM.Infrastructure.Content.PlainTextContentExtractor
LM.Infrastructure.Content.PlainTextContentExtractor.ExtractTextAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Content.PlainTextContentExtractor.PlainTextContentExtractor() -> void
LM.Infrastructure.Entries.JsonEntryStore
LM.Infrastructure.Entries.JsonEntryStore.EnumerateAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<LM.Core.Models.Entry!>!
LM.Infrastructure.Entries.JsonEntryStore.FindByHashAsync(string! sha256, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Infrastructure.Entries.JsonEntryStore.FindByIdsAsync(string? doi, string? pmid, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Infrastructure.Entries.JsonEntryStore.FindSimilarByNameYearAsync(string! title, int? year, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.Infrastructure.Entries.JsonEntryStore.GetByIdAsync(string! id, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Infrastructure.Entries.JsonEntryStore.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Infrastructure.Entries.JsonEntryStore.JsonEntryStore(LM.Core.Abstractions.IWorkSpaceService! ws, LM.Core.Abstractions.IDoiNormalizer? doiNormalizer = null, LM.Core.Abstractions.IPmidNormalizer? pmidNormalizer = null) -> void
LM.Infrastructure.Entries.JsonEntryStore.SaveAsync(LM.Core.Models.Entry! entry, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Infrastructure.Entries.JsonEntryStore.SearchAsync(LM.Core.Models.Filters.EntryFilter! f, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.Infrastructure.Entries.EntryTagVocabularyProvider
LM.Infrastructure.Entries.EntryTagVocabularyProvider.EntryTagVocabularyProvider(LM.Core.Abstractions.IEntryStore! store) -> void
LM.Infrastructure.Entries.EntryTagVocabularyProvider.GetAllTagsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>!>!
LM.Infrastructure.Export.MetadataDebugSlideExporter
LM.Infrastructure.Export.MetadataDebugSlideExporter.ExportAsync(System.Collections.Generic.IEnumerable<LM.Core.Models.FileMetadata!>! items, string! outPath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Export.MetadataDebugSlideExporter.MetadataDebugSlideExporter() -> void
LM.Infrastructure.FileSystem.WorkspaceService
LM.Infrastructure.FileSystem.WorkspaceService.EnsureWorkspaceAsync(string! absoluteWorkspacePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Infrastructure.FileSystem.WorkspaceService.GetAbsolutePath(string! relativePath) -> string!
LM.Infrastructure.FileSystem.WorkspaceService.GetLocalDbPath() -> string!
LM.Infrastructure.FileSystem.WorkspaceService.GetWorkspaceRoot() -> string!
LM.Infrastructure.FileSystem.WorkspaceService.WorkspacePath.get -> string?
LM.Infrastructure.FileSystem.WorkspaceService.WorkspaceService() -> void
LM.Infrastructure.FileSystem.WorkspacePreferenceStore
LM.Infrastructure.FileSystem.WorkspacePreferenceStore.SetLastWorkspacePath(string! workspacePath) -> void
LM.Infrastructure.FileSystem.WorkspacePreferenceStore.TryGetLastWorkspacePath() -> string?
LM.Infrastructure.FileSystem.WorkspacePreferenceStore.WorkspacePreferenceStore(string? settingsFilePath = null) -> void
LM.Infrastructure.Hooks.ArticleHookFactory
LM.Infrastructure.Hooks.HookContext
LM.Infrastructure.Hooks.HookContext.Article.get -> LM.HubSpoke.Models.ArticleHook?
LM.Infrastructure.Hooks.HookContext.Article.init -> void
LM.Infrastructure.Hooks.HookContext.Attachments.get -> LM.HubSpoke.Models.AttachmentHook?
LM.Infrastructure.Hooks.HookContext.Attachments.init -> void
LM.Infrastructure.Hooks.HookContext.ChangeLog.get -> LM.HubSpoke.Models.EntryChangeLogHook?
LM.Infrastructure.Hooks.HookContext.ChangeLog.init -> void
LM.Infrastructure.Hooks.HookContext.HookContext() -> void
LM.Infrastructure.Hooks.HookOrchestrator
LM.Infrastructure.Hooks.HookOrchestrator.HookOrchestrator(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Hooks.HookOrchestrator.ProcessAsync(string! entryId, LM.Infrastructure.Hooks.HookContext! ctx, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.Infrastructure.Hooks.HookPersister
LM.Infrastructure.Hooks.HookPersister.HookPersister(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Hooks.HookPersister.SaveArticleIfAnyAsync(string! entryId, LM.HubSpoke.Models.ArticleHook? hook, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.Infrastructure.Metadata.CompositeMetadataExtractor
LM.Infrastructure.Metadata.CompositeMetadataExtractor.CompositeMetadataExtractor(LM.Core.Abstractions.IContentExtractor! content) -> void
LM.Infrastructure.Metadata.CompositeMetadataExtractor.ExtractAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.FileMetadata!>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetAssignmentsByStageAsync(string! stageId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ScreeningAssignment!>!>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetStagesByProjectAsync(string! projectId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStage!>!>!
LM.Infrastructure.Search.ClinicalTrialsGovSearchProvider
LM.Infrastructure.Search.ClinicalTrialsGovSearchProvider.ClinicalTrialsGovSearchProvider() -> void
LM.Infrastructure.Search.ClinicalTrialsGovSearchProvider.Database.get -> LM.Core.Models.SearchDatabase
LM.Infrastructure.Search.ClinicalTrialsGovSearchProvider.SearchAsync(string! query, System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.SearchHit!>!>!
LM.Infrastructure.PubMed.PubMedClient
LM.Infrastructure.PubMed.PubMedClient.PubMedClient() -> void
LM.Infrastructure.PubMed.PubMedClient.TryGetByDoiAsync(string! doi, bool includeCitedBy, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<LM.Core.Models.PublicationRecord?>!
LM.Infrastructure.Pdf.PdfAnnotationPersistenceService
LM.Infrastructure.Pdf.PdfAnnotationPersistenceService.PdfAnnotationPersistenceService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Pdf.PdfAnnotationPersistenceService.PersistAsync(string! entryId, string! pdfHash, string! overlayJson, System.Collections.Generic.IReadOnlyDictionary<string!, byte[]!>! previewImages, string? overlaySidecarRelativePath, string? pdfRelativePath, System.Collections.Generic.IReadOnlyList<LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata!>! annotations, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Infrastructure.Pdf.PdfAnnotationPreviewStorage
LM.Infrastructure.Pdf.PdfAnnotationPreviewStorage.PdfAnnotationPreviewStorage(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Pdf.PdfAnnotationPreviewStorage.SaveAsync(string! pdfHash, string! annotationId, byte[]! pngBytes, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Pdf.PdfAnnotationOverlayReader
LM.Infrastructure.Pdf.PdfAnnotationOverlayReader.PdfAnnotationOverlayReader(LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IEntryStore! entryStore) -> void
LM.Infrastructure.Pdf.PdfAnnotationOverlayReader.GetOverlayJsonAsync(string! entryId, string! pdfHash, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string?>!
LM.Infrastructure.Search.PubMedSearchProvider
LM.Infrastructure.Search.PubMedSearchProvider.PubMedSearchProvider() -> void
LM.Infrastructure.Search.PubMedSearchProvider.Database.get -> LM.Core.Models.SearchDatabase
LM.Infrastructure.Search.PubMedSearchProvider.SearchAsync(string! query, System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.SearchHit!>!>!
LM.Infrastructure.Search.PubMedSearchProvider.FetchFullRecordXmlAsync(string! pubmedId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string?>!
LM.Infrastructure.Search.SearchExecutionService
LM.Infrastructure.Search.SearchExecutionService.SearchExecutionService(System.Collections.Generic.IEnumerable<LM.Core.Abstractions.Search.ISearchProvider!>! providers, LM.Core.Abstractions.IEntryStore! store) -> void
LM.Infrastructure.Search.SearchExecutionService.ExecuteAsync(LM.Core.Models.Search.SearchExecutionRequest! request, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Search.SearchExecutionResult!>!
LM.Infrastructure.Settings.JsonWatchedFolderSettingsStore
LM.Infrastructure.Storage.FileStorageService
LM.Infrastructure.Storage.FileStorageService.FileStorageService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Storage.FileStorageService.SaveNewAsync(string! sourcePath, string! relativeTargetDir, string? preferredFileName = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Text.DoiNormalizer
LM.Infrastructure.Text.DoiNormalizer.DoiNormalizer() -> void
LM.Infrastructure.Text.DoiNormalizer.Normalize(string? raw) -> string?
LM.Infrastructure.Text.PmidNormalizer
LM.Infrastructure.Text.PmidNormalizer.Normalize(string? raw) -> string?
LM.Infrastructure.Text.PmidNormalizer.PmidNormalizer() -> void
LM.Infrastructure.Utils.BibliographyHelper
LM.Infrastructure.Utils.ContentAwareSimilarityService
LM.Infrastructure.Utils.ContentAwareSimilarityService.ComputeFileSimilarityAsync(string! filePathA, string! filePathB, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
LM.Infrastructure.Utils.ContentAwareSimilarityService.ContentAwareSimilarityService(LM.Core.Abstractions.IContentExtractor! extractor) -> void
LM.Infrastructure.Utils.HashingService
LM.Infrastructure.Utils.HashingService.ComputeSha256Async(string! filePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Utils.HashingService.HashingService() -> void
LM.Infrastructure.Utils.SimilarityService
LM.Infrastructure.Utils.SimilarityService.ComputeFileSimilarityAsync(string! filePathA, string! filePathB, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
LM.Infrastructure.Utils.SimilarityService.SimilarityService() -> void
LM.Infrastructure.Utils.TagMerger
LM.Infrastructure.Utils.TagNormalizer
static LM.Infrastructure.Hooks.ArticleHookFactory.CreateFromPublication(LM.Core.Models.PublicationRecord! r) -> LM.HubSpoke.Models.ArticleHook!
static LM.Infrastructure.Utils.BibliographyHelper.GenerateShortTitle(string? title, System.Collections.Generic.IEnumerable<string!>! authors, string? source, int? year) -> string!
static LM.Infrastructure.Utils.TagMerger.Merge(string? existingCsv, System.Collections.Generic.IEnumerable<string!>? add) -> string?
LM.Infrastructure.Settings.JsonWatchedFolderSettingsStore.JsonWatchedFolderSettingsStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Settings.JsonWatchedFolderSettingsStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.WatchedFolderSettings!>!
LM.Infrastructure.Settings.JsonWatchedFolderSettingsStore.SaveAsync(LM.Core.Models.WatchedFolderSettings! settings, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Infrastructure.Settings.JsonSearchHistoryStore
LM.Infrastructure.Settings.JsonSearchHistoryStore.JsonSearchHistoryStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Settings.JsonSearchHistoryStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Search.SearchHistoryDocument!>!
LM.Infrastructure.Settings.JsonSearchHistoryStore.SaveAsync(LM.Core.Models.Search.SearchHistoryDocument! document, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Infrastructure.Settings.JsonUserPreferencesStore
LM.Infrastructure.Settings.JsonUserPreferencesStore.JsonUserPreferencesStore() -> void
LM.Infrastructure.Settings.JsonUserPreferencesStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.UserPreferences!>!
LM.Infrastructure.Settings.JsonUserPreferencesStore.SaveAsync(LM.Core.Models.UserPreferences! preferences, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
static LM.Infrastructure.Utils.TagNormalizer.SplitAndNormalize(string! raw) -> System.Collections.Generic.IEnumerable<string!>!
LM.Infrastructure.Review.ReviewHookContextFactory
LM.Infrastructure.Review.ReviewHookContextFactory.CreateProjectCreated(LM.Review.Core.Models.ReviewProject! project) -> LM.Review.Core.Services.IReviewHookContext!
LM.Infrastructure.Review.ReviewHookContextFactory.CreateAssignmentUpdated(LM.Review.Core.Models.ReviewStage! stage, LM.Review.Core.Models.ScreeningAssignment! assignment) -> LM.Review.Core.Services.IReviewHookContext!
LM.Infrastructure.Review.ReviewHookContextFactory.CreateConsensusResolved(LM.Review.Core.Models.ReviewStage! stage, LM.Review.Core.Models.ConsensusOutcome! consensus) -> LM.Review.Core.Services.IReviewHookContext!
LM.Infrastructure.Review.ReviewHookContextFactory.CreateReviewerDecisionRecorded(LM.Review.Core.Models.ScreeningAssignment! assignment, LM.Review.Core.Models.ReviewerDecision! decision) -> LM.Review.Core.Services.IReviewHookContext!
LM.Infrastructure.Review.ReviewHookContextFactory.CreateStageTransition(LM.Review.Core.Models.ReviewStage! stage, LM.Review.Core.Models.ConflictState previousState, LM.Review.Core.Models.ConflictState currentState) -> LM.Review.Core.Services.IReviewHookContext!
LM.Infrastructure.Review.ReviewHookContextFactory.ReviewHookContextFactory() -> void
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetAssignmentAsync(string! assignmentId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ScreeningAssignment?>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetProjectAsync(string! projectId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ReviewProject?>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetProjectsAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewProject!>!>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetStageAsync(string! stageId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ReviewStage?>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.SaveAssignmentAsync(string! projectId, LM.Review.Core.Models.ScreeningAssignment! assignment, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.SaveProjectAsync(LM.Review.Core.Models.ReviewProject! project, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.SaveStageAsync(LM.Review.Core.Models.ReviewStage! stage, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.WorkspaceReviewWorkflowStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
---------- LM.App.Wpf ----------
#nullable enable
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.ColumnKeyProperty -> System.Windows.DependencyProperty!
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.GetColumnKey(System.Windows.DependencyObject! element) -> string?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.SetColumnKey(System.Windows.DependencyObject! element, string? value) -> void
#nullable enable
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Id.get -> string!
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.IsDraggable.get -> bool
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Name.get -> string!
const LM.App.Wpf.Library.LibraryPresetFolder.RootId = "root" -> string!
const LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.RootId = "root" -> string!
const LM.App.Wpf.ViewModels.StagingItem.DuplicateThreshold = 0.999 -> double
const LM.App.Wpf.ViewModels.StagingItem.NearThreshold = 0.75 -> double
LM.App.Wpf.App
LM.App.Wpf.App.App() -> void
LM.App.Wpf.App.InitializeComponent() -> void
LM.App.Wpf.Common.AsyncRelayCommand
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<object?, System.Threading.Tasks.Task!>! execute, System.Func<object?, bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<System.Threading.Tasks.Task!>! execute, System.Func<bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.AsyncRelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.AsyncRelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.AsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.IAsyncRelayCommand
LM.App.Wpf.Common.IAsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter
LM.App.Wpf.Common.BooleanToOpacityConverter.BooleanToOpacityConverter() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.set -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.set -> void
LM.App.Wpf.Common.Converters.ProjectEditorConverters
LM.App.Wpf.Common.Converters.ProjectEditorConverters.StageSelectionEquality.get -> System.Windows.Data.IMultiValueConverter!
LM.App.Wpf.Common.LibraryPresetSaveContext.LibraryPresetSaveContext(string! DefaultName, System.Collections.Generic.IReadOnlyCollection<string!>! ExistingNames, string! Title = "Save Library Preset", string! Prompt = "Name this filter preset.") -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.LibraryCollectionEntry() -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.DeletePresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
LM.App.Wpf.Library.LibraryFilterState.Tags.get -> string![]!
LM.App.Wpf.Library.LibraryPresetFolder.EnumerateChildren() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.LibraryPresetTreeItem>!
LM.App.Wpf.Library.LibraryPresetNodeKind.Folder = 0 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetNodeKind.Preset = 1 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.LitSearchOrganizerEntry() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.LitSearchOrganizerFolder() -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectBlueprint(string! projectId, string! name, System.DateTimeOffset createdAtUtc, string! createdBy, string! litSearchEntryId, string! litSearchRunId, System.Collections.Generic.IReadOnlyList<string!>! checkedEntryIds, string? hookRelativePath, LM.Review.Core.Models.ReviewTemplateKind template, string! metadataNotes, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>! stages) -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CheckedEntryIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedAtUtc.get -> System.DateTimeOffset
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedBy.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.HookRelativePath.get -> string?
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchEntryId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchRunId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Template.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.MetadataNotes.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Stages.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.With(string? name = null, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>? stages = null, LM.Review.Core.Models.ReviewTemplateKind? template = null, string? metadataNotes = null, string? litSearchEntryId = null, string? litSearchRunId = null, System.Collections.Generic.IReadOnlyList<string!>? checkedEntryIds = null) -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint!
LM.App.Wpf.Services.Review.Design.StageBlueprint
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageBlueprint(string! stageId, string! name, LM.Review.Core.Models.ReviewStageType stageType, int primaryReviewers, int secondaryReviewers, bool requiresConsensus, int minimumAgreements, bool escalateOnDisagreement, LM.Review.Core.Models.StageDisplayProfile! displayProfile) -> void
LM.App.Wpf.Services.Review.Design.StageBlueprint.EscalateOnDisagreement.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.MinimumAgreements.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.PrimaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.RequiresConsensus.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.SecondaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageId.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.Services.Review.Design.StageBlueprint.DisplayProfile.get -> LM.Review.Core.Models.StageDisplayProfile!
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher.Show(string! entryId, string! pdfAbsolutePath, string! pdfHash) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.AddSelectionToFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RemoveSelectionFromFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ItemsView.get -> System.ComponentModel.ICollectionView!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.LitSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.SavedSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SavedSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeletePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest!>!
LM.App.Wpf.ViewModels.LibraryViewModel.LitSearchOrganizer.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.OpenPdfAnnotationsCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.LibraryViewModel.ToggleBlacklistCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationTypeDisplay.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Dispose() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.HighlightBrush.get -> System.Windows.Media.Brush!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.PdfAnnotationColorCommandParameter() -> void
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior.LitSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter
LM.App.Wpf.Views.Converters.EnumEqualsConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.EnumEqualsConverter() -> void
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.InverseBooleanToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.AnnotationColorParameterConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.Convert(object?[]! values, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.ConvertBack(object? value, System.Type![]! targetTypes, object? parameter, System.Globalization.CultureInfo! culture) -> object?[]!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NullOrEmptyToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList
LM.App.Wpf.Views.Pdf.PdfAnnotationList.PdfAnnotationList() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow
LM.App.Wpf.Views.PdfViewerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow.PdfViewerWindow() -> void
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.PdfViewerHostObject(LM.App.Wpf.Views.PdfViewer! owner) -> void
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogCloseRequestedEventArgs(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogResult.get -> bool?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.CloseRequested -> System.EventHandler<LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs!>?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.DialogViewModelBase() -> void
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.RequestClose(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.IDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.WpfDialogService(System.IServiceProvider! services) -> void
LM.App.Wpf.Common.ILibraryPresetPrompt
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Common.IClipboardService
LM.App.Wpf.Common.IClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.ClipboardService
LM.App.Wpf.Common.ClipboardService.ClipboardService() -> void
LM.App.Wpf.Common.ClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.IFileExplorerService
LM.App.Wpf.Common.IFileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.FileExplorerService
LM.App.Wpf.Common.FileExplorerService.FileExplorerService() -> void
LM.App.Wpf.Common.FileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.ISearchSavePrompt
LM.App.Wpf.Common.ISearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Common.SearchSavePromptContext
LM.App.Wpf.Common.SearchSavePromptContext.Database.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.From.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.Query.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.SearchSavePromptContext(string! Query, LM.Core.Models.SearchDatabase Database, System.DateTime? From, System.DateTime? To, string! DefaultName, string! DefaultNotes, System.Collections.Generic.IReadOnlyList<string!>! DefaultTags) -> void
LM.App.Wpf.Common.SearchSavePromptContext.Database.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.SearchSavePromptContext.From.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.Query.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.To.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.To.init -> void
LM.App.Wpf.Common.SearchSavePromptResult
LM.App.Wpf.Common.SearchSavePromptResult.Name.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Notes.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Tags.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.SearchSavePromptResult(string! Name, string! Notes, string! Tags) -> void
LM.App.Wpf.Common.SearchSavePromptResult.Name.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Notes.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Tags.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSaveResult
LM.App.Wpf.Common.LibraryPresetSaveResult.LibraryPresetSaveResult(string! Name) -> void
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.get -> bool
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.LibraryPresetSelectionContext(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! Presets, bool AllowLoad, string! Title) -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.LibraryPresetSelectionResult(string? SelectedPresetId, System.Collections.Generic.IReadOnlyList<string!>! DeletedPresetIds) -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.get -> string?
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.init -> void
LM.App.Wpf.Common.LibraryPresetSummary
LM.App.Wpf.Common.LibraryPresetSummary.Id.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Id.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.LibraryPresetSummary(string! Id, string! Name, System.DateTime SavedUtc) -> void
LM.App.Wpf.Common.LibraryPresetSummary.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.get -> System.DateTime
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.init -> void
LM.App.Wpf.Common.RelayCommand
LM.App.Wpf.Common.RelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.RelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.RelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.RelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.RelayCommand.RelayCommand(System.Action<object?>! exec, System.Func<object?, bool>? can = null) -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.get -> bool
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.init -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.get -> string?
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.init -> void
LM.App.Wpf.Common.Dialogs.FolderPickerOptions
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.get -> string?
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.init -> void
LM.App.Wpf.Common.Dialogs.IDialogService
LM.App.Wpf.Common.Dialogs.IDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.StringJoinConverter
LM.App.Wpf.Common.StringJoinConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.StringJoinConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.AttachmentGlyphToIconConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.AttachmentGlyphToDescriptionConverter() -> void
LM.App.Wpf.Common.ViewModelBase
LM.App.Wpf.Common.ViewModelBase.ViewModelBase() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Id.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.get -> int
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PdfAnnotation(string! id, string! title) -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.get -> System.Windows.Media.Imaging.BitmapImage?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.Annotations.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Pdf.PdfAnnotation!>!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.ChangeAnnotationColorCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.CopyAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DocumentSource.get -> System.Uri?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.HandleAnnotationSelectionAsync(LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.LoadPdfCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfHash.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfViewerViewModel(LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.App.Wpf.Services.IUserContext! userContext, LM.Core.Abstractions.IPdfAnnotationPreviewStorage! previewStorage, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.Common.IClipboardService! clipboard) -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.RecordAnnotationChangeCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.WebViewBridge.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DeleteAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.Library.LibraryFilterPreset
LM.App.Wpf.Library.LibraryFilterPreset.LibraryFilterPreset() -> void
LM.App.Wpf.Library.LibraryFilterPreset.Id.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Id.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.Name.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Name.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.get -> System.DateTime
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.get -> int
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.State.get -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.Library.LibraryFilterPreset.State.set -> void
LM.App.Wpf.Library.LibraryFilterPresetStore
LM.App.Wpf.Library.LibraryFilterPresetStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.MovePresetAsync(string! presetId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.LibraryFilterPresetStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.ListPresetsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.LibraryFilterPreset!>!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, string? targetFolderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetByIdAsync(string! presetId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
const LM.App.Wpf.Library.Collections.LibraryCollectionFolder.RootId = "collections-root" -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionEntry!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile
LM.App.Wpf.Library.Collections.LibraryCollectionFile.LibraryCollectionFile() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.get -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder?
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.get -> int
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.EnumerateDescendants() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionEntry!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.LibraryCollectionFolder() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.LibraryCollectionMetadata() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore
LM.App.Wpf.Library.Collections.LibraryCollectionStore.AddEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.CreateFolderAsync(string? parentFolderId, string! name, string! createdBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.DeleteFolderAsync(string! folderId, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.LibraryCollectionStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RemoveEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryPresetFolder
LM.App.Wpf.Library.LibraryPresetFolder.Clone() -> LM.App.Wpf.Library.LibraryPresetFolder!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Id.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Id.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.LibraryPresetFolder() -> void
LM.App.Wpf.Library.LibraryPresetFolder.Name.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Name.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Presets.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryFilterPreset!>!
LM.App.Wpf.Library.LibraryPresetFolder.Presets.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.get -> int
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.set -> void
LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem
LM.App.Wpf.Library.LibraryPresetTreeItem.Folder.get -> LM.App.Wpf.Library.LibraryPresetFolder?
LM.App.Wpf.Library.LibraryPresetTreeItem.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem(LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder, LM.App.Wpf.Library.LibraryPresetFolder? folder, LM.App.Wpf.Library.LibraryFilterPreset? preset) -> void
LM.App.Wpf.Library.LibraryPresetTreeItem.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset?
LM.App.Wpf.Library.LibraryPresetTreeItem.SortOrder.get -> int
LM.App.Wpf.Library.ILibraryEntryEditor
LM.App.Wpf.Library.ILibraryEntryEditor.EditEntryAsync(LM.Core.Models.Entry! entry) -> System.Threading.Tasks.Task<System.Boolean>!
LM.App.Wpf.Library.LibraryFilterState
LM.App.Wpf.Library.LibraryFilterState.LibraryFilterState() -> void
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.get -> bool
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.set -> void
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateFrom.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateFrom.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateTo.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateTo.set -> void
LM.App.Wpf.Library.LibraryFilterState.SortKey.get -> string?
LM.App.Wpf.Library.LibraryFilterState.SortKey.set -> void
LM.App.Wpf.Library.LibraryFilterState.Tags.set -> void
LM.App.Wpf.ViewModels.AddPipeline
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddViewModel
LM.App.Wpf.ViewModels.AddViewModel.AddFilesCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.ViewModels.WatchedFolderScanner? scanner = null, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore? watchedFolderSettings = null, LM.App.Wpf.ViewModels.StagingListViewModel? stagingList = null, LM.App.Wpf.ViewModels.WatchedFoldersViewModel? watchedFolders = null, LM.App.Wpf.Common.Dialogs.IDialogService? dialogService = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.BulkAddFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ClearCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.CommitSelectedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.AddViewModel.Current.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.AddViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.AddViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.AddViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.AddViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.AddViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.AddViewModel.ReviewStagedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Staging.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.AddViewModel.StagingListViewModel.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFolders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFoldersViewModel.get -> LM.App.Wpf.ViewModels.WatchedFoldersViewModel!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.LibraryPresetPickerDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Presets.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.SelectedPresetId.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.EntryId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookAbsolutePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookRelativePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.DisplayLabel.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.ExecutedBy.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.Owner.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.TotalHits.get -> int
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.ConfirmCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.Entries.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.LitSearchRunPickerViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.LibraryPresetSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.set -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Initialize(LM.App.Wpf.Common.SearchSavePromptContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultNotes.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultTags.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.SearchSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingEditorViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingList.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.SelectedWorkspacePath.get -> string?
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.get -> bool
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.WorkspaceChooserViewModel(LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.CanAcceptFileDrop(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleFileDropAsync(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibrarySearchResult
LM.App.Wpf.ViewModels.LibrarySearchResult.Entry.get -> LM.Core.Models.Entry!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasAttachments.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasDoi.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasIdentifiers.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasInternalId.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasLinks.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNct.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPmid.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasRelations.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasSource.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasUserNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.Highlight.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.HighlightDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.IsFullText.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.LibrarySearchResult(LM.Core.Models.Entry! entry, double? score, string? highlight) -> void
LM.App.Wpf.ViewModels.LibrarySearchResult.Score.get -> double?
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentGlyphKind.get -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.TitleSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.YearPresenceSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearDescendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearAscendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SourceSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TypeSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedOnSortKey.get -> System.DateTime
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedBySortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.InternalIdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.DoiSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.PmidSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.NctSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AuthorsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TagsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IsInternalSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SnippetSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreSortKey.get -> double
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.None = 0 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Pdf = 1 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Document = 2 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Presentation = 3 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Generic = 4 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.Library.LibraryLinkItem
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.LibraryLinkItem(string! DisplayText, string! Target, LM.App.Wpf.ViewModels.Library.LinkItemKind Kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.get -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.init -> void
LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Url = 0 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.File = 1 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Folder = 2 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.RunAndBasics = 0 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Metadata = 1 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Workflow = 2 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Summary = 3 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.ProjectEditorStepDescriptor(LM.App.Wpf.ViewModels.Review.ProjectEditorStep Step, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.ReviewTemplateOption(LM.Review.Core.Models.ReviewTemplateKind Kind, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectEditorViewModel() -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.AddStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntryCount.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntrySummary.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ErrorMessage.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.HookRelativePath.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Initialize(LM.App.Wpf.Services.Review.Design.ProjectBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchEntryId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchRunId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageDownCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageUpCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.RemoveStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Result.get -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SaveCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.get -> LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.StageTypes.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStageType>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Stages.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Steps.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.TemplateOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStep.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepDescriptor.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepIndex.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsSummaryStep.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.get -> LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateKind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.NextCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.BackCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ChangeRunCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ConfigureRunReloadHandler(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.App.Wpf.Services.Review.Design.ProjectBlueprint?>!>! handler) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.StageDisplayOptionViewModel(LM.Review.Core.Models.StageContentArea area, bool isSelected) -> void
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Area.get -> LM.Review.Core.Models.StageContentArea
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Description.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.get -> bool
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageBlueprintViewModel(LM.App.Wpf.Services.Review.Design.StageBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageId.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TotalReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.DisplayOptions.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel!>!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TryBuild(out LM.App.Wpf.Services.Review.Design.StageBlueprint! stage, out string? errorMessage) -> bool
LM.App.Wpf.ViewModels.StagingListViewModel
LM.App.Wpf.ViewModels.StagingListViewModel.AddStagedItemsAsync(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Clear() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.CommitSelectedAsync(System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.StagingListViewModel.Current.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.StagingListViewModel.HasItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.HasSelectedItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.StagingListViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.StagingListViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingListViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.StagingListViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.SetCommandGuard(System.Func<System.Func<System.Threading.Tasks.Task!>!, System.Threading.Tasks.Task!>! guard) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.UpdateParentBusy(bool isBusy) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.WatchedFoldersViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList, LM.App.Wpf.ViewModels.WatchedFolderScanner! scanner, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore! settingsStore, LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.WatchedFolder
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.get -> bool
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.LastScanDisplay.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.LastScanUtc.get -> System.DateTimeOffset?
LM.App.Wpf.ViewModels.WatchedFolder.LastScanWasUnchanged.get -> bool?
LM.App.Wpf.ViewModels.WatchedFolder.Path.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.Path.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFolder.ResetScanState() -> void
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusLabel.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusToolTip.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.WatchedFolder() -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(string! path) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig
LM.App.Wpf.ViewModels.WatchedFolderConfig.ApplyState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.ClearState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFolderConfig.CreateSnapshot() -> LM.Core.Models.WatchedFolderSettings!
LM.App.Wpf.ViewModels.WatchedFolderConfig.Load(LM.Core.Models.WatchedFolderSettings! settings) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.StoreState(LM.App.Wpf.ViewModels.WatchedFolder! folder, LM.Core.Models.WatchedFolderState! state) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.WatchedFolderConfig() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Folder.get -> LM.App.Wpf.ViewModels.WatchedFolder!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Items.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.WatchedFolderScanEventArgs(LM.App.Wpf.ViewModels.WatchedFolder! folder, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner
LM.App.Wpf.ViewModels.WatchedFolderScanner.Attach(LM.App.Wpf.ViewModels.WatchedFolderConfig! config) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.ItemsStaged -> System.EventHandler<LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs!>?
LM.App.Wpf.ViewModels.WatchedFolderScanner.ScanAsync(LM.App.Wpf.ViewModels.WatchedFolder? folder, System.Threading.CancellationToken ct, bool force = false) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFolderScanner.WatchedFolderScanner(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.IAddPipeline
LM.App.Wpf.ViewModels.IAddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.IAddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.Library.ILibraryDocumentService
LM.App.Wpf.Library.ILibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.ILibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.LibraryDocumentService
LM.App.Wpf.Library.LibraryDocumentService.LibraryDocumentService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.IAttachmentMetadataPrompt
LM.App.Wpf.Library.IAttachmentMetadataPrompt.RequestMetadataAsync(LM.App.Wpf.Library.AttachmentMetadataPromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.AttachmentMetadataPromptResult?>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.get -> string!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.AttachmentMetadataPromptContext(string! EntryTitle, System.Collections.Generic.IReadOnlyList<string!>! FilePaths) -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>!
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult.AttachmentMetadataPromptResult(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>! Attachments) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection
LM.App.Wpf.Library.AttachmentMetadataSelection.AttachmentMetadataSelection(string! SourcePath, string! Title, LM.Core.Models.AttachmentKind Kind, System.Collections.Generic.IReadOnlyList<string!>! Tags) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.get -> LM.Core.Models.AttachmentKind
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.init -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LibraryFiltersViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! presetStore, LM.App.Wpf.Common.ILibraryPresetPrompt! presetPrompt, LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.SavedSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.get -> string
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedSearchPresetViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, LM.App.Wpf.Library.LibraryFilterPreset! preset, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Summary.get -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.ToSummary() -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.SavedSearchTreeChangedEventArgs(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! presets) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.SavedSearchTreeViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.TreeChanged -> System.EventHandler<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs!>?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ClearCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyPresetAsync(LM.App.Wpf.Common.LibraryPresetSummary! summary, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyState(LM.App.Wpf.Library.LibraryFilterState! state) -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.CaptureState() -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTooltip.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTokens.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.BuildFullTextQuery(string! normalizedQuery) -> LM.Core.Models.Search.FullTextSearchQuery!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.HasSavedPresets.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.GetNormalizedFullTextQuery() -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.NavigationRoots.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RefreshNavigationAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedPresets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedSearches.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleLeftPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleRightPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SortOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RemoveTagCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand<string?>!
LM.App.Wpf.ViewModels.Library.LibrarySortOption
LM.App.Wpf.ViewModels.Library.LibrarySortOption.LibrarySortOption(string! key, string! displayName) -> void
LM.App.Wpf.ViewModels.Library.LibrarySortOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOptions
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.Category = 0 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.SavedSearch = 1 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchEntry = 2 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchRun = 3 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.LibraryNavigationNodeViewModel(string! name, LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.HasChildren.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Kind.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.get -> object?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.init -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.LibraryColumnOption(string! key, string! displayName, bool isVisible) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LibraryColumnVisibility() -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LoadFrom(System.Collections.Generic.IReadOnlyDictionary<string!, bool>! source) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.Snapshot() -> System.Collections.Generic.IReadOnlyDictionary<string!, bool>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LibraryResultsViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.App.Wpf.Library.ILibraryEntryEditor! entryEditor, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.Library.IAttachmentMetadataPrompt! attachmentPrompt, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.Core.Abstractions.IHasher! hasher, LM.App.Wpf.Services.Pdf.IPdfViewerLauncher! pdfViewerLauncher) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadFullTextResultsAsync(System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.FullTextSearchHit!>! hits, System.Func<LM.Core.Models.Entry!, bool>? entryFilter = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadMetadataResults(System.Collections.Generic.IEnumerable<LM.Core.Models.Entry!>! entries) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResetSortForSearch(LM.App.Wpf.ViewModels.Library.LibrarySortOption! defaultOption) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridLoaded(System.Windows.RoutedEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridSorting(System.Windows.Controls.DataGridSortingEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.MarkAsMetadataResults() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResultsAreFullText.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.get -> LM.App.Wpf.ViewModels.LibrarySearchResult?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LinkItems.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryLinkItem!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.EditEntryAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelection.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedItems.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectionChanged -> System.EventHandler?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelectedAbstract.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ToggleBlacklistAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.get -> int
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.LibraryCollectionFolderViewModel(LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! tree, string! id, string! name, LM.App.Wpf.Library.Collections.LibraryCollectionMetadata! metadata) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.LibraryCollectionsViewModel(LM.App.Wpf.Library.Collections.LibraryCollectionStore! store, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPrimaryAttachment.get -> bool
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.LibrarySearchQueryBox() -> void
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.get -> string!
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel
LM.App.Wpf.ViewModels.LibraryViewModel.Filters.get -> LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LibraryViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFullTextSearchService! fullTextSearch, LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel! filters, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.Configuration.IUserPreferencesStore! preferencesStore, LM.App.Wpf.Common.IClipboardService! clipboard, LM.App.Wpf.Common.IFileExplorerService! fileExplorer, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! litSearchOrganizer, LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! collections) -> void
LM.App.Wpf.ViewModels.LibraryViewModel.Results.get -> LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.Collections.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibraryColumnOption!>!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnVisibility.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility!
LM.App.Wpf.ViewModels.SearchItemViewModel
LM.App.Wpf.ViewModels.SearchItemViewModel.Header.get -> string!
LM.App.Wpf.ViewModels.SearchItemViewModel.SearchItemViewModel(string! header, LM.App.Wpf.ViewModels.LibraryViewModel! vm) -> void
LM.App.Wpf.ViewModels.SearchItemViewModel.Vm.get -> LM.App.Wpf.ViewModels.LibraryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel
LM.App.Wpf.ViewModels.SearchViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.SearchViewModel.ExportSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.From.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.LoadSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRuns.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.PreviousSearchSummary!>!
LM.App.Wpf.ViewModels.SearchViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRunsCount.get -> int
LM.App.Wpf.ViewModels.SearchViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.SearchViewModel.Query.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.get -> LM.Core.Models.SearchHit?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RunSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SaveSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleLeftPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleRightPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SearchViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IWorkSpaceService! ws, LM.App.Wpf.Common.ISearchSavePrompt! savePrompt, LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel! providers, LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel! history, LM.Infrastructure.Search.PubMedSearchProvider! pubMedProvider, LM.Core.Abstractions.Configuration.IUserPreferencesStore? preferencesStore = null) -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.get -> LM.App.Wpf.ViewModels.PreviousSearchSummary?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.StartPreviousRunCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ShowRunDetailsCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleFavoriteCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.To.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.History.get -> LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel.Providers.get -> LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecordExecutionAsync(LM.Core.Models.Search.SearchExecutionResult! result, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.SearchHistoryViewModel(LM.Core.Abstractions.Configuration.ISearchHistoryStore! store) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.ExecuteSearchAsync() -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.RunSearchCommand.get -> LM.App.Wpf.Common.AsyncRelayCommand!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchExecuted -> System.EventHandler<LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs!>?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchProvidersViewModel(LM.Core.Abstractions.Search.ISearchExecutionService! executionService) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.set -> void
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.Result.get -> LM.Core.Models.Search.SearchExecutionResult!
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.SearchExecutedEventArgs(LM.Core.Models.Search.SearchExecutionResult! result) -> void
LM.App.Wpf.ViewModels.PreviousSearchSummary
LM.App.Wpf.ViewModels.PreviousSearchSummary.DisplayName.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.EntryId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.FavoriteRunId.get -> string?
LM.App.Wpf.ViewModels.PreviousSearchSummary.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastRunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.Provider.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.Query.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunCount.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TotalHits.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TagsDisplay.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption
LM.App.Wpf.ViewModels.SearchDatabaseOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption.SearchDatabaseOption(LM.Core.Models.SearchDatabase value, string! displayName) -> void
LM.App.Wpf.ViewModels.SearchDatabaseOption.Value.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.StagingItem
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.get -> LM.HubSpoke.Models.ArticleHook?
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.DisplayName.get -> string?
LM.App.Wpf.ViewModels.StagingItem.DisplayName.set -> void
LM.App.Wpf.ViewModels.StagingItem.Doi.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Doi.set -> void
LM.App.Wpf.ViewModels.StagingItem.FilePath.get -> string!
LM.App.Wpf.ViewModels.StagingItem.FilePath.set -> void
LM.App.Wpf.ViewModels.StagingItem.Internal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Internal.set -> void
LM.App.Wpf.ViewModels.StagingItem.InternalId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.InternalId.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsDuplicate.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsNearMatch.get -> bool
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Notes.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Notes.set -> void
LM.App.Wpf.ViewModels.StagingItem.OriginalFileName.get -> string!
LM.App.Wpf.ViewModels.StagingItem.Pmid.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Pmid.set -> void
LM.App.Wpf.ViewModels.StagingItem.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingItem.Selected.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Selected.set -> void
LM.App.Wpf.ViewModels.StagingItem.Similarity.get -> double
LM.App.Wpf.ViewModels.StagingItem.Similarity.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Source.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Source.set -> void
LM.App.Wpf.ViewModels.StagingItem.StagingItem() -> void
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.get -> string!
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.set -> void
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.Title.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Title.set -> void
LM.App.Wpf.ViewModels.StagingItem.Type.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingItem.Type.set -> void
LM.App.Wpf.ViewModels.StagingItem.Year.get -> int?
LM.App.Wpf.ViewModels.StagingItem.Year.set -> void
LM.App.Wpf.Views.AddView
LM.App.Wpf.Views.Behaviors.FileDropRequest
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.get -> System.Windows.DragEventArgs!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.get -> object?
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.FileDropRequest(System.Collections.Generic.IReadOnlyList<string!>! Paths, object? DropTarget, System.Windows.DragEventArgs! Args) -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.init -> void
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior.SavedSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.AddView.AddView() -> void
LM.App.Wpf.Views.AddView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog
LM.App.Wpf.Views.LibraryPresetPickerDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.LibraryPresetPickerDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel!
LM.App.Wpf.Views.LibraryPresetPrompt.LibraryPresetPrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.InitializeComponent() -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.AttachmentMetadataDialog(LM.App.Wpf.ViewModels.Library.AttachmentMetadataDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog
LM.App.Wpf.Views.LibraryPresetSaveDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.LibraryPresetSaveDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel!
LM.App.Wpf.Views.LibraryView
LM.App.Wpf.Views.LibraryView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryView.LibraryView() -> void
LM.App.Wpf.Views.PdfViewer
LM.App.Wpf.Views.PdfViewer.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewer.PdfViewer() -> void
LM.App.Wpf.Views.Library.TagTokenSelector
LM.App.Wpf.Views.Library.TagTokenSelector.InitializeComponent() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.FilteredSuggestions.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>?
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.set -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagTokenSelector() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.get -> System.Collections.Generic.IEnumerable<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.set -> void
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTagsProperty
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabularyProperty
LM.App.Wpf.Views.LibraryPresetPrompt
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Views.Review.Controls.DecisionBadge
LM.App.Wpf.Views.Review.Controls.DecisionBadge.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.DecisionBadge() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.get -> LM.Review.Core.Models.ScreeningStatus
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.set -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.ExtractionFieldEditor() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.ScreeningQueueControl() -> void
LM.App.Wpf.Views.Review.ReviewView
LM.App.Wpf.Views.Review.ReviewView.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ReviewView.ReviewView() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.LitSearchRunPickerWindow(LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel!
LM.App.Wpf.Views.Review.ProjectEditorWindow
LM.App.Wpf.Views.Review.ProjectEditorWindow.Attach(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.ProjectEditorWindow() -> void
LM.App.Wpf.Views.SearchSavePrompt
LM.App.Wpf.Views.SearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Views.SearchSavePrompt.SearchSavePrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.DataGridColumnVisibilityBehavior() -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.set -> void
LM.App.Wpf.Views.SearchView
LM.App.Wpf.Views.SearchView.InitializeComponent() -> void
LM.App.Wpf.Views.SearchView.SearchView() -> void
LM.App.Wpf.Views.ShellWindow
LM.App.Wpf.Views.ShellWindow.InitializeComponent() -> void
LM.App.Wpf.Views.ShellWindow.LoadWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.NewWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.ShellWindow() -> void
LM.App.Wpf.Views.StagingEditorWindow
LM.App.Wpf.Views.StagingEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.StagingEditorWindow.StagingEditorWindow(LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel! viewModel) -> void
override LM.App.Wpf.ViewModels.Library.LibrarySortOption.ToString() -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Name.get -> string!
override LM.App.Wpf.Views.Library.AttachmentMetadataDialog.OnClosed(System.EventArgs! e) -> void
LM.App.Wpf.Views.WorkspaceChooser
LM.App.Wpf.Views.WorkspaceChooser.InitializeComponent() -> void
LM.App.Wpf.Views.WorkspaceChooser.SelectedWorkspacePath.get -> string?
LM.App.Wpf.Views.WorkspaceChooser.WorkspaceChooser(LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel! viewModel) -> void
LM.App.Wpf.Views.WorkspaceChooser.Configure(System.Action<LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel!>! configure) -> void
override LM.App.Wpf.App.OnExit(System.Windows.ExitEventArgs! e) -> void
override LM.App.Wpf.App.OnStartup(System.Windows.StartupEventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetPickerDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetSaveDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.StagingEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.WorkspaceChooser.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.ProjectEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.OnClosed(System.EventArgs! e) -> void
static LM.App.Wpf.App.Main() -> void
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.All.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.NewestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.OldestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleAscending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleDescending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Clone() -> LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.LitSearchOrganizerStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveEntryAsync(string! entryId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.SyncEntriesAsync(System.Collections.Generic.IEnumerable<string!>! entryIds, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema.CurrentVersion -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.LitSearchEntryViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! title, string? query) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Query.get -> string?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.CanDelete.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsRoot.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.LitSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! name, bool isRoot) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.LitSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.LitSearchRunViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! runId, string! label, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel! parent) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.LitSearchTreeViewModel(LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt, LM.Core.Abstractions.IEntryStore! entryStore, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
---------- LM.App.Wpf ----------
#nullable enable
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.ColumnKeyProperty -> System.Windows.DependencyProperty!
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.GetColumnKey(System.Windows.DependencyObject! element) -> string?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.SetColumnKey(System.Windows.DependencyObject! element, string? value) -> void
#nullable enable
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Id.get -> string!
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.IsDraggable.get -> bool
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Name.get -> string!
const LM.App.Wpf.Library.LibraryPresetFolder.RootId = "root" -> string!
const LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.RootId = "root" -> string!
const LM.App.Wpf.ViewModels.StagingItem.DuplicateThreshold = 0.999 -> double
const LM.App.Wpf.ViewModels.StagingItem.NearThreshold = 0.75 -> double
LM.App.Wpf.App
LM.App.Wpf.App.App() -> void
LM.App.Wpf.App.InitializeComponent() -> void
LM.App.Wpf.Common.AsyncRelayCommand
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<object?, System.Threading.Tasks.Task!>! execute, System.Func<object?, bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<System.Threading.Tasks.Task!>! execute, System.Func<bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.AsyncRelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.AsyncRelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.AsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.IAsyncRelayCommand
LM.App.Wpf.Common.IAsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter
LM.App.Wpf.Common.BooleanToOpacityConverter.BooleanToOpacityConverter() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.set -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.set -> void
LM.App.Wpf.Common.Converters.ProjectEditorConverters
LM.App.Wpf.Common.Converters.ProjectEditorConverters.StageSelectionEquality.get -> System.Windows.Data.IMultiValueConverter!
LM.App.Wpf.Common.LibraryPresetSaveContext.LibraryPresetSaveContext(string! DefaultName, System.Collections.Generic.IReadOnlyCollection<string!>! ExistingNames, string! Title = "Save Library Preset", string! Prompt = "Name this filter preset.") -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.LibraryCollectionEntry() -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.DeletePresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
LM.App.Wpf.Library.LibraryFilterState.Tags.get -> string![]!
LM.App.Wpf.Library.LibraryPresetFolder.EnumerateChildren() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.LibraryPresetTreeItem>!
LM.App.Wpf.Library.LibraryPresetNodeKind.Folder = 0 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetNodeKind.Preset = 1 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.LitSearchOrganizerEntry() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.LitSearchOrganizerFolder() -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectBlueprint(string! projectId, string! name, System.DateTimeOffset createdAtUtc, string! createdBy, string! litSearchEntryId, string! litSearchRunId, System.Collections.Generic.IReadOnlyList<string!>! checkedEntryIds, string? hookRelativePath, LM.Review.Core.Models.ReviewTemplateKind template, string! metadataNotes, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>! stages) -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CheckedEntryIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedAtUtc.get -> System.DateTimeOffset
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedBy.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.HookRelativePath.get -> string?
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchEntryId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchRunId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Template.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.MetadataNotes.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Stages.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.With(string? name = null, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>? stages = null, LM.Review.Core.Models.ReviewTemplateKind? template = null, string? metadataNotes = null, string? litSearchEntryId = null, string? litSearchRunId = null, System.Collections.Generic.IReadOnlyList<string!>? checkedEntryIds = null) -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint!
LM.App.Wpf.Services.Review.Design.StageBlueprint
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageBlueprint(string! stageId, string! name, LM.Review.Core.Models.ReviewStageType stageType, int primaryReviewers, int secondaryReviewers, bool requiresConsensus, int minimumAgreements, bool escalateOnDisagreement, LM.Review.Core.Models.StageDisplayProfile! displayProfile) -> void
LM.App.Wpf.Services.Review.Design.StageBlueprint.EscalateOnDisagreement.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.MinimumAgreements.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.PrimaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.RequiresConsensus.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.SecondaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageId.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.Services.Review.Design.StageBlueprint.DisplayProfile.get -> LM.Review.Core.Models.StageDisplayProfile!
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher.Show(string! entryId, string! pdfAbsolutePath, string! pdfHash) -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.AddSelectionToFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.MoveFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RemoveSelectionFromFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ItemsView.get -> System.ComponentModel.ICollectionView!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.LitSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.SavedSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SavedSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeletePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.LoadPresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.LibraryViewModel.AllTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.LibraryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.LitSearchOrganizer.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LoadCollectionEntriesAsync(string! collectionId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.OpenPdfAnnotationsCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.LibraryViewModel.RefreshTagsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.ToggleBlacklistCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationTypeDisplay.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Dispose() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.HighlightBrush.get -> System.Windows.Media.Brush!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.PdfAnnotationColorCommandParameter() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior.CollectionTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior.LitSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter
LM.App.Wpf.Views.Converters.EnumEqualsConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.EnumEqualsConverter() -> void
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.InverseBooleanToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.AnnotationColorParameterConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.Convert(object?[]! values, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.ConvertBack(object? value, System.Type![]! targetTypes, object? parameter, System.Globalization.CultureInfo! culture) -> object?[]!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NullOrEmptyToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList
LM.App.Wpf.Views.Pdf.PdfAnnotationList.PdfAnnotationList() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow
LM.App.Wpf.Views.PdfViewerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow.PdfViewerWindow() -> void
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.PdfViewerHostObject(LM.App.Wpf.Views.PdfViewer! owner) -> void
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogCloseRequestedEventArgs(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogResult.get -> bool?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.CloseRequested -> System.EventHandler<LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs!>?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.DialogViewModelBase() -> void
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.RequestClose(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.IDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.WpfDialogService(System.IServiceProvider! services) -> void
LM.App.Wpf.Common.ILibraryPresetPrompt
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Common.IClipboardService
LM.App.Wpf.Common.IClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.ClipboardService
LM.App.Wpf.Common.ClipboardService.ClipboardService() -> void
LM.App.Wpf.Common.ClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.IFileExplorerService
LM.App.Wpf.Common.IFileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.FileExplorerService
LM.App.Wpf.Common.FileExplorerService.FileExplorerService() -> void
LM.App.Wpf.Common.FileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.ISearchSavePrompt
LM.App.Wpf.Common.ISearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Common.SearchSavePromptContext
LM.App.Wpf.Common.SearchSavePromptContext.Database.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.From.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.Query.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.SearchSavePromptContext(string! Query, LM.Core.Models.SearchDatabase Database, System.DateTime? From, System.DateTime? To, string! DefaultName, string! DefaultNotes, System.Collections.Generic.IReadOnlyList<string!>! DefaultTags) -> void
LM.App.Wpf.Common.SearchSavePromptContext.Database.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.SearchSavePromptContext.From.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.Query.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.To.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.To.init -> void
LM.App.Wpf.Common.SearchSavePromptResult
LM.App.Wpf.Common.SearchSavePromptResult.Name.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Notes.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Tags.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.SearchSavePromptResult(string! Name, string! Notes, string! Tags) -> void
LM.App.Wpf.Common.SearchSavePromptResult.Name.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Notes.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Tags.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSaveResult
LM.App.Wpf.Common.LibraryPresetSaveResult.LibraryPresetSaveResult(string! Name) -> void
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.get -> bool
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.LibraryPresetSelectionContext(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! Presets, bool AllowLoad, string! Title) -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.LibraryPresetSelectionResult(string? SelectedPresetId, System.Collections.Generic.IReadOnlyList<string!>! DeletedPresetIds) -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.get -> string?
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.init -> void
LM.App.Wpf.Common.LibraryPresetSummary
LM.App.Wpf.Common.LibraryPresetSummary.Id.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Id.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.LibraryPresetSummary(string! Id, string! Name, System.DateTime SavedUtc) -> void
LM.App.Wpf.Common.LibraryPresetSummary.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.get -> System.DateTime
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.init -> void
LM.App.Wpf.Common.RelayCommand
LM.App.Wpf.Common.RelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.RelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.RelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.RelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.RelayCommand.RelayCommand(System.Action<object?>! exec, System.Func<object?, bool>? can = null) -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.get -> bool
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.init -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.get -> string?
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.init -> void
LM.App.Wpf.Common.Dialogs.FolderPickerOptions
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.get -> string?
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.init -> void
LM.App.Wpf.Common.Dialogs.IDialogService
LM.App.Wpf.Common.Dialogs.IDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.StringJoinConverter
LM.App.Wpf.Common.StringJoinConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.StringJoinConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.AttachmentGlyphToIconConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.AttachmentGlyphToDescriptionConverter() -> void
LM.App.Wpf.Common.ViewModelBase
LM.App.Wpf.Common.ViewModelBase.ViewModelBase() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Id.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.get -> int
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PdfAnnotation(string! id, string! title) -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.get -> System.Windows.Media.Imaging.BitmapImage?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.Annotations.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Pdf.PdfAnnotation!>!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.ChangeAnnotationColorCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.CopyAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DocumentSource.get -> System.Uri?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.HandleAnnotationSelectionAsync(LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.LoadPdfCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfHash.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfViewerViewModel(LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.App.Wpf.Services.IUserContext! userContext, LM.Core.Abstractions.IPdfAnnotationPreviewStorage! previewStorage, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.Common.IClipboardService! clipboard) -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.RecordAnnotationChangeCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.WebViewBridge.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DeleteAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.Library.LibraryFilterPreset
LM.App.Wpf.Library.LibraryFilterPreset.LibraryFilterPreset() -> void
LM.App.Wpf.Library.LibraryFilterPreset.Id.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Id.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.Name.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Name.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.get -> System.DateTime
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.get -> int
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.State.get -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.Library.LibraryFilterPreset.State.set -> void
LM.App.Wpf.Library.LibraryFilterPresetStore
LM.App.Wpf.Library.LibraryFilterPresetStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.MovePresetAsync(string! presetId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.LibraryFilterPresetStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.ListPresetsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.LibraryFilterPreset!>!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, string? targetFolderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetByIdAsync(string! presetId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
const LM.App.Wpf.Library.Collections.LibraryCollectionFolder.RootId = "collections-root" -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionEntry!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile
LM.App.Wpf.Library.Collections.LibraryCollectionFile.LibraryCollectionFile() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.get -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder?
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.get -> int
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.EnumerateDescendants() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionEntry!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.LibraryCollectionFolder() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.LibraryCollectionMetadata() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore
LM.App.Wpf.Library.Collections.LibraryCollectionStore.AddEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.CreateFolderAsync(string? parentFolderId, string! name, string! createdBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.DeleteFolderAsync(string! folderId, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.LibraryCollectionStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RemoveEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RenameFolderAsync(string! folderId, string! newName, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryPresetFolder
LM.App.Wpf.Library.LibraryPresetFolder.Clone() -> LM.App.Wpf.Library.LibraryPresetFolder!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Id.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Id.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.LibraryPresetFolder() -> void
LM.App.Wpf.Library.LibraryPresetFolder.Name.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Name.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Presets.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryFilterPreset!>!
LM.App.Wpf.Library.LibraryPresetFolder.Presets.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.get -> int
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.set -> void
LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem
LM.App.Wpf.Library.LibraryPresetTreeItem.Folder.get -> LM.App.Wpf.Library.LibraryPresetFolder?
LM.App.Wpf.Library.LibraryPresetTreeItem.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem(LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder, LM.App.Wpf.Library.LibraryPresetFolder? folder, LM.App.Wpf.Library.LibraryFilterPreset? preset) -> void
LM.App.Wpf.Library.LibraryPresetTreeItem.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset?
LM.App.Wpf.Library.LibraryPresetTreeItem.SortOrder.get -> int
LM.App.Wpf.Library.ILibraryEntryEditor
LM.App.Wpf.Library.ILibraryEntryEditor.EditEntryAsync(LM.Core.Models.Entry! entry) -> System.Threading.Tasks.Task<System.Boolean>!
LM.App.Wpf.Library.LibraryFilterState
LM.App.Wpf.Library.LibraryFilterState.LibraryFilterState() -> void
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.get -> bool
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.set -> void
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateFrom.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateFrom.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateTo.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateTo.set -> void
LM.App.Wpf.Library.LibraryFilterState.SortKey.get -> string?
LM.App.Wpf.Library.LibraryFilterState.SortKey.set -> void
LM.App.Wpf.Library.LibraryFilterState.Tags.set -> void
LM.App.Wpf.ViewModels.AddPipeline
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddViewModel
LM.App.Wpf.ViewModels.AddViewModel.AddFilesCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.ViewModels.WatchedFolderScanner? scanner = null, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore? watchedFolderSettings = null, LM.App.Wpf.ViewModels.StagingListViewModel? stagingList = null, LM.App.Wpf.ViewModels.WatchedFoldersViewModel? watchedFolders = null, LM.App.Wpf.Common.Dialogs.IDialogService? dialogService = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.BulkAddFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ClearCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.CommitSelectedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.AddViewModel.Current.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.AddViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.AddViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.AddViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.AddViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.AddViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.AddViewModel.ReviewStagedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Staging.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.AddViewModel.StagingListViewModel.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFolders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFoldersViewModel.get -> LM.App.Wpf.ViewModels.WatchedFoldersViewModel!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.LibraryPresetPickerDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Presets.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.SelectedPresetId.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.EntryId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookAbsolutePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookRelativePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.DisplayLabel.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.ExecutedBy.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.Owner.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.TotalHits.get -> int
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.ConfirmCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.Entries.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.LitSearchRunPickerViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.LibraryPresetSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.set -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Initialize(LM.App.Wpf.Common.SearchSavePromptContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultNotes.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultTags.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.SearchSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingEditorViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingList.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.SelectedWorkspacePath.get -> string?
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.get -> bool
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.WorkspaceChooserViewModel(LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.CanAcceptFileDrop(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleFileDropAsync(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibrarySearchResult
LM.App.Wpf.ViewModels.LibrarySearchResult.Entry.get -> LM.Core.Models.Entry!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasAttachments.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasDoi.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasIdentifiers.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasInternalId.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasLinks.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNct.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPmid.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasRelations.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasSource.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasUserNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.Highlight.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.HighlightDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.IsFullText.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.LibrarySearchResult(LM.Core.Models.Entry! entry, double? score, string? highlight) -> void
LM.App.Wpf.ViewModels.LibrarySearchResult.Score.get -> double?
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentGlyphKind.get -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.TitleSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.YearPresenceSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearDescendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearAscendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SourceSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TypeSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedOnSortKey.get -> System.DateTime
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedBySortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.InternalIdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.DoiSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.PmidSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.NctSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AuthorsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TagsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IsInternalSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SnippetSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreSortKey.get -> double
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.None = 0 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Pdf = 1 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Document = 2 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Presentation = 3 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Generic = 4 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.Library.LibraryLinkItem
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.LibraryLinkItem(string! DisplayText, string! Target, LM.App.Wpf.ViewModels.Library.LinkItemKind Kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.get -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.init -> void
LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Url = 0 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.File = 1 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Folder = 2 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.RunAndBasics = 0 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Metadata = 1 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Workflow = 2 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Summary = 3 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.ProjectEditorStepDescriptor(LM.App.Wpf.ViewModels.Review.ProjectEditorStep Step, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.ReviewTemplateOption(LM.Review.Core.Models.ReviewTemplateKind Kind, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectEditorViewModel() -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.AddStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntryCount.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntrySummary.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ErrorMessage.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.HookRelativePath.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Initialize(LM.App.Wpf.Services.Review.Design.ProjectBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchEntryId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchRunId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageDownCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageUpCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.RemoveStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Result.get -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SaveCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.get -> LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.StageTypes.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStageType>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Stages.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Steps.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.TemplateOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStep.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepDescriptor.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepIndex.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsSummaryStep.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.get -> LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateKind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.NextCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.BackCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ChangeRunCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ConfigureRunReloadHandler(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.App.Wpf.Services.Review.Design.ProjectBlueprint?>!>! handler) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.StageDisplayOptionViewModel(LM.Review.Core.Models.StageContentArea area, bool isSelected) -> void
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Area.get -> LM.Review.Core.Models.StageContentArea
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Description.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.get -> bool
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageBlueprintViewModel(LM.App.Wpf.Services.Review.Design.StageBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageId.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TotalReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.DisplayOptions.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel!>!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TryBuild(out LM.App.Wpf.Services.Review.Design.StageBlueprint! stage, out string? errorMessage) -> bool
LM.App.Wpf.ViewModels.StagingListViewModel
LM.App.Wpf.ViewModels.StagingListViewModel.AddStagedItemsAsync(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Clear() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.CommitSelectedAsync(System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.StagingListViewModel.Current.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.StagingListViewModel.HasItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.HasSelectedItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.StagingListViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.StagingListViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingListViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.StagingListViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.SetCommandGuard(System.Func<System.Func<System.Threading.Tasks.Task!>!, System.Threading.Tasks.Task!>! guard) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.UpdateParentBusy(bool isBusy) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.WatchedFoldersViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList, LM.App.Wpf.ViewModels.WatchedFolderScanner! scanner, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore! settingsStore, LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.WatchedFolder
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.get -> bool
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.LastScanDisplay.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.LastScanUtc.get -> System.DateTimeOffset?
LM.App.Wpf.ViewModels.WatchedFolder.LastScanWasUnchanged.get -> bool?
LM.App.Wpf.ViewModels.WatchedFolder.Path.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.Path.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFolder.ResetScanState() -> void
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusLabel.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusToolTip.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.WatchedFolder() -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(string! path) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig
LM.App.Wpf.ViewModels.WatchedFolderConfig.ApplyState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.ClearState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFolderConfig.CreateSnapshot() -> LM.Core.Models.WatchedFolderSettings!
LM.App.Wpf.ViewModels.WatchedFolderConfig.Load(LM.Core.Models.WatchedFolderSettings! settings) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.StoreState(LM.App.Wpf.ViewModels.WatchedFolder! folder, LM.Core.Models.WatchedFolderState! state) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.WatchedFolderConfig() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Folder.get -> LM.App.Wpf.ViewModels.WatchedFolder!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Items.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.WatchedFolderScanEventArgs(LM.App.Wpf.ViewModels.WatchedFolder! folder, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner
LM.App.Wpf.ViewModels.WatchedFolderScanner.Attach(LM.App.Wpf.ViewModels.WatchedFolderConfig! config) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.ItemsStaged -> System.EventHandler<LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs!>?
LM.App.Wpf.ViewModels.WatchedFolderScanner.ScanAsync(LM.App.Wpf.ViewModels.WatchedFolder? folder, System.Threading.CancellationToken ct, bool force = false) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFolderScanner.WatchedFolderScanner(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.IAddPipeline
LM.App.Wpf.ViewModels.IAddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.IAddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.Library.ILibraryDocumentService
LM.App.Wpf.Library.ILibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.ILibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.LibraryDocumentService
LM.App.Wpf.Library.LibraryDocumentService.LibraryDocumentService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.IAttachmentMetadataPrompt
LM.App.Wpf.Library.IAttachmentMetadataPrompt.RequestMetadataAsync(LM.App.Wpf.Library.AttachmentMetadataPromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.AttachmentMetadataPromptResult?>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.get -> string!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.AttachmentMetadataPromptContext(string! EntryTitle, System.Collections.Generic.IReadOnlyList<string!>! FilePaths) -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>!
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult.AttachmentMetadataPromptResult(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>! Attachments) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection
LM.App.Wpf.Library.AttachmentMetadataSelection.AttachmentMetadataSelection(string! SourcePath, string! Title, LM.Core.Models.AttachmentKind Kind, System.Collections.Generic.IReadOnlyList<string!>! Tags) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.get -> LM.Core.Models.AttachmentKind
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.init -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LibraryFiltersViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! presetStore, LM.App.Wpf.Common.ILibraryPresetPrompt! presetPrompt, LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.SavedSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.get -> string
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedSearchPresetViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, LM.App.Wpf.Library.LibraryFilterPreset! preset, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Summary.get -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.ToSummary() -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.SavedSearchTreeChangedEventArgs(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! presets) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.SavedSearchTreeViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.TreeChanged -> System.EventHandler<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs!>?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ClearCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyPresetAsync(LM.App.Wpf.Common.LibraryPresetSummary! summary, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyState(LM.App.Wpf.Library.LibraryFilterState! state) -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.CaptureState() -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTooltip.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTokens.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.BuildFullTextQuery(string! normalizedQuery) -> LM.Core.Models.Search.FullTextSearchQuery!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.HasSavedPresets.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.GetNormalizedFullTextQuery() -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.NavigationRoots.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RefreshNavigationAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedPresets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedSearches.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleLeftPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleRightPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SortOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RemoveTagCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand<string?>!
LM.App.Wpf.ViewModels.Library.LibrarySortOption
LM.App.Wpf.ViewModels.Library.LibrarySortOption.LibrarySortOption(string! key, string! displayName) -> void
LM.App.Wpf.ViewModels.Library.LibrarySortOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOptions
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.Category = 0 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.SavedSearch = 1 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchEntry = 2 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchRun = 3 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.LibraryNavigationNodeViewModel(string! name, LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.HasChildren.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Kind.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.get -> object?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.init -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.LibraryColumnOption(string! key, string! displayName, bool isVisible) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LibraryColumnVisibility() -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LoadFrom(System.Collections.Generic.IReadOnlyDictionary<string!, bool>! source) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.Snapshot() -> System.Collections.Generic.IReadOnlyDictionary<string!, bool>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LibraryResultsViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.App.Wpf.Library.ILibraryEntryEditor! entryEditor, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.Library.IAttachmentMetadataPrompt! attachmentPrompt, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.Core.Abstractions.IHasher! hasher, LM.App.Wpf.Services.Pdf.IPdfViewerLauncher! pdfViewerLauncher) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadFullTextResultsAsync(System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.FullTextSearchHit!>! hits, System.Func<LM.Core.Models.Entry!, bool>? entryFilter = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadMetadataResults(System.Collections.Generic.IEnumerable<LM.Core.Models.Entry!>! entries) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResetSortForSearch(LM.App.Wpf.ViewModels.Library.LibrarySortOption! defaultOption) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridLoaded(System.Windows.RoutedEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridSorting(System.Windows.Controls.DataGridSortingEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.MarkAsMetadataResults() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResultsAreFullText.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.get -> LM.App.Wpf.ViewModels.LibrarySearchResult?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LinkItems.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryLinkItem!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.EditEntryAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelection.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedItems.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectionChanged -> System.EventHandler?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelectedAbstract.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ToggleBlacklistAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.get -> int
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.LibraryCollectionFolderViewModel(LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! tree, string! id, string! name, LM.App.Wpf.Library.Collections.LibraryCollectionMetadata! metadata) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.LibraryCollectionsViewModel(LM.App.Wpf.Library.Collections.LibraryCollectionStore! store, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPrimaryAttachment.get -> bool
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.LibrarySearchQueryBox() -> void
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.get -> string!
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel
LM.App.Wpf.ViewModels.LibraryViewModel.Filters.get -> LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LibraryViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFullTextSearchService! fullTextSearch, LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel! filters, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.Configuration.IUserPreferencesStore! preferencesStore, LM.App.Wpf.Common.IClipboardService! clipboard, LM.App.Wpf.Common.IFileExplorerService! fileExplorer, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! litSearchOrganizer, LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! collections, LM.App.Wpf.Library.Collections.LibraryCollectionStore! collectionStore) -> void
LM.App.Wpf.ViewModels.LibraryViewModel.Results.get -> LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.Collections.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibraryColumnOption!>!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnVisibility.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility!
LM.App.Wpf.ViewModels.SearchItemViewModel
LM.App.Wpf.ViewModels.SearchItemViewModel.Header.get -> string!
LM.App.Wpf.ViewModels.SearchItemViewModel.SearchItemViewModel(string! header, LM.App.Wpf.ViewModels.LibraryViewModel! vm) -> void
LM.App.Wpf.ViewModels.SearchItemViewModel.Vm.get -> LM.App.Wpf.ViewModels.LibraryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel
LM.App.Wpf.ViewModels.SearchViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.SearchViewModel.ExportSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.From.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.LoadSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRuns.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.PreviousSearchSummary!>!
LM.App.Wpf.ViewModels.SearchViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRunsCount.get -> int
LM.App.Wpf.ViewModels.SearchViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.SearchViewModel.Query.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.get -> LM.Core.Models.SearchHit?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RunSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SaveSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleLeftPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleRightPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SearchViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IWorkSpaceService! ws, LM.App.Wpf.Common.ISearchSavePrompt! savePrompt, LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel! providers, LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel! history, LM.Infrastructure.Search.PubMedSearchProvider! pubMedProvider, LM.Core.Abstractions.Configuration.IUserPreferencesStore? preferencesStore = null) -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.get -> LM.App.Wpf.ViewModels.PreviousSearchSummary?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.StartPreviousRunCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ShowRunDetailsCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleFavoriteCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.To.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.History.get -> LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel.Providers.get -> LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecordExecutionAsync(LM.Core.Models.Search.SearchExecutionResult! result, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.SearchHistoryViewModel(LM.Core.Abstractions.Configuration.ISearchHistoryStore! store) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.ExecuteSearchAsync() -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.RunSearchCommand.get -> LM.App.Wpf.Common.AsyncRelayCommand!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchExecuted -> System.EventHandler<LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs!>?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchProvidersViewModel(LM.Core.Abstractions.Search.ISearchExecutionService! executionService) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.set -> void
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.Result.get -> LM.Core.Models.Search.SearchExecutionResult!
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.SearchExecutedEventArgs(LM.Core.Models.Search.SearchExecutionResult! result) -> void
LM.App.Wpf.ViewModels.PreviousSearchSummary
LM.App.Wpf.ViewModels.PreviousSearchSummary.DisplayName.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.EntryId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.FavoriteRunId.get -> string?
LM.App.Wpf.ViewModels.PreviousSearchSummary.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastRunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.Provider.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.Query.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunCount.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TotalHits.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TagsDisplay.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption
LM.App.Wpf.ViewModels.SearchDatabaseOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption.SearchDatabaseOption(LM.Core.Models.SearchDatabase value, string! displayName) -> void
LM.App.Wpf.ViewModels.SearchDatabaseOption.Value.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.StagingItem
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.get -> LM.HubSpoke.Models.ArticleHook?
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.DisplayName.get -> string?
LM.App.Wpf.ViewModels.StagingItem.DisplayName.set -> void
LM.App.Wpf.ViewModels.StagingItem.Doi.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Doi.set -> void
LM.App.Wpf.ViewModels.StagingItem.FilePath.get -> string!
LM.App.Wpf.ViewModels.StagingItem.FilePath.set -> void
LM.App.Wpf.ViewModels.StagingItem.Internal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Internal.set -> void
LM.App.Wpf.ViewModels.StagingItem.InternalId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.InternalId.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsDuplicate.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsNearMatch.get -> bool
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Notes.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Notes.set -> void
LM.App.Wpf.ViewModels.StagingItem.OriginalFileName.get -> string!
LM.App.Wpf.ViewModels.StagingItem.Pmid.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Pmid.set -> void
LM.App.Wpf.ViewModels.StagingItem.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingItem.Selected.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Selected.set -> void
LM.App.Wpf.ViewModels.StagingItem.Similarity.get -> double
LM.App.Wpf.ViewModels.StagingItem.Similarity.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Source.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Source.set -> void
LM.App.Wpf.ViewModels.StagingItem.StagingItem() -> void
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.get -> string!
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.set -> void
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.Title.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Title.set -> void
LM.App.Wpf.ViewModels.StagingItem.Type.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingItem.Type.set -> void
LM.App.Wpf.ViewModels.StagingItem.Year.get -> int?
LM.App.Wpf.ViewModels.StagingItem.Year.set -> void
LM.App.Wpf.Views.AddView
LM.App.Wpf.Views.Behaviors.FileDropRequest
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.get -> System.Windows.DragEventArgs!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.get -> object?
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.FileDropRequest(System.Collections.Generic.IReadOnlyList<string!>! Paths, object? DropTarget, System.Windows.DragEventArgs! Args) -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.init -> void
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior.SavedSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.AddView.AddView() -> void
LM.App.Wpf.Views.AddView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog
LM.App.Wpf.Views.LibraryPresetPickerDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.LibraryPresetPickerDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel!
LM.App.Wpf.Views.LibraryPresetPrompt.LibraryPresetPrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.InitializeComponent() -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.AttachmentMetadataDialog(LM.App.Wpf.ViewModels.Library.AttachmentMetadataDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog
LM.App.Wpf.Views.LibraryPresetSaveDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.LibraryPresetSaveDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel!
LM.App.Wpf.Views.LibraryView
LM.App.Wpf.Views.LibraryView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryView.LibraryView() -> void
LM.App.Wpf.Views.PdfViewer
LM.App.Wpf.Views.PdfViewer.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewer.PdfViewer() -> void
LM.App.Wpf.Views.Library.TagTokenSelector
LM.App.Wpf.Views.Library.TagTokenSelector.InitializeComponent() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.FilteredSuggestions.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>?
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.set -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagTokenSelector() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.get -> System.Collections.Generic.IEnumerable<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.set -> void
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTagsProperty
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabularyProperty
LM.App.Wpf.Views.LibraryPresetPrompt
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Views.Review.Controls.DecisionBadge
LM.App.Wpf.Views.Review.Controls.DecisionBadge.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.DecisionBadge() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.get -> LM.Review.Core.Models.ScreeningStatus
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.set -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.ExtractionFieldEditor() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.ScreeningQueueControl() -> void
LM.App.Wpf.Views.Review.ReviewView
LM.App.Wpf.Views.Review.ReviewView.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ReviewView.ReviewView() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.LitSearchRunPickerWindow(LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel!
LM.App.Wpf.Views.Review.ProjectEditorWindow
LM.App.Wpf.Views.Review.ProjectEditorWindow.Attach(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.ProjectEditorWindow() -> void
LM.App.Wpf.Views.SearchSavePrompt
LM.App.Wpf.Views.SearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Views.SearchSavePrompt.SearchSavePrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.DataGridColumnVisibilityBehavior() -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.set -> void
LM.App.Wpf.Views.SearchView
LM.App.Wpf.Views.SearchView.InitializeComponent() -> void
LM.App.Wpf.Views.SearchView.SearchView() -> void
LM.App.Wpf.Views.ShellWindow
LM.App.Wpf.Views.ShellWindow.InitializeComponent() -> void
LM.App.Wpf.Views.ShellWindow.LoadWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.NewWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.ShellWindow() -> void
LM.App.Wpf.Views.StagingEditorWindow
LM.App.Wpf.Views.StagingEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.StagingEditorWindow.StagingEditorWindow(LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel! viewModel) -> void
override LM.App.Wpf.ViewModels.Library.LibrarySortOption.ToString() -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Name.get -> string!
override LM.App.Wpf.Views.Library.AttachmentMetadataDialog.OnClosed(System.EventArgs! e) -> void
LM.App.Wpf.Views.WorkspaceChooser
LM.App.Wpf.Views.WorkspaceChooser.InitializeComponent() -> void
LM.App.Wpf.Views.WorkspaceChooser.SelectedWorkspacePath.get -> string?
LM.App.Wpf.Views.WorkspaceChooser.WorkspaceChooser(LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel! viewModel) -> void
LM.App.Wpf.Views.WorkspaceChooser.Configure(System.Action<LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel!>! configure) -> void
override LM.App.Wpf.App.OnExit(System.Windows.ExitEventArgs! e) -> void
override LM.App.Wpf.App.OnStartup(System.Windows.StartupEventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetPickerDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetSaveDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.StagingEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.WorkspaceChooser.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.ProjectEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.OnClosed(System.EventArgs! e) -> void
static LM.App.Wpf.App.Main() -> void
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.All.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.NewestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.OldestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleAscending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleDescending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Clone() -> LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.LitSearchOrganizerStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveEntryAsync(string! entryId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.SyncEntriesAsync(System.Collections.Generic.IEnumerable<string!>! entryIds, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema.CurrentVersion -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.LitSearchEntryViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! title, string? query) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Query.get -> string?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.CanDelete.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsRoot.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.LitSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! name, bool isRoot) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.LitSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.LitSearchRunViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! runId, string! label, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel! parent) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.LitSearchTreeViewModel(LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt, LM.Core.Abstractions.IEntryStore! entryStore, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
---------- LM.App.Wpf ----------
#nullable enable
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.ColumnKeyProperty -> System.Windows.DependencyProperty!
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.GetColumnKey(System.Windows.DependencyObject! element) -> string?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.SetColumnKey(System.Windows.DependencyObject! element, string? value) -> void
#nullable enable
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Id.get -> string!
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.IsDraggable.get -> bool
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Name.get -> string!
const LM.App.Wpf.Library.LibraryPresetFolder.RootId = "root" -> string!
const LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.RootId = "root" -> string!
const LM.App.Wpf.ViewModels.StagingItem.DuplicateThreshold = 0.999 -> double
const LM.App.Wpf.ViewModels.StagingItem.NearThreshold = 0.75 -> double
LM.App.Wpf.App
LM.App.Wpf.App.App() -> void
LM.App.Wpf.App.InitializeComponent() -> void
LM.App.Wpf.Common.AsyncRelayCommand
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<object?, System.Threading.Tasks.Task!>! execute, System.Func<object?, bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<System.Threading.Tasks.Task!>! execute, System.Func<bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.AsyncRelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.AsyncRelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.AsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.IAsyncRelayCommand
LM.App.Wpf.Common.IAsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter
LM.App.Wpf.Common.BooleanToOpacityConverter.BooleanToOpacityConverter() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.set -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.set -> void
LM.App.Wpf.Common.Converters.ProjectEditorConverters
LM.App.Wpf.Common.Converters.ProjectEditorConverters.StageSelectionEquality.get -> System.Windows.Data.IMultiValueConverter!
LM.App.Wpf.Common.LibraryPresetSaveContext.LibraryPresetSaveContext(string! DefaultName, System.Collections.Generic.IReadOnlyCollection<string!>! ExistingNames, string! Title = "Save Library Preset", string! Prompt = "Name this filter preset.") -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.LibraryCollectionEntry() -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.DeletePresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
LM.App.Wpf.Library.LibraryFilterState.Tags.get -> string![]!
LM.App.Wpf.Library.LibraryPresetFolder.EnumerateChildren() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.LibraryPresetTreeItem>!
LM.App.Wpf.Library.LibraryPresetNodeKind.Folder = 0 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetNodeKind.Preset = 1 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.LitSearchOrganizerEntry() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.LitSearchOrganizerFolder() -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectBlueprint(string! projectId, string! name, System.DateTimeOffset createdAtUtc, string! createdBy, string! litSearchEntryId, string! litSearchRunId, System.Collections.Generic.IReadOnlyList<string!>! checkedEntryIds, string? hookRelativePath, LM.Review.Core.Models.ReviewTemplateKind template, string! metadataNotes, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>! stages) -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CheckedEntryIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedAtUtc.get -> System.DateTimeOffset
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedBy.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.HookRelativePath.get -> string?
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchEntryId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchRunId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Template.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.MetadataNotes.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Stages.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.With(string? name = null, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>? stages = null, LM.Review.Core.Models.ReviewTemplateKind? template = null, string? metadataNotes = null, string? litSearchEntryId = null, string? litSearchRunId = null, System.Collections.Generic.IReadOnlyList<string!>? checkedEntryIds = null) -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint!
LM.App.Wpf.Services.Review.Design.StageBlueprint
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageBlueprint(string! stageId, string! name, LM.Review.Core.Models.ReviewStageType stageType, int primaryReviewers, int secondaryReviewers, bool requiresConsensus, int minimumAgreements, bool escalateOnDisagreement, LM.Review.Core.Models.StageDisplayProfile! displayProfile) -> void
LM.App.Wpf.Services.Review.Design.StageBlueprint.EscalateOnDisagreement.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.MinimumAgreements.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.PrimaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.RequiresConsensus.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.SecondaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageId.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.Services.Review.Design.StageBlueprint.DisplayProfile.get -> LM.Review.Core.Models.StageDisplayProfile!
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher.Show(string! entryId, string! pdfAbsolutePath, string! pdfHash) -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.AddSelectionToFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.MoveFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RemoveSelectionFromFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ItemsView.get -> System.ComponentModel.ICollectionView!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.LitSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.SavedSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SavedSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeletePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.LoadPresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.LibraryViewModel.AllTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.LibraryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.LitSearchOrganizer.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LoadCollectionEntriesAsync(string! collectionId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.OpenPdfAnnotationsCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.LibraryViewModel.RefreshTagsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.ToggleBlacklistCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationTypeDisplay.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Dispose() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.HighlightBrush.get -> System.Windows.Media.Brush!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.PdfAnnotationColorCommandParameter() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior.CollectionTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior.LitSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter
LM.App.Wpf.Views.Converters.EnumEqualsConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.EnumEqualsConverter() -> void
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.InverseBooleanToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.AnnotationColorParameterConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.Convert(object?[]! values, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.ConvertBack(object? value, System.Type![]! targetTypes, object? parameter, System.Globalization.CultureInfo! culture) -> object?[]!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NullOrEmptyToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList
LM.App.Wpf.Views.Pdf.PdfAnnotationList.PdfAnnotationList() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow
LM.App.Wpf.Views.PdfViewerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow.PdfViewerWindow() -> void
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.PdfViewerHostObject(LM.App.Wpf.Views.PdfViewer! owner) -> void
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogCloseRequestedEventArgs(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogResult.get -> bool?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.CloseRequested -> System.EventHandler<LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs!>?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.DialogViewModelBase() -> void
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.RequestClose(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.IDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.WpfDialogService(System.IServiceProvider! services) -> void
LM.App.Wpf.Common.ILibraryPresetPrompt
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Common.IClipboardService
LM.App.Wpf.Common.IClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.ClipboardService
LM.App.Wpf.Common.ClipboardService.ClipboardService() -> void
LM.App.Wpf.Common.ClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.IFileExplorerService
LM.App.Wpf.Common.IFileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.FileExplorerService
LM.App.Wpf.Common.FileExplorerService.FileExplorerService() -> void
LM.App.Wpf.Common.FileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.ISearchSavePrompt
LM.App.Wpf.Common.ISearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Common.SearchSavePromptContext
LM.App.Wpf.Common.SearchSavePromptContext.Database.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.From.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.Query.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.SearchSavePromptContext(string! Query, LM.Core.Models.SearchDatabase Database, System.DateTime? From, System.DateTime? To, string! DefaultName, string! DefaultNotes, System.Collections.Generic.IReadOnlyList<string!>! DefaultTags) -> void
LM.App.Wpf.Common.SearchSavePromptContext.Database.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.SearchSavePromptContext.From.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.Query.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.To.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.To.init -> void
LM.App.Wpf.Common.SearchSavePromptResult
LM.App.Wpf.Common.SearchSavePromptResult.Name.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Notes.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Tags.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.SearchSavePromptResult(string! Name, string! Notes, string! Tags) -> void
LM.App.Wpf.Common.SearchSavePromptResult.Name.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Notes.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Tags.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSaveResult
LM.App.Wpf.Common.LibraryPresetSaveResult.LibraryPresetSaveResult(string! Name) -> void
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.get -> bool
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.LibraryPresetSelectionContext(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! Presets, bool AllowLoad, string! Title) -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.LibraryPresetSelectionResult(string? SelectedPresetId, System.Collections.Generic.IReadOnlyList<string!>! DeletedPresetIds) -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.get -> string?
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.init -> void
LM.App.Wpf.Common.LibraryPresetSummary
LM.App.Wpf.Common.LibraryPresetSummary.Id.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Id.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.LibraryPresetSummary(string! Id, string! Name, System.DateTime SavedUtc) -> void
LM.App.Wpf.Common.LibraryPresetSummary.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.get -> System.DateTime
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.init -> void
LM.App.Wpf.Common.RelayCommand
LM.App.Wpf.Common.RelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.RelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.RelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.RelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.RelayCommand.RelayCommand(System.Action<object?>! exec, System.Func<object?, bool>? can = null) -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.get -> bool
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.init -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.get -> string?
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.init -> void
LM.App.Wpf.Common.Dialogs.FolderPickerOptions
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.get -> string?
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.init -> void
LM.App.Wpf.Common.Dialogs.IDialogService
LM.App.Wpf.Common.Dialogs.IDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.StringJoinConverter
LM.App.Wpf.Common.StringJoinConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.StringJoinConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.AttachmentGlyphToIconConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.AttachmentGlyphToDescriptionConverter() -> void
LM.App.Wpf.Common.ViewModelBase
LM.App.Wpf.Common.ViewModelBase.ViewModelBase() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Id.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.get -> int
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PdfAnnotation(string! id, string! title) -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.get -> System.Windows.Media.Imaging.BitmapImage?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.Annotations.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Pdf.PdfAnnotation!>!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.ChangeAnnotationColorCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.CopyAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DocumentSource.get -> System.Uri?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.HandleAnnotationSelectionAsync(LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.LoadPdfCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfHash.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfViewerViewModel(LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.App.Wpf.Services.IUserContext! userContext, LM.Core.Abstractions.IPdfAnnotationPreviewStorage! previewStorage, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.Common.IClipboardService! clipboard) -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.RecordAnnotationChangeCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.WebViewBridge.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DeleteAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.Library.LibraryFilterPreset
LM.App.Wpf.Library.LibraryFilterPreset.LibraryFilterPreset() -> void
LM.App.Wpf.Library.LibraryFilterPreset.Id.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Id.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.Name.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Name.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.get -> System.DateTime
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.get -> int
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.State.get -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.Library.LibraryFilterPreset.State.set -> void
LM.App.Wpf.Library.LibraryFilterPresetStore
LM.App.Wpf.Library.LibraryFilterPresetStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.MovePresetAsync(string! presetId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.LibraryFilterPresetStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.ListPresetsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.LibraryFilterPreset!>!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, string? targetFolderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetByIdAsync(string! presetId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
const LM.App.Wpf.Library.Collections.LibraryCollectionFolder.RootId = "collections-root" -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionEntry!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile
LM.App.Wpf.Library.Collections.LibraryCollectionFile.LibraryCollectionFile() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.get -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder?
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.get -> int
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.EnumerateDescendants() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionEntry!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.LibraryCollectionFolder() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.LibraryCollectionMetadata() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore
LM.App.Wpf.Library.Collections.LibraryCollectionStore.AddEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.CreateFolderAsync(string? parentFolderId, string! name, string! createdBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.DeleteFolderAsync(string! folderId, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.LibraryCollectionStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RemoveEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RenameFolderAsync(string! folderId, string! newName, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryPresetFolder
LM.App.Wpf.Library.LibraryPresetFolder.Clone() -> LM.App.Wpf.Library.LibraryPresetFolder!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Id.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Id.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.LibraryPresetFolder() -> void
LM.App.Wpf.Library.LibraryPresetFolder.Name.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Name.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Presets.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryFilterPreset!>!
LM.App.Wpf.Library.LibraryPresetFolder.Presets.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.get -> int
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.set -> void
LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem
LM.App.Wpf.Library.LibraryPresetTreeItem.Folder.get -> LM.App.Wpf.Library.LibraryPresetFolder?
LM.App.Wpf.Library.LibraryPresetTreeItem.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem(LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder, LM.App.Wpf.Library.LibraryPresetFolder? folder, LM.App.Wpf.Library.LibraryFilterPreset? preset) -> void
LM.App.Wpf.Library.LibraryPresetTreeItem.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset?
LM.App.Wpf.Library.LibraryPresetTreeItem.SortOrder.get -> int
LM.App.Wpf.Library.ILibraryEntryEditor
LM.App.Wpf.Library.ILibraryEntryEditor.EditEntryAsync(LM.Core.Models.Entry! entry) -> System.Threading.Tasks.Task<System.Boolean>!
LM.App.Wpf.Library.LibraryFilterState
LM.App.Wpf.Library.LibraryFilterState.LibraryFilterState() -> void
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.get -> bool
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.set -> void
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateFrom.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateFrom.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateTo.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateTo.set -> void
LM.App.Wpf.Library.LibraryFilterState.SortKey.get -> string?
LM.App.Wpf.Library.LibraryFilterState.SortKey.set -> void
LM.App.Wpf.Library.LibraryFilterState.Tags.set -> void
LM.App.Wpf.ViewModels.AddPipeline
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddViewModel
LM.App.Wpf.ViewModels.AddViewModel.AddFilesCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.ViewModels.WatchedFolderScanner? scanner = null, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore? watchedFolderSettings = null, LM.App.Wpf.ViewModels.StagingListViewModel? stagingList = null, LM.App.Wpf.ViewModels.WatchedFoldersViewModel? watchedFolders = null, LM.App.Wpf.Common.Dialogs.IDialogService? dialogService = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.BulkAddFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ClearCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.CommitSelectedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.AddViewModel.Current.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.AddViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.AddViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.AddViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.AddViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.AddViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.AddViewModel.ReviewStagedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Staging.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.AddViewModel.StagingListViewModel.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFolders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFoldersViewModel.get -> LM.App.Wpf.ViewModels.WatchedFoldersViewModel!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.LibraryPresetPickerDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Presets.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.SelectedPresetId.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.EntryId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookAbsolutePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookRelativePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.DisplayLabel.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.ExecutedBy.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.Owner.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.TotalHits.get -> int
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.ConfirmCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.Entries.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.LitSearchRunPickerViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.LibraryPresetSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.set -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Initialize(LM.App.Wpf.Common.SearchSavePromptContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultNotes.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultTags.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.SearchSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingEditorViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingList.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.SelectedWorkspacePath.get -> string?
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.get -> bool
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.WorkspaceChooserViewModel(LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.CanAcceptFileDrop(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleFileDropAsync(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibrarySearchResult
LM.App.Wpf.ViewModels.LibrarySearchResult.Entry.get -> LM.Core.Models.Entry!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasAttachments.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasDoi.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasIdentifiers.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasInternalId.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasLinks.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNct.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPmid.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasRelations.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasSource.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasUserNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.Highlight.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.HighlightDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.IsFullText.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.LibrarySearchResult(LM.Core.Models.Entry! entry, double? score, string? highlight) -> void
LM.App.Wpf.ViewModels.LibrarySearchResult.Score.get -> double?
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentGlyphKind.get -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.TitleSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.YearPresenceSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearDescendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearAscendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SourceSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TypeSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedOnSortKey.get -> System.DateTime
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedBySortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.InternalIdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.DoiSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.PmidSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.NctSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AuthorsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TagsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IsInternalSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SnippetSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreSortKey.get -> double
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.None = 0 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Pdf = 1 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Document = 2 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Presentation = 3 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Generic = 4 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.Library.LibraryLinkItem
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.LibraryLinkItem(string! DisplayText, string! Target, LM.App.Wpf.ViewModels.Library.LinkItemKind Kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.get -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.init -> void
LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Url = 0 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.File = 1 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Folder = 2 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.RunAndBasics = 0 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Metadata = 1 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Workflow = 2 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Summary = 3 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.ProjectEditorStepDescriptor(LM.App.Wpf.ViewModels.Review.ProjectEditorStep Step, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.ReviewTemplateOption(LM.Review.Core.Models.ReviewTemplateKind Kind, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectEditorViewModel() -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.AddStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntryCount.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntrySummary.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ErrorMessage.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.HookRelativePath.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Initialize(LM.App.Wpf.Services.Review.Design.ProjectBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchEntryId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchRunId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageDownCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageUpCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.RemoveStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Result.get -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SaveCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.get -> LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.StageTypes.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStageType>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Stages.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Steps.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.TemplateOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStep.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepDescriptor.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepIndex.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsSummaryStep.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.get -> LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateKind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.NextCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.BackCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ChangeRunCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ConfigureRunReloadHandler(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.App.Wpf.Services.Review.Design.ProjectBlueprint?>!>! handler) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.StageDisplayOptionViewModel(LM.Review.Core.Models.StageContentArea area, bool isSelected) -> void
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Area.get -> LM.Review.Core.Models.StageContentArea
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Description.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.get -> bool
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageBlueprintViewModel(LM.App.Wpf.Services.Review.Design.StageBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageId.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TotalReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.DisplayOptions.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel!>!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TryBuild(out LM.App.Wpf.Services.Review.Design.StageBlueprint! stage, out string? errorMessage) -> bool
LM.App.Wpf.ViewModels.StagingListViewModel
LM.App.Wpf.ViewModels.StagingListViewModel.AddStagedItemsAsync(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Clear() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.CommitSelectedAsync(System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.StagingListViewModel.Current.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.StagingListViewModel.HasItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.HasSelectedItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.StagingListViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.StagingListViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingListViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.StagingListViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.SetCommandGuard(System.Func<System.Func<System.Threading.Tasks.Task!>!, System.Threading.Tasks.Task!>! guard) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.UpdateParentBusy(bool isBusy) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.WatchedFoldersViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList, LM.App.Wpf.ViewModels.WatchedFolderScanner! scanner, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore! settingsStore, LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.WatchedFolder
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.get -> bool
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.LastScanDisplay.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.LastScanUtc.get -> System.DateTimeOffset?
LM.App.Wpf.ViewModels.WatchedFolder.LastScanWasUnchanged.get -> bool?
LM.App.Wpf.ViewModels.WatchedFolder.Path.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.Path.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFolder.ResetScanState() -> void
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusLabel.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusToolTip.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.WatchedFolder() -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(string! path) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig
LM.App.Wpf.ViewModels.WatchedFolderConfig.ApplyState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.ClearState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFolderConfig.CreateSnapshot() -> LM.Core.Models.WatchedFolderSettings!
LM.App.Wpf.ViewModels.WatchedFolderConfig.Load(LM.Core.Models.WatchedFolderSettings! settings) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.StoreState(LM.App.Wpf.ViewModels.WatchedFolder! folder, LM.Core.Models.WatchedFolderState! state) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.WatchedFolderConfig() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Folder.get -> LM.App.Wpf.ViewModels.WatchedFolder!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Items.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.WatchedFolderScanEventArgs(LM.App.Wpf.ViewModels.WatchedFolder! folder, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner
LM.App.Wpf.ViewModels.WatchedFolderScanner.Attach(LM.App.Wpf.ViewModels.WatchedFolderConfig! config) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.ItemsStaged -> System.EventHandler<LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs!>?
LM.App.Wpf.ViewModels.WatchedFolderScanner.ScanAsync(LM.App.Wpf.ViewModels.WatchedFolder? folder, System.Threading.CancellationToken ct, bool force = false) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFolderScanner.WatchedFolderScanner(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.IAddPipeline
LM.App.Wpf.ViewModels.IAddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.IAddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.Library.ILibraryDocumentService
LM.App.Wpf.Library.ILibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.ILibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.LibraryDocumentService
LM.App.Wpf.Library.LibraryDocumentService.LibraryDocumentService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.IAttachmentMetadataPrompt
LM.App.Wpf.Library.IAttachmentMetadataPrompt.RequestMetadataAsync(LM.App.Wpf.Library.AttachmentMetadataPromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.AttachmentMetadataPromptResult?>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.get -> string!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.AttachmentMetadataPromptContext(string! EntryTitle, System.Collections.Generic.IReadOnlyList<string!>! FilePaths) -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>!
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult.AttachmentMetadataPromptResult(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>! Attachments) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection
LM.App.Wpf.Library.AttachmentMetadataSelection.AttachmentMetadataSelection(string! SourcePath, string! Title, LM.Core.Models.AttachmentKind Kind, System.Collections.Generic.IReadOnlyList<string!>! Tags) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.get -> LM.Core.Models.AttachmentKind
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.init -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LibraryFiltersViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! presetStore, LM.App.Wpf.Common.ILibraryPresetPrompt! presetPrompt, LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.SavedSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.get -> string
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedSearchPresetViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, LM.App.Wpf.Library.LibraryFilterPreset! preset, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Summary.get -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.ToSummary() -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.SavedSearchTreeChangedEventArgs(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! presets) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.SavedSearchTreeViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.TreeChanged -> System.EventHandler<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs!>?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ClearCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyPresetAsync(LM.App.Wpf.Common.LibraryPresetSummary! summary, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyState(LM.App.Wpf.Library.LibraryFilterState! state) -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.CaptureState() -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTooltip.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTokens.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.BuildFullTextQuery(string! normalizedQuery) -> LM.Core.Models.Search.FullTextSearchQuery!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.HasSavedPresets.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.GetNormalizedFullTextQuery() -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.NavigationRoots.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RefreshNavigationAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedPresets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedSearches.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleLeftPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleRightPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SortOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RemoveTagCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand<string?>!
LM.App.Wpf.ViewModels.Library.LibrarySortOption
LM.App.Wpf.ViewModels.Library.LibrarySortOption.LibrarySortOption(string! key, string! displayName) -> void
LM.App.Wpf.ViewModels.Library.LibrarySortOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOptions
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.Category = 0 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.SavedSearch = 1 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchEntry = 2 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchRun = 3 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.LibraryNavigationNodeViewModel(string! name, LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.HasChildren.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Kind.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.get -> object?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.init -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.LibraryColumnOption(string! key, string! displayName, bool isVisible) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LibraryColumnVisibility() -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LoadFrom(System.Collections.Generic.IReadOnlyDictionary<string!, bool>! source) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.Snapshot() -> System.Collections.Generic.IReadOnlyDictionary<string!, bool>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LibraryResultsViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.App.Wpf.Library.ILibraryEntryEditor! entryEditor, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.Library.IAttachmentMetadataPrompt! attachmentPrompt, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.Core.Abstractions.IHasher! hasher, LM.App.Wpf.Services.Pdf.IPdfViewerLauncher! pdfViewerLauncher) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadFullTextResultsAsync(System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.FullTextSearchHit!>! hits, System.Func<LM.Core.Models.Entry!, bool>? entryFilter = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadMetadataResults(System.Collections.Generic.IEnumerable<LM.Core.Models.Entry!>! entries) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResetSortForSearch(LM.App.Wpf.ViewModels.Library.LibrarySortOption! defaultOption) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridLoaded(System.Windows.RoutedEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridSorting(System.Windows.Controls.DataGridSortingEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.MarkAsMetadataResults() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResultsAreFullText.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.get -> LM.App.Wpf.ViewModels.LibrarySearchResult?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LinkItems.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryLinkItem!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.EditEntryAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelection.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedItems.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectionChanged -> System.EventHandler?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelectedAbstract.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ToggleBlacklistAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.get -> int
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.LibraryCollectionFolderViewModel(LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! tree, string! id, string! name, LM.App.Wpf.Library.Collections.LibraryCollectionMetadata! metadata) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.LibraryCollectionsViewModel(LM.App.Wpf.Library.Collections.LibraryCollectionStore! store, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPrimaryAttachment.get -> bool
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.LibrarySearchQueryBox() -> void
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.get -> string!
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel
LM.App.Wpf.ViewModels.LibraryViewModel.Filters.get -> LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LibraryViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFullTextSearchService! fullTextSearch, LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel! filters, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.Configuration.IUserPreferencesStore! preferencesStore, LM.App.Wpf.Common.IClipboardService! clipboard, LM.App.Wpf.Common.IFileExplorerService! fileExplorer, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! litSearchOrganizer, LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! collections, LM.App.Wpf.Library.Collections.LibraryCollectionStore! collectionStore) -> void
LM.App.Wpf.ViewModels.LibraryViewModel.Results.get -> LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.Collections.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibraryColumnOption!>!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnVisibility.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility!
LM.App.Wpf.ViewModels.SearchItemViewModel
LM.App.Wpf.ViewModels.SearchItemViewModel.Header.get -> string!
LM.App.Wpf.ViewModels.SearchItemViewModel.SearchItemViewModel(string! header, LM.App.Wpf.ViewModels.LibraryViewModel! vm) -> void
LM.App.Wpf.ViewModels.SearchItemViewModel.Vm.get -> LM.App.Wpf.ViewModels.LibraryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel
LM.App.Wpf.ViewModels.SearchViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.SearchViewModel.ExportSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.From.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.LoadSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRuns.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.PreviousSearchSummary!>!
LM.App.Wpf.ViewModels.SearchViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRunsCount.get -> int
LM.App.Wpf.ViewModels.SearchViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.SearchViewModel.Query.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.get -> LM.Core.Models.SearchHit?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RunSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SaveSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleLeftPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleRightPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SearchViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IWorkSpaceService! ws, LM.App.Wpf.Common.ISearchSavePrompt! savePrompt, LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel! providers, LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel! history, LM.Infrastructure.Search.PubMedSearchProvider! pubMedProvider, LM.Core.Abstractions.Configuration.IUserPreferencesStore? preferencesStore = null) -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.get -> LM.App.Wpf.ViewModels.PreviousSearchSummary?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.StartPreviousRunCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ShowRunDetailsCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleFavoriteCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.To.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.History.get -> LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel.Providers.get -> LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecordExecutionAsync(LM.Core.Models.Search.SearchExecutionResult! result, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.SearchHistoryViewModel(LM.Core.Abstractions.Configuration.ISearchHistoryStore! store) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.ExecuteSearchAsync() -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.RunSearchCommand.get -> LM.App.Wpf.Common.AsyncRelayCommand!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchExecuted -> System.EventHandler<LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs!>?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchProvidersViewModel(LM.Core.Abstractions.Search.ISearchExecutionService! executionService) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.set -> void
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.Result.get -> LM.Core.Models.Search.SearchExecutionResult!
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.SearchExecutedEventArgs(LM.Core.Models.Search.SearchExecutionResult! result) -> void
LM.App.Wpf.ViewModels.PreviousSearchSummary
LM.App.Wpf.ViewModels.PreviousSearchSummary.DisplayName.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.EntryId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.FavoriteRunId.get -> string?
LM.App.Wpf.ViewModels.PreviousSearchSummary.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastRunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.Provider.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.Query.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunCount.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TotalHits.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TagsDisplay.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption
LM.App.Wpf.ViewModels.SearchDatabaseOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption.SearchDatabaseOption(LM.Core.Models.SearchDatabase value, string! displayName) -> void
LM.App.Wpf.ViewModels.SearchDatabaseOption.Value.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.StagingItem
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.get -> LM.HubSpoke.Models.ArticleHook?
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.DisplayName.get -> string?
LM.App.Wpf.ViewModels.StagingItem.DisplayName.set -> void
LM.App.Wpf.ViewModels.StagingItem.Doi.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Doi.set -> void
LM.App.Wpf.ViewModels.StagingItem.FilePath.get -> string!
LM.App.Wpf.ViewModels.StagingItem.FilePath.set -> void
LM.App.Wpf.ViewModels.StagingItem.Internal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Internal.set -> void
LM.App.Wpf.ViewModels.StagingItem.InternalId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.InternalId.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsDuplicate.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsNearMatch.get -> bool
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Notes.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Notes.set -> void
LM.App.Wpf.ViewModels.StagingItem.OriginalFileName.get -> string!
LM.App.Wpf.ViewModels.StagingItem.Pmid.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Pmid.set -> void
LM.App.Wpf.ViewModels.StagingItem.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingItem.Selected.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Selected.set -> void
LM.App.Wpf.ViewModels.StagingItem.Similarity.get -> double
LM.App.Wpf.ViewModels.StagingItem.Similarity.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Source.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Source.set -> void
LM.App.Wpf.ViewModels.StagingItem.StagingItem() -> void
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.get -> string!
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.set -> void
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.Title.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Title.set -> void
LM.App.Wpf.ViewModels.StagingItem.Type.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingItem.Type.set -> void
LM.App.Wpf.ViewModels.StagingItem.Year.get -> int?
LM.App.Wpf.ViewModels.StagingItem.Year.set -> void
LM.App.Wpf.Views.AddView
LM.App.Wpf.Views.Behaviors.FileDropRequest
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.get -> System.Windows.DragEventArgs!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.get -> object?
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.FileDropRequest(System.Collections.Generic.IReadOnlyList<string!>! Paths, object? DropTarget, System.Windows.DragEventArgs! Args) -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.init -> void
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior.SavedSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.AddView.AddView() -> void
LM.App.Wpf.Views.AddView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog
LM.App.Wpf.Views.LibraryPresetPickerDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.LibraryPresetPickerDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel!
LM.App.Wpf.Views.LibraryPresetPrompt.LibraryPresetPrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.InitializeComponent() -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.AttachmentMetadataDialog(LM.App.Wpf.ViewModels.Library.AttachmentMetadataDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog
LM.App.Wpf.Views.LibraryPresetSaveDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.LibraryPresetSaveDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel!
LM.App.Wpf.Views.LibraryView
LM.App.Wpf.Views.LibraryView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryView.LibraryView() -> void
LM.App.Wpf.Views.PdfViewer
LM.App.Wpf.Views.PdfViewer.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewer.PdfViewer() -> void
LM.App.Wpf.Views.Library.TagTokenSelector
LM.App.Wpf.Views.Library.TagTokenSelector.InitializeComponent() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.FilteredSuggestions.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>?
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.set -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagTokenSelector() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.get -> System.Collections.Generic.IEnumerable<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.set -> void
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTagsProperty
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabularyProperty
LM.App.Wpf.Views.LibraryPresetPrompt
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Views.Review.Controls.DecisionBadge
LM.App.Wpf.Views.Review.Controls.DecisionBadge.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.DecisionBadge() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.get -> LM.Review.Core.Models.ScreeningStatus
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.set -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.ExtractionFieldEditor() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.ScreeningQueueControl() -> void
LM.App.Wpf.Views.Review.ReviewView
LM.App.Wpf.Views.Review.ReviewView.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ReviewView.ReviewView() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.LitSearchRunPickerWindow(LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel!
LM.App.Wpf.Views.Review.ProjectEditorWindow
LM.App.Wpf.Views.Review.ProjectEditorWindow.Attach(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.ProjectEditorWindow() -> void
LM.App.Wpf.Views.SearchSavePrompt
LM.App.Wpf.Views.SearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Views.SearchSavePrompt.SearchSavePrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.DataGridColumnVisibilityBehavior() -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.set -> void
LM.App.Wpf.Views.SearchView
LM.App.Wpf.Views.SearchView.InitializeComponent() -> void
LM.App.Wpf.Views.SearchView.SearchView() -> void
LM.App.Wpf.Views.ShellWindow
LM.App.Wpf.Views.ShellWindow.InitializeComponent() -> void
LM.App.Wpf.Views.ShellWindow.LoadWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.NewWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.ShellWindow() -> void
LM.App.Wpf.Views.StagingEditorWindow
LM.App.Wpf.Views.StagingEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.StagingEditorWindow.StagingEditorWindow(LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel! viewModel) -> void
override LM.App.Wpf.ViewModels.Library.LibrarySortOption.ToString() -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Name.get -> string!
override LM.App.Wpf.Views.Library.AttachmentMetadataDialog.OnClosed(System.EventArgs! e) -> void
LM.App.Wpf.Views.WorkspaceChooser
LM.App.Wpf.Views.WorkspaceChooser.InitializeComponent() -> void
LM.App.Wpf.Views.WorkspaceChooser.SelectedWorkspacePath.get -> string?
LM.App.Wpf.Views.WorkspaceChooser.WorkspaceChooser(LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel! viewModel) -> void
LM.App.Wpf.Views.WorkspaceChooser.Configure(System.Action<LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel!>! configure) -> void
override LM.App.Wpf.App.OnExit(System.Windows.ExitEventArgs! e) -> void
override LM.App.Wpf.App.OnStartup(System.Windows.StartupEventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetPickerDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetSaveDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.StagingEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.WorkspaceChooser.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.ProjectEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.OnClosed(System.EventArgs! e) -> void
static LM.App.Wpf.App.Main() -> void
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.All.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.NewestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.OldestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleAscending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleDescending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Clone() -> LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.LitSearchOrganizerStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveEntryAsync(string! entryId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.SyncEntriesAsync(System.Collections.Generic.IEnumerable<string!>! entryIds, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema.CurrentVersion -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.LitSearchEntryViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! title, string? query) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Query.get -> string?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.CanDelete.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsRoot.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.LitSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! name, bool isRoot) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.LitSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.LitSearchRunViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! runId, string! label, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel! parent) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.LitSearchTreeViewModel(LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt, LM.Core.Abstractions.IEntryStore! entryStore, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
---------- LM.App.Wpf ----------
#nullable enable
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.ColumnKeyProperty -> System.Windows.DependencyProperty!
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.GetColumnKey(System.Windows.DependencyObject! element) -> string?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.SetColumnKey(System.Windows.DependencyObject! element, string? value) -> void
#nullable enable
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Id.get -> string!
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.IsDraggable.get -> bool
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Name.get -> string!
const LM.App.Wpf.Library.LibraryPresetFolder.RootId = "root" -> string!
const LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.RootId = "root" -> string!
const LM.App.Wpf.ViewModels.StagingItem.DuplicateThreshold = 0.999 -> double
const LM.App.Wpf.ViewModels.StagingItem.NearThreshold = 0.75 -> double
LM.App.Wpf.App
LM.App.Wpf.App.App() -> void
LM.App.Wpf.App.InitializeComponent() -> void
LM.App.Wpf.Common.AsyncRelayCommand
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<object?, System.Threading.Tasks.Task!>! execute, System.Func<object?, bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<System.Threading.Tasks.Task!>! execute, System.Func<bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.AsyncRelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.AsyncRelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.AsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.IAsyncRelayCommand
LM.App.Wpf.Common.IAsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter
LM.App.Wpf.Common.BooleanToOpacityConverter.BooleanToOpacityConverter() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.set -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.set -> void
LM.App.Wpf.Common.Converters.ProjectEditorConverters
LM.App.Wpf.Common.Converters.ProjectEditorConverters.StageSelectionEquality.get -> System.Windows.Data.IMultiValueConverter!
LM.App.Wpf.Common.LibraryPresetSaveContext.LibraryPresetSaveContext(string! DefaultName, System.Collections.Generic.IReadOnlyCollection<string!>! ExistingNames, string! Title = "Save Library Preset", string! Prompt = "Name this filter preset.") -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.LibraryCollectionEntry() -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.DeletePresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
LM.App.Wpf.Library.LibraryFilterState.Tags.get -> string![]!
LM.App.Wpf.Library.LibraryPresetFolder.EnumerateChildren() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.LibraryPresetTreeItem>!
LM.App.Wpf.Library.LibraryPresetNodeKind.Folder = 0 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetNodeKind.Preset = 1 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.LitSearchOrganizerEntry() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.LitSearchOrganizerFolder() -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectBlueprint(string! projectId, string! name, System.DateTimeOffset createdAtUtc, string! createdBy, string! litSearchEntryId, string! litSearchRunId, System.Collections.Generic.IReadOnlyList<string!>! checkedEntryIds, string? hookRelativePath, LM.Review.Core.Models.ReviewTemplateKind template, string! metadataNotes, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>! stages) -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CheckedEntryIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedAtUtc.get -> System.DateTimeOffset
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedBy.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.HookRelativePath.get -> string?
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchEntryId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchRunId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Template.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.MetadataNotes.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Stages.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.With(string? name = null, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>? stages = null, LM.Review.Core.Models.ReviewTemplateKind? template = null, string? metadataNotes = null, string? litSearchEntryId = null, string? litSearchRunId = null, System.Collections.Generic.IReadOnlyList<string!>? checkedEntryIds = null) -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint!
LM.App.Wpf.Services.Review.Design.StageBlueprint
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageBlueprint(string! stageId, string! name, LM.Review.Core.Models.ReviewStageType stageType, int primaryReviewers, int secondaryReviewers, bool requiresConsensus, int minimumAgreements, bool escalateOnDisagreement, LM.Review.Core.Models.StageDisplayProfile! displayProfile) -> void
LM.App.Wpf.Services.Review.Design.StageBlueprint.EscalateOnDisagreement.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.MinimumAgreements.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.PrimaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.RequiresConsensus.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.SecondaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageId.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.Services.Review.Design.StageBlueprint.DisplayProfile.get -> LM.Review.Core.Models.StageDisplayProfile!
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher.Show(string! entryId, string! pdfAbsolutePath, string! pdfHash) -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.AddSelectionToFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.MoveFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RemoveSelectionFromFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ItemsView.get -> System.ComponentModel.ICollectionView!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.LitSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.SavedSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SavedSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeletePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.LoadPresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.LibraryViewModel.AllTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.LibraryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.LitSearchOrganizer.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LoadCollectionEntriesAsync(string! collectionId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.OpenPdfAnnotationsCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.LibraryViewModel.RefreshTagsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.ToggleBlacklistCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationTypeDisplay.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Dispose() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.HighlightBrush.get -> System.Windows.Media.Brush!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.PdfAnnotationColorCommandParameter() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior.CollectionTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior.LitSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter
LM.App.Wpf.Views.Converters.EnumEqualsConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.EnumEqualsConverter() -> void
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.InverseBooleanToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.AnnotationColorParameterConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.Convert(object?[]! values, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.ConvertBack(object? value, System.Type![]! targetTypes, object? parameter, System.Globalization.CultureInfo! culture) -> object?[]!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NullOrEmptyToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList
LM.App.Wpf.Views.Pdf.PdfAnnotationList.PdfAnnotationList() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow
LM.App.Wpf.Views.PdfViewerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow.PdfViewerWindow() -> void
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.PdfViewerHostObject(LM.App.Wpf.Views.PdfViewer! owner) -> void
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogCloseRequestedEventArgs(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogResult.get -> bool?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.CloseRequested -> System.EventHandler<LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs!>?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.DialogViewModelBase() -> void
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.RequestClose(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.IDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.WpfDialogService(System.IServiceProvider! services) -> void
LM.App.Wpf.Common.ILibraryPresetPrompt
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Common.IClipboardService
LM.App.Wpf.Common.IClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.ClipboardService
LM.App.Wpf.Common.ClipboardService.ClipboardService() -> void
LM.App.Wpf.Common.ClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.IFileExplorerService
LM.App.Wpf.Common.IFileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.FileExplorerService
LM.App.Wpf.Common.FileExplorerService.FileExplorerService() -> void
LM.App.Wpf.Common.FileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.ISearchSavePrompt
LM.App.Wpf.Common.ISearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Common.SearchSavePromptContext
LM.App.Wpf.Common.SearchSavePromptContext.Database.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.From.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.Query.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.SearchSavePromptContext(string! Query, LM.Core.Models.SearchDatabase Database, System.DateTime? From, System.DateTime? To, string! DefaultName, string! DefaultNotes, System.Collections.Generic.IReadOnlyList<string!>! DefaultTags) -> void
LM.App.Wpf.Common.SearchSavePromptContext.Database.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.SearchSavePromptContext.From.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.Query.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.To.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.To.init -> void
LM.App.Wpf.Common.SearchSavePromptResult
LM.App.Wpf.Common.SearchSavePromptResult.Name.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Notes.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Tags.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.SearchSavePromptResult(string! Name, string! Notes, string! Tags) -> void
LM.App.Wpf.Common.SearchSavePromptResult.Name.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Notes.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Tags.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSaveResult
LM.App.Wpf.Common.LibraryPresetSaveResult.LibraryPresetSaveResult(string! Name) -> void
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.get -> bool
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.LibraryPresetSelectionContext(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! Presets, bool AllowLoad, string! Title) -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.LibraryPresetSelectionResult(string? SelectedPresetId, System.Collections.Generic.IReadOnlyList<string!>! DeletedPresetIds) -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.get -> string?
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.init -> void
LM.App.Wpf.Common.LibraryPresetSummary
LM.App.Wpf.Common.LibraryPresetSummary.Id.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Id.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.LibraryPresetSummary(string! Id, string! Name, System.DateTime SavedUtc) -> void
LM.App.Wpf.Common.LibraryPresetSummary.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.get -> System.DateTime
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.init -> void
LM.App.Wpf.Common.RelayCommand
LM.App.Wpf.Common.RelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.RelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.RelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.RelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.RelayCommand.RelayCommand(System.Action<object?>! exec, System.Func<object?, bool>? can = null) -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.get -> bool
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.init -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.get -> string?
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.init -> void
LM.App.Wpf.Common.Dialogs.FolderPickerOptions
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.get -> string?
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.init -> void
LM.App.Wpf.Common.Dialogs.IDialogService
LM.App.Wpf.Common.Dialogs.IDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.StringJoinConverter
LM.App.Wpf.Common.StringJoinConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.StringJoinConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.AttachmentGlyphToIconConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.AttachmentGlyphToDescriptionConverter() -> void
LM.App.Wpf.Common.ViewModelBase
LM.App.Wpf.Common.ViewModelBase.ViewModelBase() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Id.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.get -> int
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PdfAnnotation(string! id, string! title) -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.get -> System.Windows.Media.Imaging.BitmapImage?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.Annotations.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Pdf.PdfAnnotation!>!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.ChangeAnnotationColorCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.CopyAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DocumentSource.get -> System.Uri?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.HandleAnnotationSelectionAsync(LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.LoadPdfCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfHash.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfViewerViewModel(LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.App.Wpf.Services.IUserContext! userContext, LM.Core.Abstractions.IPdfAnnotationPreviewStorage! previewStorage, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.Common.IClipboardService! clipboard) -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.RecordAnnotationChangeCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.WebViewBridge.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DeleteAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.Library.LibraryFilterPreset
LM.App.Wpf.Library.LibraryFilterPreset.LibraryFilterPreset() -> void
LM.App.Wpf.Library.LibraryFilterPreset.Id.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Id.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.Name.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Name.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.get -> System.DateTime
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.get -> int
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.State.get -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.Library.LibraryFilterPreset.State.set -> void
LM.App.Wpf.Library.LibraryFilterPresetStore
LM.App.Wpf.Library.LibraryFilterPresetStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.MovePresetAsync(string! presetId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.LibraryFilterPresetStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.ListPresetsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.LibraryFilterPreset!>!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, string? targetFolderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetByIdAsync(string! presetId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
const LM.App.Wpf.Library.Collections.LibraryCollectionFolder.RootId = "collections-root" -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionEntry!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile
LM.App.Wpf.Library.Collections.LibraryCollectionFile.LibraryCollectionFile() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.get -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder?
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.get -> int
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.EnumerateDescendants() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionEntry!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.LibraryCollectionFolder() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.LibraryCollectionMetadata() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore
LM.App.Wpf.Library.Collections.LibraryCollectionStore.AddEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.CreateFolderAsync(string? parentFolderId, string! name, string! createdBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.DeleteFolderAsync(string! folderId, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.LibraryCollectionStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RemoveEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RenameFolderAsync(string! folderId, string! newName, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryPresetFolder
LM.App.Wpf.Library.LibraryPresetFolder.Clone() -> LM.App.Wpf.Library.LibraryPresetFolder!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Id.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Id.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.LibraryPresetFolder() -> void
LM.App.Wpf.Library.LibraryPresetFolder.Name.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Name.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Presets.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryFilterPreset!>!
LM.App.Wpf.Library.LibraryPresetFolder.Presets.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.get -> int
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.set -> void
LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem
LM.App.Wpf.Library.LibraryPresetTreeItem.Folder.get -> LM.App.Wpf.Library.LibraryPresetFolder?
LM.App.Wpf.Library.LibraryPresetTreeItem.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem(LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder, LM.App.Wpf.Library.LibraryPresetFolder? folder, LM.App.Wpf.Library.LibraryFilterPreset? preset) -> void
LM.App.Wpf.Library.LibraryPresetTreeItem.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset?
LM.App.Wpf.Library.LibraryPresetTreeItem.SortOrder.get -> int
LM.App.Wpf.Library.ILibraryEntryEditor
LM.App.Wpf.Library.ILibraryEntryEditor.EditEntryAsync(LM.Core.Models.Entry! entry) -> System.Threading.Tasks.Task<System.Boolean>!
LM.App.Wpf.Library.LibraryFilterState
LM.App.Wpf.Library.LibraryFilterState.LibraryFilterState() -> void
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.get -> bool
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.set -> void
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateFrom.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateFrom.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateTo.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateTo.set -> void
LM.App.Wpf.Library.LibraryFilterState.SortKey.get -> string?
LM.App.Wpf.Library.LibraryFilterState.SortKey.set -> void
LM.App.Wpf.Library.LibraryFilterState.Tags.set -> void
LM.App.Wpf.ViewModels.AddPipeline
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddViewModel
LM.App.Wpf.ViewModels.AddViewModel.AddFilesCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.ViewModels.WatchedFolderScanner? scanner = null, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore? watchedFolderSettings = null, LM.App.Wpf.ViewModels.StagingListViewModel? stagingList = null, LM.App.Wpf.ViewModels.WatchedFoldersViewModel? watchedFolders = null, LM.App.Wpf.Common.Dialogs.IDialogService? dialogService = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.BulkAddFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ClearCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.CommitSelectedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.AddViewModel.Current.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.AddViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.AddViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.AddViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.AddViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.AddViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.AddViewModel.ReviewStagedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Staging.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.AddViewModel.StagingListViewModel.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFolders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFoldersViewModel.get -> LM.App.Wpf.ViewModels.WatchedFoldersViewModel!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.LibraryPresetPickerDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Presets.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.SelectedPresetId.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.EntryId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookAbsolutePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookRelativePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.DisplayLabel.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.ExecutedBy.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.Owner.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.TotalHits.get -> int
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.ConfirmCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.Entries.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.LitSearchRunPickerViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.LibraryPresetSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.set -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Initialize(LM.App.Wpf.Common.SearchSavePromptContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultNotes.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultTags.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.SearchSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingEditorViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingList.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.SelectedWorkspacePath.get -> string?
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.get -> bool
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.WorkspaceChooserViewModel(LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.CanAcceptFileDrop(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleFileDropAsync(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibrarySearchResult
LM.App.Wpf.ViewModels.LibrarySearchResult.Entry.get -> LM.Core.Models.Entry!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasAttachments.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasDoi.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasIdentifiers.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasInternalId.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasLinks.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNct.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPmid.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasRelations.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasSource.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasUserNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.Highlight.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.HighlightDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.IsFullText.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.LibrarySearchResult(LM.Core.Models.Entry! entry, double? score, string? highlight) -> void
LM.App.Wpf.ViewModels.LibrarySearchResult.Score.get -> double?
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentGlyphKind.get -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.TitleSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.YearPresenceSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearDescendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearAscendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SourceSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TypeSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedOnSortKey.get -> System.DateTime
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedBySortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.InternalIdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.DoiSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.PmidSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.NctSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AuthorsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TagsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IsInternalSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SnippetSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreSortKey.get -> double
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.None = 0 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Pdf = 1 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Document = 2 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Presentation = 3 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Generic = 4 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.Library.LibraryLinkItem
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.LibraryLinkItem(string! DisplayText, string! Target, LM.App.Wpf.ViewModels.Library.LinkItemKind Kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.get -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.init -> void
LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Url = 0 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.File = 1 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Folder = 2 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.RunAndBasics = 0 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Metadata = 1 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Workflow = 2 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Summary = 3 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.ProjectEditorStepDescriptor(LM.App.Wpf.ViewModels.Review.ProjectEditorStep Step, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.ReviewTemplateOption(LM.Review.Core.Models.ReviewTemplateKind Kind, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectEditorViewModel() -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.AddStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntryCount.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntrySummary.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ErrorMessage.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.HookRelativePath.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Initialize(LM.App.Wpf.Services.Review.Design.ProjectBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchEntryId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchRunId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageDownCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageUpCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.RemoveStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Result.get -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SaveCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.get -> LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.StageTypes.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStageType>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Stages.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Steps.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.TemplateOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStep.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepDescriptor.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepIndex.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsSummaryStep.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.get -> LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateKind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.NextCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.BackCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ChangeRunCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ConfigureRunReloadHandler(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.App.Wpf.Services.Review.Design.ProjectBlueprint?>!>! handler) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.StageDisplayOptionViewModel(LM.Review.Core.Models.StageContentArea area, bool isSelected) -> void
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Area.get -> LM.Review.Core.Models.StageContentArea
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Description.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.get -> bool
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageBlueprintViewModel(LM.App.Wpf.Services.Review.Design.StageBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageId.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TotalReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.DisplayOptions.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel!>!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TryBuild(out LM.App.Wpf.Services.Review.Design.StageBlueprint! stage, out string? errorMessage) -> bool
LM.App.Wpf.ViewModels.StagingListViewModel
LM.App.Wpf.ViewModels.StagingListViewModel.AddStagedItemsAsync(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Clear() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.CommitSelectedAsync(System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.StagingListViewModel.Current.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.StagingListViewModel.HasItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.HasSelectedItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.StagingListViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.StagingListViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingListViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.StagingListViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.SetCommandGuard(System.Func<System.Func<System.Threading.Tasks.Task!>!, System.Threading.Tasks.Task!>! guard) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.UpdateParentBusy(bool isBusy) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.WatchedFoldersViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList, LM.App.Wpf.ViewModels.WatchedFolderScanner! scanner, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore! settingsStore, LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.WatchedFolder
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.get -> bool
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.LastScanDisplay.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.LastScanUtc.get -> System.DateTimeOffset?
LM.App.Wpf.ViewModels.WatchedFolder.LastScanWasUnchanged.get -> bool?
LM.App.Wpf.ViewModels.WatchedFolder.Path.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.Path.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFolder.ResetScanState() -> void
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusLabel.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusToolTip.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.WatchedFolder() -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(string! path) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig
LM.App.Wpf.ViewModels.WatchedFolderConfig.ApplyState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.ClearState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFolderConfig.CreateSnapshot() -> LM.Core.Models.WatchedFolderSettings!
LM.App.Wpf.ViewModels.WatchedFolderConfig.Load(LM.Core.Models.WatchedFolderSettings! settings) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.StoreState(LM.App.Wpf.ViewModels.WatchedFolder! folder, LM.Core.Models.WatchedFolderState! state) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.WatchedFolderConfig() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Folder.get -> LM.App.Wpf.ViewModels.WatchedFolder!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Items.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.WatchedFolderScanEventArgs(LM.App.Wpf.ViewModels.WatchedFolder! folder, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner
LM.App.Wpf.ViewModels.WatchedFolderScanner.Attach(LM.App.Wpf.ViewModels.WatchedFolderConfig! config) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.ItemsStaged -> System.EventHandler<LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs!>?
LM.App.Wpf.ViewModels.WatchedFolderScanner.ScanAsync(LM.App.Wpf.ViewModels.WatchedFolder? folder, System.Threading.CancellationToken ct, bool force = false) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFolderScanner.WatchedFolderScanner(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.IAddPipeline
LM.App.Wpf.ViewModels.IAddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.IAddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.Library.ILibraryDocumentService
LM.App.Wpf.Library.ILibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.ILibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.LibraryDocumentService
LM.App.Wpf.Library.LibraryDocumentService.LibraryDocumentService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.IAttachmentMetadataPrompt
LM.App.Wpf.Library.IAttachmentMetadataPrompt.RequestMetadataAsync(LM.App.Wpf.Library.AttachmentMetadataPromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.AttachmentMetadataPromptResult?>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.get -> string!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.AttachmentMetadataPromptContext(string! EntryTitle, System.Collections.Generic.IReadOnlyList<string!>! FilePaths) -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>!
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult.AttachmentMetadataPromptResult(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>! Attachments) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection
LM.App.Wpf.Library.AttachmentMetadataSelection.AttachmentMetadataSelection(string! SourcePath, string! Title, LM.Core.Models.AttachmentKind Kind, System.Collections.Generic.IReadOnlyList<string!>! Tags) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.get -> LM.Core.Models.AttachmentKind
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.init -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LibraryFiltersViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! presetStore, LM.App.Wpf.Common.ILibraryPresetPrompt! presetPrompt, LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.SavedSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.get -> string
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedSearchPresetViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, LM.App.Wpf.Library.LibraryFilterPreset! preset, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Summary.get -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.ToSummary() -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.SavedSearchTreeChangedEventArgs(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! presets) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.SavedSearchTreeViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.TreeChanged -> System.EventHandler<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs!>?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ClearCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyPresetAsync(LM.App.Wpf.Common.LibraryPresetSummary! summary, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyState(LM.App.Wpf.Library.LibraryFilterState! state) -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.CaptureState() -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTooltip.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTokens.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.BuildFullTextQuery(string! normalizedQuery) -> LM.Core.Models.Search.FullTextSearchQuery!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.HasSavedPresets.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.GetNormalizedFullTextQuery() -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.NavigationRoots.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RefreshNavigationAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedPresets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedSearches.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleLeftPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleRightPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SortOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RemoveTagCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand<string?>!
LM.App.Wpf.ViewModels.Library.LibrarySortOption
LM.App.Wpf.ViewModels.Library.LibrarySortOption.LibrarySortOption(string! key, string! displayName) -> void
LM.App.Wpf.ViewModels.Library.LibrarySortOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOptions
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.Category = 0 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.SavedSearch = 1 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchEntry = 2 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchRun = 3 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.LibraryNavigationNodeViewModel(string! name, LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.HasChildren.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Kind.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.get -> object?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.init -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.LibraryColumnOption(string! key, string! displayName, bool isVisible) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LibraryColumnVisibility() -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LoadFrom(System.Collections.Generic.IReadOnlyDictionary<string!, bool>! source) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.Snapshot() -> System.Collections.Generic.IReadOnlyDictionary<string!, bool>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LibraryResultsViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.App.Wpf.Library.ILibraryEntryEditor! entryEditor, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.Library.IAttachmentMetadataPrompt! attachmentPrompt, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.Core.Abstractions.IHasher! hasher, LM.App.Wpf.Services.Pdf.IPdfViewerLauncher! pdfViewerLauncher) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadFullTextResultsAsync(System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.FullTextSearchHit!>! hits, System.Func<LM.Core.Models.Entry!, bool>? entryFilter = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadMetadataResults(System.Collections.Generic.IEnumerable<LM.Core.Models.Entry!>! entries) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResetSortForSearch(LM.App.Wpf.ViewModels.Library.LibrarySortOption! defaultOption) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridLoaded(System.Windows.RoutedEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridSorting(System.Windows.Controls.DataGridSortingEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.MarkAsMetadataResults() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResultsAreFullText.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.get -> LM.App.Wpf.ViewModels.LibrarySearchResult?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LinkItems.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryLinkItem!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.EditEntryAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelection.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedItems.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectionChanged -> System.EventHandler?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelectedAbstract.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ToggleBlacklistAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.get -> int
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.LibraryCollectionFolderViewModel(LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! tree, string! id, string! name, LM.App.Wpf.Library.Collections.LibraryCollectionMetadata! metadata) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.LibraryCollectionsViewModel(LM.App.Wpf.Library.Collections.LibraryCollectionStore! store, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPrimaryAttachment.get -> bool
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.LibrarySearchQueryBox() -> void
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.get -> string!
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel
LM.App.Wpf.ViewModels.LibraryViewModel.Filters.get -> LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LibraryViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFullTextSearchService! fullTextSearch, LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel! filters, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.Configuration.IUserPreferencesStore! preferencesStore, LM.App.Wpf.Common.IClipboardService! clipboard, LM.App.Wpf.Common.IFileExplorerService! fileExplorer, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! litSearchOrganizer, LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! collections, LM.App.Wpf.Library.Collections.LibraryCollectionStore! collectionStore) -> void
LM.App.Wpf.ViewModels.LibraryViewModel.Results.get -> LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.Collections.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibraryColumnOption!>!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnVisibility.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility!
LM.App.Wpf.ViewModels.SearchItemViewModel
LM.App.Wpf.ViewModels.SearchItemViewModel.Header.get -> string!
LM.App.Wpf.ViewModels.SearchItemViewModel.SearchItemViewModel(string! header, LM.App.Wpf.ViewModels.LibraryViewModel! vm) -> void
LM.App.Wpf.ViewModels.SearchItemViewModel.Vm.get -> LM.App.Wpf.ViewModels.LibraryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel
LM.App.Wpf.ViewModels.SearchViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.SearchViewModel.ExportSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.From.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.LoadSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRuns.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.PreviousSearchSummary!>!
LM.App.Wpf.ViewModels.SearchViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRunsCount.get -> int
LM.App.Wpf.ViewModels.SearchViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.SearchViewModel.Query.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.get -> LM.Core.Models.SearchHit?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RunSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SaveSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleLeftPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleRightPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SearchViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IWorkSpaceService! ws, LM.App.Wpf.Common.ISearchSavePrompt! savePrompt, LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel! providers, LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel! history, LM.Infrastructure.Search.PubMedSearchProvider! pubMedProvider, LM.Core.Abstractions.Configuration.IUserPreferencesStore? preferencesStore = null) -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.get -> LM.App.Wpf.ViewModels.PreviousSearchSummary?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.StartPreviousRunCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ShowRunDetailsCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleFavoriteCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.To.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.History.get -> LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel.Providers.get -> LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecordExecutionAsync(LM.Core.Models.Search.SearchExecutionResult! result, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.SearchHistoryViewModel(LM.Core.Abstractions.Configuration.ISearchHistoryStore! store) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.ExecuteSearchAsync() -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.RunSearchCommand.get -> LM.App.Wpf.Common.AsyncRelayCommand!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchExecuted -> System.EventHandler<LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs!>?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchProvidersViewModel(LM.Core.Abstractions.Search.ISearchExecutionService! executionService) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.set -> void
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.Result.get -> LM.Core.Models.Search.SearchExecutionResult!
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.SearchExecutedEventArgs(LM.Core.Models.Search.SearchExecutionResult! result) -> void
LM.App.Wpf.ViewModels.PreviousSearchSummary
LM.App.Wpf.ViewModels.PreviousSearchSummary.DisplayName.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.EntryId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.FavoriteRunId.get -> string?
LM.App.Wpf.ViewModels.PreviousSearchSummary.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastRunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.Provider.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.Query.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunCount.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TotalHits.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TagsDisplay.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption
LM.App.Wpf.ViewModels.SearchDatabaseOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption.SearchDatabaseOption(LM.Core.Models.SearchDatabase value, string! displayName) -> void
LM.App.Wpf.ViewModels.SearchDatabaseOption.Value.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.StagingItem
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.get -> LM.HubSpoke.Models.ArticleHook?
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.DisplayName.get -> string?
LM.App.Wpf.ViewModels.StagingItem.DisplayName.set -> void
LM.App.Wpf.ViewModels.StagingItem.Doi.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Doi.set -> void
LM.App.Wpf.ViewModels.StagingItem.FilePath.get -> string!
LM.App.Wpf.ViewModels.StagingItem.FilePath.set -> void
LM.App.Wpf.ViewModels.StagingItem.Internal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Internal.set -> void
LM.App.Wpf.ViewModels.StagingItem.InternalId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.InternalId.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsDuplicate.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsNearMatch.get -> bool
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Notes.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Notes.set -> void
LM.App.Wpf.ViewModels.StagingItem.OriginalFileName.get -> string!
LM.App.Wpf.ViewModels.StagingItem.Pmid.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Pmid.set -> void
LM.App.Wpf.ViewModels.StagingItem.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingItem.Selected.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Selected.set -> void
LM.App.Wpf.ViewModels.StagingItem.Similarity.get -> double
LM.App.Wpf.ViewModels.StagingItem.Similarity.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Source.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Source.set -> void
LM.App.Wpf.ViewModels.StagingItem.StagingItem() -> void
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.get -> string!
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.set -> void
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.Title.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Title.set -> void
LM.App.Wpf.ViewModels.StagingItem.Type.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingItem.Type.set -> void
LM.App.Wpf.ViewModels.StagingItem.Year.get -> int?
LM.App.Wpf.ViewModels.StagingItem.Year.set -> void
LM.App.Wpf.Views.AddView
LM.App.Wpf.Views.Behaviors.FileDropRequest
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.get -> System.Windows.DragEventArgs!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.get -> object?
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.FileDropRequest(System.Collections.Generic.IReadOnlyList<string!>! Paths, object? DropTarget, System.Windows.DragEventArgs! Args) -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.init -> void
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior.SavedSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.AddView.AddView() -> void
LM.App.Wpf.Views.AddView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog
LM.App.Wpf.Views.LibraryPresetPickerDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.LibraryPresetPickerDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel!
LM.App.Wpf.Views.LibraryPresetPrompt.LibraryPresetPrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.InitializeComponent() -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.AttachmentMetadataDialog(LM.App.Wpf.ViewModels.Library.AttachmentMetadataDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog
LM.App.Wpf.Views.LibraryPresetSaveDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.LibraryPresetSaveDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel!
LM.App.Wpf.Views.LibraryView
LM.App.Wpf.Views.LibraryView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryView.LibraryView() -> void
LM.App.Wpf.Views.PdfViewer
LM.App.Wpf.Views.PdfViewer.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewer.PdfViewer() -> void
LM.App.Wpf.Views.Library.TagTokenSelector
LM.App.Wpf.Views.Library.TagTokenSelector.InitializeComponent() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.FilteredSuggestions.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>?
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.set -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagTokenSelector() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.get -> System.Collections.Generic.IEnumerable<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.set -> void
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTagsProperty
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabularyProperty
LM.App.Wpf.Views.LibraryPresetPrompt
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Views.Review.Controls.DecisionBadge
LM.App.Wpf.Views.Review.Controls.DecisionBadge.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.DecisionBadge() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.get -> LM.Review.Core.Models.ScreeningStatus
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.set -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.ExtractionFieldEditor() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.ScreeningQueueControl() -> void
LM.App.Wpf.Views.Review.ReviewView
LM.App.Wpf.Views.Review.ReviewView.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ReviewView.ReviewView() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.LitSearchRunPickerWindow(LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel!
LM.App.Wpf.Views.Review.ProjectEditorWindow
LM.App.Wpf.Views.Review.ProjectEditorWindow.Attach(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.ProjectEditorWindow() -> void
LM.App.Wpf.Views.SearchSavePrompt
LM.App.Wpf.Views.SearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Views.SearchSavePrompt.SearchSavePrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.DataGridColumnVisibilityBehavior() -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.set -> void
LM.App.Wpf.Views.SearchView
LM.App.Wpf.Views.SearchView.InitializeComponent() -> void
LM.App.Wpf.Views.SearchView.SearchView() -> void
LM.App.Wpf.Views.ShellWindow
LM.App.Wpf.Views.ShellWindow.InitializeComponent() -> void
LM.App.Wpf.Views.ShellWindow.LoadWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.NewWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.ShellWindow() -> void
LM.App.Wpf.Views.StagingEditorWindow
LM.App.Wpf.Views.StagingEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.StagingEditorWindow.StagingEditorWindow(LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel! viewModel) -> void
override LM.App.Wpf.ViewModels.Library.LibrarySortOption.ToString() -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Name.get -> string!
override LM.App.Wpf.Views.Library.AttachmentMetadataDialog.OnClosed(System.EventArgs! e) -> void
LM.App.Wpf.Views.WorkspaceChooser
LM.App.Wpf.Views.WorkspaceChooser.InitializeComponent() -> void
LM.App.Wpf.Views.WorkspaceChooser.SelectedWorkspacePath.get -> string?
LM.App.Wpf.Views.WorkspaceChooser.WorkspaceChooser(LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel! viewModel) -> void
LM.App.Wpf.Views.WorkspaceChooser.Configure(System.Action<LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel!>! configure) -> void
override LM.App.Wpf.App.OnExit(System.Windows.ExitEventArgs! e) -> void
override LM.App.Wpf.App.OnStartup(System.Windows.StartupEventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetPickerDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetSaveDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.StagingEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.WorkspaceChooser.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.ProjectEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.OnClosed(System.EventArgs! e) -> void
static LM.App.Wpf.App.Main() -> void
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.All.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.NewestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.OldestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleAscending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleDescending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Clone() -> LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.LitSearchOrganizerStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveEntryAsync(string! entryId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.SyncEntriesAsync(System.Collections.Generic.IEnumerable<string!>! entryIds, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema.CurrentVersion -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.LitSearchEntryViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! title, string? query) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Query.get -> string?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.CanDelete.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsRoot.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.LitSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! name, bool isRoot) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.LitSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.LitSearchRunViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! runId, string! label, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel! parent) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.LitSearchTreeViewModel(LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt, LM.Core.Abstractions.IEntryStore! entryStore, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
---------- LM.App.Wpf ----------
#nullable enable
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.ColumnKeyProperty -> System.Windows.DependencyProperty!
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.GetColumnKey(System.Windows.DependencyObject! element) -> string?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.SetColumnKey(System.Windows.DependencyObject! element, string? value) -> void
#nullable enable
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Id.get -> string!
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.IsDraggable.get -> bool
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Name.get -> string!
const LM.App.Wpf.Library.LibraryPresetFolder.RootId = "root" -> string!
const LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.RootId = "root" -> string!
const LM.App.Wpf.ViewModels.StagingItem.DuplicateThreshold = 0.999 -> double
const LM.App.Wpf.ViewModels.StagingItem.NearThreshold = 0.75 -> double
LM.App.Wpf.App
LM.App.Wpf.App.App() -> void
LM.App.Wpf.App.InitializeComponent() -> void
LM.App.Wpf.Common.AsyncRelayCommand
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<object?, System.Threading.Tasks.Task!>! execute, System.Func<object?, bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<System.Threading.Tasks.Task!>! execute, System.Func<bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.AsyncRelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.AsyncRelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.AsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.IAsyncRelayCommand
LM.App.Wpf.Common.IAsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter
LM.App.Wpf.Common.BooleanToOpacityConverter.BooleanToOpacityConverter() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.set -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.set -> void
LM.App.Wpf.Common.Converters.ProjectEditorConverters
LM.App.Wpf.Common.Converters.ProjectEditorConverters.StageSelectionEquality.get -> System.Windows.Data.IMultiValueConverter!
LM.App.Wpf.Common.LibraryPresetSaveContext.LibraryPresetSaveContext(string! DefaultName, System.Collections.Generic.IReadOnlyCollection<string!>! ExistingNames, string! Title = "Save Library Preset", string! Prompt = "Name this filter preset.") -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.LibraryCollectionEntry() -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.DeletePresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
LM.App.Wpf.Library.LibraryFilterState.Tags.get -> string![]!
LM.App.Wpf.Library.LibraryPresetFolder.EnumerateChildren() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.LibraryPresetTreeItem>!
LM.App.Wpf.Library.LibraryPresetNodeKind.Folder = 0 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetNodeKind.Preset = 1 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.LitSearchOrganizerEntry() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.LitSearchOrganizerFolder() -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectBlueprint(string! projectId, string! name, System.DateTimeOffset createdAtUtc, string! createdBy, string! litSearchEntryId, string! litSearchRunId, System.Collections.Generic.IReadOnlyList<string!>! checkedEntryIds, string? hookRelativePath, LM.Review.Core.Models.ReviewTemplateKind template, string! metadataNotes, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>! stages) -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CheckedEntryIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedAtUtc.get -> System.DateTimeOffset
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedBy.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.HookRelativePath.get -> string?
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchEntryId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchRunId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Template.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.MetadataNotes.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Stages.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.With(string? name = null, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>? stages = null, LM.Review.Core.Models.ReviewTemplateKind? template = null, string? metadataNotes = null, string? litSearchEntryId = null, string? litSearchRunId = null, System.Collections.Generic.IReadOnlyList<string!>? checkedEntryIds = null) -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint!
LM.App.Wpf.Services.Review.Design.StageBlueprint
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageBlueprint(string! stageId, string! name, LM.Review.Core.Models.ReviewStageType stageType, int primaryReviewers, int secondaryReviewers, bool requiresConsensus, int minimumAgreements, bool escalateOnDisagreement, LM.Review.Core.Models.StageDisplayProfile! displayProfile) -> void
LM.App.Wpf.Services.Review.Design.StageBlueprint.EscalateOnDisagreement.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.MinimumAgreements.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.PrimaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.RequiresConsensus.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.SecondaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageId.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.Services.Review.Design.StageBlueprint.DisplayProfile.get -> LM.Review.Core.Models.StageDisplayProfile!
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher.Show(string! entryId, string! pdfAbsolutePath, string! pdfHash) -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.AddSelectionToFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.MoveFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RemoveSelectionFromFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ItemsView.get -> System.ComponentModel.ICollectionView!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.LitSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.SavedSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SavedSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeletePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.LoadPresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.LibraryViewModel.AllTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.LibraryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.LitSearchOrganizer.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LoadCollectionEntriesAsync(string! collectionId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.OpenPdfAnnotationsCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.LibraryViewModel.RefreshTagsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.ToggleBlacklistCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationTypeDisplay.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Dispose() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.HighlightBrush.get -> System.Windows.Media.Brush!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.PdfAnnotationColorCommandParameter() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior.CollectionTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior.LitSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter
LM.App.Wpf.Views.Converters.EnumEqualsConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.EnumEqualsConverter() -> void
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.InverseBooleanToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.AnnotationColorParameterConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.Convert(object?[]! values, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.ConvertBack(object? value, System.Type![]! targetTypes, object? parameter, System.Globalization.CultureInfo! culture) -> object?[]!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NullOrEmptyToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList
LM.App.Wpf.Views.Pdf.PdfAnnotationList.PdfAnnotationList() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow
LM.App.Wpf.Views.PdfViewerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow.PdfViewerWindow() -> void
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.PdfViewerHostObject(LM.App.Wpf.Views.PdfViewer! owner) -> void
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogCloseRequestedEventArgs(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogResult.get -> bool?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.CloseRequested -> System.EventHandler<LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs!>?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.DialogViewModelBase() -> void
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.RequestClose(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.IDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.WpfDialogService(System.IServiceProvider! services) -> void
LM.App.Wpf.Common.ILibraryPresetPrompt
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Common.IClipboardService
LM.App.Wpf.Common.IClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.ClipboardService
LM.App.Wpf.Common.ClipboardService.ClipboardService() -> void
LM.App.Wpf.Common.ClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.IFileExplorerService
LM.App.Wpf.Common.IFileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.FileExplorerService
LM.App.Wpf.Common.FileExplorerService.FileExplorerService() -> void
LM.App.Wpf.Common.FileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.ISearchSavePrompt
LM.App.Wpf.Common.ISearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Common.SearchSavePromptContext
LM.App.Wpf.Common.SearchSavePromptContext.Database.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.From.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.Query.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.SearchSavePromptContext(string! Query, LM.Core.Models.SearchDatabase Database, System.DateTime? From, System.DateTime? To, string! DefaultName, string! DefaultNotes, System.Collections.Generic.IReadOnlyList<string!>! DefaultTags) -> void
LM.App.Wpf.Common.SearchSavePromptContext.Database.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.SearchSavePromptContext.From.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.Query.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.To.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.To.init -> void
LM.App.Wpf.Common.SearchSavePromptResult
LM.App.Wpf.Common.SearchSavePromptResult.Name.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Notes.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Tags.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.SearchSavePromptResult(string! Name, string! Notes, string! Tags) -> void
LM.App.Wpf.Common.SearchSavePromptResult.Name.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Notes.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Tags.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSaveResult
LM.App.Wpf.Common.LibraryPresetSaveResult.LibraryPresetSaveResult(string! Name) -> void
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.get -> bool
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.LibraryPresetSelectionContext(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! Presets, bool AllowLoad, string! Title) -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.LibraryPresetSelectionResult(string? SelectedPresetId, System.Collections.Generic.IReadOnlyList<string!>! DeletedPresetIds) -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.get -> string?
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.init -> void
LM.App.Wpf.Common.LibraryPresetSummary
LM.App.Wpf.Common.LibraryPresetSummary.Id.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Id.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.LibraryPresetSummary(string! Id, string! Name, System.DateTime SavedUtc) -> void
LM.App.Wpf.Common.LibraryPresetSummary.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.get -> System.DateTime
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.init -> void
LM.App.Wpf.Common.RelayCommand
LM.App.Wpf.Common.RelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.RelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.RelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.RelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.RelayCommand.RelayCommand(System.Action<object?>! exec, System.Func<object?, bool>? can = null) -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.get -> bool
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.init -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.get -> string?
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.init -> void
LM.App.Wpf.Common.Dialogs.FolderPickerOptions
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.get -> string?
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.init -> void
LM.App.Wpf.Common.Dialogs.IDialogService
LM.App.Wpf.Common.Dialogs.IDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.StringJoinConverter
LM.App.Wpf.Common.StringJoinConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.StringJoinConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.AttachmentGlyphToIconConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.AttachmentGlyphToDescriptionConverter() -> void
LM.App.Wpf.Common.ViewModelBase
LM.App.Wpf.Common.ViewModelBase.ViewModelBase() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Id.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.get -> int
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PdfAnnotation(string! id, string! title) -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.get -> System.Windows.Media.Imaging.BitmapImage?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.Annotations.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Pdf.PdfAnnotation!>!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.ChangeAnnotationColorCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.CopyAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DocumentSource.get -> System.Uri?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.HandleAnnotationSelectionAsync(LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.LoadPdfCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfHash.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfViewerViewModel(LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.App.Wpf.Services.IUserContext! userContext, LM.Core.Abstractions.IPdfAnnotationPreviewStorage! previewStorage, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.Common.IClipboardService! clipboard) -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.RecordAnnotationChangeCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.WebViewBridge.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DeleteAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.Library.LibraryFilterPreset
LM.App.Wpf.Library.LibraryFilterPreset.LibraryFilterPreset() -> void
LM.App.Wpf.Library.LibraryFilterPreset.Id.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Id.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.Name.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Name.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.get -> System.DateTime
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.get -> int
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.State.get -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.Library.LibraryFilterPreset.State.set -> void
LM.App.Wpf.Library.LibraryFilterPresetStore
LM.App.Wpf.Library.LibraryFilterPresetStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.MovePresetAsync(string! presetId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.LibraryFilterPresetStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.ListPresetsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.LibraryFilterPreset!>!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, string? targetFolderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetByIdAsync(string! presetId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
const LM.App.Wpf.Library.Collections.LibraryCollectionFolder.RootId = "collections-root" -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionEntry!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile
LM.App.Wpf.Library.Collections.LibraryCollectionFile.LibraryCollectionFile() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.get -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder?
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.get -> int
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.EnumerateDescendants() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionEntry!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.LibraryCollectionFolder() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.LibraryCollectionMetadata() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore
LM.App.Wpf.Library.Collections.LibraryCollectionStore.AddEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.CreateFolderAsync(string? parentFolderId, string! name, string! createdBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.DeleteFolderAsync(string! folderId, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.LibraryCollectionStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RemoveEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RenameFolderAsync(string! folderId, string! newName, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryPresetFolder
LM.App.Wpf.Library.LibraryPresetFolder.Clone() -> LM.App.Wpf.Library.LibraryPresetFolder!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Id.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Id.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.LibraryPresetFolder() -> void
LM.App.Wpf.Library.LibraryPresetFolder.Name.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Name.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Presets.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryFilterPreset!>!
LM.App.Wpf.Library.LibraryPresetFolder.Presets.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.get -> int
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.set -> void
LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem
LM.App.Wpf.Library.LibraryPresetTreeItem.Folder.get -> LM.App.Wpf.Library.LibraryPresetFolder?
LM.App.Wpf.Library.LibraryPresetTreeItem.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem(LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder, LM.App.Wpf.Library.LibraryPresetFolder? folder, LM.App.Wpf.Library.LibraryFilterPreset? preset) -> void
LM.App.Wpf.Library.LibraryPresetTreeItem.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset?
LM.App.Wpf.Library.LibraryPresetTreeItem.SortOrder.get -> int
LM.App.Wpf.Library.ILibraryEntryEditor
LM.App.Wpf.Library.ILibraryEntryEditor.EditEntryAsync(LM.Core.Models.Entry! entry) -> System.Threading.Tasks.Task<System.Boolean>!
LM.App.Wpf.Library.LibraryFilterState
LM.App.Wpf.Library.LibraryFilterState.LibraryFilterState() -> void
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.get -> bool
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.set -> void
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateFrom.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateFrom.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateTo.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateTo.set -> void
LM.App.Wpf.Library.LibraryFilterState.SortKey.get -> string?
LM.App.Wpf.Library.LibraryFilterState.SortKey.set -> void
LM.App.Wpf.Library.LibraryFilterState.Tags.set -> void
LM.App.Wpf.ViewModels.AddPipeline
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddViewModel
LM.App.Wpf.ViewModels.AddViewModel.AddFilesCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.ViewModels.WatchedFolderScanner? scanner = null, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore? watchedFolderSettings = null, LM.App.Wpf.ViewModels.StagingListViewModel? stagingList = null, LM.App.Wpf.ViewModels.WatchedFoldersViewModel? watchedFolders = null, LM.App.Wpf.Common.Dialogs.IDialogService? dialogService = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.BulkAddFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ClearCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.CommitSelectedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.AddViewModel.Current.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.AddViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.AddViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.AddViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.AddViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.AddViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.AddViewModel.ReviewStagedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Staging.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.AddViewModel.StagingListViewModel.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFolders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFoldersViewModel.get -> LM.App.Wpf.ViewModels.WatchedFoldersViewModel!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.LibraryPresetPickerDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Presets.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.SelectedPresetId.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.EntryId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookAbsolutePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookRelativePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.DisplayLabel.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.ExecutedBy.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.Owner.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.TotalHits.get -> int
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.ConfirmCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.Entries.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.LitSearchRunPickerViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.LibraryPresetSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.set -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Initialize(LM.App.Wpf.Common.SearchSavePromptContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultNotes.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultTags.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.SearchSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingEditorViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingList.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.SelectedWorkspacePath.get -> string?
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.get -> bool
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.WorkspaceChooserViewModel(LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.CanAcceptFileDrop(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleFileDropAsync(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibrarySearchResult
LM.App.Wpf.ViewModels.LibrarySearchResult.Entry.get -> LM.Core.Models.Entry!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasAttachments.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasDoi.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasIdentifiers.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasInternalId.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasLinks.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNct.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPmid.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasRelations.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasSource.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasUserNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.Highlight.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.HighlightDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.IsFullText.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.LibrarySearchResult(LM.Core.Models.Entry! entry, double? score, string? highlight) -> void
LM.App.Wpf.ViewModels.LibrarySearchResult.Score.get -> double?
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentGlyphKind.get -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.TitleSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.YearPresenceSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearDescendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearAscendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SourceSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TypeSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedOnSortKey.get -> System.DateTime
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedBySortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.InternalIdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.DoiSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.PmidSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.NctSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AuthorsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TagsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IsInternalSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SnippetSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreSortKey.get -> double
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.None = 0 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Pdf = 1 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Document = 2 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Presentation = 3 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Generic = 4 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.Library.LibraryLinkItem
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.LibraryLinkItem(string! DisplayText, string! Target, LM.App.Wpf.ViewModels.Library.LinkItemKind Kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.get -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.init -> void
LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Url = 0 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.File = 1 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Folder = 2 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.RunAndBasics = 0 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Metadata = 1 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Workflow = 2 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Summary = 3 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.ProjectEditorStepDescriptor(LM.App.Wpf.ViewModels.Review.ProjectEditorStep Step, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.ReviewTemplateOption(LM.Review.Core.Models.ReviewTemplateKind Kind, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectEditorViewModel() -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.AddStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntryCount.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntrySummary.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ErrorMessage.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.HookRelativePath.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Initialize(LM.App.Wpf.Services.Review.Design.ProjectBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchEntryId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchRunId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageDownCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageUpCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.RemoveStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Result.get -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SaveCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.get -> LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.StageTypes.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStageType>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Stages.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Steps.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.TemplateOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStep.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepDescriptor.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepIndex.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsSummaryStep.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.get -> LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateKind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.NextCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.BackCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ChangeRunCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ConfigureRunReloadHandler(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.App.Wpf.Services.Review.Design.ProjectBlueprint?>!>! handler) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.StageDisplayOptionViewModel(LM.Review.Core.Models.StageContentArea area, bool isSelected) -> void
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Area.get -> LM.Review.Core.Models.StageContentArea
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Description.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.get -> bool
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageBlueprintViewModel(LM.App.Wpf.Services.Review.Design.StageBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageId.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TotalReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.DisplayOptions.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel!>!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TryBuild(out LM.App.Wpf.Services.Review.Design.StageBlueprint! stage, out string? errorMessage) -> bool
LM.App.Wpf.ViewModels.StagingListViewModel
LM.App.Wpf.ViewModels.StagingListViewModel.AddStagedItemsAsync(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Clear() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.CommitSelectedAsync(System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.StagingListViewModel.Current.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.StagingListViewModel.HasItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.HasSelectedItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.StagingListViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.StagingListViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingListViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.StagingListViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.SetCommandGuard(System.Func<System.Func<System.Threading.Tasks.Task!>!, System.Threading.Tasks.Task!>! guard) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.UpdateParentBusy(bool isBusy) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.WatchedFoldersViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList, LM.App.Wpf.ViewModels.WatchedFolderScanner! scanner, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore! settingsStore, LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.WatchedFolder
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.get -> bool
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.LastScanDisplay.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.LastScanUtc.get -> System.DateTimeOffset?
LM.App.Wpf.ViewModels.WatchedFolder.LastScanWasUnchanged.get -> bool?
LM.App.Wpf.ViewModels.WatchedFolder.Path.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.Path.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFolder.ResetScanState() -> void
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusLabel.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusToolTip.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.WatchedFolder() -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(string! path) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig
LM.App.Wpf.ViewModels.WatchedFolderConfig.ApplyState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.ClearState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFolderConfig.CreateSnapshot() -> LM.Core.Models.WatchedFolderSettings!
LM.App.Wpf.ViewModels.WatchedFolderConfig.Load(LM.Core.Models.WatchedFolderSettings! settings) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.StoreState(LM.App.Wpf.ViewModels.WatchedFolder! folder, LM.Core.Models.WatchedFolderState! state) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.WatchedFolderConfig() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Folder.get -> LM.App.Wpf.ViewModels.WatchedFolder!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Items.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.WatchedFolderScanEventArgs(LM.App.Wpf.ViewModels.WatchedFolder! folder, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner
LM.App.Wpf.ViewModels.WatchedFolderScanner.Attach(LM.App.Wpf.ViewModels.WatchedFolderConfig! config) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.ItemsStaged -> System.EventHandler<LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs!>?
LM.App.Wpf.ViewModels.WatchedFolderScanner.ScanAsync(LM.App.Wpf.ViewModels.WatchedFolder? folder, System.Threading.CancellationToken ct, bool force = false) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFolderScanner.WatchedFolderScanner(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.IAddPipeline
LM.App.Wpf.ViewModels.IAddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.IAddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.Library.ILibraryDocumentService
LM.App.Wpf.Library.ILibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.ILibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.LibraryDocumentService
LM.App.Wpf.Library.LibraryDocumentService.LibraryDocumentService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.IAttachmentMetadataPrompt
LM.App.Wpf.Library.IAttachmentMetadataPrompt.RequestMetadataAsync(LM.App.Wpf.Library.AttachmentMetadataPromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.AttachmentMetadataPromptResult?>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.get -> string!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.AttachmentMetadataPromptContext(string! EntryTitle, System.Collections.Generic.IReadOnlyList<string!>! FilePaths) -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>!
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult.AttachmentMetadataPromptResult(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>! Attachments) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection
LM.App.Wpf.Library.AttachmentMetadataSelection.AttachmentMetadataSelection(string! SourcePath, string! Title, LM.Core.Models.AttachmentKind Kind, System.Collections.Generic.IReadOnlyList<string!>! Tags) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.get -> LM.Core.Models.AttachmentKind
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.init -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LibraryFiltersViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! presetStore, LM.App.Wpf.Common.ILibraryPresetPrompt! presetPrompt, LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.SavedSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.get -> string
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedSearchPresetViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, LM.App.Wpf.Library.LibraryFilterPreset! preset, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Summary.get -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.ToSummary() -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.SavedSearchTreeChangedEventArgs(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! presets) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.SavedSearchTreeViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.TreeChanged -> System.EventHandler<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs!>?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ClearCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyPresetAsync(LM.App.Wpf.Common.LibraryPresetSummary! summary, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyState(LM.App.Wpf.Library.LibraryFilterState! state) -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.CaptureState() -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTooltip.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTokens.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.BuildFullTextQuery(string! normalizedQuery) -> LM.Core.Models.Search.FullTextSearchQuery!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.HasSavedPresets.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.GetNormalizedFullTextQuery() -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.NavigationRoots.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RefreshNavigationAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedPresets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedSearches.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleLeftPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleRightPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SortOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RemoveTagCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand<string?>!
LM.App.Wpf.ViewModels.Library.LibrarySortOption
LM.App.Wpf.ViewModels.Library.LibrarySortOption.LibrarySortOption(string! key, string! displayName) -> void
LM.App.Wpf.ViewModels.Library.LibrarySortOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOptions
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.Category = 0 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.SavedSearch = 1 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchEntry = 2 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchRun = 3 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.LibraryNavigationNodeViewModel(string! name, LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.HasChildren.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Kind.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.get -> object?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.init -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.LibraryColumnOption(string! key, string! displayName, bool isVisible) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LibraryColumnVisibility() -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LoadFrom(System.Collections.Generic.IReadOnlyDictionary<string!, bool>! source) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.Snapshot() -> System.Collections.Generic.IReadOnlyDictionary<string!, bool>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LibraryResultsViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.App.Wpf.Library.ILibraryEntryEditor! entryEditor, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.Library.IAttachmentMetadataPrompt! attachmentPrompt, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.Core.Abstractions.IHasher! hasher, LM.App.Wpf.Services.Pdf.IPdfViewerLauncher! pdfViewerLauncher) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadFullTextResultsAsync(System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.FullTextSearchHit!>! hits, System.Func<LM.Core.Models.Entry!, bool>? entryFilter = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadMetadataResults(System.Collections.Generic.IEnumerable<LM.Core.Models.Entry!>! entries) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResetSortForSearch(LM.App.Wpf.ViewModels.Library.LibrarySortOption! defaultOption) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridLoaded(System.Windows.RoutedEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridSorting(System.Windows.Controls.DataGridSortingEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.MarkAsMetadataResults() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResultsAreFullText.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.get -> LM.App.Wpf.ViewModels.LibrarySearchResult?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LinkItems.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryLinkItem!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.EditEntryAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelection.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedItems.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectionChanged -> System.EventHandler?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelectedAbstract.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ToggleBlacklistAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.get -> int
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.LibraryCollectionFolderViewModel(LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! tree, string! id, string! name, LM.App.Wpf.Library.Collections.LibraryCollectionMetadata! metadata) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.LibraryCollectionsViewModel(LM.App.Wpf.Library.Collections.LibraryCollectionStore! store, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPrimaryAttachment.get -> bool
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.LibrarySearchQueryBox() -> void
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.get -> string!
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel
LM.App.Wpf.ViewModels.LibraryViewModel.Filters.get -> LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LibraryViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFullTextSearchService! fullTextSearch, LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel! filters, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.Configuration.IUserPreferencesStore! preferencesStore, LM.App.Wpf.Common.IClipboardService! clipboard, LM.App.Wpf.Common.IFileExplorerService! fileExplorer, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! litSearchOrganizer, LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! collections, LM.App.Wpf.Library.Collections.LibraryCollectionStore! collectionStore) -> void
LM.App.Wpf.ViewModels.LibraryViewModel.Results.get -> LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.Collections.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibraryColumnOption!>!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnVisibility.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility!
LM.App.Wpf.ViewModels.SearchItemViewModel
LM.App.Wpf.ViewModels.SearchItemViewModel.Header.get -> string!
LM.App.Wpf.ViewModels.SearchItemViewModel.SearchItemViewModel(string! header, LM.App.Wpf.ViewModels.LibraryViewModel! vm) -> void
LM.App.Wpf.ViewModels.SearchItemViewModel.Vm.get -> LM.App.Wpf.ViewModels.LibraryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel
LM.App.Wpf.ViewModels.SearchViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.SearchViewModel.ExportSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.From.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.LoadSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRuns.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.PreviousSearchSummary!>!
LM.App.Wpf.ViewModels.SearchViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRunsCount.get -> int
LM.App.Wpf.ViewModels.SearchViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.SearchViewModel.Query.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.get -> LM.Core.Models.SearchHit?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RunSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SaveSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleLeftPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleRightPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SearchViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IWorkSpaceService! ws, LM.App.Wpf.Common.ISearchSavePrompt! savePrompt, LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel! providers, LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel! history, LM.Infrastructure.Search.PubMedSearchProvider! pubMedProvider, LM.Core.Abstractions.Configuration.IUserPreferencesStore? preferencesStore = null) -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.get -> LM.App.Wpf.ViewModels.PreviousSearchSummary?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.StartPreviousRunCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ShowRunDetailsCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleFavoriteCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.To.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.History.get -> LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel.Providers.get -> LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecordExecutionAsync(LM.Core.Models.Search.SearchExecutionResult! result, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.SearchHistoryViewModel(LM.Core.Abstractions.Configuration.ISearchHistoryStore! store) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.ExecuteSearchAsync() -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.RunSearchCommand.get -> LM.App.Wpf.Common.AsyncRelayCommand!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchExecuted -> System.EventHandler<LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs!>?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchProvidersViewModel(LM.Core.Abstractions.Search.ISearchExecutionService! executionService) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.set -> void
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.Result.get -> LM.Core.Models.Search.SearchExecutionResult!
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.SearchExecutedEventArgs(LM.Core.Models.Search.SearchExecutionResult! result) -> void
LM.App.Wpf.ViewModels.PreviousSearchSummary
LM.App.Wpf.ViewModels.PreviousSearchSummary.DisplayName.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.EntryId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.FavoriteRunId.get -> string?
LM.App.Wpf.ViewModels.PreviousSearchSummary.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastRunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.Provider.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.Query.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunCount.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TotalHits.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TagsDisplay.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption
LM.App.Wpf.ViewModels.SearchDatabaseOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption.SearchDatabaseOption(LM.Core.Models.SearchDatabase value, string! displayName) -> void
LM.App.Wpf.ViewModels.SearchDatabaseOption.Value.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.StagingItem
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.get -> LM.HubSpoke.Models.ArticleHook?
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.DisplayName.get -> string?
LM.App.Wpf.ViewModels.StagingItem.DisplayName.set -> void
LM.App.Wpf.ViewModels.StagingItem.Doi.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Doi.set -> void
LM.App.Wpf.ViewModels.StagingItem.FilePath.get -> string!
LM.App.Wpf.ViewModels.StagingItem.FilePath.set -> void
LM.App.Wpf.ViewModels.StagingItem.Internal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Internal.set -> void
LM.App.Wpf.ViewModels.StagingItem.InternalId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.InternalId.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsDuplicate.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsNearMatch.get -> bool
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Notes.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Notes.set -> void
LM.App.Wpf.ViewModels.StagingItem.OriginalFileName.get -> string!
LM.App.Wpf.ViewModels.StagingItem.Pmid.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Pmid.set -> void
LM.App.Wpf.ViewModels.StagingItem.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingItem.Selected.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Selected.set -> void
LM.App.Wpf.ViewModels.StagingItem.Similarity.get -> double
LM.App.Wpf.ViewModels.StagingItem.Similarity.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Source.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Source.set -> void
LM.App.Wpf.ViewModels.StagingItem.StagingItem() -> void
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.get -> string!
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.set -> void
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.Title.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Title.set -> void
LM.App.Wpf.ViewModels.StagingItem.Type.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingItem.Type.set -> void
LM.App.Wpf.ViewModels.StagingItem.Year.get -> int?
LM.App.Wpf.ViewModels.StagingItem.Year.set -> void
LM.App.Wpf.Views.AddView
LM.App.Wpf.Views.Behaviors.FileDropRequest
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.get -> System.Windows.DragEventArgs!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.get -> object?
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.FileDropRequest(System.Collections.Generic.IReadOnlyList<string!>! Paths, object? DropTarget, System.Windows.DragEventArgs! Args) -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.init -> void
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior.SavedSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.AddView.AddView() -> void
LM.App.Wpf.Views.AddView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog
LM.App.Wpf.Views.LibraryPresetPickerDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.LibraryPresetPickerDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel!
LM.App.Wpf.Views.LibraryPresetPrompt.LibraryPresetPrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.InitializeComponent() -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.AttachmentMetadataDialog(LM.App.Wpf.ViewModels.Library.AttachmentMetadataDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog
LM.App.Wpf.Views.LibraryPresetSaveDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.LibraryPresetSaveDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel!
LM.App.Wpf.Views.LibraryView
LM.App.Wpf.Views.LibraryView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryView.LibraryView() -> void
LM.App.Wpf.Views.PdfViewer
LM.App.Wpf.Views.PdfViewer.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewer.PdfViewer() -> void
LM.App.Wpf.Views.Library.TagTokenSelector
LM.App.Wpf.Views.Library.TagTokenSelector.InitializeComponent() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.FilteredSuggestions.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>?
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.set -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagTokenSelector() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.get -> System.Collections.Generic.IEnumerable<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.set -> void
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTagsProperty
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabularyProperty
LM.App.Wpf.Views.LibraryPresetPrompt
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Views.Review.Controls.DecisionBadge
LM.App.Wpf.Views.Review.Controls.DecisionBadge.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.DecisionBadge() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.get -> LM.Review.Core.Models.ScreeningStatus
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.set -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.ExtractionFieldEditor() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.ScreeningQueueControl() -> void
LM.App.Wpf.Views.Review.ReviewView
LM.App.Wpf.Views.Review.ReviewView.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ReviewView.ReviewView() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.LitSearchRunPickerWindow(LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel!
LM.App.Wpf.Views.Review.ProjectEditorWindow
LM.App.Wpf.Views.Review.ProjectEditorWindow.Attach(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.ProjectEditorWindow() -> void
LM.App.Wpf.Views.SearchSavePrompt
LM.App.Wpf.Views.SearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Views.SearchSavePrompt.SearchSavePrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.DataGridColumnVisibilityBehavior() -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.set -> void
LM.App.Wpf.Views.SearchView
LM.App.Wpf.Views.SearchView.InitializeComponent() -> void
LM.App.Wpf.Views.SearchView.SearchView() -> void
LM.App.Wpf.Views.ShellWindow
LM.App.Wpf.Views.ShellWindow.InitializeComponent() -> void
LM.App.Wpf.Views.ShellWindow.LoadWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.NewWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.ShellWindow() -> void
LM.App.Wpf.Views.StagingEditorWindow
LM.App.Wpf.Views.StagingEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.StagingEditorWindow.StagingEditorWindow(LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel! viewModel) -> void
override LM.App.Wpf.ViewModels.Library.LibrarySortOption.ToString() -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Name.get -> string!
override LM.App.Wpf.Views.Library.AttachmentMetadataDialog.OnClosed(System.EventArgs! e) -> void
LM.App.Wpf.Views.WorkspaceChooser
LM.App.Wpf.Views.WorkspaceChooser.InitializeComponent() -> void
LM.App.Wpf.Views.WorkspaceChooser.SelectedWorkspacePath.get -> string?
LM.App.Wpf.Views.WorkspaceChooser.WorkspaceChooser(LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel! viewModel) -> void
LM.App.Wpf.Views.WorkspaceChooser.Configure(System.Action<LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel!>! configure) -> void
override LM.App.Wpf.App.OnExit(System.Windows.ExitEventArgs! e) -> void
override LM.App.Wpf.App.OnStartup(System.Windows.StartupEventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetPickerDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetSaveDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.StagingEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.WorkspaceChooser.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.ProjectEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.OnClosed(System.EventArgs! e) -> void
static LM.App.Wpf.App.Main() -> void
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.All.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.NewestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.OldestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleAscending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleDescending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Clone() -> LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.LitSearchOrganizerStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveEntryAsync(string! entryId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.SyncEntriesAsync(System.Collections.Generic.IEnumerable<string!>! entryIds, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema.CurrentVersion -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.LitSearchEntryViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! title, string? query) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Query.get -> string?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.CanDelete.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsRoot.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.LitSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! name, bool isRoot) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.LitSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.LitSearchRunViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! runId, string! label, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel! parent) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.LitSearchTreeViewModel(LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt, LM.Core.Abstractions.IEntryStore! entryStore, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
---------- LM.App.Wpf ----------
#nullable enable
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.ColumnKeyProperty -> System.Windows.DependencyProperty!
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.GetColumnKey(System.Windows.DependencyObject! element) -> string?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.SetColumnKey(System.Windows.DependencyObject! element, string? value) -> void
#nullable enable
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Id.get -> string!
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.IsDraggable.get -> bool
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Name.get -> string!
const LM.App.Wpf.Library.LibraryPresetFolder.RootId = "root" -> string!
const LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.RootId = "root" -> string!
const LM.App.Wpf.ViewModels.StagingItem.DuplicateThreshold = 0.999 -> double
const LM.App.Wpf.ViewModels.StagingItem.NearThreshold = 0.75 -> double
LM.App.Wpf.App
LM.App.Wpf.App.App() -> void
LM.App.Wpf.App.InitializeComponent() -> void
LM.App.Wpf.Common.AsyncRelayCommand
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<object?, System.Threading.Tasks.Task!>! execute, System.Func<object?, bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<System.Threading.Tasks.Task!>! execute, System.Func<bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.AsyncRelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.AsyncRelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.AsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.IAsyncRelayCommand
LM.App.Wpf.Common.IAsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter
LM.App.Wpf.Common.BooleanToOpacityConverter.BooleanToOpacityConverter() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.set -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.set -> void
LM.App.Wpf.Common.Converters.ProjectEditorConverters
LM.App.Wpf.Common.Converters.ProjectEditorConverters.StageSelectionEquality.get -> System.Windows.Data.IMultiValueConverter!
LM.App.Wpf.Common.LibraryPresetSaveContext.LibraryPresetSaveContext(string! DefaultName, System.Collections.Generic.IReadOnlyCollection<string!>! ExistingNames, string! Title = "Save Library Preset", string! Prompt = "Name this filter preset.") -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.LibraryCollectionEntry() -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.DeletePresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
LM.App.Wpf.Library.LibraryFilterState.Tags.get -> string![]!
LM.App.Wpf.Library.LibraryPresetFolder.EnumerateChildren() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.LibraryPresetTreeItem>!
LM.App.Wpf.Library.LibraryPresetNodeKind.Folder = 0 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetNodeKind.Preset = 1 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.LitSearchOrganizerEntry() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.LitSearchOrganizerFolder() -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectBlueprint(string! projectId, string! name, System.DateTimeOffset createdAtUtc, string! createdBy, string! litSearchEntryId, string! litSearchRunId, System.Collections.Generic.IReadOnlyList<string!>! checkedEntryIds, string? hookRelativePath, LM.Review.Core.Models.ReviewTemplateKind template, string! metadataNotes, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>! stages) -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CheckedEntryIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedAtUtc.get -> System.DateTimeOffset
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedBy.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.HookRelativePath.get -> string?
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchEntryId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchRunId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Template.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.MetadataNotes.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Stages.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.With(string? name = null, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>? stages = null, LM.Review.Core.Models.ReviewTemplateKind? template = null, string? metadataNotes = null, string? litSearchEntryId = null, string? litSearchRunId = null, System.Collections.Generic.IReadOnlyList<string!>? checkedEntryIds = null) -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint!
LM.App.Wpf.Services.Review.Design.StageBlueprint
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageBlueprint(string! stageId, string! name, LM.Review.Core.Models.ReviewStageType stageType, int primaryReviewers, int secondaryReviewers, bool requiresConsensus, int minimumAgreements, bool escalateOnDisagreement, LM.Review.Core.Models.StageDisplayProfile! displayProfile) -> void
LM.App.Wpf.Services.Review.Design.StageBlueprint.EscalateOnDisagreement.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.MinimumAgreements.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.PrimaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.RequiresConsensus.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.SecondaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageId.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.Services.Review.Design.StageBlueprint.DisplayProfile.get -> LM.Review.Core.Models.StageDisplayProfile!
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher.Show(string! entryId, string! pdfAbsolutePath, string! pdfHash) -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.AddSelectionToFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.MoveFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RemoveSelectionFromFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ItemsView.get -> System.ComponentModel.ICollectionView!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.LitSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.SavedSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SavedSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeletePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.LoadPresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.LibraryViewModel.AllTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.LibraryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.LitSearchOrganizer.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LoadCollectionEntriesAsync(string! collectionId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.OpenPdfAnnotationsCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.LibraryViewModel.RefreshTagsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.ToggleBlacklistCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationTypeDisplay.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Dispose() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.HighlightBrush.get -> System.Windows.Media.Brush!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.PdfAnnotationColorCommandParameter() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior.CollectionTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior.LitSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter
LM.App.Wpf.Views.Converters.EnumEqualsConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.EnumEqualsConverter() -> void
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.InverseBooleanToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.AnnotationColorParameterConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.Convert(object?[]! values, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.ConvertBack(object? value, System.Type![]! targetTypes, object? parameter, System.Globalization.CultureInfo! culture) -> object?[]!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NullOrEmptyToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList
LM.App.Wpf.Views.Pdf.PdfAnnotationList.PdfAnnotationList() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow
LM.App.Wpf.Views.PdfViewerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow.PdfViewerWindow() -> void
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.PdfViewerHostObject(LM.App.Wpf.Views.PdfViewer! owner) -> void
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogCloseRequestedEventArgs(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogResult.get -> bool?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.CloseRequested -> System.EventHandler<LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs!>?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.DialogViewModelBase() -> void
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.RequestClose(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.IDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.WpfDialogService(System.IServiceProvider! services) -> void
LM.App.Wpf.Common.ILibraryPresetPrompt
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Common.IClipboardService
LM.App.Wpf.Common.IClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.ClipboardService
LM.App.Wpf.Common.ClipboardService.ClipboardService() -> void
LM.App.Wpf.Common.ClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.IFileExplorerService
LM.App.Wpf.Common.IFileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.FileExplorerService
LM.App.Wpf.Common.FileExplorerService.FileExplorerService() -> void
LM.App.Wpf.Common.FileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.ISearchSavePrompt
LM.App.Wpf.Common.ISearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Common.SearchSavePromptContext
LM.App.Wpf.Common.SearchSavePromptContext.Database.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.From.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.Query.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.SearchSavePromptContext(string! Query, LM.Core.Models.SearchDatabase Database, System.DateTime? From, System.DateTime? To, string! DefaultName, string! DefaultNotes, System.Collections.Generic.IReadOnlyList<string!>! DefaultTags) -> void
LM.App.Wpf.Common.SearchSavePromptContext.Database.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.SearchSavePromptContext.From.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.Query.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.To.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.To.init -> void
LM.App.Wpf.Common.SearchSavePromptResult
LM.App.Wpf.Common.SearchSavePromptResult.Name.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Notes.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Tags.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.SearchSavePromptResult(string! Name, string! Notes, string! Tags) -> void
LM.App.Wpf.Common.SearchSavePromptResult.Name.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Notes.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Tags.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSaveResult
LM.App.Wpf.Common.LibraryPresetSaveResult.LibraryPresetSaveResult(string! Name) -> void
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.get -> bool
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.LibraryPresetSelectionContext(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! Presets, bool AllowLoad, string! Title) -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.LibraryPresetSelectionResult(string? SelectedPresetId, System.Collections.Generic.IReadOnlyList<string!>! DeletedPresetIds) -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.get -> string?
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.init -> void
LM.App.Wpf.Common.LibraryPresetSummary
LM.App.Wpf.Common.LibraryPresetSummary.Id.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Id.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.LibraryPresetSummary(string! Id, string! Name, System.DateTime SavedUtc) -> void
LM.App.Wpf.Common.LibraryPresetSummary.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.get -> System.DateTime
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.init -> void
LM.App.Wpf.Common.RelayCommand
LM.App.Wpf.Common.RelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.RelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.RelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.RelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.RelayCommand.RelayCommand(System.Action<object?>! exec, System.Func<object?, bool>? can = null) -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.get -> bool
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.init -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.get -> string?
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.init -> void
LM.App.Wpf.Common.Dialogs.FolderPickerOptions
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.get -> string?
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.init -> void
LM.App.Wpf.Common.Dialogs.IDialogService
LM.App.Wpf.Common.Dialogs.IDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.StringJoinConverter
LM.App.Wpf.Common.StringJoinConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.StringJoinConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.AttachmentGlyphToIconConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.AttachmentGlyphToDescriptionConverter() -> void
LM.App.Wpf.Common.ViewModelBase
LM.App.Wpf.Common.ViewModelBase.ViewModelBase() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Id.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.get -> int
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PdfAnnotation(string! id, string! title) -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.get -> System.Windows.Media.Imaging.BitmapImage?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.Annotations.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Pdf.PdfAnnotation!>!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.ChangeAnnotationColorCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.CopyAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DocumentSource.get -> System.Uri?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.HandleAnnotationSelectionAsync(LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.LoadPdfCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfHash.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfViewerViewModel(LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.App.Wpf.Services.IUserContext! userContext, LM.Core.Abstractions.IPdfAnnotationPreviewStorage! previewStorage, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.Common.IClipboardService! clipboard) -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.RecordAnnotationChangeCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.WebViewBridge.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DeleteAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.Library.LibraryFilterPreset
LM.App.Wpf.Library.LibraryFilterPreset.LibraryFilterPreset() -> void
LM.App.Wpf.Library.LibraryFilterPreset.Id.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Id.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.Name.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Name.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.get -> System.DateTime
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.get -> int
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.State.get -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.Library.LibraryFilterPreset.State.set -> void
LM.App.Wpf.Library.LibraryFilterPresetStore
LM.App.Wpf.Library.LibraryFilterPresetStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.MovePresetAsync(string! presetId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.LibraryFilterPresetStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.ListPresetsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.LibraryFilterPreset!>!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, string? targetFolderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetByIdAsync(string! presetId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
const LM.App.Wpf.Library.Collections.LibraryCollectionFolder.RootId = "collections-root" -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionEntry!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile
LM.App.Wpf.Library.Collections.LibraryCollectionFile.LibraryCollectionFile() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.get -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder?
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.get -> int
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.EnumerateDescendants() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionEntry!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.LibraryCollectionFolder() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.LibraryCollectionMetadata() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore
LM.App.Wpf.Library.Collections.LibraryCollectionStore.AddEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.CreateFolderAsync(string? parentFolderId, string! name, string! createdBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.DeleteFolderAsync(string! folderId, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.LibraryCollectionStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RemoveEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RenameFolderAsync(string! folderId, string! newName, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryPresetFolder
LM.App.Wpf.Library.LibraryPresetFolder.Clone() -> LM.App.Wpf.Library.LibraryPresetFolder!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Id.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Id.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.LibraryPresetFolder() -> void
LM.App.Wpf.Library.LibraryPresetFolder.Name.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Name.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Presets.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryFilterPreset!>!
LM.App.Wpf.Library.LibraryPresetFolder.Presets.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.get -> int
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.set -> void
LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem
LM.App.Wpf.Library.LibraryPresetTreeItem.Folder.get -> LM.App.Wpf.Library.LibraryPresetFolder?
LM.App.Wpf.Library.LibraryPresetTreeItem.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem(LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder, LM.App.Wpf.Library.LibraryPresetFolder? folder, LM.App.Wpf.Library.LibraryFilterPreset? preset) -> void
LM.App.Wpf.Library.LibraryPresetTreeItem.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset?
LM.App.Wpf.Library.LibraryPresetTreeItem.SortOrder.get -> int
LM.App.Wpf.Library.ILibraryEntryEditor
LM.App.Wpf.Library.ILibraryEntryEditor.EditEntryAsync(LM.Core.Models.Entry! entry) -> System.Threading.Tasks.Task<System.Boolean>!
LM.App.Wpf.Library.LibraryFilterState
LM.App.Wpf.Library.LibraryFilterState.LibraryFilterState() -> void
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.get -> bool
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.set -> void
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateFrom.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateFrom.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateTo.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateTo.set -> void
LM.App.Wpf.Library.LibraryFilterState.SortKey.get -> string?
LM.App.Wpf.Library.LibraryFilterState.SortKey.set -> void
LM.App.Wpf.Library.LibraryFilterState.Tags.set -> void
LM.App.Wpf.ViewModels.AddPipeline
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddViewModel
LM.App.Wpf.ViewModels.AddViewModel.AddFilesCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.ViewModels.WatchedFolderScanner? scanner = null, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore? watchedFolderSettings = null, LM.App.Wpf.ViewModels.StagingListViewModel? stagingList = null, LM.App.Wpf.ViewModels.WatchedFoldersViewModel? watchedFolders = null, LM.App.Wpf.Common.Dialogs.IDialogService? dialogService = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.BulkAddFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ClearCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.CommitSelectedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.AddViewModel.Current.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.AddViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.AddViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.AddViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.AddViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.AddViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.AddViewModel.ReviewStagedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Staging.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.AddViewModel.StagingListViewModel.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFolders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFoldersViewModel.get -> LM.App.Wpf.ViewModels.WatchedFoldersViewModel!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.LibraryPresetPickerDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Presets.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.SelectedPresetId.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.EntryId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookAbsolutePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookRelativePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.DisplayLabel.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.ExecutedBy.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.Owner.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.TotalHits.get -> int
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.ConfirmCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.Entries.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.LitSearchRunPickerViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.LibraryPresetSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.set -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Initialize(LM.App.Wpf.Common.SearchSavePromptContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultNotes.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultTags.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.SearchSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingEditorViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingList.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.SelectedWorkspacePath.get -> string?
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.get -> bool
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.WorkspaceChooserViewModel(LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.CanAcceptFileDrop(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleFileDropAsync(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibrarySearchResult
LM.App.Wpf.ViewModels.LibrarySearchResult.Entry.get -> LM.Core.Models.Entry!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasAttachments.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasDoi.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasIdentifiers.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasInternalId.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasLinks.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNct.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPmid.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasRelations.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasSource.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasUserNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.Highlight.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.HighlightDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.IsFullText.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.LibrarySearchResult(LM.Core.Models.Entry! entry, double? score, string? highlight) -> void
LM.App.Wpf.ViewModels.LibrarySearchResult.Score.get -> double?
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentGlyphKind.get -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.TitleSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.YearPresenceSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearDescendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearAscendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SourceSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TypeSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedOnSortKey.get -> System.DateTime
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedBySortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.InternalIdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.DoiSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.PmidSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.NctSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AuthorsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TagsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IsInternalSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SnippetSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreSortKey.get -> double
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.None = 0 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Pdf = 1 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Document = 2 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Presentation = 3 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Generic = 4 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.Library.LibraryLinkItem
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.LibraryLinkItem(string! DisplayText, string! Target, LM.App.Wpf.ViewModels.Library.LinkItemKind Kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.get -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.init -> void
LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Url = 0 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.File = 1 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Folder = 2 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.RunAndBasics = 0 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Metadata = 1 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Workflow = 2 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Summary = 3 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.ProjectEditorStepDescriptor(LM.App.Wpf.ViewModels.Review.ProjectEditorStep Step, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.ReviewTemplateOption(LM.Review.Core.Models.ReviewTemplateKind Kind, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectEditorViewModel() -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.AddStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntryCount.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntrySummary.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ErrorMessage.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.HookRelativePath.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Initialize(LM.App.Wpf.Services.Review.Design.ProjectBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchEntryId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchRunId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageDownCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageUpCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.RemoveStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Result.get -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SaveCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.get -> LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.StageTypes.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStageType>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Stages.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Steps.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.TemplateOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStep.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepDescriptor.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepIndex.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsSummaryStep.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.get -> LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateKind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.NextCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.BackCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ChangeRunCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ConfigureRunReloadHandler(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.App.Wpf.Services.Review.Design.ProjectBlueprint?>!>! handler) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.StageDisplayOptionViewModel(LM.Review.Core.Models.StageContentArea area, bool isSelected) -> void
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Area.get -> LM.Review.Core.Models.StageContentArea
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Description.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.get -> bool
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageBlueprintViewModel(LM.App.Wpf.Services.Review.Design.StageBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageId.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TotalReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.DisplayOptions.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel!>!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TryBuild(out LM.App.Wpf.Services.Review.Design.StageBlueprint! stage, out string? errorMessage) -> bool
LM.App.Wpf.ViewModels.StagingListViewModel
LM.App.Wpf.ViewModels.StagingListViewModel.AddStagedItemsAsync(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Clear() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.CommitSelectedAsync(System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.StagingListViewModel.Current.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.StagingListViewModel.HasItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.HasSelectedItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.StagingListViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.StagingListViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingListViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.StagingListViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.SetCommandGuard(System.Func<System.Func<System.Threading.Tasks.Task!>!, System.Threading.Tasks.Task!>! guard) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.UpdateParentBusy(bool isBusy) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.WatchedFoldersViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList, LM.App.Wpf.ViewModels.WatchedFolderScanner! scanner, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore! settingsStore, LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.WatchedFolder
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.get -> bool
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.LastScanDisplay.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.LastScanUtc.get -> System.DateTimeOffset?
LM.App.Wpf.ViewModels.WatchedFolder.LastScanWasUnchanged.get -> bool?
LM.App.Wpf.ViewModels.WatchedFolder.Path.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.Path.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFolder.ResetScanState() -> void
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusLabel.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusToolTip.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.WatchedFolder() -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(string! path) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig
LM.App.Wpf.ViewModels.WatchedFolderConfig.ApplyState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.ClearState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFolderConfig.CreateSnapshot() -> LM.Core.Models.WatchedFolderSettings!
LM.App.Wpf.ViewModels.WatchedFolderConfig.Load(LM.Core.Models.WatchedFolderSettings! settings) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.StoreState(LM.App.Wpf.ViewModels.WatchedFolder! folder, LM.Core.Models.WatchedFolderState! state) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.WatchedFolderConfig() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Folder.get -> LM.App.Wpf.ViewModels.WatchedFolder!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Items.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.WatchedFolderScanEventArgs(LM.App.Wpf.ViewModels.WatchedFolder! folder, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner
LM.App.Wpf.ViewModels.WatchedFolderScanner.Attach(LM.App.Wpf.ViewModels.WatchedFolderConfig! config) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.ItemsStaged -> System.EventHandler<LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs!>?
LM.App.Wpf.ViewModels.WatchedFolderScanner.ScanAsync(LM.App.Wpf.ViewModels.WatchedFolder? folder, System.Threading.CancellationToken ct, bool force = false) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFolderScanner.WatchedFolderScanner(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.IAddPipeline
LM.App.Wpf.ViewModels.IAddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.IAddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.Library.ILibraryDocumentService
LM.App.Wpf.Library.ILibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.ILibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.LibraryDocumentService
LM.App.Wpf.Library.LibraryDocumentService.LibraryDocumentService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.IAttachmentMetadataPrompt
LM.App.Wpf.Library.IAttachmentMetadataPrompt.RequestMetadataAsync(LM.App.Wpf.Library.AttachmentMetadataPromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.AttachmentMetadataPromptResult?>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.get -> string!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.AttachmentMetadataPromptContext(string! EntryTitle, System.Collections.Generic.IReadOnlyList<string!>! FilePaths) -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>!
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult.AttachmentMetadataPromptResult(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>! Attachments) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection
LM.App.Wpf.Library.AttachmentMetadataSelection.AttachmentMetadataSelection(string! SourcePath, string! Title, LM.Core.Models.AttachmentKind Kind, System.Collections.Generic.IReadOnlyList<string!>! Tags) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.get -> LM.Core.Models.AttachmentKind
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.init -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LibraryFiltersViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! presetStore, LM.App.Wpf.Common.ILibraryPresetPrompt! presetPrompt, LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.SavedSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.get -> string
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedSearchPresetViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, LM.App.Wpf.Library.LibraryFilterPreset! preset, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Summary.get -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.ToSummary() -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.SavedSearchTreeChangedEventArgs(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! presets) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.SavedSearchTreeViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.TreeChanged -> System.EventHandler<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs!>?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ClearCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyPresetAsync(LM.App.Wpf.Common.LibraryPresetSummary! summary, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyState(LM.App.Wpf.Library.LibraryFilterState! state) -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.CaptureState() -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTooltip.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTokens.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.BuildFullTextQuery(string! normalizedQuery) -> LM.Core.Models.Search.FullTextSearchQuery!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.HasSavedPresets.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.GetNormalizedFullTextQuery() -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.NavigationRoots.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RefreshNavigationAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedPresets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedSearches.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleLeftPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleRightPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SortOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RemoveTagCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand<string?>!
LM.App.Wpf.ViewModels.Library.LibrarySortOption
LM.App.Wpf.ViewModels.Library.LibrarySortOption.LibrarySortOption(string! key, string! displayName) -> void
LM.App.Wpf.ViewModels.Library.LibrarySortOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOptions
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.Category = 0 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.SavedSearch = 1 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchEntry = 2 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchRun = 3 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.LibraryNavigationNodeViewModel(string! name, LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.HasChildren.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Kind.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.get -> object?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.init -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.LibraryColumnOption(string! key, string! displayName, bool isVisible) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LibraryColumnVisibility() -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LoadFrom(System.Collections.Generic.IReadOnlyDictionary<string!, bool>! source) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.Snapshot() -> System.Collections.Generic.IReadOnlyDictionary<string!, bool>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LibraryResultsViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.App.Wpf.Library.ILibraryEntryEditor! entryEditor, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.Library.IAttachmentMetadataPrompt! attachmentPrompt, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.Core.Abstractions.IHasher! hasher, LM.App.Wpf.Services.Pdf.IPdfViewerLauncher! pdfViewerLauncher) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadFullTextResultsAsync(System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.FullTextSearchHit!>! hits, System.Func<LM.Core.Models.Entry!, bool>? entryFilter = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadMetadataResults(System.Collections.Generic.IEnumerable<LM.Core.Models.Entry!>! entries) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResetSortForSearch(LM.App.Wpf.ViewModels.Library.LibrarySortOption! defaultOption) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridLoaded(System.Windows.RoutedEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridSorting(System.Windows.Controls.DataGridSortingEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.MarkAsMetadataResults() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResultsAreFullText.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.get -> LM.App.Wpf.ViewModels.LibrarySearchResult?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LinkItems.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryLinkItem!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.EditEntryAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelection.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedItems.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectionChanged -> System.EventHandler?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelectedAbstract.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ToggleBlacklistAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.get -> int
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.LibraryCollectionFolderViewModel(LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! tree, string! id, string! name, LM.App.Wpf.Library.Collections.LibraryCollectionMetadata! metadata) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.LibraryCollectionsViewModel(LM.App.Wpf.Library.Collections.LibraryCollectionStore! store, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPrimaryAttachment.get -> bool
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.LibrarySearchQueryBox() -> void
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.get -> string!
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel
LM.App.Wpf.ViewModels.LibraryViewModel.Filters.get -> LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LibraryViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFullTextSearchService! fullTextSearch, LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel! filters, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.Configuration.IUserPreferencesStore! preferencesStore, LM.App.Wpf.Common.IClipboardService! clipboard, LM.App.Wpf.Common.IFileExplorerService! fileExplorer, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! litSearchOrganizer, LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! collections, LM.App.Wpf.Library.Collections.LibraryCollectionStore! collectionStore) -> void
LM.App.Wpf.ViewModels.LibraryViewModel.Results.get -> LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.Collections.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibraryColumnOption!>!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnVisibility.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility!
LM.App.Wpf.ViewModels.SearchItemViewModel
LM.App.Wpf.ViewModels.SearchItemViewModel.Header.get -> string!
LM.App.Wpf.ViewModels.SearchItemViewModel.SearchItemViewModel(string! header, LM.App.Wpf.ViewModels.LibraryViewModel! vm) -> void
LM.App.Wpf.ViewModels.SearchItemViewModel.Vm.get -> LM.App.Wpf.ViewModels.LibraryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel
LM.App.Wpf.ViewModels.SearchViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.SearchViewModel.ExportSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.From.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.LoadSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRuns.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.PreviousSearchSummary!>!
LM.App.Wpf.ViewModels.SearchViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRunsCount.get -> int
LM.App.Wpf.ViewModels.SearchViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.SearchViewModel.Query.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.get -> LM.Core.Models.SearchHit?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RunSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SaveSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleLeftPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleRightPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SearchViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IWorkSpaceService! ws, LM.App.Wpf.Common.ISearchSavePrompt! savePrompt, LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel! providers, LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel! history, LM.Infrastructure.Search.PubMedSearchProvider! pubMedProvider, LM.Core.Abstractions.Configuration.IUserPreferencesStore? preferencesStore = null) -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.get -> LM.App.Wpf.ViewModels.PreviousSearchSummary?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.StartPreviousRunCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ShowRunDetailsCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleFavoriteCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.To.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.History.get -> LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel.Providers.get -> LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecordExecutionAsync(LM.Core.Models.Search.SearchExecutionResult! result, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.SearchHistoryViewModel(LM.Core.Abstractions.Configuration.ISearchHistoryStore! store) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.ExecuteSearchAsync() -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.RunSearchCommand.get -> LM.App.Wpf.Common.AsyncRelayCommand!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchExecuted -> System.EventHandler<LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs!>?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchProvidersViewModel(LM.Core.Abstractions.Search.ISearchExecutionService! executionService) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.set -> void
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.Result.get -> LM.Core.Models.Search.SearchExecutionResult!
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.SearchExecutedEventArgs(LM.Core.Models.Search.SearchExecutionResult! result) -> void
LM.App.Wpf.ViewModels.PreviousSearchSummary
LM.App.Wpf.ViewModels.PreviousSearchSummary.DisplayName.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.EntryId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.FavoriteRunId.get -> string?
LM.App.Wpf.ViewModels.PreviousSearchSummary.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastRunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.Provider.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.Query.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunCount.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TotalHits.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TagsDisplay.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption
LM.App.Wpf.ViewModels.SearchDatabaseOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption.SearchDatabaseOption(LM.Core.Models.SearchDatabase value, string! displayName) -> void
LM.App.Wpf.ViewModels.SearchDatabaseOption.Value.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.StagingItem
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.get -> LM.HubSpoke.Models.ArticleHook?
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.DisplayName.get -> string?
LM.App.Wpf.ViewModels.StagingItem.DisplayName.set -> void
LM.App.Wpf.ViewModels.StagingItem.Doi.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Doi.set -> void
LM.App.Wpf.ViewModels.StagingItem.FilePath.get -> string!
LM.App.Wpf.ViewModels.StagingItem.FilePath.set -> void
LM.App.Wpf.ViewModels.StagingItem.Internal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Internal.set -> void
LM.App.Wpf.ViewModels.StagingItem.InternalId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.InternalId.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsDuplicate.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsNearMatch.get -> bool
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Notes.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Notes.set -> void
LM.App.Wpf.ViewModels.StagingItem.OriginalFileName.get -> string!
LM.App.Wpf.ViewModels.StagingItem.Pmid.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Pmid.set -> void
LM.App.Wpf.ViewModels.StagingItem.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingItem.Selected.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Selected.set -> void
LM.App.Wpf.ViewModels.StagingItem.Similarity.get -> double
LM.App.Wpf.ViewModels.StagingItem.Similarity.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Source.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Source.set -> void
LM.App.Wpf.ViewModels.StagingItem.StagingItem() -> void
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.get -> string!
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.set -> void
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.Title.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Title.set -> void
LM.App.Wpf.ViewModels.StagingItem.Type.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingItem.Type.set -> void
LM.App.Wpf.ViewModels.StagingItem.Year.get -> int?
LM.App.Wpf.ViewModels.StagingItem.Year.set -> void
LM.App.Wpf.Views.AddView
LM.App.Wpf.Views.Behaviors.FileDropRequest
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.get -> System.Windows.DragEventArgs!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.get -> object?
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.FileDropRequest(System.Collections.Generic.IReadOnlyList<string!>! Paths, object? DropTarget, System.Windows.DragEventArgs! Args) -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.init -> void
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior.SavedSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.AddView.AddView() -> void
LM.App.Wpf.Views.AddView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog
LM.App.Wpf.Views.LibraryPresetPickerDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.LibraryPresetPickerDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel!
LM.App.Wpf.Views.LibraryPresetPrompt.LibraryPresetPrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.InitializeComponent() -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.AttachmentMetadataDialog(LM.App.Wpf.ViewModels.Library.AttachmentMetadataDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog
LM.App.Wpf.Views.LibraryPresetSaveDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.LibraryPresetSaveDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel!
LM.App.Wpf.Views.LibraryView
LM.App.Wpf.Views.LibraryView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryView.LibraryView() -> void
LM.App.Wpf.Views.PdfViewer
LM.App.Wpf.Views.PdfViewer.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewer.PdfViewer() -> void
LM.App.Wpf.Views.Library.TagTokenSelector
LM.App.Wpf.Views.Library.TagTokenSelector.InitializeComponent() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.FilteredSuggestions.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>?
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.set -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagTokenSelector() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.get -> System.Collections.Generic.IEnumerable<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.set -> void
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTagsProperty
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabularyProperty
LM.App.Wpf.Views.LibraryPresetPrompt
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Views.Review.Controls.DecisionBadge
LM.App.Wpf.Views.Review.Controls.DecisionBadge.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.DecisionBadge() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.get -> LM.Review.Core.Models.ScreeningStatus
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.set -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.ExtractionFieldEditor() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.ScreeningQueueControl() -> void
LM.App.Wpf.Views.Review.ReviewView
LM.App.Wpf.Views.Review.ReviewView.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ReviewView.ReviewView() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.LitSearchRunPickerWindow(LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel!
LM.App.Wpf.Views.Review.ProjectEditorWindow
LM.App.Wpf.Views.Review.ProjectEditorWindow.Attach(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.ProjectEditorWindow() -> void
LM.App.Wpf.Views.SearchSavePrompt
LM.App.Wpf.Views.SearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Views.SearchSavePrompt.SearchSavePrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.DataGridColumnVisibilityBehavior() -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.set -> void
LM.App.Wpf.Views.SearchView
LM.App.Wpf.Views.SearchView.InitializeComponent() -> void
LM.App.Wpf.Views.SearchView.SearchView() -> void
LM.App.Wpf.Views.ShellWindow
LM.App.Wpf.Views.ShellWindow.InitializeComponent() -> void
LM.App.Wpf.Views.ShellWindow.LoadWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.NewWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.ShellWindow() -> void
LM.App.Wpf.Views.StagingEditorWindow
LM.App.Wpf.Views.StagingEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.StagingEditorWindow.StagingEditorWindow(LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel! viewModel) -> void
override LM.App.Wpf.ViewModels.Library.LibrarySortOption.ToString() -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Name.get -> string!
override LM.App.Wpf.Views.Library.AttachmentMetadataDialog.OnClosed(System.EventArgs! e) -> void
LM.App.Wpf.Views.WorkspaceChooser
LM.App.Wpf.Views.WorkspaceChooser.InitializeComponent() -> void
LM.App.Wpf.Views.WorkspaceChooser.SelectedWorkspacePath.get -> string?
LM.App.Wpf.Views.WorkspaceChooser.WorkspaceChooser(LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel! viewModel) -> void
LM.App.Wpf.Views.WorkspaceChooser.Configure(System.Action<LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel!>! configure) -> void
override LM.App.Wpf.App.OnExit(System.Windows.ExitEventArgs! e) -> void
override LM.App.Wpf.App.OnStartup(System.Windows.StartupEventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetPickerDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetSaveDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.StagingEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.WorkspaceChooser.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.ProjectEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.OnClosed(System.EventArgs! e) -> void
static LM.App.Wpf.App.Main() -> void
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.All.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.NewestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.OldestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleAscending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleDescending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Clone() -> LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.LitSearchOrganizerStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveEntryAsync(string! entryId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.SyncEntriesAsync(System.Collections.Generic.IEnumerable<string!>! entryIds, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema.CurrentVersion -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.LitSearchEntryViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! title, string? query) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Query.get -> string?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.CanDelete.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsRoot.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.LitSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! name, bool isRoot) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.LitSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.LitSearchRunViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! runId, string! label, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel! parent) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.LitSearchTreeViewModel(LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt, LM.Core.Abstractions.IEntryStore! entryStore, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
---------- LM.App.Wpf ----------
#nullable enable
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.ColumnKeyProperty -> System.Windows.DependencyProperty!
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.GetColumnKey(System.Windows.DependencyObject! element) -> string?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.SetColumnKey(System.Windows.DependencyObject! element, string? value) -> void
#nullable enable
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Id.get -> string!
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.IsDraggable.get -> bool
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Name.get -> string!
const LM.App.Wpf.Library.LibraryPresetFolder.RootId = "root" -> string!
const LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.RootId = "root" -> string!
const LM.App.Wpf.ViewModels.StagingItem.DuplicateThreshold = 0.999 -> double
const LM.App.Wpf.ViewModels.StagingItem.NearThreshold = 0.75 -> double
LM.App.Wpf.App
LM.App.Wpf.App.App() -> void
LM.App.Wpf.App.InitializeComponent() -> void
LM.App.Wpf.Common.AsyncRelayCommand
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<object?, System.Threading.Tasks.Task!>! execute, System.Func<object?, bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<System.Threading.Tasks.Task!>! execute, System.Func<bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.AsyncRelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.AsyncRelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.AsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.IAsyncRelayCommand
LM.App.Wpf.Common.IAsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter
LM.App.Wpf.Common.BooleanToOpacityConverter.BooleanToOpacityConverter() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.set -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.set -> void
LM.App.Wpf.Common.Converters.ProjectEditorConverters
LM.App.Wpf.Common.Converters.ProjectEditorConverters.StageSelectionEquality.get -> System.Windows.Data.IMultiValueConverter!
LM.App.Wpf.Common.LibraryPresetSaveContext.LibraryPresetSaveContext(string! DefaultName, System.Collections.Generic.IReadOnlyCollection<string!>! ExistingNames, string! Title = "Save Library Preset", string! Prompt = "Name this filter preset.") -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.LibraryCollectionEntry() -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.DeletePresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenamePresetAsync(string! presetId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
LM.App.Wpf.Library.LibraryFilterState.Tags.get -> string![]!
LM.App.Wpf.Library.LibraryPresetFolder.EnumerateChildren() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.LibraryPresetTreeItem>!
LM.App.Wpf.Library.LibraryPresetNodeKind.Folder = 0 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetNodeKind.Preset = 1 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.LitSearchOrganizerEntry() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.LitSearchOrganizerFolder() -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectBlueprint(string! projectId, string! name, System.DateTimeOffset createdAtUtc, string! createdBy, string! litSearchEntryId, string! litSearchRunId, System.Collections.Generic.IReadOnlyList<string!>! checkedEntryIds, string? hookRelativePath, LM.Review.Core.Models.ReviewTemplateKind template, string! metadataNotes, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>! stages) -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CheckedEntryIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedAtUtc.get -> System.DateTimeOffset
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedBy.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.HookRelativePath.get -> string?
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchEntryId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchRunId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Template.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.MetadataNotes.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Stages.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.With(string? name = null, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>? stages = null, LM.Review.Core.Models.ReviewTemplateKind? template = null, string? metadataNotes = null, string? litSearchEntryId = null, string? litSearchRunId = null, System.Collections.Generic.IReadOnlyList<string!>? checkedEntryIds = null) -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint!
LM.App.Wpf.Services.Review.Design.StageBlueprint
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageBlueprint(string! stageId, string! name, LM.Review.Core.Models.ReviewStageType stageType, int primaryReviewers, int secondaryReviewers, bool requiresConsensus, int minimumAgreements, bool escalateOnDisagreement, LM.Review.Core.Models.StageDisplayProfile! displayProfile) -> void
LM.App.Wpf.Services.Review.Design.StageBlueprint.EscalateOnDisagreement.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.MinimumAgreements.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.PrimaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.RequiresConsensus.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.SecondaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageId.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.Services.Review.Design.StageBlueprint.DisplayProfile.get -> LM.Review.Core.Models.StageDisplayProfile!
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher.Show(string! entryId, string! pdfAbsolutePath, string! pdfHash) -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.AddSelectionToFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.MoveFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RemoveSelectionFromFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ItemsView.get -> System.ComponentModel.ICollectionView!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.LitSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.SavedSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SavedSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeletePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.LoadPresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.LibraryViewModel.AllTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.LibraryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.LitSearchOrganizer.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LoadCollectionEntriesAsync(string! collectionId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.OpenPdfAnnotationsCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.LibraryViewModel.RefreshTagsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.ToggleBlacklistCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationTypeDisplay.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Dispose() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.HighlightBrush.get -> System.Windows.Media.Brush!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.PdfAnnotationColorCommandParameter() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior.CollectionTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior.LitSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter
LM.App.Wpf.Views.Converters.EnumEqualsConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.EnumEqualsConverter() -> void
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.InverseBooleanToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.AnnotationColorParameterConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.Convert(object?[]! values, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.ConvertBack(object? value, System.Type![]! targetTypes, object? parameter, System.Globalization.CultureInfo! culture) -> object?[]!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NullOrEmptyToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList
LM.App.Wpf.Views.Pdf.PdfAnnotationList.PdfAnnotationList() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow
LM.App.Wpf.Views.PdfViewerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow.PdfViewerWindow() -> void
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.PdfViewerHostObject(LM.App.Wpf.Views.PdfViewer! owner) -> void
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogCloseRequestedEventArgs(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogResult.get -> bool?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.CloseRequested -> System.EventHandler<LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs!>?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.DialogViewModelBase() -> void
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.RequestClose(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.IDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.WpfDialogService(System.IServiceProvider! services) -> void
LM.App.Wpf.Common.ILibraryPresetPrompt
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Common.IClipboardService
LM.App.Wpf.Common.IClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.ClipboardService
LM.App.Wpf.Common.ClipboardService.ClipboardService() -> void
LM.App.Wpf.Common.ClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.IFileExplorerService
LM.App.Wpf.Common.IFileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.FileExplorerService
LM.App.Wpf.Common.FileExplorerService.FileExplorerService() -> void
LM.App.Wpf.Common.FileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.ISearchSavePrompt
LM.App.Wpf.Common.ISearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Common.SearchSavePromptContext
LM.App.Wpf.Common.SearchSavePromptContext.Database.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.From.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.Query.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.SearchSavePromptContext(string! Query, LM.Core.Models.SearchDatabase Database, System.DateTime? From, System.DateTime? To, string! DefaultName, string! DefaultNotes, System.Collections.Generic.IReadOnlyList<string!>! DefaultTags) -> void
LM.App.Wpf.Common.SearchSavePromptContext.Database.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.SearchSavePromptContext.From.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.Query.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.To.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.To.init -> void
LM.App.Wpf.Common.SearchSavePromptResult
LM.App.Wpf.Common.SearchSavePromptResult.Name.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Notes.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Tags.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.SearchSavePromptResult(string! Name, string! Notes, string! Tags) -> void
LM.App.Wpf.Common.SearchSavePromptResult.Name.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Notes.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Tags.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSaveResult
LM.App.Wpf.Common.LibraryPresetSaveResult.LibraryPresetSaveResult(string! Name) -> void
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.get -> bool
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.LibraryPresetSelectionContext(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! Presets, bool AllowLoad, string! Title) -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.LibraryPresetSelectionResult(string? SelectedPresetId, System.Collections.Generic.IReadOnlyList<string!>! DeletedPresetIds) -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.get -> string?
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.init -> void
LM.App.Wpf.Common.LibraryPresetSummary
LM.App.Wpf.Common.LibraryPresetSummary.Id.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Id.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.LibraryPresetSummary(string! Id, string! Name, System.DateTime SavedUtc) -> void
LM.App.Wpf.Common.LibraryPresetSummary.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.get -> System.DateTime
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.init -> void
LM.App.Wpf.Common.RelayCommand
LM.App.Wpf.Common.RelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.RelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.RelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.RelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.RelayCommand.RelayCommand(System.Action<object?>! exec, System.Func<object?, bool>? can = null) -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.get -> bool
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.init -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.get -> string?
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.init -> void
LM.App.Wpf.Common.Dialogs.FolderPickerOptions
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.get -> string?
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.init -> void
LM.App.Wpf.Common.Dialogs.IDialogService
LM.App.Wpf.Common.Dialogs.IDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.StringJoinConverter
LM.App.Wpf.Common.StringJoinConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.StringJoinConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.AttachmentGlyphToIconConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.AttachmentGlyphToDescriptionConverter() -> void
LM.App.Wpf.Common.ViewModelBase
LM.App.Wpf.Common.ViewModelBase.ViewModelBase() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Id.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.get -> int
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PdfAnnotation(string! id, string! title) -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.get -> System.Windows.Media.Imaging.BitmapImage?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.Annotations.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Pdf.PdfAnnotation!>!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.ChangeAnnotationColorCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.CopyAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DocumentSource.get -> System.Uri?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.HandleAnnotationSelectionAsync(LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.LoadPdfCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfHash.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfViewerViewModel(LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.App.Wpf.Services.IUserContext! userContext, LM.Core.Abstractions.IPdfAnnotationPreviewStorage! previewStorage, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.Common.IClipboardService! clipboard) -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.RecordAnnotationChangeCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.WebViewBridge.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DeleteAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.Library.LibraryFilterPreset
LM.App.Wpf.Library.LibraryFilterPreset.LibraryFilterPreset() -> void
LM.App.Wpf.Library.LibraryFilterPreset.Id.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Id.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.Name.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Name.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.get -> System.DateTime
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.get -> int
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.State.get -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.Library.LibraryFilterPreset.State.set -> void
LM.App.Wpf.Library.LibraryFilterPresetStore
LM.App.Wpf.Library.LibraryFilterPresetStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.MovePresetAsync(string! presetId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.LibraryFilterPresetStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.ListPresetsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.LibraryFilterPreset!>!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, string? targetFolderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetByIdAsync(string! presetId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
const LM.App.Wpf.Library.Collections.LibraryCollectionFolder.RootId = "collections-root" -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionEntry!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile
LM.App.Wpf.Library.Collections.LibraryCollectionFile.LibraryCollectionFile() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.get -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder?
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.get -> int
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.EnumerateDescendants() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionEntry!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.LibraryCollectionFolder() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.LibraryCollectionMetadata() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore
LM.App.Wpf.Library.Collections.LibraryCollectionStore.AddEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.CreateFolderAsync(string? parentFolderId, string! name, string! createdBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.DeleteFolderAsync(string! folderId, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.LibraryCollectionStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RemoveEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RenameFolderAsync(string! folderId, string! newName, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryPresetFolder
LM.App.Wpf.Library.LibraryPresetFolder.Clone() -> LM.App.Wpf.Library.LibraryPresetFolder!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Id.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Id.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.LibraryPresetFolder() -> void
LM.App.Wpf.Library.LibraryPresetFolder.Name.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Name.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Presets.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryFilterPreset!>!
LM.App.Wpf.Library.LibraryPresetFolder.Presets.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.get -> int
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.set -> void
LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem
LM.App.Wpf.Library.LibraryPresetTreeItem.Folder.get -> LM.App.Wpf.Library.LibraryPresetFolder?
LM.App.Wpf.Library.LibraryPresetTreeItem.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem(LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder, LM.App.Wpf.Library.LibraryPresetFolder? folder, LM.App.Wpf.Library.LibraryFilterPreset? preset) -> void
LM.App.Wpf.Library.LibraryPresetTreeItem.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset?
LM.App.Wpf.Library.LibraryPresetTreeItem.SortOrder.get -> int
LM.App.Wpf.Library.ILibraryEntryEditor
LM.App.Wpf.Library.ILibraryEntryEditor.EditEntryAsync(LM.Core.Models.Entry! entry) -> System.Threading.Tasks.Task<System.Boolean>!
LM.App.Wpf.Library.LibraryFilterState
LM.App.Wpf.Library.LibraryFilterState.LibraryFilterState() -> void
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.get -> bool
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.set -> void
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateFrom.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateFrom.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateTo.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateTo.set -> void
LM.App.Wpf.Library.LibraryFilterState.SortKey.get -> string?
LM.App.Wpf.Library.LibraryFilterState.SortKey.set -> void
LM.App.Wpf.Library.LibraryFilterState.Tags.set -> void
LM.App.Wpf.ViewModels.AddPipeline
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddViewModel
LM.App.Wpf.ViewModels.AddViewModel.AddFilesCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.ViewModels.WatchedFolderScanner? scanner = null, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore? watchedFolderSettings = null, LM.App.Wpf.ViewModels.StagingListViewModel? stagingList = null, LM.App.Wpf.ViewModels.WatchedFoldersViewModel? watchedFolders = null, LM.App.Wpf.Common.Dialogs.IDialogService? dialogService = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.BulkAddFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ClearCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.CommitSelectedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.AddViewModel.Current.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.AddViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.AddViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.AddViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.AddViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.AddViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.AddViewModel.ReviewStagedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Staging.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.AddViewModel.StagingListViewModel.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFolders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFoldersViewModel.get -> LM.App.Wpf.ViewModels.WatchedFoldersViewModel!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.LibraryPresetPickerDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Presets.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.SelectedPresetId.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.EntryId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookAbsolutePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookRelativePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.DisplayLabel.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.ExecutedBy.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.Owner.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.TotalHits.get -> int
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.ConfirmCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.Entries.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.LitSearchRunPickerViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.LibraryPresetSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.set -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Initialize(LM.App.Wpf.Common.SearchSavePromptContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultNotes.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultTags.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.SearchSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingEditorViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingList.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.SelectedWorkspacePath.get -> string?
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.get -> bool
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.WorkspaceChooserViewModel(LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.CanAcceptFileDrop(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleFileDropAsync(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibrarySearchResult
LM.App.Wpf.ViewModels.LibrarySearchResult.Entry.get -> LM.Core.Models.Entry!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasAttachments.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasDoi.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasIdentifiers.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasInternalId.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasLinks.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNct.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPmid.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasRelations.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasSource.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasUserNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.Highlight.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.HighlightDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.IsFullText.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.LibrarySearchResult(LM.Core.Models.Entry! entry, double? score, string? highlight) -> void
LM.App.Wpf.ViewModels.LibrarySearchResult.Score.get -> double?
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentGlyphKind.get -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.TitleSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.YearPresenceSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearDescendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearAscendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SourceSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TypeSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedOnSortKey.get -> System.DateTime
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedBySortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.InternalIdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.DoiSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.PmidSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.NctSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AuthorsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TagsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IsInternalSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SnippetSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreSortKey.get -> double
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.None = 0 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Pdf = 1 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Document = 2 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Presentation = 3 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Generic = 4 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.Library.LibraryLinkItem
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.LibraryLinkItem(string! DisplayText, string! Target, LM.App.Wpf.ViewModels.Library.LinkItemKind Kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.get -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.init -> void
LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Url = 0 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.File = 1 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Folder = 2 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.RunAndBasics = 0 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Metadata = 1 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Workflow = 2 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Summary = 3 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.ProjectEditorStepDescriptor(LM.App.Wpf.ViewModels.Review.ProjectEditorStep Step, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.ReviewTemplateOption(LM.Review.Core.Models.ReviewTemplateKind Kind, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectEditorViewModel() -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.AddStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntryCount.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntrySummary.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ErrorMessage.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.HookRelativePath.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Initialize(LM.App.Wpf.Services.Review.Design.ProjectBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchEntryId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchRunId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageDownCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageUpCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.RemoveStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Result.get -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SaveCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.get -> LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.StageTypes.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStageType>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Stages.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Steps.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.TemplateOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStep.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepDescriptor.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepIndex.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsSummaryStep.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.get -> LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateKind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.NextCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.BackCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ChangeRunCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ConfigureRunReloadHandler(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.App.Wpf.Services.Review.Design.ProjectBlueprint?>!>! handler) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.StageDisplayOptionViewModel(LM.Review.Core.Models.StageContentArea area, bool isSelected) -> void
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Area.get -> LM.Review.Core.Models.StageContentArea
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Description.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.get -> bool
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageBlueprintViewModel(LM.App.Wpf.Services.Review.Design.StageBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageId.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TotalReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.DisplayOptions.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel!>!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TryBuild(out LM.App.Wpf.Services.Review.Design.StageBlueprint! stage, out string? errorMessage) -> bool
LM.App.Wpf.ViewModels.StagingListViewModel
LM.App.Wpf.ViewModels.StagingListViewModel.AddStagedItemsAsync(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Clear() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.CommitSelectedAsync(System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.StagingListViewModel.Current.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.StagingListViewModel.HasItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.HasSelectedItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.StagingListViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.StagingListViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingListViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.StagingListViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.SetCommandGuard(System.Func<System.Func<System.Threading.Tasks.Task!>!, System.Threading.Tasks.Task!>! guard) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.UpdateParentBusy(bool isBusy) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.WatchedFoldersViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList, LM.App.Wpf.ViewModels.WatchedFolderScanner! scanner, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore! settingsStore, LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.WatchedFolder
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.get -> bool
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.LastScanDisplay.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.LastScanUtc.get -> System.DateTimeOffset?
LM.App.Wpf.ViewModels.WatchedFolder.LastScanWasUnchanged.get -> bool?
LM.App.Wpf.ViewModels.WatchedFolder.Path.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.Path.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFolder.ResetScanState() -> void
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusLabel.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusToolTip.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.WatchedFolder() -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(string! path) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig
LM.App.Wpf.ViewModels.WatchedFolderConfig.ApplyState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.ClearState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFolderConfig.CreateSnapshot() -> LM.Core.Models.WatchedFolderSettings!
LM.App.Wpf.ViewModels.WatchedFolderConfig.Load(LM.Core.Models.WatchedFolderSettings! settings) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.StoreState(LM.App.Wpf.ViewModels.WatchedFolder! folder, LM.Core.Models.WatchedFolderState! state) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.WatchedFolderConfig() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Folder.get -> LM.App.Wpf.ViewModels.WatchedFolder!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Items.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.WatchedFolderScanEventArgs(LM.App.Wpf.ViewModels.WatchedFolder! folder, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner
LM.App.Wpf.ViewModels.WatchedFolderScanner.Attach(LM.App.Wpf.ViewModels.WatchedFolderConfig! config) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.ItemsStaged -> System.EventHandler<LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs!>?
LM.App.Wpf.ViewModels.WatchedFolderScanner.ScanAsync(LM.App.Wpf.ViewModels.WatchedFolder? folder, System.Threading.CancellationToken ct, bool force = false) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFolderScanner.WatchedFolderScanner(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.IAddPipeline
LM.App.Wpf.ViewModels.IAddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.IAddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.Library.ILibraryDocumentService
LM.App.Wpf.Library.ILibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.ILibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.LibraryDocumentService
LM.App.Wpf.Library.LibraryDocumentService.LibraryDocumentService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.IAttachmentMetadataPrompt
LM.App.Wpf.Library.IAttachmentMetadataPrompt.RequestMetadataAsync(LM.App.Wpf.Library.AttachmentMetadataPromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.AttachmentMetadataPromptResult?>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.get -> string!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.AttachmentMetadataPromptContext(string! EntryTitle, System.Collections.Generic.IReadOnlyList<string!>! FilePaths) -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>!
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult.AttachmentMetadataPromptResult(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>! Attachments) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection
LM.App.Wpf.Library.AttachmentMetadataSelection.AttachmentMetadataSelection(string! SourcePath, string! Title, LM.Core.Models.AttachmentKind Kind, System.Collections.Generic.IReadOnlyList<string!>! Tags) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.get -> LM.Core.Models.AttachmentKind
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.init -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LibraryFiltersViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! presetStore, LM.App.Wpf.Common.ILibraryPresetPrompt! presetPrompt, LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.SavedSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.get -> string
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedSearchPresetViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, LM.App.Wpf.Library.LibraryFilterPreset! preset, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Summary.get -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.ToSummary() -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.SavedSearchTreeChangedEventArgs(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! presets) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.SavedSearchTreeViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.TreeChanged -> System.EventHandler<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs!>?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ClearCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyPresetAsync(LM.App.Wpf.Common.LibraryPresetSummary! summary, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyState(LM.App.Wpf.Library.LibraryFilterState! state) -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.CaptureState() -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTooltip.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTokens.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.BuildFullTextQuery(string! normalizedQuery) -> LM.Core.Models.Search.FullTextSearchQuery!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.HasSavedPresets.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.GetNormalizedFullTextQuery() -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.NavigationRoots.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RefreshNavigationAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedPresets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedSearches.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleLeftPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleRightPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SortOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RemoveTagCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand<string?>!
LM.App.Wpf.ViewModels.Library.LibrarySortOption
LM.App.Wpf.ViewModels.Library.LibrarySortOption.LibrarySortOption(string! key, string! displayName) -> void
LM.App.Wpf.ViewModels.Library.LibrarySortOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOptions
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.Category = 0 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.SavedSearch = 1 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchEntry = 2 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchRun = 3 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.LibraryNavigationNodeViewModel(string! name, LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.HasChildren.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Kind.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.get -> object?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.init -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.LibraryColumnOption(string! key, string! displayName, bool isVisible) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LibraryColumnVisibility() -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LoadFrom(System.Collections.Generic.IReadOnlyDictionary<string!, bool>! source) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.Snapshot() -> System.Collections.Generic.IReadOnlyDictionary<string!, bool>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LibraryResultsViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.App.Wpf.Library.ILibraryEntryEditor! entryEditor, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.Library.IAttachmentMetadataPrompt! attachmentPrompt, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.Core.Abstractions.IHasher! hasher, LM.App.Wpf.Services.Pdf.IPdfViewerLauncher! pdfViewerLauncher) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadFullTextResultsAsync(System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.FullTextSearchHit!>! hits, System.Func<LM.Core.Models.Entry!, bool>? entryFilter = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadMetadataResults(System.Collections.Generic.IEnumerable<LM.Core.Models.Entry!>! entries) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResetSortForSearch(LM.App.Wpf.ViewModels.Library.LibrarySortOption! defaultOption) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridLoaded(System.Windows.RoutedEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridSorting(System.Windows.Controls.DataGridSortingEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.MarkAsMetadataResults() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResultsAreFullText.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.get -> LM.App.Wpf.ViewModels.LibrarySearchResult?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LinkItems.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryLinkItem!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.EditEntryAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelection.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedItems.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectionChanged -> System.EventHandler?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelectedAbstract.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ToggleBlacklistAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.get -> int
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.LibraryCollectionFolderViewModel(LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! tree, string! id, string! name, LM.App.Wpf.Library.Collections.LibraryCollectionMetadata! metadata) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.LibraryCollectionsViewModel(LM.App.Wpf.Library.Collections.LibraryCollectionStore! store, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPrimaryAttachment.get -> bool
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.LibrarySearchQueryBox() -> void
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.get -> string!
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel
LM.App.Wpf.ViewModels.LibraryViewModel.Filters.get -> LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LibraryViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFullTextSearchService! fullTextSearch, LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel! filters, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.Configuration.IUserPreferencesStore! preferencesStore, LM.App.Wpf.Common.IClipboardService! clipboard, LM.App.Wpf.Common.IFileExplorerService! fileExplorer, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! litSearchOrganizer, LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! collections, LM.App.Wpf.Library.Collections.LibraryCollectionStore! collectionStore) -> void
LM.App.Wpf.ViewModels.LibraryViewModel.Results.get -> LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.Collections.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibraryColumnOption!>!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnVisibility.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility!
LM.App.Wpf.ViewModels.SearchItemViewModel
LM.App.Wpf.ViewModels.SearchItemViewModel.Header.get -> string!
LM.App.Wpf.ViewModels.SearchItemViewModel.SearchItemViewModel(string! header, LM.App.Wpf.ViewModels.LibraryViewModel! vm) -> void
LM.App.Wpf.ViewModels.SearchItemViewModel.Vm.get -> LM.App.Wpf.ViewModels.LibraryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel
LM.App.Wpf.ViewModels.SearchViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.SearchViewModel.ExportSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.From.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.LoadSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRuns.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.PreviousSearchSummary!>!
LM.App.Wpf.ViewModels.SearchViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRunsCount.get -> int
LM.App.Wpf.ViewModels.SearchViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.SearchViewModel.Query.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.get -> LM.Core.Models.SearchHit?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RunSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SaveSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleLeftPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleRightPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SearchViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IWorkSpaceService! ws, LM.App.Wpf.Common.ISearchSavePrompt! savePrompt, LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel! providers, LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel! history, LM.Infrastructure.Search.PubMedSearchProvider! pubMedProvider, LM.Core.Abstractions.Configuration.IUserPreferencesStore? preferencesStore = null) -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.get -> LM.App.Wpf.ViewModels.PreviousSearchSummary?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.StartPreviousRunCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ShowRunDetailsCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleFavoriteCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.To.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.History.get -> LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel.Providers.get -> LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecordExecutionAsync(LM.Core.Models.Search.SearchExecutionResult! result, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.SearchHistoryViewModel(LM.Core.Abstractions.Configuration.ISearchHistoryStore! store) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.ExecuteSearchAsync() -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.RunSearchCommand.get -> LM.App.Wpf.Common.AsyncRelayCommand!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchExecuted -> System.EventHandler<LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs!>?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchProvidersViewModel(LM.Core.Abstractions.Search.ISearchExecutionService! executionService) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.set -> void
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.Result.get -> LM.Core.Models.Search.SearchExecutionResult!
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.SearchExecutedEventArgs(LM.Core.Models.Search.SearchExecutionResult! result) -> void
LM.App.Wpf.ViewModels.PreviousSearchSummary
LM.App.Wpf.ViewModels.PreviousSearchSummary.DisplayName.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.EntryId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.FavoriteRunId.get -> string?
LM.App.Wpf.ViewModels.PreviousSearchSummary.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastRunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.Provider.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.Query.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunCount.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TotalHits.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TagsDisplay.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption
LM.App.Wpf.ViewModels.SearchDatabaseOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption.SearchDatabaseOption(LM.Core.Models.SearchDatabase value, string! displayName) -> void
LM.App.Wpf.ViewModels.SearchDatabaseOption.Value.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.StagingItem
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.get -> LM.HubSpoke.Models.ArticleHook?
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.DisplayName.get -> string?
LM.App.Wpf.ViewModels.StagingItem.DisplayName.set -> void
LM.App.Wpf.ViewModels.StagingItem.Doi.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Doi.set -> void
LM.App.Wpf.ViewModels.StagingItem.FilePath.get -> string!
LM.App.Wpf.ViewModels.StagingItem.FilePath.set -> void
LM.App.Wpf.ViewModels.StagingItem.Internal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Internal.set -> void
LM.App.Wpf.ViewModels.StagingItem.InternalId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.InternalId.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsDuplicate.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsNearMatch.get -> bool
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Notes.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Notes.set -> void
LM.App.Wpf.ViewModels.StagingItem.OriginalFileName.get -> string!
LM.App.Wpf.ViewModels.StagingItem.Pmid.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Pmid.set -> void
LM.App.Wpf.ViewModels.StagingItem.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingItem.Selected.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Selected.set -> void
LM.App.Wpf.ViewModels.StagingItem.Similarity.get -> double
LM.App.Wpf.ViewModels.StagingItem.Similarity.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Source.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Source.set -> void
LM.App.Wpf.ViewModels.StagingItem.StagingItem() -> void
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.get -> string!
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.set -> void
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.Title.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Title.set -> void
LM.App.Wpf.ViewModels.StagingItem.Type.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingItem.Type.set -> void
LM.App.Wpf.ViewModels.StagingItem.Year.get -> int?
LM.App.Wpf.ViewModels.StagingItem.Year.set -> void
LM.App.Wpf.Views.AddView
LM.App.Wpf.Views.Behaviors.FileDropRequest
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.get -> System.Windows.DragEventArgs!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.get -> object?
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.FileDropRequest(System.Collections.Generic.IReadOnlyList<string!>! Paths, object? DropTarget, System.Windows.DragEventArgs! Args) -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.init -> void
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior.SavedSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.AddView.AddView() -> void
LM.App.Wpf.Views.AddView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog
LM.App.Wpf.Views.LibraryPresetPickerDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.LibraryPresetPickerDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel!
LM.App.Wpf.Views.LibraryPresetPrompt.LibraryPresetPrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.InitializeComponent() -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.AttachmentMetadataDialog(LM.App.Wpf.ViewModels.Library.AttachmentMetadataDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog
LM.App.Wpf.Views.LibraryPresetSaveDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.LibraryPresetSaveDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel!
LM.App.Wpf.Views.LibraryView
LM.App.Wpf.Views.LibraryView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryView.LibraryView() -> void
LM.App.Wpf.Views.PdfViewer
LM.App.Wpf.Views.PdfViewer.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewer.PdfViewer() -> void
LM.App.Wpf.Views.Library.TagTokenSelector
LM.App.Wpf.Views.Library.TagTokenSelector.InitializeComponent() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.FilteredSuggestions.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>?
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.set -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagTokenSelector() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.get -> System.Collections.Generic.IEnumerable<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.set -> void
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTagsProperty
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabularyProperty
LM.App.Wpf.Views.LibraryPresetPrompt
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Views.Review.Controls.DecisionBadge
LM.App.Wpf.Views.Review.Controls.DecisionBadge.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.DecisionBadge() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.get -> LM.Review.Core.Models.ScreeningStatus
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.set -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.ExtractionFieldEditor() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.ScreeningQueueControl() -> void
LM.App.Wpf.Views.Review.ReviewView
LM.App.Wpf.Views.Review.ReviewView.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ReviewView.ReviewView() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.LitSearchRunPickerWindow(LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel!
LM.App.Wpf.Views.Review.ProjectEditorWindow
LM.App.Wpf.Views.Review.ProjectEditorWindow.Attach(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.ProjectEditorWindow() -> void
LM.App.Wpf.Views.SearchSavePrompt
LM.App.Wpf.Views.SearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Views.SearchSavePrompt.SearchSavePrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.DataGridColumnVisibilityBehavior() -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.set -> void
LM.App.Wpf.Views.SearchView
LM.App.Wpf.Views.SearchView.InitializeComponent() -> void
LM.App.Wpf.Views.SearchView.SearchView() -> void
LM.App.Wpf.Views.ShellWindow
LM.App.Wpf.Views.ShellWindow.InitializeComponent() -> void
LM.App.Wpf.Views.ShellWindow.LoadWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.NewWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.ShellWindow() -> void
LM.App.Wpf.Views.StagingEditorWindow
LM.App.Wpf.Views.StagingEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.StagingEditorWindow.StagingEditorWindow(LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel! viewModel) -> void
override LM.App.Wpf.ViewModels.Library.LibrarySortOption.ToString() -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Name.get -> string!
override LM.App.Wpf.Views.Library.AttachmentMetadataDialog.OnClosed(System.EventArgs! e) -> void
LM.App.Wpf.Views.WorkspaceChooser
LM.App.Wpf.Views.WorkspaceChooser.InitializeComponent() -> void
LM.App.Wpf.Views.WorkspaceChooser.SelectedWorkspacePath.get -> string?
LM.App.Wpf.Views.WorkspaceChooser.WorkspaceChooser(LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel! viewModel) -> void
LM.App.Wpf.Views.WorkspaceChooser.Configure(System.Action<LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel!>! configure) -> void
override LM.App.Wpf.App.OnExit(System.Windows.ExitEventArgs! e) -> void
override LM.App.Wpf.App.OnStartup(System.Windows.StartupEventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetPickerDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetSaveDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.StagingEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.WorkspaceChooser.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.ProjectEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.OnClosed(System.EventArgs! e) -> void
static LM.App.Wpf.App.Main() -> void
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.All.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.NewestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.OldestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleAscending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleDescending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Clone() -> LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.LitSearchOrganizerStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveEntryAsync(string! entryId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.SyncEntriesAsync(System.Collections.Generic.IEnumerable<string!>! entryIds, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema.CurrentVersion -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.LitSearchEntryViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! title, string? query) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Query.get -> string?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.CanDelete.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsRoot.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.LitSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! name, bool isRoot) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.LitSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.LitSearchRunViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! runId, string! label, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel! parent) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.LitSearchTreeViewModel(LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt, LM.Core.Abstractions.IEntryStore! entryStore, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
---------- LM.App.Wpf ----------
#nullable enable
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.ColumnKeyProperty -> System.Windows.DependencyProperty!
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.GetColumnKey(System.Windows.DependencyObject! element) -> string?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.SetColumnKey(System.Windows.DependencyObject! element, string? value) -> void
#nullable enable
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Id.get -> string!
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.IsDraggable.get -> bool
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Name.get -> string!
const LM.App.Wpf.Library.LibraryPresetFolder.RootId = "root" -> string!
const LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.RootId = "root" -> string!
const LM.App.Wpf.ViewModels.StagingItem.DuplicateThreshold = 0.999 -> double
const LM.App.Wpf.ViewModels.StagingItem.NearThreshold = 0.75 -> double
LM.App.Wpf.App
LM.App.Wpf.App.App() -> void
LM.App.Wpf.App.InitializeComponent() -> void
LM.App.Wpf.Common.AsyncRelayCommand
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<object?, System.Threading.Tasks.Task!>! execute, System.Func<object?, bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<System.Threading.Tasks.Task!>! execute, System.Func<bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.AsyncRelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.AsyncRelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.AsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.IAsyncRelayCommand
LM.App.Wpf.Common.IAsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter
LM.App.Wpf.Common.BooleanToOpacityConverter.BooleanToOpacityConverter() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.set -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.set -> void
LM.App.Wpf.Common.Converters.ProjectEditorConverters
LM.App.Wpf.Common.Converters.ProjectEditorConverters.StageSelectionEquality.get -> System.Windows.Data.IMultiValueConverter!
LM.App.Wpf.Common.LibraryPresetSaveContext.LibraryPresetSaveContext(string! DefaultName, System.Collections.Generic.IReadOnlyCollection<string!>! ExistingNames, string! Title = "Save Library Preset", string! Prompt = "Name this filter preset.") -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.LibraryCollectionEntry() -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.DeletePresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenamePresetAsync(string! presetId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
LM.App.Wpf.Library.LibraryFilterState.Tags.get -> string![]!
LM.App.Wpf.Library.LibraryPresetFolder.EnumerateChildren() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.LibraryPresetTreeItem>!
LM.App.Wpf.Library.LibraryPresetNodeKind.Folder = 0 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetNodeKind.Preset = 1 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.LitSearchOrganizerEntry() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.LitSearchOrganizerFolder() -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectBlueprint(string! projectId, string! name, System.DateTimeOffset createdAtUtc, string! createdBy, string! litSearchEntryId, string! litSearchRunId, System.Collections.Generic.IReadOnlyList<string!>! checkedEntryIds, string? hookRelativePath, LM.Review.Core.Models.ReviewTemplateKind template, string! metadataNotes, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>! stages) -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CheckedEntryIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedAtUtc.get -> System.DateTimeOffset
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedBy.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.HookRelativePath.get -> string?
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchEntryId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchRunId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Template.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.MetadataNotes.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Stages.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.With(string? name = null, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>? stages = null, LM.Review.Core.Models.ReviewTemplateKind? template = null, string? metadataNotes = null, string? litSearchEntryId = null, string? litSearchRunId = null, System.Collections.Generic.IReadOnlyList<string!>? checkedEntryIds = null) -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint!
LM.App.Wpf.Services.Review.Design.StageBlueprint
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageBlueprint(string! stageId, string! name, LM.Review.Core.Models.ReviewStageType stageType, int primaryReviewers, int secondaryReviewers, bool requiresConsensus, int minimumAgreements, bool escalateOnDisagreement, LM.Review.Core.Models.StageDisplayProfile! displayProfile) -> void
LM.App.Wpf.Services.Review.Design.StageBlueprint.EscalateOnDisagreement.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.MinimumAgreements.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.PrimaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.RequiresConsensus.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.SecondaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageId.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.Services.Review.Design.StageBlueprint.DisplayProfile.get -> LM.Review.Core.Models.StageDisplayProfile!
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher.Show(string! entryId, string! pdfAbsolutePath, string! pdfHash) -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.AddSelectionToFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.MoveFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RemoveSelectionFromFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ItemsView.get -> System.ComponentModel.ICollectionView!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.LitSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.SavedSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SavedSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeletePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.LoadPresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenamePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.LibraryViewModel.AllTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.LibraryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.LitSearchOrganizer.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LoadCollectionEntriesAsync(string! collectionId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.OpenPdfAnnotationsCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.LibraryViewModel.RefreshTagsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.ToggleBlacklistCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationTypeDisplay.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Dispose() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.HighlightBrush.get -> System.Windows.Media.Brush!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.PdfAnnotationColorCommandParameter() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior.CollectionTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior.LitSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter
LM.App.Wpf.Views.Converters.EnumEqualsConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.EnumEqualsConverter() -> void
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.InverseBooleanToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.AnnotationColorParameterConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.Convert(object?[]! values, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.ConvertBack(object? value, System.Type![]! targetTypes, object? parameter, System.Globalization.CultureInfo! culture) -> object?[]!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NullOrEmptyToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList
LM.App.Wpf.Views.Pdf.PdfAnnotationList.PdfAnnotationList() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow
LM.App.Wpf.Views.PdfViewerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow.PdfViewerWindow() -> void
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.PdfViewerHostObject(LM.App.Wpf.Views.PdfViewer! owner) -> void
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogCloseRequestedEventArgs(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogResult.get -> bool?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.CloseRequested -> System.EventHandler<LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs!>?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.DialogViewModelBase() -> void
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.RequestClose(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.IDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.WpfDialogService(System.IServiceProvider! services) -> void
LM.App.Wpf.Common.ILibraryPresetPrompt
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Common.IClipboardService
LM.App.Wpf.Common.IClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.ClipboardService
LM.App.Wpf.Common.ClipboardService.ClipboardService() -> void
LM.App.Wpf.Common.ClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.IFileExplorerService
LM.App.Wpf.Common.IFileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.FileExplorerService
LM.App.Wpf.Common.FileExplorerService.FileExplorerService() -> void
LM.App.Wpf.Common.FileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.ISearchSavePrompt
LM.App.Wpf.Common.ISearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Common.SearchSavePromptContext
LM.App.Wpf.Common.SearchSavePromptContext.Database.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.From.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.Query.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.SearchSavePromptContext(string! Query, LM.Core.Models.SearchDatabase Database, System.DateTime? From, System.DateTime? To, string! DefaultName, string! DefaultNotes, System.Collections.Generic.IReadOnlyList<string!>! DefaultTags) -> void
LM.App.Wpf.Common.SearchSavePromptContext.Database.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.SearchSavePromptContext.From.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.Query.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.To.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.To.init -> void
LM.App.Wpf.Common.SearchSavePromptResult
LM.App.Wpf.Common.SearchSavePromptResult.Name.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Notes.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Tags.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.SearchSavePromptResult(string! Name, string! Notes, string! Tags) -> void
LM.App.Wpf.Common.SearchSavePromptResult.Name.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Notes.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Tags.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSaveResult
LM.App.Wpf.Common.LibraryPresetSaveResult.LibraryPresetSaveResult(string! Name) -> void
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.get -> bool
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.LibraryPresetSelectionContext(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! Presets, bool AllowLoad, string! Title) -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.LibraryPresetSelectionResult(string? SelectedPresetId, System.Collections.Generic.IReadOnlyList<string!>! DeletedPresetIds) -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.get -> string?
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.init -> void
LM.App.Wpf.Common.LibraryPresetSummary
LM.App.Wpf.Common.LibraryPresetSummary.Id.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Id.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.LibraryPresetSummary(string! Id, string! Name, System.DateTime SavedUtc) -> void
LM.App.Wpf.Common.LibraryPresetSummary.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.get -> System.DateTime
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.init -> void
LM.App.Wpf.Common.RelayCommand
LM.App.Wpf.Common.RelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.RelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.RelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.RelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.RelayCommand.RelayCommand(System.Action<object?>! exec, System.Func<object?, bool>? can = null) -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.get -> bool
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.init -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.get -> string?
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.init -> void
LM.App.Wpf.Common.Dialogs.FolderPickerOptions
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.get -> string?
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.init -> void
LM.App.Wpf.Common.Dialogs.IDialogService
LM.App.Wpf.Common.Dialogs.IDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.StringJoinConverter
LM.App.Wpf.Common.StringJoinConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.StringJoinConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.AttachmentGlyphToIconConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.AttachmentGlyphToDescriptionConverter() -> void
LM.App.Wpf.Common.ViewModelBase
LM.App.Wpf.Common.ViewModelBase.ViewModelBase() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Id.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.get -> int
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PdfAnnotation(string! id, string! title) -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.get -> System.Windows.Media.Imaging.BitmapImage?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.Annotations.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Pdf.PdfAnnotation!>!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.ChangeAnnotationColorCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.CopyAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DocumentSource.get -> System.Uri?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.HandleAnnotationSelectionAsync(LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.LoadPdfCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfHash.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfViewerViewModel(LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.App.Wpf.Services.IUserContext! userContext, LM.Core.Abstractions.IPdfAnnotationPreviewStorage! previewStorage, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.Common.IClipboardService! clipboard) -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.RecordAnnotationChangeCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.WebViewBridge.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DeleteAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.Library.LibraryFilterPreset
LM.App.Wpf.Library.LibraryFilterPreset.LibraryFilterPreset() -> void
LM.App.Wpf.Library.LibraryFilterPreset.Id.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Id.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.Name.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Name.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.get -> System.DateTime
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.get -> int
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.State.get -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.Library.LibraryFilterPreset.State.set -> void
LM.App.Wpf.Library.LibraryFilterPresetStore
LM.App.Wpf.Library.LibraryFilterPresetStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.MovePresetAsync(string! presetId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.LibraryFilterPresetStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.ListPresetsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.LibraryFilterPreset!>!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, string? targetFolderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetByIdAsync(string! presetId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
const LM.App.Wpf.Library.Collections.LibraryCollectionFolder.RootId = "collections-root" -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionEntry!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile
LM.App.Wpf.Library.Collections.LibraryCollectionFile.LibraryCollectionFile() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.get -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder?
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.get -> int
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.EnumerateDescendants() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionEntry!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.LibraryCollectionFolder() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.LibraryCollectionMetadata() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore
LM.App.Wpf.Library.Collections.LibraryCollectionStore.AddEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.CreateFolderAsync(string? parentFolderId, string! name, string! createdBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.DeleteFolderAsync(string! folderId, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.LibraryCollectionStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RemoveEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RenameFolderAsync(string! folderId, string! newName, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryPresetFolder
LM.App.Wpf.Library.LibraryPresetFolder.Clone() -> LM.App.Wpf.Library.LibraryPresetFolder!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Id.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Id.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.LibraryPresetFolder() -> void
LM.App.Wpf.Library.LibraryPresetFolder.Name.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Name.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Presets.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryFilterPreset!>!
LM.App.Wpf.Library.LibraryPresetFolder.Presets.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.get -> int
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.set -> void
LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem
LM.App.Wpf.Library.LibraryPresetTreeItem.Folder.get -> LM.App.Wpf.Library.LibraryPresetFolder?
LM.App.Wpf.Library.LibraryPresetTreeItem.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem(LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder, LM.App.Wpf.Library.LibraryPresetFolder? folder, LM.App.Wpf.Library.LibraryFilterPreset? preset) -> void
LM.App.Wpf.Library.LibraryPresetTreeItem.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset?
LM.App.Wpf.Library.LibraryPresetTreeItem.SortOrder.get -> int
LM.App.Wpf.Library.ILibraryEntryEditor
LM.App.Wpf.Library.ILibraryEntryEditor.EditEntryAsync(LM.Core.Models.Entry! entry) -> System.Threading.Tasks.Task<System.Boolean>!
LM.App.Wpf.Library.LibraryFilterState
LM.App.Wpf.Library.LibraryFilterState.LibraryFilterState() -> void
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.get -> bool
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.set -> void
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateFrom.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateFrom.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateTo.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateTo.set -> void
LM.App.Wpf.Library.LibraryFilterState.SortKey.get -> string?
LM.App.Wpf.Library.LibraryFilterState.SortKey.set -> void
LM.App.Wpf.Library.LibraryFilterState.Tags.set -> void
LM.App.Wpf.ViewModels.AddPipeline
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddViewModel
LM.App.Wpf.ViewModels.AddViewModel.AddFilesCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.ViewModels.WatchedFolderScanner? scanner = null, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore? watchedFolderSettings = null, LM.App.Wpf.ViewModels.StagingListViewModel? stagingList = null, LM.App.Wpf.ViewModels.WatchedFoldersViewModel? watchedFolders = null, LM.App.Wpf.Common.Dialogs.IDialogService? dialogService = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.BulkAddFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ClearCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.CommitSelectedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.AddViewModel.Current.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.AddViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.AddViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.AddViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.AddViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.AddViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.AddViewModel.ReviewStagedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Staging.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.AddViewModel.StagingListViewModel.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFolders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFoldersViewModel.get -> LM.App.Wpf.ViewModels.WatchedFoldersViewModel!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.LibraryPresetPickerDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Presets.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.SelectedPresetId.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.EntryId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookAbsolutePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookRelativePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.DisplayLabel.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.ExecutedBy.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.Owner.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.TotalHits.get -> int
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.ConfirmCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.Entries.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.LitSearchRunPickerViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.LibraryPresetSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.set -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Initialize(LM.App.Wpf.Common.SearchSavePromptContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultNotes.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultTags.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.SearchSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingEditorViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingList.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.SelectedWorkspacePath.get -> string?
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.get -> bool
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.WorkspaceChooserViewModel(LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.CanAcceptFileDrop(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleFileDropAsync(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibrarySearchResult
LM.App.Wpf.ViewModels.LibrarySearchResult.Entry.get -> LM.Core.Models.Entry!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasAttachments.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasDoi.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasIdentifiers.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasInternalId.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasLinks.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNct.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPmid.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasRelations.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasSource.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasUserNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.Highlight.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.HighlightDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.IsFullText.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.LibrarySearchResult(LM.Core.Models.Entry! entry, double? score, string? highlight) -> void
LM.App.Wpf.ViewModels.LibrarySearchResult.Score.get -> double?
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentGlyphKind.get -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.TitleSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.YearPresenceSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearDescendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearAscendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SourceSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TypeSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedOnSortKey.get -> System.DateTime
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedBySortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.InternalIdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.DoiSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.PmidSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.NctSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AuthorsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TagsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IsInternalSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SnippetSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreSortKey.get -> double
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.None = 0 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Pdf = 1 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Document = 2 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Presentation = 3 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Generic = 4 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.Library.LibraryLinkItem
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.LibraryLinkItem(string! DisplayText, string! Target, LM.App.Wpf.ViewModels.Library.LinkItemKind Kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.get -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.init -> void
LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Url = 0 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.File = 1 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Folder = 2 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.RunAndBasics = 0 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Metadata = 1 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Workflow = 2 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Summary = 3 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.ProjectEditorStepDescriptor(LM.App.Wpf.ViewModels.Review.ProjectEditorStep Step, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.ReviewTemplateOption(LM.Review.Core.Models.ReviewTemplateKind Kind, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectEditorViewModel() -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.AddStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntryCount.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntrySummary.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ErrorMessage.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.HookRelativePath.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Initialize(LM.App.Wpf.Services.Review.Design.ProjectBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchEntryId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchRunId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageDownCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageUpCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.RemoveStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Result.get -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SaveCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.get -> LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.StageTypes.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStageType>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Stages.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Steps.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.TemplateOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStep.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepDescriptor.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepIndex.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsSummaryStep.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.get -> LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateKind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.NextCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.BackCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ChangeRunCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ConfigureRunReloadHandler(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.App.Wpf.Services.Review.Design.ProjectBlueprint?>!>! handler) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.StageDisplayOptionViewModel(LM.Review.Core.Models.StageContentArea area, bool isSelected) -> void
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Area.get -> LM.Review.Core.Models.StageContentArea
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Description.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.get -> bool
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageBlueprintViewModel(LM.App.Wpf.Services.Review.Design.StageBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageId.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TotalReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.DisplayOptions.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel!>!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TryBuild(out LM.App.Wpf.Services.Review.Design.StageBlueprint! stage, out string? errorMessage) -> bool
LM.App.Wpf.ViewModels.StagingListViewModel
LM.App.Wpf.ViewModels.StagingListViewModel.AddStagedItemsAsync(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Clear() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.CommitSelectedAsync(System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.StagingListViewModel.Current.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.StagingListViewModel.HasItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.HasSelectedItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.StagingListViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.StagingListViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingListViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.StagingListViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.SetCommandGuard(System.Func<System.Func<System.Threading.Tasks.Task!>!, System.Threading.Tasks.Task!>! guard) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.UpdateParentBusy(bool isBusy) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.WatchedFoldersViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList, LM.App.Wpf.ViewModels.WatchedFolderScanner! scanner, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore! settingsStore, LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.WatchedFolder
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.get -> bool
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.LastScanDisplay.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.LastScanUtc.get -> System.DateTimeOffset?
LM.App.Wpf.ViewModels.WatchedFolder.LastScanWasUnchanged.get -> bool?
LM.App.Wpf.ViewModels.WatchedFolder.Path.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.Path.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFolder.ResetScanState() -> void
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusLabel.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusToolTip.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.WatchedFolder() -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(string! path) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig
LM.App.Wpf.ViewModels.WatchedFolderConfig.ApplyState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.ClearState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFolderConfig.CreateSnapshot() -> LM.Core.Models.WatchedFolderSettings!
LM.App.Wpf.ViewModels.WatchedFolderConfig.Load(LM.Core.Models.WatchedFolderSettings! settings) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.StoreState(LM.App.Wpf.ViewModels.WatchedFolder! folder, LM.Core.Models.WatchedFolderState! state) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.WatchedFolderConfig() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Folder.get -> LM.App.Wpf.ViewModels.WatchedFolder!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Items.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.WatchedFolderScanEventArgs(LM.App.Wpf.ViewModels.WatchedFolder! folder, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner
LM.App.Wpf.ViewModels.WatchedFolderScanner.Attach(LM.App.Wpf.ViewModels.WatchedFolderConfig! config) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.ItemsStaged -> System.EventHandler<LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs!>?
LM.App.Wpf.ViewModels.WatchedFolderScanner.ScanAsync(LM.App.Wpf.ViewModels.WatchedFolder? folder, System.Threading.CancellationToken ct, bool force = false) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFolderScanner.WatchedFolderScanner(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.IAddPipeline
LM.App.Wpf.ViewModels.IAddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.IAddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.Library.ILibraryDocumentService
LM.App.Wpf.Library.ILibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.ILibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.LibraryDocumentService
LM.App.Wpf.Library.LibraryDocumentService.LibraryDocumentService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.IAttachmentMetadataPrompt
LM.App.Wpf.Library.IAttachmentMetadataPrompt.RequestMetadataAsync(LM.App.Wpf.Library.AttachmentMetadataPromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.AttachmentMetadataPromptResult?>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.get -> string!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.AttachmentMetadataPromptContext(string! EntryTitle, System.Collections.Generic.IReadOnlyList<string!>! FilePaths) -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>!
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult.AttachmentMetadataPromptResult(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>! Attachments) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection
LM.App.Wpf.Library.AttachmentMetadataSelection.AttachmentMetadataSelection(string! SourcePath, string! Title, LM.Core.Models.AttachmentKind Kind, System.Collections.Generic.IReadOnlyList<string!>! Tags) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.get -> LM.Core.Models.AttachmentKind
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.init -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LibraryFiltersViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! presetStore, LM.App.Wpf.Common.ILibraryPresetPrompt! presetPrompt, LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.SavedSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.get -> string
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedSearchPresetViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, LM.App.Wpf.Library.LibraryFilterPreset! preset, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Summary.get -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.ToSummary() -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.SavedSearchTreeChangedEventArgs(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! presets) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.SavedSearchTreeViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.TreeChanged -> System.EventHandler<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs!>?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ClearCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyPresetAsync(LM.App.Wpf.Common.LibraryPresetSummary! summary, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyState(LM.App.Wpf.Library.LibraryFilterState! state) -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.CaptureState() -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTooltip.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTokens.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.BuildFullTextQuery(string! normalizedQuery) -> LM.Core.Models.Search.FullTextSearchQuery!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.HasSavedPresets.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.GetNormalizedFullTextQuery() -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.NavigationRoots.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RefreshNavigationAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedPresets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedSearches.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleLeftPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleRightPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SortOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RemoveTagCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand<string?>!
LM.App.Wpf.ViewModels.Library.LibrarySortOption
LM.App.Wpf.ViewModels.Library.LibrarySortOption.LibrarySortOption(string! key, string! displayName) -> void
LM.App.Wpf.ViewModels.Library.LibrarySortOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOptions
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.Category = 0 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.SavedSearch = 1 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchEntry = 2 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchRun = 3 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.LibraryNavigationNodeViewModel(string! name, LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.HasChildren.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Kind.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.get -> object?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.init -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.LibraryColumnOption(string! key, string! displayName, bool isVisible) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LibraryColumnVisibility() -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LoadFrom(System.Collections.Generic.IReadOnlyDictionary<string!, bool>! source) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.Snapshot() -> System.Collections.Generic.IReadOnlyDictionary<string!, bool>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LibraryResultsViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.App.Wpf.Library.ILibraryEntryEditor! entryEditor, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.Library.IAttachmentMetadataPrompt! attachmentPrompt, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.Core.Abstractions.IHasher! hasher, LM.App.Wpf.Services.Pdf.IPdfViewerLauncher! pdfViewerLauncher) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadFullTextResultsAsync(System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.FullTextSearchHit!>! hits, System.Func<LM.Core.Models.Entry!, bool>? entryFilter = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadMetadataResults(System.Collections.Generic.IEnumerable<LM.Core.Models.Entry!>! entries) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResetSortForSearch(LM.App.Wpf.ViewModels.Library.LibrarySortOption! defaultOption) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridLoaded(System.Windows.RoutedEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridSorting(System.Windows.Controls.DataGridSortingEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.MarkAsMetadataResults() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResultsAreFullText.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.get -> LM.App.Wpf.ViewModels.LibrarySearchResult?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LinkItems.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryLinkItem!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.EditEntryAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelection.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedItems.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectionChanged -> System.EventHandler?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelectedAbstract.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ToggleBlacklistAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.get -> int
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.LibraryCollectionFolderViewModel(LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! tree, string! id, string! name, LM.App.Wpf.Library.Collections.LibraryCollectionMetadata! metadata) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.LibraryCollectionsViewModel(LM.App.Wpf.Library.Collections.LibraryCollectionStore! store, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPrimaryAttachment.get -> bool
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.LibrarySearchQueryBox() -> void
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.get -> string!
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel
LM.App.Wpf.ViewModels.LibraryViewModel.Filters.get -> LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LibraryViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFullTextSearchService! fullTextSearch, LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel! filters, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.Configuration.IUserPreferencesStore! preferencesStore, LM.App.Wpf.Common.IClipboardService! clipboard, LM.App.Wpf.Common.IFileExplorerService! fileExplorer, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! litSearchOrganizer, LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! collections, LM.App.Wpf.Library.Collections.LibraryCollectionStore! collectionStore) -> void
LM.App.Wpf.ViewModels.LibraryViewModel.Results.get -> LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.Collections.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibraryColumnOption!>!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnVisibility.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility!
LM.App.Wpf.ViewModels.SearchItemViewModel
LM.App.Wpf.ViewModels.SearchItemViewModel.Header.get -> string!
LM.App.Wpf.ViewModels.SearchItemViewModel.SearchItemViewModel(string! header, LM.App.Wpf.ViewModels.LibraryViewModel! vm) -> void
LM.App.Wpf.ViewModels.SearchItemViewModel.Vm.get -> LM.App.Wpf.ViewModels.LibraryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel
LM.App.Wpf.ViewModels.SearchViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.SearchViewModel.ExportSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.From.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.LoadSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRuns.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.PreviousSearchSummary!>!
LM.App.Wpf.ViewModels.SearchViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRunsCount.get -> int
LM.App.Wpf.ViewModels.SearchViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.SearchViewModel.Query.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.get -> LM.Core.Models.SearchHit?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RunSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SaveSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleLeftPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleRightPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SearchViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IWorkSpaceService! ws, LM.App.Wpf.Common.ISearchSavePrompt! savePrompt, LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel! providers, LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel! history, LM.Infrastructure.Search.PubMedSearchProvider! pubMedProvider, LM.Core.Abstractions.Configuration.IUserPreferencesStore? preferencesStore = null) -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.get -> LM.App.Wpf.ViewModels.PreviousSearchSummary?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.StartPreviousRunCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ShowRunDetailsCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleFavoriteCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.To.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.History.get -> LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel.Providers.get -> LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecordExecutionAsync(LM.Core.Models.Search.SearchExecutionResult! result, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.SearchHistoryViewModel(LM.Core.Abstractions.Configuration.ISearchHistoryStore! store) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.ExecuteSearchAsync() -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.RunSearchCommand.get -> LM.App.Wpf.Common.AsyncRelayCommand!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchExecuted -> System.EventHandler<LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs!>?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchProvidersViewModel(LM.Core.Abstractions.Search.ISearchExecutionService! executionService) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.set -> void
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.Result.get -> LM.Core.Models.Search.SearchExecutionResult!
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.SearchExecutedEventArgs(LM.Core.Models.Search.SearchExecutionResult! result) -> void
LM.App.Wpf.ViewModels.PreviousSearchSummary
LM.App.Wpf.ViewModels.PreviousSearchSummary.DisplayName.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.EntryId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.FavoriteRunId.get -> string?
LM.App.Wpf.ViewModels.PreviousSearchSummary.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastRunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.Provider.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.Query.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunCount.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TotalHits.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TagsDisplay.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption
LM.App.Wpf.ViewModels.SearchDatabaseOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption.SearchDatabaseOption(LM.Core.Models.SearchDatabase value, string! displayName) -> void
LM.App.Wpf.ViewModels.SearchDatabaseOption.Value.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.StagingItem
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.get -> LM.HubSpoke.Models.ArticleHook?
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.DisplayName.get -> string?
LM.App.Wpf.ViewModels.StagingItem.DisplayName.set -> void
LM.App.Wpf.ViewModels.StagingItem.Doi.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Doi.set -> void
LM.App.Wpf.ViewModels.StagingItem.FilePath.get -> string!
LM.App.Wpf.ViewModels.StagingItem.FilePath.set -> void
LM.App.Wpf.ViewModels.StagingItem.Internal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Internal.set -> void
LM.App.Wpf.ViewModels.StagingItem.InternalId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.InternalId.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsDuplicate.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsNearMatch.get -> bool
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Notes.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Notes.set -> void
LM.App.Wpf.ViewModels.StagingItem.OriginalFileName.get -> string!
LM.App.Wpf.ViewModels.StagingItem.Pmid.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Pmid.set -> void
LM.App.Wpf.ViewModels.StagingItem.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingItem.Selected.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Selected.set -> void
LM.App.Wpf.ViewModels.StagingItem.Similarity.get -> double
LM.App.Wpf.ViewModels.StagingItem.Similarity.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Source.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Source.set -> void
LM.App.Wpf.ViewModels.StagingItem.StagingItem() -> void
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.get -> string!
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.set -> void
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.Title.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Title.set -> void
LM.App.Wpf.ViewModels.StagingItem.Type.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingItem.Type.set -> void
LM.App.Wpf.ViewModels.StagingItem.Year.get -> int?
LM.App.Wpf.ViewModels.StagingItem.Year.set -> void
LM.App.Wpf.Views.AddView
LM.App.Wpf.Views.Behaviors.FileDropRequest
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.get -> System.Windows.DragEventArgs!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.get -> object?
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.FileDropRequest(System.Collections.Generic.IReadOnlyList<string!>! Paths, object? DropTarget, System.Windows.DragEventArgs! Args) -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.init -> void
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior.SavedSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.AddView.AddView() -> void
LM.App.Wpf.Views.AddView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog
LM.App.Wpf.Views.LibraryPresetPickerDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.LibraryPresetPickerDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel!
LM.App.Wpf.Views.LibraryPresetPrompt.LibraryPresetPrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.InitializeComponent() -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.AttachmentMetadataDialog(LM.App.Wpf.ViewModels.Library.AttachmentMetadataDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog
LM.App.Wpf.Views.LibraryPresetSaveDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.LibraryPresetSaveDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel!
LM.App.Wpf.Views.LibraryView
LM.App.Wpf.Views.LibraryView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryView.LibraryView() -> void
LM.App.Wpf.Views.PdfViewer
LM.App.Wpf.Views.PdfViewer.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewer.PdfViewer() -> void
LM.App.Wpf.Views.Library.TagTokenSelector
LM.App.Wpf.Views.Library.TagTokenSelector.InitializeComponent() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.FilteredSuggestions.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>?
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.set -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagTokenSelector() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.get -> System.Collections.Generic.IEnumerable<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.set -> void
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTagsProperty
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabularyProperty
LM.App.Wpf.Views.LibraryPresetPrompt
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Views.Review.Controls.DecisionBadge
LM.App.Wpf.Views.Review.Controls.DecisionBadge.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.DecisionBadge() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.get -> LM.Review.Core.Models.ScreeningStatus
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.set -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.ExtractionFieldEditor() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.ScreeningQueueControl() -> void
LM.App.Wpf.Views.Review.ReviewView
LM.App.Wpf.Views.Review.ReviewView.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ReviewView.ReviewView() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.LitSearchRunPickerWindow(LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel!
LM.App.Wpf.Views.Review.ProjectEditorWindow
LM.App.Wpf.Views.Review.ProjectEditorWindow.Attach(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.ProjectEditorWindow() -> void
LM.App.Wpf.Views.SearchSavePrompt
LM.App.Wpf.Views.SearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Views.SearchSavePrompt.SearchSavePrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.DataGridColumnVisibilityBehavior() -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.set -> void
LM.App.Wpf.Views.SearchView
LM.App.Wpf.Views.SearchView.InitializeComponent() -> void
LM.App.Wpf.Views.SearchView.SearchView() -> void
LM.App.Wpf.Views.ShellWindow
LM.App.Wpf.Views.ShellWindow.InitializeComponent() -> void
LM.App.Wpf.Views.ShellWindow.LoadWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.NewWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.ShellWindow() -> void
LM.App.Wpf.Views.StagingEditorWindow
LM.App.Wpf.Views.StagingEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.StagingEditorWindow.StagingEditorWindow(LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel! viewModel) -> void
override LM.App.Wpf.ViewModels.Library.LibrarySortOption.ToString() -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Name.get -> string!
override LM.App.Wpf.Views.Library.AttachmentMetadataDialog.OnClosed(System.EventArgs! e) -> void
LM.App.Wpf.Views.WorkspaceChooser
LM.App.Wpf.Views.WorkspaceChooser.InitializeComponent() -> void
LM.App.Wpf.Views.WorkspaceChooser.SelectedWorkspacePath.get -> string?
LM.App.Wpf.Views.WorkspaceChooser.WorkspaceChooser(LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel! viewModel) -> void
LM.App.Wpf.Views.WorkspaceChooser.Configure(System.Action<LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel!>! configure) -> void
override LM.App.Wpf.App.OnExit(System.Windows.ExitEventArgs! e) -> void
override LM.App.Wpf.App.OnStartup(System.Windows.StartupEventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetPickerDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetSaveDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.StagingEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.WorkspaceChooser.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.ProjectEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.OnClosed(System.EventArgs! e) -> void
static LM.App.Wpf.App.Main() -> void
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.All.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.NewestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.OldestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleAscending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleDescending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Clone() -> LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.LitSearchOrganizerStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveEntryAsync(string! entryId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.SyncEntriesAsync(System.Collections.Generic.IEnumerable<string!>! entryIds, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema.CurrentVersion -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.LitSearchEntryViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! title, string? query) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Query.get -> string?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.CanDelete.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsRoot.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.LitSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! name, bool isRoot) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.LitSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.LitSearchRunViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! runId, string! label, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel! parent) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.LitSearchTreeViewModel(LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt, LM.Core.Abstractions.IEntryStore! entryStore, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
---------- LM.App.Wpf ----------
#nullable enable
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.ColumnKeyProperty -> System.Windows.DependencyProperty!
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.GetColumnKey(System.Windows.DependencyObject! element) -> string?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.SetColumnKey(System.Windows.DependencyObject! element, string? value) -> void
#nullable enable
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Id.get -> string!
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.IsDraggable.get -> bool
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Name.get -> string!
const LM.App.Wpf.Library.LibraryPresetFolder.RootId = "root" -> string!
const LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.RootId = "root" -> string!
const LM.App.Wpf.ViewModels.StagingItem.DuplicateThreshold = 0.999 -> double
const LM.App.Wpf.ViewModels.StagingItem.NearThreshold = 0.75 -> double
LM.App.Wpf.App
LM.App.Wpf.App.App() -> void
LM.App.Wpf.App.InitializeComponent() -> void
LM.App.Wpf.Common.AsyncRelayCommand
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<object?, System.Threading.Tasks.Task!>! execute, System.Func<object?, bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<System.Threading.Tasks.Task!>! execute, System.Func<bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.AsyncRelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.AsyncRelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.AsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.IAsyncRelayCommand
LM.App.Wpf.Common.IAsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter
LM.App.Wpf.Common.BooleanToOpacityConverter.BooleanToOpacityConverter() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.set -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.set -> void
LM.App.Wpf.Common.Converters.ProjectEditorConverters
LM.App.Wpf.Common.Converters.ProjectEditorConverters.StageSelectionEquality.get -> System.Windows.Data.IMultiValueConverter!
LM.App.Wpf.Common.LibraryPresetSaveContext.LibraryPresetSaveContext(string! DefaultName, System.Collections.Generic.IReadOnlyCollection<string!>! ExistingNames, string! Title = "Save Library Preset", string! Prompt = "Name this filter preset.") -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.LibraryCollectionEntry() -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.DeletePresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenamePresetAsync(string! presetId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
LM.App.Wpf.Library.LibraryFilterState.Tags.get -> string![]!
LM.App.Wpf.Library.LibraryPresetFolder.EnumerateChildren() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.LibraryPresetTreeItem>!
LM.App.Wpf.Library.LibraryPresetNodeKind.Folder = 0 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetNodeKind.Preset = 1 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.LitSearchOrganizerEntry() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.LitSearchOrganizerFolder() -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectBlueprint(string! projectId, string! name, System.DateTimeOffset createdAtUtc, string! createdBy, string! litSearchEntryId, string! litSearchRunId, System.Collections.Generic.IReadOnlyList<string!>! checkedEntryIds, string? hookRelativePath, LM.Review.Core.Models.ReviewTemplateKind template, string! metadataNotes, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>! stages) -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CheckedEntryIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedAtUtc.get -> System.DateTimeOffset
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedBy.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.HookRelativePath.get -> string?
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchEntryId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchRunId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Template.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.MetadataNotes.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Stages.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.With(string? name = null, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>? stages = null, LM.Review.Core.Models.ReviewTemplateKind? template = null, string? metadataNotes = null, string? litSearchEntryId = null, string? litSearchRunId = null, System.Collections.Generic.IReadOnlyList<string!>? checkedEntryIds = null) -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint!
LM.App.Wpf.Services.Review.Design.StageBlueprint
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageBlueprint(string! stageId, string! name, LM.Review.Core.Models.ReviewStageType stageType, int primaryReviewers, int secondaryReviewers, bool requiresConsensus, int minimumAgreements, bool escalateOnDisagreement, LM.Review.Core.Models.StageDisplayProfile! displayProfile) -> void
LM.App.Wpf.Services.Review.Design.StageBlueprint.EscalateOnDisagreement.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.MinimumAgreements.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.PrimaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.RequiresConsensus.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.SecondaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageId.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.Services.Review.Design.StageBlueprint.DisplayProfile.get -> LM.Review.Core.Models.StageDisplayProfile!
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher.Show(string! entryId, string! pdfAbsolutePath, string! pdfHash) -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.AddSelectionToFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.MoveFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RemoveSelectionFromFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ItemsView.get -> System.ComponentModel.ICollectionView!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.LitSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.SavedSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SavedSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeletePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.LoadPresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenamePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.LibraryViewModel.AllTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.LibraryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.LitSearchOrganizer.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LoadCollectionEntriesAsync(string! collectionId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.OpenPdfAnnotationsCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.LibraryViewModel.RefreshTagsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.ToggleBlacklistCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationTypeDisplay.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Dispose() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.HighlightBrush.get -> System.Windows.Media.Brush!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.PdfAnnotationColorCommandParameter() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior.CollectionTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior.LitSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter
LM.App.Wpf.Views.Converters.EnumEqualsConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.EnumEqualsConverter() -> void
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.InverseBooleanToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.AnnotationColorParameterConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.Convert(object?[]! values, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.ConvertBack(object? value, System.Type![]! targetTypes, object? parameter, System.Globalization.CultureInfo! culture) -> object?[]!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NullOrEmptyToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList
LM.App.Wpf.Views.Pdf.PdfAnnotationList.PdfAnnotationList() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow
LM.App.Wpf.Views.PdfViewerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow.PdfViewerWindow() -> void
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.PdfViewerHostObject(LM.App.Wpf.Views.PdfViewer! owner) -> void
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogCloseRequestedEventArgs(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogResult.get -> bool?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.CloseRequested -> System.EventHandler<LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs!>?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.DialogViewModelBase() -> void
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.RequestClose(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.IDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.WpfDialogService(System.IServiceProvider! services) -> void
LM.App.Wpf.Common.ILibraryPresetPrompt
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Common.IClipboardService
LM.App.Wpf.Common.IClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.ClipboardService
LM.App.Wpf.Common.ClipboardService.ClipboardService() -> void
LM.App.Wpf.Common.ClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.IFileExplorerService
LM.App.Wpf.Common.IFileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.FileExplorerService
LM.App.Wpf.Common.FileExplorerService.FileExplorerService() -> void
LM.App.Wpf.Common.FileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.ISearchSavePrompt
LM.App.Wpf.Common.ISearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Common.SearchSavePromptContext
LM.App.Wpf.Common.SearchSavePromptContext.Database.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.From.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.Query.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.SearchSavePromptContext(string! Query, LM.Core.Models.SearchDatabase Database, System.DateTime? From, System.DateTime? To, string! DefaultName, string! DefaultNotes, System.Collections.Generic.IReadOnlyList<string!>! DefaultTags) -> void
LM.App.Wpf.Common.SearchSavePromptContext.Database.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.SearchSavePromptContext.From.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.Query.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.To.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.To.init -> void
LM.App.Wpf.Common.SearchSavePromptResult
LM.App.Wpf.Common.SearchSavePromptResult.Name.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Notes.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Tags.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.SearchSavePromptResult(string! Name, string! Notes, string! Tags) -> void
LM.App.Wpf.Common.SearchSavePromptResult.Name.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Notes.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Tags.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSaveResult
LM.App.Wpf.Common.LibraryPresetSaveResult.LibraryPresetSaveResult(string! Name) -> void
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.get -> bool
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.LibraryPresetSelectionContext(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! Presets, bool AllowLoad, string! Title) -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.LibraryPresetSelectionResult(string? SelectedPresetId, System.Collections.Generic.IReadOnlyList<string!>! DeletedPresetIds) -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.get -> string?
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.init -> void
LM.App.Wpf.Common.LibraryPresetSummary
LM.App.Wpf.Common.LibraryPresetSummary.Id.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Id.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.LibraryPresetSummary(string! Id, string! Name, System.DateTime SavedUtc) -> void
LM.App.Wpf.Common.LibraryPresetSummary.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.get -> System.DateTime
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.init -> void
LM.App.Wpf.Common.RelayCommand
LM.App.Wpf.Common.RelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.RelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.RelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.RelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.RelayCommand.RelayCommand(System.Action<object?>! exec, System.Func<object?, bool>? can = null) -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.get -> bool
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.init -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.get -> string?
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.init -> void
LM.App.Wpf.Common.Dialogs.FolderPickerOptions
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.get -> string?
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.init -> void
LM.App.Wpf.Common.Dialogs.IDialogService
LM.App.Wpf.Common.Dialogs.IDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.StringJoinConverter
LM.App.Wpf.Common.StringJoinConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.StringJoinConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.AttachmentGlyphToIconConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.AttachmentGlyphToDescriptionConverter() -> void
LM.App.Wpf.Common.ViewModelBase
LM.App.Wpf.Common.ViewModelBase.ViewModelBase() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Id.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.get -> int
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PdfAnnotation(string! id, string! title) -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.get -> System.Windows.Media.Imaging.BitmapImage?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.Annotations.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Pdf.PdfAnnotation!>!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.ChangeAnnotationColorCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.CopyAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DocumentSource.get -> System.Uri?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.HandleAnnotationSelectionAsync(LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.LoadPdfCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfHash.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfViewerViewModel(LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.App.Wpf.Services.IUserContext! userContext, LM.Core.Abstractions.IPdfAnnotationPreviewStorage! previewStorage, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.Common.IClipboardService! clipboard) -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.RecordAnnotationChangeCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.WebViewBridge.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DeleteAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.Library.LibraryFilterPreset
LM.App.Wpf.Library.LibraryFilterPreset.LibraryFilterPreset() -> void
LM.App.Wpf.Library.LibraryFilterPreset.Id.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Id.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.Name.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Name.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.get -> System.DateTime
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.get -> int
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.State.get -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.Library.LibraryFilterPreset.State.set -> void
LM.App.Wpf.Library.LibraryFilterPresetStore
LM.App.Wpf.Library.LibraryFilterPresetStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.MovePresetAsync(string! presetId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.LibraryFilterPresetStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.ListPresetsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.LibraryFilterPreset!>!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, string? targetFolderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetByIdAsync(string! presetId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
const LM.App.Wpf.Library.Collections.LibraryCollectionFolder.RootId = "collections-root" -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionEntry!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile
LM.App.Wpf.Library.Collections.LibraryCollectionFile.LibraryCollectionFile() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.get -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder?
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.get -> int
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.EnumerateDescendants() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionEntry!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.LibraryCollectionFolder() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.LibraryCollectionMetadata() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore
LM.App.Wpf.Library.Collections.LibraryCollectionStore.AddEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.CreateFolderAsync(string? parentFolderId, string! name, string! createdBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.DeleteFolderAsync(string! folderId, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.LibraryCollectionStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RemoveEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RenameFolderAsync(string! folderId, string! newName, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryPresetFolder
LM.App.Wpf.Library.LibraryPresetFolder.Clone() -> LM.App.Wpf.Library.LibraryPresetFolder!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Id.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Id.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.LibraryPresetFolder() -> void
LM.App.Wpf.Library.LibraryPresetFolder.Name.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Name.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Presets.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryFilterPreset!>!
LM.App.Wpf.Library.LibraryPresetFolder.Presets.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.get -> int
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.set -> void
LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem
LM.App.Wpf.Library.LibraryPresetTreeItem.Folder.get -> LM.App.Wpf.Library.LibraryPresetFolder?
LM.App.Wpf.Library.LibraryPresetTreeItem.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem(LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder, LM.App.Wpf.Library.LibraryPresetFolder? folder, LM.App.Wpf.Library.LibraryFilterPreset? preset) -> void
LM.App.Wpf.Library.LibraryPresetTreeItem.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset?
LM.App.Wpf.Library.LibraryPresetTreeItem.SortOrder.get -> int
LM.App.Wpf.Library.ILibraryEntryEditor
LM.App.Wpf.Library.ILibraryEntryEditor.EditEntryAsync(LM.Core.Models.Entry! entry) -> System.Threading.Tasks.Task<System.Boolean>!
LM.App.Wpf.Library.LibraryFilterState
LM.App.Wpf.Library.LibraryFilterState.LibraryFilterState() -> void
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.get -> bool
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.set -> void
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateFrom.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateFrom.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateTo.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateTo.set -> void
LM.App.Wpf.Library.LibraryFilterState.SortKey.get -> string?
LM.App.Wpf.Library.LibraryFilterState.SortKey.set -> void
LM.App.Wpf.Library.LibraryFilterState.Tags.set -> void
LM.App.Wpf.ViewModels.AddPipeline
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddViewModel
LM.App.Wpf.ViewModels.AddViewModel.AddFilesCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.ViewModels.WatchedFolderScanner? scanner = null, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore? watchedFolderSettings = null, LM.App.Wpf.ViewModels.StagingListViewModel? stagingList = null, LM.App.Wpf.ViewModels.WatchedFoldersViewModel? watchedFolders = null, LM.App.Wpf.Common.Dialogs.IDialogService? dialogService = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.BulkAddFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ClearCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.CommitSelectedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.AddViewModel.Current.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.AddViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.AddViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.AddViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.AddViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.AddViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.AddViewModel.ReviewStagedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Staging.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.AddViewModel.StagingListViewModel.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFolders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFoldersViewModel.get -> LM.App.Wpf.ViewModels.WatchedFoldersViewModel!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.LibraryPresetPickerDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Presets.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.SelectedPresetId.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.EntryId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookAbsolutePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookRelativePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.DisplayLabel.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.ExecutedBy.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.Owner.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.TotalHits.get -> int
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.ConfirmCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.Entries.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.LitSearchRunPickerViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.LibraryPresetSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.set -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Initialize(LM.App.Wpf.Common.SearchSavePromptContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultNotes.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultTags.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.SearchSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingEditorViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingList.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.SelectedWorkspacePath.get -> string?
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.get -> bool
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.WorkspaceChooserViewModel(LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.CanAcceptFileDrop(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleFileDropAsync(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibrarySearchResult
LM.App.Wpf.ViewModels.LibrarySearchResult.Entry.get -> LM.Core.Models.Entry!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasAttachments.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasDoi.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasIdentifiers.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasInternalId.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasLinks.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNct.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPmid.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasRelations.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasSource.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasUserNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.Highlight.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.HighlightDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.IsFullText.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.LibrarySearchResult(LM.Core.Models.Entry! entry, double? score, string? highlight) -> void
LM.App.Wpf.ViewModels.LibrarySearchResult.Score.get -> double?
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentGlyphKind.get -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.TitleSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.YearPresenceSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearDescendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearAscendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SourceSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TypeSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedOnSortKey.get -> System.DateTime
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedBySortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.InternalIdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.DoiSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.PmidSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.NctSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AuthorsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TagsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IsInternalSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SnippetSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreSortKey.get -> double
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.None = 0 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Pdf = 1 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Document = 2 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Presentation = 3 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Generic = 4 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.Library.LibraryLinkItem
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.LibraryLinkItem(string! DisplayText, string! Target, LM.App.Wpf.ViewModels.Library.LinkItemKind Kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.get -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.init -> void
LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Url = 0 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.File = 1 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Folder = 2 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.RunAndBasics = 0 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Metadata = 1 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Workflow = 2 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Summary = 3 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.ProjectEditorStepDescriptor(LM.App.Wpf.ViewModels.Review.ProjectEditorStep Step, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.ReviewTemplateOption(LM.Review.Core.Models.ReviewTemplateKind Kind, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectEditorViewModel() -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.AddStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntryCount.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntrySummary.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ErrorMessage.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.HookRelativePath.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Initialize(LM.App.Wpf.Services.Review.Design.ProjectBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchEntryId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchRunId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageDownCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageUpCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.RemoveStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Result.get -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SaveCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.get -> LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.StageTypes.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStageType>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Stages.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Steps.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.TemplateOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStep.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepDescriptor.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepIndex.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsSummaryStep.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.get -> LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateKind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.NextCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.BackCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ChangeRunCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ConfigureRunReloadHandler(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.App.Wpf.Services.Review.Design.ProjectBlueprint?>!>! handler) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.StageDisplayOptionViewModel(LM.Review.Core.Models.StageContentArea area, bool isSelected) -> void
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Area.get -> LM.Review.Core.Models.StageContentArea
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Description.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.get -> bool
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageBlueprintViewModel(LM.App.Wpf.Services.Review.Design.StageBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageId.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TotalReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.DisplayOptions.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel!>!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TryBuild(out LM.App.Wpf.Services.Review.Design.StageBlueprint! stage, out string? errorMessage) -> bool
LM.App.Wpf.ViewModels.StagingListViewModel
LM.App.Wpf.ViewModels.StagingListViewModel.AddStagedItemsAsync(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Clear() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.CommitSelectedAsync(System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.StagingListViewModel.Current.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.StagingListViewModel.HasItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.HasSelectedItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.StagingListViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.StagingListViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingListViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.StagingListViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.SetCommandGuard(System.Func<System.Func<System.Threading.Tasks.Task!>!, System.Threading.Tasks.Task!>! guard) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.UpdateParentBusy(bool isBusy) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.WatchedFoldersViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList, LM.App.Wpf.ViewModels.WatchedFolderScanner! scanner, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore! settingsStore, LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.WatchedFolder
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.get -> bool
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.LastScanDisplay.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.LastScanUtc.get -> System.DateTimeOffset?
LM.App.Wpf.ViewModels.WatchedFolder.LastScanWasUnchanged.get -> bool?
LM.App.Wpf.ViewModels.WatchedFolder.Path.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.Path.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFolder.ResetScanState() -> void
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusLabel.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusToolTip.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.WatchedFolder() -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(string! path) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig
LM.App.Wpf.ViewModels.WatchedFolderConfig.ApplyState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.ClearState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFolderConfig.CreateSnapshot() -> LM.Core.Models.WatchedFolderSettings!
LM.App.Wpf.ViewModels.WatchedFolderConfig.Load(LM.Core.Models.WatchedFolderSettings! settings) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.StoreState(LM.App.Wpf.ViewModels.WatchedFolder! folder, LM.Core.Models.WatchedFolderState! state) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.WatchedFolderConfig() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Folder.get -> LM.App.Wpf.ViewModels.WatchedFolder!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Items.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.WatchedFolderScanEventArgs(LM.App.Wpf.ViewModels.WatchedFolder! folder, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner
LM.App.Wpf.ViewModels.WatchedFolderScanner.Attach(LM.App.Wpf.ViewModels.WatchedFolderConfig! config) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.ItemsStaged -> System.EventHandler<LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs!>?
LM.App.Wpf.ViewModels.WatchedFolderScanner.ScanAsync(LM.App.Wpf.ViewModels.WatchedFolder? folder, System.Threading.CancellationToken ct, bool force = false) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFolderScanner.WatchedFolderScanner(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.IAddPipeline
LM.App.Wpf.ViewModels.IAddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.IAddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.Library.ILibraryDocumentService
LM.App.Wpf.Library.ILibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.ILibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.LibraryDocumentService
LM.App.Wpf.Library.LibraryDocumentService.LibraryDocumentService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.IAttachmentMetadataPrompt
LM.App.Wpf.Library.IAttachmentMetadataPrompt.RequestMetadataAsync(LM.App.Wpf.Library.AttachmentMetadataPromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.AttachmentMetadataPromptResult?>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.get -> string!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.AttachmentMetadataPromptContext(string! EntryTitle, System.Collections.Generic.IReadOnlyList<string!>! FilePaths) -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>!
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult.AttachmentMetadataPromptResult(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>! Attachments) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection
LM.App.Wpf.Library.AttachmentMetadataSelection.AttachmentMetadataSelection(string! SourcePath, string! Title, LM.Core.Models.AttachmentKind Kind, System.Collections.Generic.IReadOnlyList<string!>! Tags) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.get -> LM.Core.Models.AttachmentKind
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.init -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LibraryFiltersViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! presetStore, LM.App.Wpf.Common.ILibraryPresetPrompt! presetPrompt, LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.SavedSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.get -> string
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedSearchPresetViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, LM.App.Wpf.Library.LibraryFilterPreset! preset, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Summary.get -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.ToSummary() -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.SavedSearchTreeChangedEventArgs(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! presets) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.SavedSearchTreeViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.TreeChanged -> System.EventHandler<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs!>?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ClearCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyPresetAsync(LM.App.Wpf.Common.LibraryPresetSummary! summary, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyState(LM.App.Wpf.Library.LibraryFilterState! state) -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.CaptureState() -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTooltip.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTokens.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.BuildFullTextQuery(string! normalizedQuery) -> LM.Core.Models.Search.FullTextSearchQuery!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.HasSavedPresets.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.GetNormalizedFullTextQuery() -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.NavigationRoots.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RefreshNavigationAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedPresets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedSearches.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleLeftPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleRightPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SortOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RemoveTagCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand<string?>!
LM.App.Wpf.ViewModels.Library.LibrarySortOption
LM.App.Wpf.ViewModels.Library.LibrarySortOption.LibrarySortOption(string! key, string! displayName) -> void
LM.App.Wpf.ViewModels.Library.LibrarySortOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOptions
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.Category = 0 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.SavedSearch = 1 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchEntry = 2 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchRun = 3 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.LibraryNavigationNodeViewModel(string! name, LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.HasChildren.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Kind.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.get -> object?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.init -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.LibraryColumnOption(string! key, string! displayName, bool isVisible) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LibraryColumnVisibility() -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LoadFrom(System.Collections.Generic.IReadOnlyDictionary<string!, bool>! source) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.Snapshot() -> System.Collections.Generic.IReadOnlyDictionary<string!, bool>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LibraryResultsViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.App.Wpf.Library.ILibraryEntryEditor! entryEditor, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.Library.IAttachmentMetadataPrompt! attachmentPrompt, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.Core.Abstractions.IHasher! hasher, LM.App.Wpf.Services.Pdf.IPdfViewerLauncher! pdfViewerLauncher) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadFullTextResultsAsync(System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.FullTextSearchHit!>! hits, System.Func<LM.Core.Models.Entry!, bool>? entryFilter = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadMetadataResults(System.Collections.Generic.IEnumerable<LM.Core.Models.Entry!>! entries) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResetSortForSearch(LM.App.Wpf.ViewModels.Library.LibrarySortOption! defaultOption) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridLoaded(System.Windows.RoutedEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridSorting(System.Windows.Controls.DataGridSortingEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.MarkAsMetadataResults() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResultsAreFullText.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.get -> LM.App.Wpf.ViewModels.LibrarySearchResult?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LinkItems.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryLinkItem!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.EditEntryAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelection.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedItems.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectionChanged -> System.EventHandler?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelectedAbstract.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ToggleBlacklistAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.get -> int
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.LibraryCollectionFolderViewModel(LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! tree, string! id, string! name, LM.App.Wpf.Library.Collections.LibraryCollectionMetadata! metadata) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.LibraryCollectionsViewModel(LM.App.Wpf.Library.Collections.LibraryCollectionStore! store, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPrimaryAttachment.get -> bool
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.LibrarySearchQueryBox() -> void
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.get -> string!
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel
LM.App.Wpf.ViewModels.LibraryViewModel.Filters.get -> LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LibraryViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFullTextSearchService! fullTextSearch, LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel! filters, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.Configuration.IUserPreferencesStore! preferencesStore, LM.App.Wpf.Common.IClipboardService! clipboard, LM.App.Wpf.Common.IFileExplorerService! fileExplorer, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! litSearchOrganizer, LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! collections, LM.App.Wpf.Library.Collections.LibraryCollectionStore! collectionStore) -> void
LM.App.Wpf.ViewModels.LibraryViewModel.Results.get -> LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.Collections.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibraryColumnOption!>!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnVisibility.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility!
LM.App.Wpf.ViewModels.SearchItemViewModel
LM.App.Wpf.ViewModels.SearchItemViewModel.Header.get -> string!
LM.App.Wpf.ViewModels.SearchItemViewModel.SearchItemViewModel(string! header, LM.App.Wpf.ViewModels.LibraryViewModel! vm) -> void
LM.App.Wpf.ViewModels.SearchItemViewModel.Vm.get -> LM.App.Wpf.ViewModels.LibraryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel
LM.App.Wpf.ViewModels.SearchViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.SearchViewModel.ExportSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.From.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.LoadSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRuns.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.PreviousSearchSummary!>!
LM.App.Wpf.ViewModels.SearchViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRunsCount.get -> int
LM.App.Wpf.ViewModels.SearchViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.SearchViewModel.Query.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.get -> LM.Core.Models.SearchHit?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RunSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SaveSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleLeftPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleRightPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SearchViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IWorkSpaceService! ws, LM.App.Wpf.Common.ISearchSavePrompt! savePrompt, LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel! providers, LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel! history, LM.Infrastructure.Search.PubMedSearchProvider! pubMedProvider, LM.Core.Abstractions.Configuration.IUserPreferencesStore? preferencesStore = null) -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.get -> LM.App.Wpf.ViewModels.PreviousSearchSummary?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.StartPreviousRunCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ShowRunDetailsCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleFavoriteCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.To.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.History.get -> LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel.Providers.get -> LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecordExecutionAsync(LM.Core.Models.Search.SearchExecutionResult! result, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.SearchHistoryViewModel(LM.Core.Abstractions.Configuration.ISearchHistoryStore! store) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.ExecuteSearchAsync() -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.RunSearchCommand.get -> LM.App.Wpf.Common.AsyncRelayCommand!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchExecuted -> System.EventHandler<LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs!>?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchProvidersViewModel(LM.Core.Abstractions.Search.ISearchExecutionService! executionService) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.set -> void
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.Result.get -> LM.Core.Models.Search.SearchExecutionResult!
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.SearchExecutedEventArgs(LM.Core.Models.Search.SearchExecutionResult! result) -> void
LM.App.Wpf.ViewModels.PreviousSearchSummary
LM.App.Wpf.ViewModels.PreviousSearchSummary.DisplayName.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.EntryId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.FavoriteRunId.get -> string?
LM.App.Wpf.ViewModels.PreviousSearchSummary.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastRunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.Provider.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.Query.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunCount.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TotalHits.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TagsDisplay.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption
LM.App.Wpf.ViewModels.SearchDatabaseOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption.SearchDatabaseOption(LM.Core.Models.SearchDatabase value, string! displayName) -> void
LM.App.Wpf.ViewModels.SearchDatabaseOption.Value.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.StagingItem
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.get -> LM.HubSpoke.Models.ArticleHook?
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.DisplayName.get -> string?
LM.App.Wpf.ViewModels.StagingItem.DisplayName.set -> void
LM.App.Wpf.ViewModels.StagingItem.Doi.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Doi.set -> void
LM.App.Wpf.ViewModels.StagingItem.FilePath.get -> string!
LM.App.Wpf.ViewModels.StagingItem.FilePath.set -> void
LM.App.Wpf.ViewModels.StagingItem.Internal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Internal.set -> void
LM.App.Wpf.ViewModels.StagingItem.InternalId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.InternalId.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsDuplicate.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsNearMatch.get -> bool
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Notes.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Notes.set -> void
LM.App.Wpf.ViewModels.StagingItem.OriginalFileName.get -> string!
LM.App.Wpf.ViewModels.StagingItem.Pmid.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Pmid.set -> void
LM.App.Wpf.ViewModels.StagingItem.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingItem.Selected.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Selected.set -> void
LM.App.Wpf.ViewModels.StagingItem.Similarity.get -> double
LM.App.Wpf.ViewModels.StagingItem.Similarity.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Source.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Source.set -> void
LM.App.Wpf.ViewModels.StagingItem.StagingItem() -> void
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.get -> string!
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.set -> void
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.Title.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Title.set -> void
LM.App.Wpf.ViewModels.StagingItem.Type.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingItem.Type.set -> void
LM.App.Wpf.ViewModels.StagingItem.Year.get -> int?
LM.App.Wpf.ViewModels.StagingItem.Year.set -> void
LM.App.Wpf.Views.AddView
LM.App.Wpf.Views.Behaviors.FileDropRequest
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.get -> System.Windows.DragEventArgs!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.get -> object?
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.FileDropRequest(System.Collections.Generic.IReadOnlyList<string!>! Paths, object? DropTarget, System.Windows.DragEventArgs! Args) -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.init -> void
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior.SavedSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.AddView.AddView() -> void
LM.App.Wpf.Views.AddView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog
LM.App.Wpf.Views.LibraryPresetPickerDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.LibraryPresetPickerDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel!
LM.App.Wpf.Views.LibraryPresetPrompt.LibraryPresetPrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.InitializeComponent() -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.AttachmentMetadataDialog(LM.App.Wpf.ViewModels.Library.AttachmentMetadataDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog
LM.App.Wpf.Views.LibraryPresetSaveDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.LibraryPresetSaveDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel!
LM.App.Wpf.Views.LibraryView
LM.App.Wpf.Views.LibraryView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryView.LibraryView() -> void
LM.App.Wpf.Views.PdfViewer
LM.App.Wpf.Views.PdfViewer.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewer.PdfViewer() -> void
LM.App.Wpf.Views.Library.TagTokenSelector
LM.App.Wpf.Views.Library.TagTokenSelector.InitializeComponent() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.FilteredSuggestions.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>?
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.set -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagTokenSelector() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.get -> System.Collections.Generic.IEnumerable<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.set -> void
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTagsProperty
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabularyProperty
LM.App.Wpf.Views.LibraryPresetPrompt
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Views.Review.Controls.DecisionBadge
LM.App.Wpf.Views.Review.Controls.DecisionBadge.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.DecisionBadge() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.get -> LM.Review.Core.Models.ScreeningStatus
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.set -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.ExtractionFieldEditor() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.ScreeningQueueControl() -> void
LM.App.Wpf.Views.Review.ReviewView
LM.App.Wpf.Views.Review.ReviewView.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ReviewView.ReviewView() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.LitSearchRunPickerWindow(LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel!
LM.App.Wpf.Views.Review.ProjectEditorWindow
LM.App.Wpf.Views.Review.ProjectEditorWindow.Attach(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.ProjectEditorWindow() -> void
LM.App.Wpf.Views.SearchSavePrompt
LM.App.Wpf.Views.SearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Views.SearchSavePrompt.SearchSavePrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.DataGridColumnVisibilityBehavior() -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.set -> void
LM.App.Wpf.Views.SearchView
LM.App.Wpf.Views.SearchView.InitializeComponent() -> void
LM.App.Wpf.Views.SearchView.SearchView() -> void
LM.App.Wpf.Views.ShellWindow
LM.App.Wpf.Views.ShellWindow.InitializeComponent() -> void
LM.App.Wpf.Views.ShellWindow.LoadWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.NewWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.ShellWindow() -> void
LM.App.Wpf.Views.StagingEditorWindow
LM.App.Wpf.Views.StagingEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.StagingEditorWindow.StagingEditorWindow(LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel! viewModel) -> void
override LM.App.Wpf.ViewModels.Library.LibrarySortOption.ToString() -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Name.get -> string!
override LM.App.Wpf.Views.Library.AttachmentMetadataDialog.OnClosed(System.EventArgs! e) -> void
LM.App.Wpf.Views.WorkspaceChooser
LM.App.Wpf.Views.WorkspaceChooser.InitializeComponent() -> void
LM.App.Wpf.Views.WorkspaceChooser.SelectedWorkspacePath.get -> string?
LM.App.Wpf.Views.WorkspaceChooser.WorkspaceChooser(LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel! viewModel) -> void
LM.App.Wpf.Views.WorkspaceChooser.Configure(System.Action<LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel!>! configure) -> void
override LM.App.Wpf.App.OnExit(System.Windows.ExitEventArgs! e) -> void
override LM.App.Wpf.App.OnStartup(System.Windows.StartupEventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetPickerDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetSaveDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.StagingEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.WorkspaceChooser.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.ProjectEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.OnClosed(System.EventArgs! e) -> void
static LM.App.Wpf.App.Main() -> void
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.All.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.NewestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.OldestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleAscending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleDescending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Clone() -> LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.LitSearchOrganizerStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveEntryAsync(string! entryId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.SyncEntriesAsync(System.Collections.Generic.IEnumerable<string!>! entryIds, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema.CurrentVersion -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.LitSearchEntryViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! title, string? query) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Query.get -> string?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.CanDelete.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsRoot.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.LitSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! name, bool isRoot) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.LitSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.LitSearchRunViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! runId, string! label, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel! parent) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.LitSearchTreeViewModel(LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt, LM.Core.Abstractions.IEntryStore! entryStore, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
---------- LM.App.Wpf ----------
#nullable enable
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.ColumnKeyProperty -> System.Windows.DependencyProperty!
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.GetColumnKey(System.Windows.DependencyObject! element) -> string?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.SetColumnKey(System.Windows.DependencyObject! element, string? value) -> void
#nullable enable
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Id.get -> string!
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.IsDraggable.get -> bool
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Name.get -> string!
const LM.App.Wpf.Library.LibraryPresetFolder.RootId = "root" -> string!
const LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.RootId = "root" -> string!
const LM.App.Wpf.ViewModels.StagingItem.DuplicateThreshold = 0.999 -> double
const LM.App.Wpf.ViewModels.StagingItem.NearThreshold = 0.75 -> double
LM.App.Wpf.App
LM.App.Wpf.App.App() -> void
LM.App.Wpf.App.InitializeComponent() -> void
LM.App.Wpf.Common.AsyncRelayCommand
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<object?, System.Threading.Tasks.Task!>! execute, System.Func<object?, bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<System.Threading.Tasks.Task!>! execute, System.Func<bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.AsyncRelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.AsyncRelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.AsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.IAsyncRelayCommand
LM.App.Wpf.Common.IAsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter
LM.App.Wpf.Common.BooleanToOpacityConverter.BooleanToOpacityConverter() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.set -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.set -> void
LM.App.Wpf.Common.Converters.ProjectEditorConverters
LM.App.Wpf.Common.Converters.ProjectEditorConverters.StageSelectionEquality.get -> System.Windows.Data.IMultiValueConverter!
LM.App.Wpf.Common.LibraryPresetSaveContext.LibraryPresetSaveContext(string! DefaultName, System.Collections.Generic.IReadOnlyCollection<string!>! ExistingNames, string! Title = "Save Library Preset", string! Prompt = "Name this filter preset.") -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.LibraryCollectionEntry() -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.DeletePresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenamePresetAsync(string! presetId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
LM.App.Wpf.Library.LibraryFilterState.Tags.get -> string![]!
LM.App.Wpf.Library.LibraryPresetFolder.EnumerateChildren() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.LibraryPresetTreeItem>!
LM.App.Wpf.Library.LibraryPresetNodeKind.Folder = 0 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetNodeKind.Preset = 1 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.LitSearchOrganizerEntry() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.LitSearchOrganizerFolder() -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectBlueprint(string! projectId, string! name, System.DateTimeOffset createdAtUtc, string! createdBy, string! litSearchEntryId, string! litSearchRunId, System.Collections.Generic.IReadOnlyList<string!>! checkedEntryIds, string? hookRelativePath, LM.Review.Core.Models.ReviewTemplateKind template, string! metadataNotes, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>! stages) -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CheckedEntryIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedAtUtc.get -> System.DateTimeOffset
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedBy.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.HookRelativePath.get -> string?
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchEntryId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchRunId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Template.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.MetadataNotes.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Stages.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.With(string? name = null, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>? stages = null, LM.Review.Core.Models.ReviewTemplateKind? template = null, string? metadataNotes = null, string? litSearchEntryId = null, string? litSearchRunId = null, System.Collections.Generic.IReadOnlyList<string!>? checkedEntryIds = null) -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint!
LM.App.Wpf.Services.Review.Design.StageBlueprint
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageBlueprint(string! stageId, string! name, LM.Review.Core.Models.ReviewStageType stageType, int primaryReviewers, int secondaryReviewers, bool requiresConsensus, int minimumAgreements, bool escalateOnDisagreement, LM.Review.Core.Models.StageDisplayProfile! displayProfile) -> void
LM.App.Wpf.Services.Review.Design.StageBlueprint.EscalateOnDisagreement.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.MinimumAgreements.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.PrimaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.RequiresConsensus.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.SecondaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageId.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.Services.Review.Design.StageBlueprint.DisplayProfile.get -> LM.Review.Core.Models.StageDisplayProfile!
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher.Show(string! entryId, string! pdfAbsolutePath, string! pdfHash) -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.AddSelectionToFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.MoveFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RemoveSelectionFromFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ItemsView.get -> System.ComponentModel.ICollectionView!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.LitSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.SavedSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SavedSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeletePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.LoadPresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenamePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.LibraryViewModel.AllTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.LibraryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.LitSearchOrganizer.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LoadCollectionEntriesAsync(string! collectionId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.OpenPdfAnnotationsCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.LibraryViewModel.RefreshTagsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.ToggleBlacklistCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationTypeDisplay.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Dispose() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.HighlightBrush.get -> System.Windows.Media.Brush!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.PdfAnnotationColorCommandParameter() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior.CollectionTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior.LitSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter
LM.App.Wpf.Views.Converters.EnumEqualsConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.EnumEqualsConverter() -> void
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.InverseBooleanToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.AnnotationColorParameterConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.Convert(object?[]! values, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.ConvertBack(object? value, System.Type![]! targetTypes, object? parameter, System.Globalization.CultureInfo! culture) -> object?[]!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NullOrEmptyToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList
LM.App.Wpf.Views.Pdf.PdfAnnotationList.PdfAnnotationList() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow
LM.App.Wpf.Views.PdfViewerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow.PdfViewerWindow() -> void
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.PdfViewerHostObject(LM.App.Wpf.Views.PdfViewer! owner) -> void
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogCloseRequestedEventArgs(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogResult.get -> bool?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.CloseRequested -> System.EventHandler<LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs!>?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.DialogViewModelBase() -> void
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.RequestClose(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.IDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.WpfDialogService(System.IServiceProvider! services) -> void
LM.App.Wpf.Common.ILibraryPresetPrompt
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Common.IClipboardService
LM.App.Wpf.Common.IClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.ClipboardService
LM.App.Wpf.Common.ClipboardService.ClipboardService() -> void
LM.App.Wpf.Common.ClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.IFileExplorerService
LM.App.Wpf.Common.IFileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.FileExplorerService
LM.App.Wpf.Common.FileExplorerService.FileExplorerService() -> void
LM.App.Wpf.Common.FileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.ISearchSavePrompt
LM.App.Wpf.Common.ISearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Common.SearchSavePromptContext
LM.App.Wpf.Common.SearchSavePromptContext.Database.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.From.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.Query.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.SearchSavePromptContext(string! Query, LM.Core.Models.SearchDatabase Database, System.DateTime? From, System.DateTime? To, string! DefaultName, string! DefaultNotes, System.Collections.Generic.IReadOnlyList<string!>! DefaultTags) -> void
LM.App.Wpf.Common.SearchSavePromptContext.Database.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.SearchSavePromptContext.From.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.Query.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.To.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.To.init -> void
LM.App.Wpf.Common.SearchSavePromptResult
LM.App.Wpf.Common.SearchSavePromptResult.Name.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Notes.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Tags.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.SearchSavePromptResult(string! Name, string! Notes, string! Tags) -> void
LM.App.Wpf.Common.SearchSavePromptResult.Name.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Notes.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Tags.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSaveResult
LM.App.Wpf.Common.LibraryPresetSaveResult.LibraryPresetSaveResult(string! Name) -> void
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.get -> bool
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.LibraryPresetSelectionContext(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! Presets, bool AllowLoad, string! Title) -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.LibraryPresetSelectionResult(string? SelectedPresetId, System.Collections.Generic.IReadOnlyList<string!>! DeletedPresetIds) -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.get -> string?
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.init -> void
LM.App.Wpf.Common.LibraryPresetSummary
LM.App.Wpf.Common.LibraryPresetSummary.Id.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Id.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.LibraryPresetSummary(string! Id, string! Name, System.DateTime SavedUtc) -> void
LM.App.Wpf.Common.LibraryPresetSummary.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.get -> System.DateTime
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.init -> void
LM.App.Wpf.Common.RelayCommand
LM.App.Wpf.Common.RelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.RelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.RelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.RelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.RelayCommand.RelayCommand(System.Action<object?>! exec, System.Func<object?, bool>? can = null) -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.get -> bool
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.init -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.get -> string?
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.init -> void
LM.App.Wpf.Common.Dialogs.FolderPickerOptions
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.get -> string?
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.init -> void
LM.App.Wpf.Common.Dialogs.IDialogService
LM.App.Wpf.Common.Dialogs.IDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.StringJoinConverter
LM.App.Wpf.Common.StringJoinConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.StringJoinConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.AttachmentGlyphToIconConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.AttachmentGlyphToDescriptionConverter() -> void
LM.App.Wpf.Common.ViewModelBase
LM.App.Wpf.Common.ViewModelBase.ViewModelBase() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Id.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.get -> int
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PdfAnnotation(string! id, string! title) -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.get -> System.Windows.Media.Imaging.BitmapImage?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.Annotations.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Pdf.PdfAnnotation!>!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.ChangeAnnotationColorCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.CopyAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DocumentSource.get -> System.Uri?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.HandleAnnotationSelectionAsync(LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.LoadPdfCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfHash.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfViewerViewModel(LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.App.Wpf.Services.IUserContext! userContext, LM.Core.Abstractions.IPdfAnnotationPreviewStorage! previewStorage, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.Common.IClipboardService! clipboard) -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.RecordAnnotationChangeCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.WebViewBridge.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DeleteAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.Library.LibraryFilterPreset
LM.App.Wpf.Library.LibraryFilterPreset.LibraryFilterPreset() -> void
LM.App.Wpf.Library.LibraryFilterPreset.Id.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Id.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.Name.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Name.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.get -> System.DateTime
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.get -> int
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.State.get -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.Library.LibraryFilterPreset.State.set -> void
LM.App.Wpf.Library.LibraryFilterPresetStore
LM.App.Wpf.Library.LibraryFilterPresetStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.MovePresetAsync(string! presetId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.LibraryFilterPresetStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.ListPresetsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.LibraryFilterPreset!>!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, string? targetFolderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetByIdAsync(string! presetId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
const LM.App.Wpf.Library.Collections.LibraryCollectionFolder.RootId = "collections-root" -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionEntry!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile
LM.App.Wpf.Library.Collections.LibraryCollectionFile.LibraryCollectionFile() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.get -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder?
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.get -> int
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.EnumerateDescendants() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionEntry!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.LibraryCollectionFolder() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.LibraryCollectionMetadata() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore
LM.App.Wpf.Library.Collections.LibraryCollectionStore.AddEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.CreateFolderAsync(string? parentFolderId, string! name, string! createdBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.DeleteFolderAsync(string! folderId, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.LibraryCollectionStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RemoveEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RenameFolderAsync(string! folderId, string! newName, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryPresetFolder
LM.App.Wpf.Library.LibraryPresetFolder.Clone() -> LM.App.Wpf.Library.LibraryPresetFolder!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Id.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Id.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.LibraryPresetFolder() -> void
LM.App.Wpf.Library.LibraryPresetFolder.Name.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Name.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Presets.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryFilterPreset!>!
LM.App.Wpf.Library.LibraryPresetFolder.Presets.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.get -> int
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.set -> void
LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem
LM.App.Wpf.Library.LibraryPresetTreeItem.Folder.get -> LM.App.Wpf.Library.LibraryPresetFolder?
LM.App.Wpf.Library.LibraryPresetTreeItem.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem(LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder, LM.App.Wpf.Library.LibraryPresetFolder? folder, LM.App.Wpf.Library.LibraryFilterPreset? preset) -> void
LM.App.Wpf.Library.LibraryPresetTreeItem.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset?
LM.App.Wpf.Library.LibraryPresetTreeItem.SortOrder.get -> int
LM.App.Wpf.Library.ILibraryEntryEditor
LM.App.Wpf.Library.ILibraryEntryEditor.EditEntryAsync(LM.Core.Models.Entry! entry) -> System.Threading.Tasks.Task<System.Boolean>!
LM.App.Wpf.Library.LibraryFilterState
LM.App.Wpf.Library.LibraryFilterState.LibraryFilterState() -> void
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.get -> bool
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.set -> void
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateFrom.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateFrom.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateTo.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateTo.set -> void
LM.App.Wpf.Library.LibraryFilterState.SortKey.get -> string?
LM.App.Wpf.Library.LibraryFilterState.SortKey.set -> void
LM.App.Wpf.Library.LibraryFilterState.Tags.set -> void
LM.App.Wpf.ViewModels.AddPipeline
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddViewModel
LM.App.Wpf.ViewModels.AddViewModel.AddFilesCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.ViewModels.WatchedFolderScanner? scanner = null, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore? watchedFolderSettings = null, LM.App.Wpf.ViewModels.StagingListViewModel? stagingList = null, LM.App.Wpf.ViewModels.WatchedFoldersViewModel? watchedFolders = null, LM.App.Wpf.Common.Dialogs.IDialogService? dialogService = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.BulkAddFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ClearCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.CommitSelectedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.AddViewModel.Current.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.AddViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.AddViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.AddViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.AddViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.AddViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.AddViewModel.ReviewStagedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Staging.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.AddViewModel.StagingListViewModel.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFolders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFoldersViewModel.get -> LM.App.Wpf.ViewModels.WatchedFoldersViewModel!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.LibraryPresetPickerDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Presets.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.SelectedPresetId.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.EntryId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookAbsolutePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookRelativePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.DisplayLabel.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.ExecutedBy.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.Owner.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.TotalHits.get -> int
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.ConfirmCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.Entries.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.LitSearchRunPickerViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.LibraryPresetSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.set -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Initialize(LM.App.Wpf.Common.SearchSavePromptContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultNotes.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultTags.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.SearchSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingEditorViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingList.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.SelectedWorkspacePath.get -> string?
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.get -> bool
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.WorkspaceChooserViewModel(LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.CanAcceptFileDrop(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleFileDropAsync(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibrarySearchResult
LM.App.Wpf.ViewModels.LibrarySearchResult.Entry.get -> LM.Core.Models.Entry!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasAttachments.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasDoi.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasIdentifiers.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasInternalId.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasLinks.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNct.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPmid.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasRelations.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasSource.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasUserNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.Highlight.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.HighlightDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.IsFullText.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.LibrarySearchResult(LM.Core.Models.Entry! entry, double? score, string? highlight) -> void
LM.App.Wpf.ViewModels.LibrarySearchResult.Score.get -> double?
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentGlyphKind.get -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.TitleSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.YearPresenceSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearDescendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearAscendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SourceSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TypeSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedOnSortKey.get -> System.DateTime
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedBySortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.InternalIdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.DoiSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.PmidSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.NctSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AuthorsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TagsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IsInternalSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SnippetSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreSortKey.get -> double
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.None = 0 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Pdf = 1 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Document = 2 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Presentation = 3 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Generic = 4 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.Library.LibraryLinkItem
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.LibraryLinkItem(string! DisplayText, string! Target, LM.App.Wpf.ViewModels.Library.LinkItemKind Kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.get -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.init -> void
LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Url = 0 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.File = 1 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Folder = 2 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.RunAndBasics = 0 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Metadata = 1 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Workflow = 2 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Summary = 3 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.ProjectEditorStepDescriptor(LM.App.Wpf.ViewModels.Review.ProjectEditorStep Step, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.ReviewTemplateOption(LM.Review.Core.Models.ReviewTemplateKind Kind, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectEditorViewModel() -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.AddStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntryCount.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntrySummary.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ErrorMessage.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.HookRelativePath.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Initialize(LM.App.Wpf.Services.Review.Design.ProjectBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchEntryId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchRunId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageDownCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageUpCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.RemoveStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Result.get -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SaveCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.get -> LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.StageTypes.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStageType>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Stages.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Steps.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.TemplateOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStep.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepDescriptor.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepIndex.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsSummaryStep.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.get -> LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateKind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.NextCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.BackCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ChangeRunCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ConfigureRunReloadHandler(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.App.Wpf.Services.Review.Design.ProjectBlueprint?>!>! handler) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.StageDisplayOptionViewModel(LM.Review.Core.Models.StageContentArea area, bool isSelected) -> void
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Area.get -> LM.Review.Core.Models.StageContentArea
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Description.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.get -> bool
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageBlueprintViewModel(LM.App.Wpf.Services.Review.Design.StageBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageId.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TotalReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.DisplayOptions.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel!>!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TryBuild(out LM.App.Wpf.Services.Review.Design.StageBlueprint! stage, out string? errorMessage) -> bool
LM.App.Wpf.ViewModels.StagingListViewModel
LM.App.Wpf.ViewModels.StagingListViewModel.AddStagedItemsAsync(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Clear() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.CommitSelectedAsync(System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.StagingListViewModel.Current.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.StagingListViewModel.HasItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.HasSelectedItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.StagingListViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.StagingListViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingListViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.StagingListViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.SetCommandGuard(System.Func<System.Func<System.Threading.Tasks.Task!>!, System.Threading.Tasks.Task!>! guard) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.UpdateParentBusy(bool isBusy) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.WatchedFoldersViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList, LM.App.Wpf.ViewModels.WatchedFolderScanner! scanner, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore! settingsStore, LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.WatchedFolder
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.get -> bool
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.LastScanDisplay.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.LastScanUtc.get -> System.DateTimeOffset?
LM.App.Wpf.ViewModels.WatchedFolder.LastScanWasUnchanged.get -> bool?
LM.App.Wpf.ViewModels.WatchedFolder.Path.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.Path.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFolder.ResetScanState() -> void
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusLabel.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusToolTip.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.WatchedFolder() -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(string! path) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig
LM.App.Wpf.ViewModels.WatchedFolderConfig.ApplyState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.ClearState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFolderConfig.CreateSnapshot() -> LM.Core.Models.WatchedFolderSettings!
LM.App.Wpf.ViewModels.WatchedFolderConfig.Load(LM.Core.Models.WatchedFolderSettings! settings) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.StoreState(LM.App.Wpf.ViewModels.WatchedFolder! folder, LM.Core.Models.WatchedFolderState! state) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.WatchedFolderConfig() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Folder.get -> LM.App.Wpf.ViewModels.WatchedFolder!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Items.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.WatchedFolderScanEventArgs(LM.App.Wpf.ViewModels.WatchedFolder! folder, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner
LM.App.Wpf.ViewModels.WatchedFolderScanner.Attach(LM.App.Wpf.ViewModels.WatchedFolderConfig! config) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.ItemsStaged -> System.EventHandler<LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs!>?
LM.App.Wpf.ViewModels.WatchedFolderScanner.ScanAsync(LM.App.Wpf.ViewModels.WatchedFolder? folder, System.Threading.CancellationToken ct, bool force = false) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFolderScanner.WatchedFolderScanner(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.IAddPipeline
LM.App.Wpf.ViewModels.IAddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.IAddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.Library.ILibraryDocumentService
LM.App.Wpf.Library.ILibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.ILibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.LibraryDocumentService
LM.App.Wpf.Library.LibraryDocumentService.LibraryDocumentService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.IAttachmentMetadataPrompt
LM.App.Wpf.Library.IAttachmentMetadataPrompt.RequestMetadataAsync(LM.App.Wpf.Library.AttachmentMetadataPromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.AttachmentMetadataPromptResult?>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.get -> string!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.AttachmentMetadataPromptContext(string! EntryTitle, System.Collections.Generic.IReadOnlyList<string!>! FilePaths) -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>!
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult.AttachmentMetadataPromptResult(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>! Attachments) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection
LM.App.Wpf.Library.AttachmentMetadataSelection.AttachmentMetadataSelection(string! SourcePath, string! Title, LM.Core.Models.AttachmentKind Kind, System.Collections.Generic.IReadOnlyList<string!>! Tags) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.get -> LM.Core.Models.AttachmentKind
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.init -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LibraryFiltersViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! presetStore, LM.App.Wpf.Common.ILibraryPresetPrompt! presetPrompt, LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.SavedSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.get -> string
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedSearchPresetViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, LM.App.Wpf.Library.LibraryFilterPreset! preset, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Summary.get -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.ToSummary() -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.SavedSearchTreeChangedEventArgs(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! presets) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.SavedSearchTreeViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.TreeChanged -> System.EventHandler<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs!>?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ClearCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyPresetAsync(LM.App.Wpf.Common.LibraryPresetSummary! summary, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyState(LM.App.Wpf.Library.LibraryFilterState! state) -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.CaptureState() -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTooltip.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTokens.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.BuildFullTextQuery(string! normalizedQuery) -> LM.Core.Models.Search.FullTextSearchQuery!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.HasSavedPresets.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.GetNormalizedFullTextQuery() -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.NavigationRoots.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RefreshNavigationAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedPresets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedSearches.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleLeftPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleRightPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SortOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RemoveTagCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand<string?>!
LM.App.Wpf.ViewModels.Library.LibrarySortOption
LM.App.Wpf.ViewModels.Library.LibrarySortOption.LibrarySortOption(string! key, string! displayName) -> void
LM.App.Wpf.ViewModels.Library.LibrarySortOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOptions
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.Category = 0 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.SavedSearch = 1 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchEntry = 2 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchRun = 3 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.LibraryNavigationNodeViewModel(string! name, LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.HasChildren.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Kind.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.get -> object?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.init -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.LibraryColumnOption(string! key, string! displayName, bool isVisible) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LibraryColumnVisibility() -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LoadFrom(System.Collections.Generic.IReadOnlyDictionary<string!, bool>! source) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.Snapshot() -> System.Collections.Generic.IReadOnlyDictionary<string!, bool>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LibraryResultsViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.App.Wpf.Library.ILibraryEntryEditor! entryEditor, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.Library.IAttachmentMetadataPrompt! attachmentPrompt, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.Core.Abstractions.IHasher! hasher, LM.App.Wpf.Services.Pdf.IPdfViewerLauncher! pdfViewerLauncher) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadFullTextResultsAsync(System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.FullTextSearchHit!>! hits, System.Func<LM.Core.Models.Entry!, bool>? entryFilter = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadMetadataResults(System.Collections.Generic.IEnumerable<LM.Core.Models.Entry!>! entries) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResetSortForSearch(LM.App.Wpf.ViewModels.Library.LibrarySortOption! defaultOption) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridLoaded(System.Windows.RoutedEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridSorting(System.Windows.Controls.DataGridSortingEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.MarkAsMetadataResults() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResultsAreFullText.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.get -> LM.App.Wpf.ViewModels.LibrarySearchResult?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LinkItems.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryLinkItem!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.EditEntryAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelection.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedItems.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectionChanged -> System.EventHandler?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelectedAbstract.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ToggleBlacklistAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.get -> int
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.LibraryCollectionFolderViewModel(LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! tree, string! id, string! name, LM.App.Wpf.Library.Collections.LibraryCollectionMetadata! metadata) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.LibraryCollectionsViewModel(LM.App.Wpf.Library.Collections.LibraryCollectionStore! store, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPrimaryAttachment.get -> bool
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.LibrarySearchQueryBox() -> void
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.get -> string!
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel
LM.App.Wpf.ViewModels.LibraryViewModel.Filters.get -> LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LibraryViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFullTextSearchService! fullTextSearch, LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel! filters, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.Configuration.IUserPreferencesStore! preferencesStore, LM.App.Wpf.Common.IClipboardService! clipboard, LM.App.Wpf.Common.IFileExplorerService! fileExplorer, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! litSearchOrganizer, LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! collections, LM.App.Wpf.Library.Collections.LibraryCollectionStore! collectionStore) -> void
LM.App.Wpf.ViewModels.LibraryViewModel.Results.get -> LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.Collections.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibraryColumnOption!>!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnVisibility.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility!
LM.App.Wpf.ViewModels.SearchItemViewModel
LM.App.Wpf.ViewModels.SearchItemViewModel.Header.get -> string!
LM.App.Wpf.ViewModels.SearchItemViewModel.SearchItemViewModel(string! header, LM.App.Wpf.ViewModels.LibraryViewModel! vm) -> void
LM.App.Wpf.ViewModels.SearchItemViewModel.Vm.get -> LM.App.Wpf.ViewModels.LibraryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel
LM.App.Wpf.ViewModels.SearchViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.SearchViewModel.ExportSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.From.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.LoadSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRuns.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.PreviousSearchSummary!>!
LM.App.Wpf.ViewModels.SearchViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRunsCount.get -> int
LM.App.Wpf.ViewModels.SearchViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.SearchViewModel.Query.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.get -> LM.Core.Models.SearchHit?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RunSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SaveSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleLeftPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleRightPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SearchViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IWorkSpaceService! ws, LM.App.Wpf.Common.ISearchSavePrompt! savePrompt, LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel! providers, LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel! history, LM.Infrastructure.Search.PubMedSearchProvider! pubMedProvider, LM.Core.Abstractions.Configuration.IUserPreferencesStore? preferencesStore = null) -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.get -> LM.App.Wpf.ViewModels.PreviousSearchSummary?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.StartPreviousRunCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ShowRunDetailsCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleFavoriteCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.To.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.History.get -> LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel.Providers.get -> LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecordExecutionAsync(LM.Core.Models.Search.SearchExecutionResult! result, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.SearchHistoryViewModel(LM.Core.Abstractions.Configuration.ISearchHistoryStore! store) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.ExecuteSearchAsync() -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.RunSearchCommand.get -> LM.App.Wpf.Common.AsyncRelayCommand!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchExecuted -> System.EventHandler<LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs!>?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchProvidersViewModel(LM.Core.Abstractions.Search.ISearchExecutionService! executionService) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.set -> void
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.Result.get -> LM.Core.Models.Search.SearchExecutionResult!
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.SearchExecutedEventArgs(LM.Core.Models.Search.SearchExecutionResult! result) -> void
LM.App.Wpf.ViewModels.PreviousSearchSummary
LM.App.Wpf.ViewModels.PreviousSearchSummary.DisplayName.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.EntryId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.FavoriteRunId.get -> string?
LM.App.Wpf.ViewModels.PreviousSearchSummary.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastRunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.Provider.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.Query.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunCount.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TotalHits.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TagsDisplay.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption
LM.App.Wpf.ViewModels.SearchDatabaseOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption.SearchDatabaseOption(LM.Core.Models.SearchDatabase value, string! displayName) -> void
LM.App.Wpf.ViewModels.SearchDatabaseOption.Value.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.StagingItem
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.get -> LM.HubSpoke.Models.ArticleHook?
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.DisplayName.get -> string?
LM.App.Wpf.ViewModels.StagingItem.DisplayName.set -> void
LM.App.Wpf.ViewModels.StagingItem.Doi.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Doi.set -> void
LM.App.Wpf.ViewModels.StagingItem.FilePath.get -> string!
LM.App.Wpf.ViewModels.StagingItem.FilePath.set -> void
LM.App.Wpf.ViewModels.StagingItem.Internal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Internal.set -> void
LM.App.Wpf.ViewModels.StagingItem.InternalId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.InternalId.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsDuplicate.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsNearMatch.get -> bool
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Notes.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Notes.set -> void
LM.App.Wpf.ViewModels.StagingItem.OriginalFileName.get -> string!
LM.App.Wpf.ViewModels.StagingItem.Pmid.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Pmid.set -> void
LM.App.Wpf.ViewModels.StagingItem.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingItem.Selected.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Selected.set -> void
LM.App.Wpf.ViewModels.StagingItem.Similarity.get -> double
LM.App.Wpf.ViewModels.StagingItem.Similarity.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Source.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Source.set -> void
LM.App.Wpf.ViewModels.StagingItem.StagingItem() -> void
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.get -> string!
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.set -> void
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.Title.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Title.set -> void
LM.App.Wpf.ViewModels.StagingItem.Type.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingItem.Type.set -> void
LM.App.Wpf.ViewModels.StagingItem.Year.get -> int?
LM.App.Wpf.ViewModels.StagingItem.Year.set -> void
LM.App.Wpf.Views.AddView
LM.App.Wpf.Views.Behaviors.FileDropRequest
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.get -> System.Windows.DragEventArgs!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.get -> object?
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.FileDropRequest(System.Collections.Generic.IReadOnlyList<string!>! Paths, object? DropTarget, System.Windows.DragEventArgs! Args) -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.init -> void
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior.SavedSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.AddView.AddView() -> void
LM.App.Wpf.Views.AddView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog
LM.App.Wpf.Views.LibraryPresetPickerDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.LibraryPresetPickerDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel!
LM.App.Wpf.Views.LibraryPresetPrompt.LibraryPresetPrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.InitializeComponent() -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.AttachmentMetadataDialog(LM.App.Wpf.ViewModels.Library.AttachmentMetadataDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog
LM.App.Wpf.Views.LibraryPresetSaveDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.LibraryPresetSaveDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel!
LM.App.Wpf.Views.LibraryView
LM.App.Wpf.Views.LibraryView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryView.LibraryView() -> void
LM.App.Wpf.Views.PdfViewer
LM.App.Wpf.Views.PdfViewer.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewer.PdfViewer() -> void
LM.App.Wpf.Views.Library.TagTokenSelector
LM.App.Wpf.Views.Library.TagTokenSelector.InitializeComponent() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.FilteredSuggestions.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>?
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.set -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagTokenSelector() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.get -> System.Collections.Generic.IEnumerable<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.set -> void
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTagsProperty
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabularyProperty
LM.App.Wpf.Views.LibraryPresetPrompt
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Views.Review.Controls.DecisionBadge
LM.App.Wpf.Views.Review.Controls.DecisionBadge.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.DecisionBadge() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.get -> LM.Review.Core.Models.ScreeningStatus
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.set -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.ExtractionFieldEditor() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.ScreeningQueueControl() -> void
LM.App.Wpf.Views.Review.ReviewView
LM.App.Wpf.Views.Review.ReviewView.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ReviewView.ReviewView() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.LitSearchRunPickerWindow(LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel!
LM.App.Wpf.Views.Review.ProjectEditorWindow
LM.App.Wpf.Views.Review.ProjectEditorWindow.Attach(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.ProjectEditorWindow() -> void
LM.App.Wpf.Views.SearchSavePrompt
LM.App.Wpf.Views.SearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Views.SearchSavePrompt.SearchSavePrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.DataGridColumnVisibilityBehavior() -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.set -> void
LM.App.Wpf.Views.SearchView
LM.App.Wpf.Views.SearchView.InitializeComponent() -> void
LM.App.Wpf.Views.SearchView.SearchView() -> void
LM.App.Wpf.Views.ShellWindow
LM.App.Wpf.Views.ShellWindow.InitializeComponent() -> void
LM.App.Wpf.Views.ShellWindow.LoadWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.NewWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.ShellWindow() -> void
LM.App.Wpf.Views.StagingEditorWindow
LM.App.Wpf.Views.StagingEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.StagingEditorWindow.StagingEditorWindow(LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel! viewModel) -> void
override LM.App.Wpf.ViewModels.Library.LibrarySortOption.ToString() -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Name.get -> string!
override LM.App.Wpf.Views.Library.AttachmentMetadataDialog.OnClosed(System.EventArgs! e) -> void
LM.App.Wpf.Views.WorkspaceChooser
LM.App.Wpf.Views.WorkspaceChooser.InitializeComponent() -> void
LM.App.Wpf.Views.WorkspaceChooser.SelectedWorkspacePath.get -> string?
LM.App.Wpf.Views.WorkspaceChooser.WorkspaceChooser(LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel! viewModel) -> void
LM.App.Wpf.Views.WorkspaceChooser.Configure(System.Action<LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel!>! configure) -> void
override LM.App.Wpf.App.OnExit(System.Windows.ExitEventArgs! e) -> void
override LM.App.Wpf.App.OnStartup(System.Windows.StartupEventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetPickerDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetSaveDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.StagingEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.WorkspaceChooser.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.ProjectEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.OnClosed(System.EventArgs! e) -> void
static LM.App.Wpf.App.Main() -> void
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.All.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.NewestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.OldestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleAscending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleDescending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Clone() -> LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.LitSearchOrganizerStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveEntryAsync(string! entryId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.SyncEntriesAsync(System.Collections.Generic.IEnumerable<string!>! entryIds, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema.CurrentVersion -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.LitSearchEntryViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! title, string? query) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Query.get -> string?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.CanDelete.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsRoot.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.LitSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! name, bool isRoot) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.LitSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.LitSearchRunViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! runId, string! label, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel! parent) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.LitSearchTreeViewModel(LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt, LM.Core.Abstractions.IEntryStore! entryStore, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
---------- LM.App.Wpf ----------
#nullable enable
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.ColumnKeyProperty -> System.Windows.DependencyProperty!
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.GetColumnKey(System.Windows.DependencyObject! element) -> string?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.SetColumnKey(System.Windows.DependencyObject! element, string? value) -> void
#nullable enable
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Id.get -> string!
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.IsDraggable.get -> bool
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Name.get -> string!
const LM.App.Wpf.Library.LibraryPresetFolder.RootId = "root" -> string!
const LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.RootId = "root" -> string!
const LM.App.Wpf.ViewModels.StagingItem.DuplicateThreshold = 0.999 -> double
const LM.App.Wpf.ViewModels.StagingItem.NearThreshold = 0.75 -> double
LM.App.Wpf.App
LM.App.Wpf.App.App() -> void
LM.App.Wpf.App.InitializeComponent() -> void
LM.App.Wpf.Common.AsyncRelayCommand
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<object?, System.Threading.Tasks.Task!>! execute, System.Func<object?, bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<System.Threading.Tasks.Task!>! execute, System.Func<bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.AsyncRelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.AsyncRelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.AsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.IAsyncRelayCommand
LM.App.Wpf.Common.IAsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter
LM.App.Wpf.Common.BooleanToOpacityConverter.BooleanToOpacityConverter() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.set -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.set -> void
LM.App.Wpf.Common.Converters.ProjectEditorConverters
LM.App.Wpf.Common.Converters.ProjectEditorConverters.StageSelectionEquality.get -> System.Windows.Data.IMultiValueConverter!
LM.App.Wpf.Common.LibraryPresetSaveContext.LibraryPresetSaveContext(string! DefaultName, System.Collections.Generic.IReadOnlyCollection<string!>! ExistingNames, string! Title = "Save Library Preset", string! Prompt = "Name this filter preset.") -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.LibraryCollectionEntry() -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.DeletePresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenamePresetAsync(string! presetId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
LM.App.Wpf.Library.LibraryFilterState.Tags.get -> string![]!
LM.App.Wpf.Library.LibraryPresetFolder.EnumerateChildren() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.LibraryPresetTreeItem>!
LM.App.Wpf.Library.LibraryPresetNodeKind.Folder = 0 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetNodeKind.Preset = 1 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.LitSearchOrganizerEntry() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.LitSearchOrganizerFolder() -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectBlueprint(string! projectId, string! name, System.DateTimeOffset createdAtUtc, string! createdBy, string! litSearchEntryId, string! litSearchRunId, System.Collections.Generic.IReadOnlyList<string!>! checkedEntryIds, string? hookRelativePath, LM.Review.Core.Models.ReviewTemplateKind template, string! metadataNotes, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>! stages) -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CheckedEntryIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedAtUtc.get -> System.DateTimeOffset
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedBy.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.HookRelativePath.get -> string?
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchEntryId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchRunId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Template.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.MetadataNotes.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Stages.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.With(string? name = null, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>? stages = null, LM.Review.Core.Models.ReviewTemplateKind? template = null, string? metadataNotes = null, string? litSearchEntryId = null, string? litSearchRunId = null, System.Collections.Generic.IReadOnlyList<string!>? checkedEntryIds = null) -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint!
LM.App.Wpf.Services.Review.Design.StageBlueprint
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageBlueprint(string! stageId, string! name, LM.Review.Core.Models.ReviewStageType stageType, int primaryReviewers, int secondaryReviewers, bool requiresConsensus, int minimumAgreements, bool escalateOnDisagreement, LM.Review.Core.Models.StageDisplayProfile! displayProfile) -> void
LM.App.Wpf.Services.Review.Design.StageBlueprint.EscalateOnDisagreement.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.MinimumAgreements.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.PrimaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.RequiresConsensus.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.SecondaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageId.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.Services.Review.Design.StageBlueprint.DisplayProfile.get -> LM.Review.Core.Models.StageDisplayProfile!
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher.Show(string! entryId, string! pdfAbsolutePath, string! pdfHash) -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.AddSelectionToFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.MoveFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RemoveSelectionFromFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ItemsView.get -> System.ComponentModel.ICollectionView!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.LitSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.SavedSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SavedSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeletePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.LoadPresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenamePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.LibraryViewModel.AllTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.LibraryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.LitSearchOrganizer.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LoadCollectionEntriesAsync(string! collectionId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.OpenPdfAnnotationsCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.LibraryViewModel.RefreshTagsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.ToggleBlacklistCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationTypeDisplay.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Dispose() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.HighlightBrush.get -> System.Windows.Media.Brush!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.PdfAnnotationColorCommandParameter() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior.CollectionTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior.LitSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter
LM.App.Wpf.Views.Converters.EnumEqualsConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.EnumEqualsConverter() -> void
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.InverseBooleanToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.AnnotationColorParameterConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.Convert(object?[]! values, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.ConvertBack(object? value, System.Type![]! targetTypes, object? parameter, System.Globalization.CultureInfo! culture) -> object?[]!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NullOrEmptyToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList
LM.App.Wpf.Views.Pdf.PdfAnnotationList.PdfAnnotationList() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow
LM.App.Wpf.Views.PdfViewerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow.PdfViewerWindow() -> void
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.PdfViewerHostObject(LM.App.Wpf.Views.PdfViewer! owner) -> void
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogCloseRequestedEventArgs(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogResult.get -> bool?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.CloseRequested -> System.EventHandler<LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs!>?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.DialogViewModelBase() -> void
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.RequestClose(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.IDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.WpfDialogService(System.IServiceProvider! services) -> void
LM.App.Wpf.Common.ILibraryPresetPrompt
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Common.IClipboardService
LM.App.Wpf.Common.IClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.ClipboardService
LM.App.Wpf.Common.ClipboardService.ClipboardService() -> void
LM.App.Wpf.Common.ClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.IFileExplorerService
LM.App.Wpf.Common.IFileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.FileExplorerService
LM.App.Wpf.Common.FileExplorerService.FileExplorerService() -> void
LM.App.Wpf.Common.FileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.ISearchSavePrompt
LM.App.Wpf.Common.ISearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Common.SearchSavePromptContext
LM.App.Wpf.Common.SearchSavePromptContext.Database.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.From.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.Query.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.SearchSavePromptContext(string! Query, LM.Core.Models.SearchDatabase Database, System.DateTime? From, System.DateTime? To, string! DefaultName, string! DefaultNotes, System.Collections.Generic.IReadOnlyList<string!>! DefaultTags) -> void
LM.App.Wpf.Common.SearchSavePromptContext.Database.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.SearchSavePromptContext.From.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.Query.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.To.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.To.init -> void
LM.App.Wpf.Common.SearchSavePromptResult
LM.App.Wpf.Common.SearchSavePromptResult.Name.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Notes.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Tags.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.SearchSavePromptResult(string! Name, string! Notes, string! Tags) -> void
LM.App.Wpf.Common.SearchSavePromptResult.Name.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Notes.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Tags.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSaveResult
LM.App.Wpf.Common.LibraryPresetSaveResult.LibraryPresetSaveResult(string! Name) -> void
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.get -> bool
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.LibraryPresetSelectionContext(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! Presets, bool AllowLoad, string! Title) -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.LibraryPresetSelectionResult(string? SelectedPresetId, System.Collections.Generic.IReadOnlyList<string!>! DeletedPresetIds) -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.get -> string?
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.init -> void
LM.App.Wpf.Common.LibraryPresetSummary
LM.App.Wpf.Common.LibraryPresetSummary.Id.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Id.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.LibraryPresetSummary(string! Id, string! Name, System.DateTime SavedUtc) -> void
LM.App.Wpf.Common.LibraryPresetSummary.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.get -> System.DateTime
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.init -> void
LM.App.Wpf.Common.RelayCommand
LM.App.Wpf.Common.RelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.RelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.RelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.RelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.RelayCommand.RelayCommand(System.Action<object?>! exec, System.Func<object?, bool>? can = null) -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.get -> bool
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.init -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.get -> string?
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.init -> void
LM.App.Wpf.Common.Dialogs.FolderPickerOptions
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.get -> string?
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.init -> void
LM.App.Wpf.Common.Dialogs.IDialogService
LM.App.Wpf.Common.Dialogs.IDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.StringJoinConverter
LM.App.Wpf.Common.StringJoinConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.StringJoinConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.AttachmentGlyphToIconConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.AttachmentGlyphToDescriptionConverter() -> void
LM.App.Wpf.Common.ViewModelBase
LM.App.Wpf.Common.ViewModelBase.ViewModelBase() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Id.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.get -> int
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PdfAnnotation(string! id, string! title) -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.get -> System.Windows.Media.Imaging.BitmapImage?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.Annotations.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Pdf.PdfAnnotation!>!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.ChangeAnnotationColorCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.CopyAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DocumentSource.get -> System.Uri?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.HandleAnnotationSelectionAsync(LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.LoadPdfCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfHash.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfViewerViewModel(LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.App.Wpf.Services.IUserContext! userContext, LM.Core.Abstractions.IPdfAnnotationPreviewStorage! previewStorage, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.Common.IClipboardService! clipboard) -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.RecordAnnotationChangeCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.WebViewBridge.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DeleteAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.Library.LibraryFilterPreset
LM.App.Wpf.Library.LibraryFilterPreset.LibraryFilterPreset() -> void
LM.App.Wpf.Library.LibraryFilterPreset.Id.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Id.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.Name.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Name.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.get -> System.DateTime
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.get -> int
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.State.get -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.Library.LibraryFilterPreset.State.set -> void
LM.App.Wpf.Library.LibraryFilterPresetStore
LM.App.Wpf.Library.LibraryFilterPresetStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.MovePresetAsync(string! presetId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.LibraryFilterPresetStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.ListPresetsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.LibraryFilterPreset!>!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, string? targetFolderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetByIdAsync(string! presetId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
const LM.App.Wpf.Library.Collections.LibraryCollectionFolder.RootId = "collections-root" -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionEntry!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile
LM.App.Wpf.Library.Collections.LibraryCollectionFile.LibraryCollectionFile() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.get -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder?
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.get -> int
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.EnumerateDescendants() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionEntry!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.LibraryCollectionFolder() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.LibraryCollectionMetadata() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore
LM.App.Wpf.Library.Collections.LibraryCollectionStore.AddEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.CreateFolderAsync(string? parentFolderId, string! name, string! createdBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.DeleteFolderAsync(string! folderId, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.LibraryCollectionStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RemoveEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RenameFolderAsync(string! folderId, string! newName, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryPresetFolder
LM.App.Wpf.Library.LibraryPresetFolder.Clone() -> LM.App.Wpf.Library.LibraryPresetFolder!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Id.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Id.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.LibraryPresetFolder() -> void
LM.App.Wpf.Library.LibraryPresetFolder.Name.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Name.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Presets.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryFilterPreset!>!
LM.App.Wpf.Library.LibraryPresetFolder.Presets.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.get -> int
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.set -> void
LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem
LM.App.Wpf.Library.LibraryPresetTreeItem.Folder.get -> LM.App.Wpf.Library.LibraryPresetFolder?
LM.App.Wpf.Library.LibraryPresetTreeItem.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem(LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder, LM.App.Wpf.Library.LibraryPresetFolder? folder, LM.App.Wpf.Library.LibraryFilterPreset? preset) -> void
LM.App.Wpf.Library.LibraryPresetTreeItem.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset?
LM.App.Wpf.Library.LibraryPresetTreeItem.SortOrder.get -> int
LM.App.Wpf.Library.ILibraryEntryEditor
LM.App.Wpf.Library.ILibraryEntryEditor.EditEntryAsync(LM.Core.Models.Entry! entry) -> System.Threading.Tasks.Task<System.Boolean>!
LM.App.Wpf.Library.LibraryFilterState
LM.App.Wpf.Library.LibraryFilterState.LibraryFilterState() -> void
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.get -> bool
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.set -> void
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateFrom.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateFrom.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateTo.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateTo.set -> void
LM.App.Wpf.Library.LibraryFilterState.SortKey.get -> string?
LM.App.Wpf.Library.LibraryFilterState.SortKey.set -> void
LM.App.Wpf.Library.LibraryFilterState.Tags.set -> void
LM.App.Wpf.ViewModels.AddPipeline
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddViewModel
LM.App.Wpf.ViewModels.AddViewModel.AddFilesCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.ViewModels.WatchedFolderScanner? scanner = null, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore? watchedFolderSettings = null, LM.App.Wpf.ViewModels.StagingListViewModel? stagingList = null, LM.App.Wpf.ViewModels.WatchedFoldersViewModel? watchedFolders = null, LM.App.Wpf.Common.Dialogs.IDialogService? dialogService = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.BulkAddFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ClearCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.CommitSelectedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.AddViewModel.Current.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.AddViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.AddViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.AddViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.AddViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.AddViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.AddViewModel.ReviewStagedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Staging.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.AddViewModel.StagingListViewModel.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFolders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFoldersViewModel.get -> LM.App.Wpf.ViewModels.WatchedFoldersViewModel!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.LibraryPresetPickerDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Presets.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.SelectedPresetId.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.EntryId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookAbsolutePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookRelativePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.DisplayLabel.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.ExecutedBy.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.Owner.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.TotalHits.get -> int
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.ConfirmCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.Entries.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.LitSearchRunPickerViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.LibraryPresetSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.set -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Initialize(LM.App.Wpf.Common.SearchSavePromptContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultNotes.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultTags.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.SearchSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingEditorViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingList.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.SelectedWorkspacePath.get -> string?
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.get -> bool
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.WorkspaceChooserViewModel(LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.CanAcceptFileDrop(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleFileDropAsync(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibrarySearchResult
LM.App.Wpf.ViewModels.LibrarySearchResult.Entry.get -> LM.Core.Models.Entry!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasAttachments.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasDoi.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasIdentifiers.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasInternalId.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasLinks.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNct.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPmid.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasRelations.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasSource.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasUserNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.Highlight.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.HighlightDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.IsFullText.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.LibrarySearchResult(LM.Core.Models.Entry! entry, double? score, string? highlight) -> void
LM.App.Wpf.ViewModels.LibrarySearchResult.Score.get -> double?
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentGlyphKind.get -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.TitleSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.YearPresenceSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearDescendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearAscendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SourceSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TypeSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedOnSortKey.get -> System.DateTime
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedBySortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.InternalIdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.DoiSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.PmidSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.NctSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AuthorsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TagsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IsInternalSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SnippetSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreSortKey.get -> double
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.None = 0 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Pdf = 1 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Document = 2 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Presentation = 3 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Generic = 4 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.Library.LibraryLinkItem
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.LibraryLinkItem(string! DisplayText, string! Target, LM.App.Wpf.ViewModels.Library.LinkItemKind Kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.get -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.init -> void
LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Url = 0 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.File = 1 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Folder = 2 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.RunAndBasics = 0 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Metadata = 1 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Workflow = 2 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Summary = 3 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.ProjectEditorStepDescriptor(LM.App.Wpf.ViewModels.Review.ProjectEditorStep Step, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.ReviewTemplateOption(LM.Review.Core.Models.ReviewTemplateKind Kind, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectEditorViewModel() -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.AddStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntryCount.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntrySummary.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ErrorMessage.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.HookRelativePath.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Initialize(LM.App.Wpf.Services.Review.Design.ProjectBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchEntryId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchRunId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageDownCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageUpCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.RemoveStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Result.get -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SaveCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.get -> LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.StageTypes.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStageType>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Stages.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Steps.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.TemplateOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStep.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepDescriptor.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepIndex.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsSummaryStep.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.get -> LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateKind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.NextCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.BackCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ChangeRunCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ConfigureRunReloadHandler(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.App.Wpf.Services.Review.Design.ProjectBlueprint?>!>! handler) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.StageDisplayOptionViewModel(LM.Review.Core.Models.StageContentArea area, bool isSelected) -> void
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Area.get -> LM.Review.Core.Models.StageContentArea
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Description.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.get -> bool
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageBlueprintViewModel(LM.App.Wpf.Services.Review.Design.StageBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageId.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TotalReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.DisplayOptions.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel!>!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TryBuild(out LM.App.Wpf.Services.Review.Design.StageBlueprint! stage, out string? errorMessage) -> bool
LM.App.Wpf.ViewModels.StagingListViewModel
LM.App.Wpf.ViewModels.StagingListViewModel.AddStagedItemsAsync(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Clear() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.CommitSelectedAsync(System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.StagingListViewModel.Current.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.StagingListViewModel.HasItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.HasSelectedItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.StagingListViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.StagingListViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingListViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.StagingListViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.SetCommandGuard(System.Func<System.Func<System.Threading.Tasks.Task!>!, System.Threading.Tasks.Task!>! guard) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.UpdateParentBusy(bool isBusy) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.WatchedFoldersViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList, LM.App.Wpf.ViewModels.WatchedFolderScanner! scanner, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore! settingsStore, LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.WatchedFolder
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.get -> bool
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.LastScanDisplay.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.LastScanUtc.get -> System.DateTimeOffset?
LM.App.Wpf.ViewModels.WatchedFolder.LastScanWasUnchanged.get -> bool?
LM.App.Wpf.ViewModels.WatchedFolder.Path.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.Path.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFolder.ResetScanState() -> void
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusLabel.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusToolTip.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.WatchedFolder() -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(string! path) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig
LM.App.Wpf.ViewModels.WatchedFolderConfig.ApplyState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.ClearState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFolderConfig.CreateSnapshot() -> LM.Core.Models.WatchedFolderSettings!
LM.App.Wpf.ViewModels.WatchedFolderConfig.Load(LM.Core.Models.WatchedFolderSettings! settings) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.StoreState(LM.App.Wpf.ViewModels.WatchedFolder! folder, LM.Core.Models.WatchedFolderState! state) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.WatchedFolderConfig() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Folder.get -> LM.App.Wpf.ViewModels.WatchedFolder!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Items.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.WatchedFolderScanEventArgs(LM.App.Wpf.ViewModels.WatchedFolder! folder, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner
LM.App.Wpf.ViewModels.WatchedFolderScanner.Attach(LM.App.Wpf.ViewModels.WatchedFolderConfig! config) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.ItemsStaged -> System.EventHandler<LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs!>?
LM.App.Wpf.ViewModels.WatchedFolderScanner.ScanAsync(LM.App.Wpf.ViewModels.WatchedFolder? folder, System.Threading.CancellationToken ct, bool force = false) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFolderScanner.WatchedFolderScanner(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.IAddPipeline
LM.App.Wpf.ViewModels.IAddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.IAddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.Library.ILibraryDocumentService
LM.App.Wpf.Library.ILibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.ILibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.LibraryDocumentService
LM.App.Wpf.Library.LibraryDocumentService.LibraryDocumentService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.IAttachmentMetadataPrompt
LM.App.Wpf.Library.IAttachmentMetadataPrompt.RequestMetadataAsync(LM.App.Wpf.Library.AttachmentMetadataPromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.AttachmentMetadataPromptResult?>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.get -> string!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.AttachmentMetadataPromptContext(string! EntryTitle, System.Collections.Generic.IReadOnlyList<string!>! FilePaths) -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>!
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult.AttachmentMetadataPromptResult(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>! Attachments) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection
LM.App.Wpf.Library.AttachmentMetadataSelection.AttachmentMetadataSelection(string! SourcePath, string! Title, LM.Core.Models.AttachmentKind Kind, System.Collections.Generic.IReadOnlyList<string!>! Tags) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.get -> LM.Core.Models.AttachmentKind
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.init -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LibraryFiltersViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! presetStore, LM.App.Wpf.Common.ILibraryPresetPrompt! presetPrompt, LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.SavedSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.get -> string
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedSearchPresetViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, LM.App.Wpf.Library.LibraryFilterPreset! preset, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Summary.get -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.ToSummary() -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.SavedSearchTreeChangedEventArgs(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! presets) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.SavedSearchTreeViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.TreeChanged -> System.EventHandler<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs!>?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ClearCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyPresetAsync(LM.App.Wpf.Common.LibraryPresetSummary! summary, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyState(LM.App.Wpf.Library.LibraryFilterState! state) -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.CaptureState() -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTooltip.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTokens.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.BuildFullTextQuery(string! normalizedQuery) -> LM.Core.Models.Search.FullTextSearchQuery!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.HasSavedPresets.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.GetNormalizedFullTextQuery() -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.NavigationRoots.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RefreshNavigationAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedPresets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedSearches.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleLeftPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleRightPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SortOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RemoveTagCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand<string?>!
LM.App.Wpf.ViewModels.Library.LibrarySortOption
LM.App.Wpf.ViewModels.Library.LibrarySortOption.LibrarySortOption(string! key, string! displayName) -> void
LM.App.Wpf.ViewModels.Library.LibrarySortOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOptions
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.Category = 0 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.SavedSearch = 1 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchEntry = 2 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchRun = 3 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.LibraryNavigationNodeViewModel(string! name, LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.HasChildren.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Kind.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.get -> object?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.init -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.LibraryColumnOption(string! key, string! displayName, bool isVisible) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LibraryColumnVisibility() -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LoadFrom(System.Collections.Generic.IReadOnlyDictionary<string!, bool>! source) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.Snapshot() -> System.Collections.Generic.IReadOnlyDictionary<string!, bool>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LibraryResultsViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.App.Wpf.Library.ILibraryEntryEditor! entryEditor, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.Library.IAttachmentMetadataPrompt! attachmentPrompt, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.Core.Abstractions.IHasher! hasher, LM.App.Wpf.Services.Pdf.IPdfViewerLauncher! pdfViewerLauncher) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadFullTextResultsAsync(System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.FullTextSearchHit!>! hits, System.Func<LM.Core.Models.Entry!, bool>? entryFilter = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadMetadataResults(System.Collections.Generic.IEnumerable<LM.Core.Models.Entry!>! entries) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResetSortForSearch(LM.App.Wpf.ViewModels.Library.LibrarySortOption! defaultOption) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridLoaded(System.Windows.RoutedEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridSorting(System.Windows.Controls.DataGridSortingEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.MarkAsMetadataResults() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResultsAreFullText.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.get -> LM.App.Wpf.ViewModels.LibrarySearchResult?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LinkItems.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryLinkItem!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.EditEntryAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelection.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedItems.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectionChanged -> System.EventHandler?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelectedAbstract.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ToggleBlacklistAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.get -> int
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.LibraryCollectionFolderViewModel(LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! tree, string! id, string! name, LM.App.Wpf.Library.Collections.LibraryCollectionMetadata! metadata) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.LibraryCollectionsViewModel(LM.App.Wpf.Library.Collections.LibraryCollectionStore! store, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPrimaryAttachment.get -> bool
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.LibrarySearchQueryBox() -> void
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.get -> string!
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel
LM.App.Wpf.ViewModels.LibraryViewModel.Filters.get -> LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LibraryViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFullTextSearchService! fullTextSearch, LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel! filters, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.Configuration.IUserPreferencesStore! preferencesStore, LM.App.Wpf.Common.IClipboardService! clipboard, LM.App.Wpf.Common.IFileExplorerService! fileExplorer, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! litSearchOrganizer, LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! collections, LM.App.Wpf.Library.Collections.LibraryCollectionStore! collectionStore) -> void
LM.App.Wpf.ViewModels.LibraryViewModel.Results.get -> LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.Collections.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibraryColumnOption!>!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnVisibility.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility!
LM.App.Wpf.ViewModels.SearchItemViewModel
LM.App.Wpf.ViewModels.SearchItemViewModel.Header.get -> string!
LM.App.Wpf.ViewModels.SearchItemViewModel.SearchItemViewModel(string! header, LM.App.Wpf.ViewModels.LibraryViewModel! vm) -> void
LM.App.Wpf.ViewModels.SearchItemViewModel.Vm.get -> LM.App.Wpf.ViewModels.LibraryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel
LM.App.Wpf.ViewModels.SearchViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.SearchViewModel.ExportSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.From.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.LoadSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRuns.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.PreviousSearchSummary!>!
LM.App.Wpf.ViewModels.SearchViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRunsCount.get -> int
LM.App.Wpf.ViewModels.SearchViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.SearchViewModel.Query.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.get -> LM.Core.Models.SearchHit?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RunSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SaveSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleLeftPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleRightPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SearchViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IWorkSpaceService! ws, LM.App.Wpf.Common.ISearchSavePrompt! savePrompt, LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel! providers, LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel! history, LM.Infrastructure.Search.PubMedSearchProvider! pubMedProvider, LM.Core.Abstractions.Configuration.IUserPreferencesStore? preferencesStore = null) -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.get -> LM.App.Wpf.ViewModels.PreviousSearchSummary?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.StartPreviousRunCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ShowRunDetailsCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleFavoriteCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.To.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.History.get -> LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel.Providers.get -> LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecordExecutionAsync(LM.Core.Models.Search.SearchExecutionResult! result, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.SearchHistoryViewModel(LM.Core.Abstractions.Configuration.ISearchHistoryStore! store) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.ExecuteSearchAsync() -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.RunSearchCommand.get -> LM.App.Wpf.Common.AsyncRelayCommand!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchExecuted -> System.EventHandler<LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs!>?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchProvidersViewModel(LM.Core.Abstractions.Search.ISearchExecutionService! executionService) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.set -> void
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.Result.get -> LM.Core.Models.Search.SearchExecutionResult!
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.SearchExecutedEventArgs(LM.Core.Models.Search.SearchExecutionResult! result) -> void
LM.App.Wpf.ViewModels.PreviousSearchSummary
LM.App.Wpf.ViewModels.PreviousSearchSummary.DisplayName.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.EntryId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.FavoriteRunId.get -> string?
LM.App.Wpf.ViewModels.PreviousSearchSummary.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastRunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.Provider.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.Query.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunCount.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TotalHits.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TagsDisplay.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption
LM.App.Wpf.ViewModels.SearchDatabaseOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption.SearchDatabaseOption(LM.Core.Models.SearchDatabase value, string! displayName) -> void
LM.App.Wpf.ViewModels.SearchDatabaseOption.Value.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.StagingItem
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.get -> LM.HubSpoke.Models.ArticleHook?
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.DisplayName.get -> string?
LM.App.Wpf.ViewModels.StagingItem.DisplayName.set -> void
LM.App.Wpf.ViewModels.StagingItem.Doi.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Doi.set -> void
LM.App.Wpf.ViewModels.StagingItem.FilePath.get -> string!
LM.App.Wpf.ViewModels.StagingItem.FilePath.set -> void
LM.App.Wpf.ViewModels.StagingItem.Internal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Internal.set -> void
LM.App.Wpf.ViewModels.StagingItem.InternalId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.InternalId.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsDuplicate.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsNearMatch.get -> bool
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Notes.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Notes.set -> void
LM.App.Wpf.ViewModels.StagingItem.OriginalFileName.get -> string!
LM.App.Wpf.ViewModels.StagingItem.Pmid.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Pmid.set -> void
LM.App.Wpf.ViewModels.StagingItem.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingItem.Selected.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Selected.set -> void
LM.App.Wpf.ViewModels.StagingItem.Similarity.get -> double
LM.App.Wpf.ViewModels.StagingItem.Similarity.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Source.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Source.set -> void
LM.App.Wpf.ViewModels.StagingItem.StagingItem() -> void
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.get -> string!
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.set -> void
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.Title.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Title.set -> void
LM.App.Wpf.ViewModels.StagingItem.Type.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingItem.Type.set -> void
LM.App.Wpf.ViewModels.StagingItem.Year.get -> int?
LM.App.Wpf.ViewModels.StagingItem.Year.set -> void
LM.App.Wpf.Views.AddView
LM.App.Wpf.Views.Behaviors.FileDropRequest
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.get -> System.Windows.DragEventArgs!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.get -> object?
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.FileDropRequest(System.Collections.Generic.IReadOnlyList<string!>! Paths, object? DropTarget, System.Windows.DragEventArgs! Args) -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.init -> void
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior.SavedSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.AddView.AddView() -> void
LM.App.Wpf.Views.AddView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog
LM.App.Wpf.Views.LibraryPresetPickerDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.LibraryPresetPickerDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel!
LM.App.Wpf.Views.LibraryPresetPrompt.LibraryPresetPrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.InitializeComponent() -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.AttachmentMetadataDialog(LM.App.Wpf.ViewModels.Library.AttachmentMetadataDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog
LM.App.Wpf.Views.LibraryPresetSaveDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.LibraryPresetSaveDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel!
LM.App.Wpf.Views.LibraryView
LM.App.Wpf.Views.LibraryView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryView.LibraryView() -> void
LM.App.Wpf.Views.PdfViewer
LM.App.Wpf.Views.PdfViewer.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewer.PdfViewer() -> void
LM.App.Wpf.Views.Library.TagTokenSelector
LM.App.Wpf.Views.Library.TagTokenSelector.InitializeComponent() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.FilteredSuggestions.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>?
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.set -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagTokenSelector() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.get -> System.Collections.Generic.IEnumerable<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.set -> void
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTagsProperty
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabularyProperty
LM.App.Wpf.Views.LibraryPresetPrompt
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Views.Review.Controls.DecisionBadge
LM.App.Wpf.Views.Review.Controls.DecisionBadge.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.DecisionBadge() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.get -> LM.Review.Core.Models.ScreeningStatus
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.set -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.ExtractionFieldEditor() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.ScreeningQueueControl() -> void
LM.App.Wpf.Views.Review.ReviewView
LM.App.Wpf.Views.Review.ReviewView.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ReviewView.ReviewView() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.LitSearchRunPickerWindow(LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel!
LM.App.Wpf.Views.Review.ProjectEditorWindow
LM.App.Wpf.Views.Review.ProjectEditorWindow.Attach(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.ProjectEditorWindow() -> void
LM.App.Wpf.Views.SearchSavePrompt
LM.App.Wpf.Views.SearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Views.SearchSavePrompt.SearchSavePrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.DataGridColumnVisibilityBehavior() -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.set -> void
LM.App.Wpf.Views.SearchView
LM.App.Wpf.Views.SearchView.InitializeComponent() -> void
LM.App.Wpf.Views.SearchView.SearchView() -> void
LM.App.Wpf.Views.ShellWindow
LM.App.Wpf.Views.ShellWindow.InitializeComponent() -> void
LM.App.Wpf.Views.ShellWindow.LoadWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.NewWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.ShellWindow() -> void
LM.App.Wpf.Views.StagingEditorWindow
LM.App.Wpf.Views.StagingEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.StagingEditorWindow.StagingEditorWindow(LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel! viewModel) -> void
override LM.App.Wpf.ViewModels.Library.LibrarySortOption.ToString() -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Name.get -> string!
override LM.App.Wpf.Views.Library.AttachmentMetadataDialog.OnClosed(System.EventArgs! e) -> void
LM.App.Wpf.Views.WorkspaceChooser
LM.App.Wpf.Views.WorkspaceChooser.InitializeComponent() -> void
LM.App.Wpf.Views.WorkspaceChooser.SelectedWorkspacePath.get -> string?
LM.App.Wpf.Views.WorkspaceChooser.WorkspaceChooser(LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel! viewModel) -> void
LM.App.Wpf.Views.WorkspaceChooser.Configure(System.Action<LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel!>! configure) -> void
override LM.App.Wpf.App.OnExit(System.Windows.ExitEventArgs! e) -> void
override LM.App.Wpf.App.OnStartup(System.Windows.StartupEventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetPickerDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetSaveDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.StagingEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.WorkspaceChooser.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.ProjectEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.OnClosed(System.EventArgs! e) -> void
static LM.App.Wpf.App.Main() -> void
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.All.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.NewestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.OldestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleAscending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleDescending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Clone() -> LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.LitSearchOrganizerStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveEntryAsync(string! entryId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.SyncEntriesAsync(System.Collections.Generic.IEnumerable<string!>! entryIds, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema.CurrentVersion -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.LitSearchEntryViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! title, string? query) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Query.get -> string?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.CanDelete.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsRoot.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.LitSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! name, bool isRoot) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.LitSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.LitSearchRunViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! runId, string! label, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel! parent) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.LitSearchTreeViewModel(LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt, LM.Core.Abstractions.IEntryStore! entryStore, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
---------- LM.App.Wpf ----------
#nullable enable
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.ColumnKeyProperty -> System.Windows.DependencyProperty!
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.GetColumnKey(System.Windows.DependencyObject! element) -> string?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.SetColumnKey(System.Windows.DependencyObject! element, string? value) -> void
#nullable enable
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Id.get -> string!
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.IsDraggable.get -> bool
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Name.get -> string!
const LM.App.Wpf.Library.LibraryPresetFolder.RootId = "root" -> string!
const LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.RootId = "root" -> string!
const LM.App.Wpf.ViewModels.StagingItem.DuplicateThreshold = 0.999 -> double
const LM.App.Wpf.ViewModels.StagingItem.NearThreshold = 0.75 -> double
LM.App.Wpf.App
LM.App.Wpf.App.App() -> void
LM.App.Wpf.App.InitializeComponent() -> void
LM.App.Wpf.Common.AsyncRelayCommand
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<object?, System.Threading.Tasks.Task!>! execute, System.Func<object?, bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<System.Threading.Tasks.Task!>! execute, System.Func<bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.AsyncRelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.AsyncRelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.AsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.IAsyncRelayCommand
LM.App.Wpf.Common.IAsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter
LM.App.Wpf.Common.BooleanToOpacityConverter.BooleanToOpacityConverter() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.set -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.set -> void
LM.App.Wpf.Common.Converters.ProjectEditorConverters
LM.App.Wpf.Common.Converters.ProjectEditorConverters.StageSelectionEquality.get -> System.Windows.Data.IMultiValueConverter!
LM.App.Wpf.Common.LibraryPresetSaveContext.LibraryPresetSaveContext(string! DefaultName, System.Collections.Generic.IReadOnlyCollection<string!>! ExistingNames, string! Title = "Save Library Preset", string! Prompt = "Name this filter preset.") -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.LibraryCollectionEntry() -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.DeletePresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenamePresetAsync(string! presetId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
LM.App.Wpf.Library.LibraryFilterState.Tags.get -> string![]!
LM.App.Wpf.Library.LibraryPresetFolder.EnumerateChildren() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.LibraryPresetTreeItem>!
LM.App.Wpf.Library.LibraryPresetNodeKind.Folder = 0 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetNodeKind.Preset = 1 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.LitSearchOrganizerEntry() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.LitSearchOrganizerFolder() -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectBlueprint(string! projectId, string! name, System.DateTimeOffset createdAtUtc, string! createdBy, string! litSearchEntryId, string! litSearchRunId, System.Collections.Generic.IReadOnlyList<string!>! checkedEntryIds, string? hookRelativePath, LM.Review.Core.Models.ReviewTemplateKind template, string! metadataNotes, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>! stages) -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CheckedEntryIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedAtUtc.get -> System.DateTimeOffset
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedBy.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.HookRelativePath.get -> string?
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchEntryId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchRunId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Template.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.MetadataNotes.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Stages.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.With(string? name = null, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>? stages = null, LM.Review.Core.Models.ReviewTemplateKind? template = null, string? metadataNotes = null, string? litSearchEntryId = null, string? litSearchRunId = null, System.Collections.Generic.IReadOnlyList<string!>? checkedEntryIds = null) -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint!
LM.App.Wpf.Services.Review.Design.StageBlueprint
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageBlueprint(string! stageId, string! name, LM.Review.Core.Models.ReviewStageType stageType, int primaryReviewers, int secondaryReviewers, bool requiresConsensus, int minimumAgreements, bool escalateOnDisagreement, LM.Review.Core.Models.StageDisplayProfile! displayProfile) -> void
LM.App.Wpf.Services.Review.Design.StageBlueprint.EscalateOnDisagreement.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.MinimumAgreements.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.PrimaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.RequiresConsensus.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.SecondaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageId.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.Services.Review.Design.StageBlueprint.DisplayProfile.get -> LM.Review.Core.Models.StageDisplayProfile!
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher.Show(string! entryId, string! pdfAbsolutePath, string! pdfHash) -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.AddSelectionToFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.MoveFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RemoveSelectionFromFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ItemsView.get -> System.ComponentModel.ICollectionView!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.LitSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.SavedSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SavedSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeletePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.LoadPresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenamePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.LibraryViewModel.AllTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.LibraryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.LitSearchOrganizer.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LoadCollectionEntriesAsync(string! collectionId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.OpenPdfAnnotationsCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.LibraryViewModel.RefreshTagsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.ToggleBlacklistCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationTypeDisplay.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Dispose() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.HighlightBrush.get -> System.Windows.Media.Brush!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.PdfAnnotationColorCommandParameter() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior.CollectionTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior.LitSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter
LM.App.Wpf.Views.Converters.EnumEqualsConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.EnumEqualsConverter() -> void
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.InverseBooleanToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.AnnotationColorParameterConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.Convert(object?[]! values, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.ConvertBack(object? value, System.Type![]! targetTypes, object? parameter, System.Globalization.CultureInfo! culture) -> object?[]!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NullOrEmptyToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList
LM.App.Wpf.Views.Pdf.PdfAnnotationList.PdfAnnotationList() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow
LM.App.Wpf.Views.PdfViewerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow.PdfViewerWindow() -> void
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.PdfViewerHostObject(LM.App.Wpf.Views.PdfViewer! owner) -> void
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogCloseRequestedEventArgs(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogResult.get -> bool?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.CloseRequested -> System.EventHandler<LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs!>?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.DialogViewModelBase() -> void
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.RequestClose(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.IDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.WpfDialogService(System.IServiceProvider! services) -> void
LM.App.Wpf.Common.ILibraryPresetPrompt
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Common.IClipboardService
LM.App.Wpf.Common.IClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.ClipboardService
LM.App.Wpf.Common.ClipboardService.ClipboardService() -> void
LM.App.Wpf.Common.ClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.IFileExplorerService
LM.App.Wpf.Common.IFileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.FileExplorerService
LM.App.Wpf.Common.FileExplorerService.FileExplorerService() -> void
LM.App.Wpf.Common.FileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.ISearchSavePrompt
LM.App.Wpf.Common.ISearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Common.SearchSavePromptContext
LM.App.Wpf.Common.SearchSavePromptContext.Database.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.From.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.Query.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.SearchSavePromptContext(string! Query, LM.Core.Models.SearchDatabase Database, System.DateTime? From, System.DateTime? To, string! DefaultName, string! DefaultNotes, System.Collections.Generic.IReadOnlyList<string!>! DefaultTags) -> void
LM.App.Wpf.Common.SearchSavePromptContext.Database.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.SearchSavePromptContext.From.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.Query.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.To.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.To.init -> void
LM.App.Wpf.Common.SearchSavePromptResult
LM.App.Wpf.Common.SearchSavePromptResult.Name.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Notes.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Tags.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.SearchSavePromptResult(string! Name, string! Notes, string! Tags) -> void
LM.App.Wpf.Common.SearchSavePromptResult.Name.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Notes.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Tags.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSaveResult
LM.App.Wpf.Common.LibraryPresetSaveResult.LibraryPresetSaveResult(string! Name) -> void
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.get -> bool
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.LibraryPresetSelectionContext(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! Presets, bool AllowLoad, string! Title) -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.LibraryPresetSelectionResult(string? SelectedPresetId, System.Collections.Generic.IReadOnlyList<string!>! DeletedPresetIds) -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.get -> string?
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.init -> void
LM.App.Wpf.Common.LibraryPresetSummary
LM.App.Wpf.Common.LibraryPresetSummary.Id.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Id.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.LibraryPresetSummary(string! Id, string! Name, System.DateTime SavedUtc) -> void
LM.App.Wpf.Common.LibraryPresetSummary.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.get -> System.DateTime
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.init -> void
LM.App.Wpf.Common.RelayCommand
LM.App.Wpf.Common.RelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.RelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.RelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.RelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.RelayCommand.RelayCommand(System.Action<object?>! exec, System.Func<object?, bool>? can = null) -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.get -> bool
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.init -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.get -> string?
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.init -> void
LM.App.Wpf.Common.Dialogs.FolderPickerOptions
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.get -> string?
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.init -> void
LM.App.Wpf.Common.Dialogs.IDialogService
LM.App.Wpf.Common.Dialogs.IDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.StringJoinConverter
LM.App.Wpf.Common.StringJoinConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.StringJoinConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.AttachmentGlyphToIconConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.AttachmentGlyphToDescriptionConverter() -> void
LM.App.Wpf.Common.ViewModelBase
LM.App.Wpf.Common.ViewModelBase.ViewModelBase() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Id.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.get -> int
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PdfAnnotation(string! id, string! title) -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.get -> System.Windows.Media.Imaging.BitmapImage?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.Annotations.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Pdf.PdfAnnotation!>!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.ChangeAnnotationColorCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.CopyAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DocumentSource.get -> System.Uri?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.HandleAnnotationSelectionAsync(LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.LoadPdfCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfHash.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfViewerViewModel(LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.App.Wpf.Services.IUserContext! userContext, LM.Core.Abstractions.IPdfAnnotationPreviewStorage! previewStorage, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.Common.IClipboardService! clipboard) -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.RecordAnnotationChangeCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.WebViewBridge.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DeleteAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.Library.LibraryFilterPreset
LM.App.Wpf.Library.LibraryFilterPreset.LibraryFilterPreset() -> void
LM.App.Wpf.Library.LibraryFilterPreset.Id.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Id.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.Name.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Name.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.get -> System.DateTime
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.get -> int
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.State.get -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.Library.LibraryFilterPreset.State.set -> void
LM.App.Wpf.Library.LibraryFilterPresetStore
LM.App.Wpf.Library.LibraryFilterPresetStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.MovePresetAsync(string! presetId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.LibraryFilterPresetStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.ListPresetsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.LibraryFilterPreset!>!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, string? targetFolderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetByIdAsync(string! presetId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
const LM.App.Wpf.Library.Collections.LibraryCollectionFolder.RootId = "collections-root" -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionEntry!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile
LM.App.Wpf.Library.Collections.LibraryCollectionFile.LibraryCollectionFile() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.get -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder?
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.get -> int
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.EnumerateDescendants() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionEntry!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.LibraryCollectionFolder() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.LibraryCollectionMetadata() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore
LM.App.Wpf.Library.Collections.LibraryCollectionStore.AddEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.CreateFolderAsync(string? parentFolderId, string! name, string! createdBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.DeleteFolderAsync(string! folderId, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.LibraryCollectionStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RemoveEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RenameFolderAsync(string! folderId, string! newName, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryPresetFolder
LM.App.Wpf.Library.LibraryPresetFolder.Clone() -> LM.App.Wpf.Library.LibraryPresetFolder!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Id.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Id.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.LibraryPresetFolder() -> void
LM.App.Wpf.Library.LibraryPresetFolder.Name.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Name.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Presets.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryFilterPreset!>!
LM.App.Wpf.Library.LibraryPresetFolder.Presets.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.get -> int
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.set -> void
LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem
LM.App.Wpf.Library.LibraryPresetTreeItem.Folder.get -> LM.App.Wpf.Library.LibraryPresetFolder?
LM.App.Wpf.Library.LibraryPresetTreeItem.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem(LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder, LM.App.Wpf.Library.LibraryPresetFolder? folder, LM.App.Wpf.Library.LibraryFilterPreset? preset) -> void
LM.App.Wpf.Library.LibraryPresetTreeItem.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset?
LM.App.Wpf.Library.LibraryPresetTreeItem.SortOrder.get -> int
LM.App.Wpf.Library.ILibraryEntryEditor
LM.App.Wpf.Library.ILibraryEntryEditor.EditEntryAsync(LM.Core.Models.Entry! entry) -> System.Threading.Tasks.Task<System.Boolean>!
LM.App.Wpf.Library.LibraryFilterState
LM.App.Wpf.Library.LibraryFilterState.LibraryFilterState() -> void
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.get -> bool
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.set -> void
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateFrom.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateFrom.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateTo.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateTo.set -> void
LM.App.Wpf.Library.LibraryFilterState.SortKey.get -> string?
LM.App.Wpf.Library.LibraryFilterState.SortKey.set -> void
LM.App.Wpf.Library.LibraryFilterState.Tags.set -> void
LM.App.Wpf.ViewModels.AddPipeline
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddViewModel
LM.App.Wpf.ViewModels.AddViewModel.AddFilesCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.ViewModels.WatchedFolderScanner? scanner = null, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore? watchedFolderSettings = null, LM.App.Wpf.ViewModels.StagingListViewModel? stagingList = null, LM.App.Wpf.ViewModels.WatchedFoldersViewModel? watchedFolders = null, LM.App.Wpf.Common.Dialogs.IDialogService? dialogService = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.BulkAddFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ClearCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.CommitSelectedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.AddViewModel.Current.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.AddViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.AddViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.AddViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.AddViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.AddViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.AddViewModel.ReviewStagedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Staging.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.AddViewModel.StagingListViewModel.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFolders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFoldersViewModel.get -> LM.App.Wpf.ViewModels.WatchedFoldersViewModel!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.LibraryPresetPickerDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Presets.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.SelectedPresetId.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.EntryId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookAbsolutePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookRelativePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.DisplayLabel.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.ExecutedBy.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.Owner.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.TotalHits.get -> int
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.ConfirmCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.Entries.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.LitSearchRunPickerViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.LibraryPresetSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.set -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Initialize(LM.App.Wpf.Common.SearchSavePromptContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultNotes.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultTags.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.SearchSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingEditorViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingList.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.SelectedWorkspacePath.get -> string?
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.get -> bool
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.WorkspaceChooserViewModel(LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.CanAcceptFileDrop(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleFileDropAsync(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibrarySearchResult
LM.App.Wpf.ViewModels.LibrarySearchResult.Entry.get -> LM.Core.Models.Entry!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasAttachments.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasDoi.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasIdentifiers.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasInternalId.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasLinks.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNct.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPmid.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasRelations.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasSource.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasUserNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.Highlight.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.HighlightDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.IsFullText.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.LibrarySearchResult(LM.Core.Models.Entry! entry, double? score, string? highlight) -> void
LM.App.Wpf.ViewModels.LibrarySearchResult.Score.get -> double?
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentGlyphKind.get -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.TitleSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.YearPresenceSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearDescendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearAscendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SourceSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TypeSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedOnSortKey.get -> System.DateTime
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedBySortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.InternalIdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.DoiSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.PmidSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.NctSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AuthorsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TagsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IsInternalSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SnippetSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreSortKey.get -> double
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.None = 0 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Pdf = 1 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Document = 2 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Presentation = 3 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Generic = 4 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.Library.LibraryLinkItem
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.LibraryLinkItem(string! DisplayText, string! Target, LM.App.Wpf.ViewModels.Library.LinkItemKind Kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.get -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.init -> void
LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Url = 0 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.File = 1 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Folder = 2 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.RunAndBasics = 0 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Metadata = 1 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Workflow = 2 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Summary = 3 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.ProjectEditorStepDescriptor(LM.App.Wpf.ViewModels.Review.ProjectEditorStep Step, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.ReviewTemplateOption(LM.Review.Core.Models.ReviewTemplateKind Kind, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectEditorViewModel() -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.AddStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntryCount.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntrySummary.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ErrorMessage.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.HookRelativePath.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Initialize(LM.App.Wpf.Services.Review.Design.ProjectBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchEntryId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchRunId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageDownCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageUpCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.RemoveStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Result.get -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SaveCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.get -> LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.StageTypes.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStageType>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Stages.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Steps.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.TemplateOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStep.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepDescriptor.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepIndex.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsSummaryStep.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.get -> LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateKind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.NextCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.BackCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ChangeRunCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ConfigureRunReloadHandler(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.App.Wpf.Services.Review.Design.ProjectBlueprint?>!>! handler) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.StageDisplayOptionViewModel(LM.Review.Core.Models.StageContentArea area, bool isSelected) -> void
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Area.get -> LM.Review.Core.Models.StageContentArea
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Description.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.get -> bool
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageBlueprintViewModel(LM.App.Wpf.Services.Review.Design.StageBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageId.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TotalReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.DisplayOptions.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel!>!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TryBuild(out LM.App.Wpf.Services.Review.Design.StageBlueprint! stage, out string? errorMessage) -> bool
LM.App.Wpf.ViewModels.StagingListViewModel
LM.App.Wpf.ViewModels.StagingListViewModel.AddStagedItemsAsync(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Clear() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.CommitSelectedAsync(System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.StagingListViewModel.Current.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.StagingListViewModel.HasItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.HasSelectedItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.StagingListViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.StagingListViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingListViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.StagingListViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.SetCommandGuard(System.Func<System.Func<System.Threading.Tasks.Task!>!, System.Threading.Tasks.Task!>! guard) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.UpdateParentBusy(bool isBusy) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.WatchedFoldersViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList, LM.App.Wpf.ViewModels.WatchedFolderScanner! scanner, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore! settingsStore, LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.WatchedFolder
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.get -> bool
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.LastScanDisplay.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.LastScanUtc.get -> System.DateTimeOffset?
LM.App.Wpf.ViewModels.WatchedFolder.LastScanWasUnchanged.get -> bool?
LM.App.Wpf.ViewModels.WatchedFolder.Path.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.Path.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFolder.ResetScanState() -> void
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusLabel.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusToolTip.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.WatchedFolder() -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(string! path) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig
LM.App.Wpf.ViewModels.WatchedFolderConfig.ApplyState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.ClearState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFolderConfig.CreateSnapshot() -> LM.Core.Models.WatchedFolderSettings!
LM.App.Wpf.ViewModels.WatchedFolderConfig.Load(LM.Core.Models.WatchedFolderSettings! settings) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.StoreState(LM.App.Wpf.ViewModels.WatchedFolder! folder, LM.Core.Models.WatchedFolderState! state) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.WatchedFolderConfig() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Folder.get -> LM.App.Wpf.ViewModels.WatchedFolder!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Items.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.WatchedFolderScanEventArgs(LM.App.Wpf.ViewModels.WatchedFolder! folder, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner
LM.App.Wpf.ViewModels.WatchedFolderScanner.Attach(LM.App.Wpf.ViewModels.WatchedFolderConfig! config) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.ItemsStaged -> System.EventHandler<LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs!>?
LM.App.Wpf.ViewModels.WatchedFolderScanner.ScanAsync(LM.App.Wpf.ViewModels.WatchedFolder? folder, System.Threading.CancellationToken ct, bool force = false) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFolderScanner.WatchedFolderScanner(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.IAddPipeline
LM.App.Wpf.ViewModels.IAddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.IAddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.Library.ILibraryDocumentService
LM.App.Wpf.Library.ILibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.ILibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.LibraryDocumentService
LM.App.Wpf.Library.LibraryDocumentService.LibraryDocumentService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.IAttachmentMetadataPrompt
LM.App.Wpf.Library.IAttachmentMetadataPrompt.RequestMetadataAsync(LM.App.Wpf.Library.AttachmentMetadataPromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.AttachmentMetadataPromptResult?>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.get -> string!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.AttachmentMetadataPromptContext(string! EntryTitle, System.Collections.Generic.IReadOnlyList<string!>! FilePaths) -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>!
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult.AttachmentMetadataPromptResult(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>! Attachments) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection
LM.App.Wpf.Library.AttachmentMetadataSelection.AttachmentMetadataSelection(string! SourcePath, string! Title, LM.Core.Models.AttachmentKind Kind, System.Collections.Generic.IReadOnlyList<string!>! Tags) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.get -> LM.Core.Models.AttachmentKind
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.init -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LibraryFiltersViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! presetStore, LM.App.Wpf.Common.ILibraryPresetPrompt! presetPrompt, LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.SavedSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.get -> string
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedSearchPresetViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, LM.App.Wpf.Library.LibraryFilterPreset! preset, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Summary.get -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.ToSummary() -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.SavedSearchTreeChangedEventArgs(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! presets) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.SavedSearchTreeViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.TreeChanged -> System.EventHandler<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs!>?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ClearCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyPresetAsync(LM.App.Wpf.Common.LibraryPresetSummary! summary, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyState(LM.App.Wpf.Library.LibraryFilterState! state) -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.CaptureState() -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTooltip.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTokens.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.BuildFullTextQuery(string! normalizedQuery) -> LM.Core.Models.Search.FullTextSearchQuery!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.HasSavedPresets.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.GetNormalizedFullTextQuery() -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.NavigationRoots.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RefreshNavigationAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedPresets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedSearches.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleLeftPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleRightPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SortOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RemoveTagCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand<string?>!
LM.App.Wpf.ViewModels.Library.LibrarySortOption
LM.App.Wpf.ViewModels.Library.LibrarySortOption.LibrarySortOption(string! key, string! displayName) -> void
LM.App.Wpf.ViewModels.Library.LibrarySortOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOptions
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.Category = 0 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.SavedSearch = 1 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchEntry = 2 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchRun = 3 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.LibraryNavigationNodeViewModel(string! name, LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.HasChildren.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Kind.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.get -> object?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.init -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.LibraryColumnOption(string! key, string! displayName, bool isVisible) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LibraryColumnVisibility() -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LoadFrom(System.Collections.Generic.IReadOnlyDictionary<string!, bool>! source) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.Snapshot() -> System.Collections.Generic.IReadOnlyDictionary<string!, bool>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LibraryResultsViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.App.Wpf.Library.ILibraryEntryEditor! entryEditor, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.Library.IAttachmentMetadataPrompt! attachmentPrompt, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.Core.Abstractions.IHasher! hasher, LM.App.Wpf.Services.Pdf.IPdfViewerLauncher! pdfViewerLauncher) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadFullTextResultsAsync(System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.FullTextSearchHit!>! hits, System.Func<LM.Core.Models.Entry!, bool>? entryFilter = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadMetadataResults(System.Collections.Generic.IEnumerable<LM.Core.Models.Entry!>! entries) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResetSortForSearch(LM.App.Wpf.ViewModels.Library.LibrarySortOption! defaultOption) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridLoaded(System.Windows.RoutedEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridSorting(System.Windows.Controls.DataGridSortingEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.MarkAsMetadataResults() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResultsAreFullText.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.get -> LM.App.Wpf.ViewModels.LibrarySearchResult?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LinkItems.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryLinkItem!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.EditEntryAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelection.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedItems.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectionChanged -> System.EventHandler?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelectedAbstract.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ToggleBlacklistAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.get -> int
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.LibraryCollectionFolderViewModel(LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! tree, string! id, string! name, LM.App.Wpf.Library.Collections.LibraryCollectionMetadata! metadata) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.LibraryCollectionsViewModel(LM.App.Wpf.Library.Collections.LibraryCollectionStore! store, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPrimaryAttachment.get -> bool
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.LibrarySearchQueryBox() -> void
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.get -> string!
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel
LM.App.Wpf.ViewModels.LibraryViewModel.Filters.get -> LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LibraryViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFullTextSearchService! fullTextSearch, LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel! filters, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.Configuration.IUserPreferencesStore! preferencesStore, LM.App.Wpf.Common.IClipboardService! clipboard, LM.App.Wpf.Common.IFileExplorerService! fileExplorer, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! litSearchOrganizer, LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! collections, LM.App.Wpf.Library.Collections.LibraryCollectionStore! collectionStore) -> void
LM.App.Wpf.ViewModels.LibraryViewModel.Results.get -> LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.Collections.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibraryColumnOption!>!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnVisibility.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility!
LM.App.Wpf.ViewModels.SearchItemViewModel
LM.App.Wpf.ViewModels.SearchItemViewModel.Header.get -> string!
LM.App.Wpf.ViewModels.SearchItemViewModel.SearchItemViewModel(string! header, LM.App.Wpf.ViewModels.LibraryViewModel! vm) -> void
LM.App.Wpf.ViewModels.SearchItemViewModel.Vm.get -> LM.App.Wpf.ViewModels.LibraryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel
LM.App.Wpf.ViewModels.SearchViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.SearchViewModel.ExportSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.From.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.LoadSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRuns.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.PreviousSearchSummary!>!
LM.App.Wpf.ViewModels.SearchViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRunsCount.get -> int
LM.App.Wpf.ViewModels.SearchViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.SearchViewModel.Query.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.get -> LM.Core.Models.SearchHit?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RunSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SaveSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleLeftPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleRightPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SearchViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IWorkSpaceService! ws, LM.App.Wpf.Common.ISearchSavePrompt! savePrompt, LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel! providers, LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel! history, LM.Infrastructure.Search.PubMedSearchProvider! pubMedProvider, LM.Core.Abstractions.Configuration.IUserPreferencesStore? preferencesStore = null) -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.get -> LM.App.Wpf.ViewModels.PreviousSearchSummary?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.StartPreviousRunCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ShowRunDetailsCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleFavoriteCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.To.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.History.get -> LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel.Providers.get -> LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecordExecutionAsync(LM.Core.Models.Search.SearchExecutionResult! result, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.SearchHistoryViewModel(LM.Core.Abstractions.Configuration.ISearchHistoryStore! store) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.ExecuteSearchAsync() -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.RunSearchCommand.get -> LM.App.Wpf.Common.AsyncRelayCommand!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchExecuted -> System.EventHandler<LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs!>?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchProvidersViewModel(LM.Core.Abstractions.Search.ISearchExecutionService! executionService) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.set -> void
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.Result.get -> LM.Core.Models.Search.SearchExecutionResult!
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.SearchExecutedEventArgs(LM.Core.Models.Search.SearchExecutionResult! result) -> void
LM.App.Wpf.ViewModels.PreviousSearchSummary
LM.App.Wpf.ViewModels.PreviousSearchSummary.DisplayName.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.EntryId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.FavoriteRunId.get -> string?
LM.App.Wpf.ViewModels.PreviousSearchSummary.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastRunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.Provider.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.Query.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunCount.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TotalHits.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TagsDisplay.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption
LM.App.Wpf.ViewModels.SearchDatabaseOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption.SearchDatabaseOption(LM.Core.Models.SearchDatabase value, string! displayName) -> void
LM.App.Wpf.ViewModels.SearchDatabaseOption.Value.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.StagingItem
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.get -> LM.HubSpoke.Models.ArticleHook?
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.DisplayName.get -> string?
LM.App.Wpf.ViewModels.StagingItem.DisplayName.set -> void
LM.App.Wpf.ViewModels.StagingItem.Doi.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Doi.set -> void
LM.App.Wpf.ViewModels.StagingItem.FilePath.get -> string!
LM.App.Wpf.ViewModels.StagingItem.FilePath.set -> void
LM.App.Wpf.ViewModels.StagingItem.Internal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Internal.set -> void
LM.App.Wpf.ViewModels.StagingItem.InternalId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.InternalId.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsDuplicate.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsNearMatch.get -> bool
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Notes.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Notes.set -> void
LM.App.Wpf.ViewModels.StagingItem.OriginalFileName.get -> string!
LM.App.Wpf.ViewModels.StagingItem.Pmid.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Pmid.set -> void
LM.App.Wpf.ViewModels.StagingItem.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingItem.Selected.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Selected.set -> void
LM.App.Wpf.ViewModels.StagingItem.Similarity.get -> double
LM.App.Wpf.ViewModels.StagingItem.Similarity.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Source.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Source.set -> void
LM.App.Wpf.ViewModels.StagingItem.StagingItem() -> void
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.get -> string!
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.set -> void
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.Title.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Title.set -> void
LM.App.Wpf.ViewModels.StagingItem.Type.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingItem.Type.set -> void
LM.App.Wpf.ViewModels.StagingItem.Year.get -> int?
LM.App.Wpf.ViewModels.StagingItem.Year.set -> void
LM.App.Wpf.Views.AddView
LM.App.Wpf.Views.Behaviors.FileDropRequest
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.get -> System.Windows.DragEventArgs!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.get -> object?
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.FileDropRequest(System.Collections.Generic.IReadOnlyList<string!>! Paths, object? DropTarget, System.Windows.DragEventArgs! Args) -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.init -> void
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior.SavedSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.AddView.AddView() -> void
LM.App.Wpf.Views.AddView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog
LM.App.Wpf.Views.LibraryPresetPickerDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.LibraryPresetPickerDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel!
LM.App.Wpf.Views.LibraryPresetPrompt.LibraryPresetPrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.InitializeComponent() -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.AttachmentMetadataDialog(LM.App.Wpf.ViewModels.Library.AttachmentMetadataDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog
LM.App.Wpf.Views.LibraryPresetSaveDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.LibraryPresetSaveDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel!
LM.App.Wpf.Views.LibraryView
LM.App.Wpf.Views.LibraryView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryView.LibraryView() -> void
LM.App.Wpf.Views.PdfViewer
LM.App.Wpf.Views.PdfViewer.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewer.PdfViewer() -> void
LM.App.Wpf.Views.Library.TagTokenSelector
LM.App.Wpf.Views.Library.TagTokenSelector.InitializeComponent() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.FilteredSuggestions.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>?
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.set -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagTokenSelector() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.get -> System.Collections.Generic.IEnumerable<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.set -> void
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTagsProperty
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabularyProperty
LM.App.Wpf.Views.LibraryPresetPrompt
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Views.Review.Controls.DecisionBadge
LM.App.Wpf.Views.Review.Controls.DecisionBadge.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.DecisionBadge() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.get -> LM.Review.Core.Models.ScreeningStatus
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.set -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.ExtractionFieldEditor() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.ScreeningQueueControl() -> void
LM.App.Wpf.Views.Review.ReviewView
LM.App.Wpf.Views.Review.ReviewView.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ReviewView.ReviewView() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.LitSearchRunPickerWindow(LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel!
LM.App.Wpf.Views.Review.ProjectEditorWindow
LM.App.Wpf.Views.Review.ProjectEditorWindow.Attach(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.ProjectEditorWindow() -> void
LM.App.Wpf.Views.SearchSavePrompt
LM.App.Wpf.Views.SearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Views.SearchSavePrompt.SearchSavePrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.DataGridColumnVisibilityBehavior() -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.set -> void
LM.App.Wpf.Views.SearchView
LM.App.Wpf.Views.SearchView.InitializeComponent() -> void
LM.App.Wpf.Views.SearchView.SearchView() -> void
LM.App.Wpf.Views.ShellWindow
LM.App.Wpf.Views.ShellWindow.InitializeComponent() -> void
LM.App.Wpf.Views.ShellWindow.LoadWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.NewWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.ShellWindow() -> void
LM.App.Wpf.Views.StagingEditorWindow
LM.App.Wpf.Views.StagingEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.StagingEditorWindow.StagingEditorWindow(LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel! viewModel) -> void
override LM.App.Wpf.ViewModels.Library.LibrarySortOption.ToString() -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Name.get -> string!
override LM.App.Wpf.Views.Library.AttachmentMetadataDialog.OnClosed(System.EventArgs! e) -> void
LM.App.Wpf.Views.WorkspaceChooser
LM.App.Wpf.Views.WorkspaceChooser.InitializeComponent() -> void
LM.App.Wpf.Views.WorkspaceChooser.SelectedWorkspacePath.get -> string?
LM.App.Wpf.Views.WorkspaceChooser.WorkspaceChooser(LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel! viewModel) -> void
LM.App.Wpf.Views.WorkspaceChooser.Configure(System.Action<LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel!>! configure) -> void
override LM.App.Wpf.App.OnExit(System.Windows.ExitEventArgs! e) -> void
override LM.App.Wpf.App.OnStartup(System.Windows.StartupEventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetPickerDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetSaveDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.StagingEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.WorkspaceChooser.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.ProjectEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.OnClosed(System.EventArgs! e) -> void
static LM.App.Wpf.App.Main() -> void
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.All.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.NewestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.OldestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleAscending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleDescending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Clone() -> LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.LitSearchOrganizerStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveEntryAsync(string! entryId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.SyncEntriesAsync(System.Collections.Generic.IEnumerable<string!>! entryIds, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema.CurrentVersion -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.LitSearchEntryViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! title, string? query) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Query.get -> string?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.CanDelete.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsRoot.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.LitSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! name, bool isRoot) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.LitSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.LitSearchRunViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! runId, string! label, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel! parent) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.LitSearchTreeViewModel(LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt, LM.Core.Abstractions.IEntryStore! entryStore, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
---------- LM.App.Wpf ----------
#nullable enable
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.ColumnKeyProperty -> System.Windows.DependencyProperty!
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.GetColumnKey(System.Windows.DependencyObject! element) -> string?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.SetColumnKey(System.Windows.DependencyObject! element, string? value) -> void
#nullable enable
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Id.get -> string!
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.IsDraggable.get -> bool
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Name.get -> string!
const LM.App.Wpf.Library.LibraryPresetFolder.RootId = "root" -> string!
const LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.RootId = "root" -> string!
const LM.App.Wpf.ViewModels.StagingItem.DuplicateThreshold = 0.999 -> double
const LM.App.Wpf.ViewModels.StagingItem.NearThreshold = 0.75 -> double
LM.App.Wpf.App
LM.App.Wpf.App.App() -> void
LM.App.Wpf.App.InitializeComponent() -> void
LM.App.Wpf.Common.AsyncRelayCommand
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<object?, System.Threading.Tasks.Task!>! execute, System.Func<object?, bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<System.Threading.Tasks.Task!>! execute, System.Func<bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.AsyncRelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.AsyncRelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.AsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.IAsyncRelayCommand
LM.App.Wpf.Common.IAsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter
LM.App.Wpf.Common.BooleanToOpacityConverter.BooleanToOpacityConverter() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.set -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.set -> void
LM.App.Wpf.Common.Converters.ProjectEditorConverters
LM.App.Wpf.Common.Converters.ProjectEditorConverters.StageSelectionEquality.get -> System.Windows.Data.IMultiValueConverter!
LM.App.Wpf.Common.LibraryPresetSaveContext.LibraryPresetSaveContext(string! DefaultName, System.Collections.Generic.IReadOnlyCollection<string!>! ExistingNames, string! Title = "Save Library Preset", string! Prompt = "Name this filter preset.") -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.LibraryCollectionEntry() -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.DeletePresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenamePresetAsync(string! presetId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
LM.App.Wpf.Library.LibraryFilterState.Tags.get -> string![]!
LM.App.Wpf.Library.LibraryPresetFolder.EnumerateChildren() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.LibraryPresetTreeItem>!
LM.App.Wpf.Library.LibraryPresetNodeKind.Folder = 0 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetNodeKind.Preset = 1 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.LitSearchOrganizerEntry() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.LitSearchOrganizerFolder() -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectBlueprint(string! projectId, string! name, System.DateTimeOffset createdAtUtc, string! createdBy, string! litSearchEntryId, string! litSearchRunId, System.Collections.Generic.IReadOnlyList<string!>! checkedEntryIds, string? hookRelativePath, LM.Review.Core.Models.ReviewTemplateKind template, string! metadataNotes, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>! stages) -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CheckedEntryIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedAtUtc.get -> System.DateTimeOffset
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedBy.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.HookRelativePath.get -> string?
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchEntryId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchRunId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Template.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.MetadataNotes.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Stages.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.With(string? name = null, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>? stages = null, LM.Review.Core.Models.ReviewTemplateKind? template = null, string? metadataNotes = null, string? litSearchEntryId = null, string? litSearchRunId = null, System.Collections.Generic.IReadOnlyList<string!>? checkedEntryIds = null) -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint!
LM.App.Wpf.Services.Review.Design.StageBlueprint
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageBlueprint(string! stageId, string! name, LM.Review.Core.Models.ReviewStageType stageType, int primaryReviewers, int secondaryReviewers, bool requiresConsensus, int minimumAgreements, bool escalateOnDisagreement, LM.Review.Core.Models.StageDisplayProfile! displayProfile) -> void
LM.App.Wpf.Services.Review.Design.StageBlueprint.EscalateOnDisagreement.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.MinimumAgreements.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.PrimaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.RequiresConsensus.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.SecondaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageId.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.Services.Review.Design.StageBlueprint.DisplayProfile.get -> LM.Review.Core.Models.StageDisplayProfile!
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher.Show(string! entryId, string! pdfAbsolutePath, string! pdfHash) -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.AddSelectionToFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.MoveFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RemoveSelectionFromFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ItemsView.get -> System.ComponentModel.ICollectionView!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.LitSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.SavedSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SavedSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeletePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.LoadPresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenamePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.LibraryViewModel.AllTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.LibraryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.LitSearchOrganizer.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LoadCollectionEntriesAsync(string! collectionId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.OpenPdfAnnotationsCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.LibraryViewModel.RefreshTagsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.ToggleBlacklistCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationTypeDisplay.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Dispose() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.HighlightBrush.get -> System.Windows.Media.Brush!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.PdfAnnotationColorCommandParameter() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior.CollectionTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior.LitSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter
LM.App.Wpf.Views.Converters.EnumEqualsConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.EnumEqualsConverter() -> void
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.InverseBooleanToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.AnnotationColorParameterConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.Convert(object?[]! values, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.ConvertBack(object? value, System.Type![]! targetTypes, object? parameter, System.Globalization.CultureInfo! culture) -> object?[]!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NullOrEmptyToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList
LM.App.Wpf.Views.Pdf.PdfAnnotationList.PdfAnnotationList() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow
LM.App.Wpf.Views.PdfViewerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow.PdfViewerWindow() -> void
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.PdfViewerHostObject(LM.App.Wpf.Views.PdfViewer! owner) -> void
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogCloseRequestedEventArgs(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogResult.get -> bool?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.CloseRequested -> System.EventHandler<LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs!>?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.DialogViewModelBase() -> void
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.RequestClose(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.IDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.WpfDialogService(System.IServiceProvider! services) -> void
LM.App.Wpf.Common.ILibraryPresetPrompt
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Common.IClipboardService
LM.App.Wpf.Common.IClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.ClipboardService
LM.App.Wpf.Common.ClipboardService.ClipboardService() -> void
LM.App.Wpf.Common.ClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.IFileExplorerService
LM.App.Wpf.Common.IFileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.FileExplorerService
LM.App.Wpf.Common.FileExplorerService.FileExplorerService() -> void
LM.App.Wpf.Common.FileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.ISearchSavePrompt
LM.App.Wpf.Common.ISearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Common.SearchSavePromptContext
LM.App.Wpf.Common.SearchSavePromptContext.Database.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.From.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.Query.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.SearchSavePromptContext(string! Query, LM.Core.Models.SearchDatabase Database, System.DateTime? From, System.DateTime? To, string! DefaultName, string! DefaultNotes, System.Collections.Generic.IReadOnlyList<string!>! DefaultTags) -> void
LM.App.Wpf.Common.SearchSavePromptContext.Database.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.SearchSavePromptContext.From.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.Query.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.To.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.To.init -> void
LM.App.Wpf.Common.SearchSavePromptResult
LM.App.Wpf.Common.SearchSavePromptResult.Name.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Notes.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Tags.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.SearchSavePromptResult(string! Name, string! Notes, string! Tags) -> void
LM.App.Wpf.Common.SearchSavePromptResult.Name.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Notes.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Tags.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSaveResult
LM.App.Wpf.Common.LibraryPresetSaveResult.LibraryPresetSaveResult(string! Name) -> void
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.get -> bool
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.LibraryPresetSelectionContext(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! Presets, bool AllowLoad, string! Title) -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.LibraryPresetSelectionResult(string? SelectedPresetId, System.Collections.Generic.IReadOnlyList<string!>! DeletedPresetIds) -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.get -> string?
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.init -> void
LM.App.Wpf.Common.LibraryPresetSummary
LM.App.Wpf.Common.LibraryPresetSummary.Id.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Id.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.LibraryPresetSummary(string! Id, string! Name, System.DateTime SavedUtc) -> void
LM.App.Wpf.Common.LibraryPresetSummary.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.get -> System.DateTime
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.init -> void
LM.App.Wpf.Common.RelayCommand
LM.App.Wpf.Common.RelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.RelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.RelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.RelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.RelayCommand.RelayCommand(System.Action<object?>! exec, System.Func<object?, bool>? can = null) -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.get -> bool
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.init -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.get -> string?
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.init -> void
LM.App.Wpf.Common.Dialogs.FolderPickerOptions
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.get -> string?
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.init -> void
LM.App.Wpf.Common.Dialogs.IDialogService
LM.App.Wpf.Common.Dialogs.IDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.StringJoinConverter
LM.App.Wpf.Common.StringJoinConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.StringJoinConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.AttachmentGlyphToIconConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.AttachmentGlyphToDescriptionConverter() -> void
LM.App.Wpf.Common.ViewModelBase
LM.App.Wpf.Common.ViewModelBase.ViewModelBase() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Id.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.get -> int
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PdfAnnotation(string! id, string! title) -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.get -> System.Windows.Media.Imaging.BitmapImage?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.Annotations.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Pdf.PdfAnnotation!>!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.ChangeAnnotationColorCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.CopyAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DocumentSource.get -> System.Uri?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.HandleAnnotationSelectionAsync(LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.LoadPdfCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfHash.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfViewerViewModel(LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.App.Wpf.Services.IUserContext! userContext, LM.Core.Abstractions.IPdfAnnotationPreviewStorage! previewStorage, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.Common.IClipboardService! clipboard) -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.RecordAnnotationChangeCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.WebViewBridge.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DeleteAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.Library.LibraryFilterPreset
LM.App.Wpf.Library.LibraryFilterPreset.LibraryFilterPreset() -> void
LM.App.Wpf.Library.LibraryFilterPreset.Id.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Id.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.Name.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Name.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.get -> System.DateTime
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.get -> int
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.State.get -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.Library.LibraryFilterPreset.State.set -> void
LM.App.Wpf.Library.LibraryFilterPresetStore
LM.App.Wpf.Library.LibraryFilterPresetStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.MovePresetAsync(string! presetId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.LibraryFilterPresetStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.ListPresetsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.LibraryFilterPreset!>!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, string? targetFolderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetByIdAsync(string! presetId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
const LM.App.Wpf.Library.Collections.LibraryCollectionFolder.RootId = "collections-root" -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionEntry!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile
LM.App.Wpf.Library.Collections.LibraryCollectionFile.LibraryCollectionFile() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.get -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder?
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.get -> int
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.EnumerateDescendants() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionEntry!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.LibraryCollectionFolder() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.LibraryCollectionMetadata() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore
LM.App.Wpf.Library.Collections.LibraryCollectionStore.AddEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.CreateFolderAsync(string? parentFolderId, string! name, string! createdBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.DeleteFolderAsync(string! folderId, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.LibraryCollectionStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RemoveEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RenameFolderAsync(string! folderId, string! newName, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryPresetFolder
LM.App.Wpf.Library.LibraryPresetFolder.Clone() -> LM.App.Wpf.Library.LibraryPresetFolder!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Id.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Id.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.LibraryPresetFolder() -> void
LM.App.Wpf.Library.LibraryPresetFolder.Name.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Name.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Presets.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryFilterPreset!>!
LM.App.Wpf.Library.LibraryPresetFolder.Presets.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.get -> int
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.set -> void
LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem
LM.App.Wpf.Library.LibraryPresetTreeItem.Folder.get -> LM.App.Wpf.Library.LibraryPresetFolder?
LM.App.Wpf.Library.LibraryPresetTreeItem.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem(LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder, LM.App.Wpf.Library.LibraryPresetFolder? folder, LM.App.Wpf.Library.LibraryFilterPreset? preset) -> void
LM.App.Wpf.Library.LibraryPresetTreeItem.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset?
LM.App.Wpf.Library.LibraryPresetTreeItem.SortOrder.get -> int
LM.App.Wpf.Library.ILibraryEntryEditor
LM.App.Wpf.Library.ILibraryEntryEditor.EditEntryAsync(LM.Core.Models.Entry! entry) -> System.Threading.Tasks.Task<System.Boolean>!
LM.App.Wpf.Library.LibraryFilterState
LM.App.Wpf.Library.LibraryFilterState.LibraryFilterState() -> void
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.get -> bool
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.set -> void
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateFrom.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateFrom.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateTo.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateTo.set -> void
LM.App.Wpf.Library.LibraryFilterState.SortKey.get -> string?
LM.App.Wpf.Library.LibraryFilterState.SortKey.set -> void
LM.App.Wpf.Library.LibraryFilterState.Tags.set -> void
LM.App.Wpf.ViewModels.AddPipeline
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddViewModel
LM.App.Wpf.ViewModels.AddViewModel.AddFilesCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.ViewModels.WatchedFolderScanner? scanner = null, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore? watchedFolderSettings = null, LM.App.Wpf.ViewModels.StagingListViewModel? stagingList = null, LM.App.Wpf.ViewModels.WatchedFoldersViewModel? watchedFolders = null, LM.App.Wpf.Common.Dialogs.IDialogService? dialogService = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.BulkAddFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ClearCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.CommitSelectedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.AddViewModel.Current.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.AddViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.AddViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.AddViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.AddViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.AddViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.AddViewModel.ReviewStagedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Staging.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.AddViewModel.StagingListViewModel.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFolders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFoldersViewModel.get -> LM.App.Wpf.ViewModels.WatchedFoldersViewModel!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.LibraryPresetPickerDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Presets.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.SelectedPresetId.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.EntryId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookAbsolutePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookRelativePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.DisplayLabel.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.ExecutedBy.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.Owner.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.TotalHits.get -> int
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.ConfirmCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.Entries.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.LitSearchRunPickerViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.LibraryPresetSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.set -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Initialize(LM.App.Wpf.Common.SearchSavePromptContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultNotes.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultTags.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.SearchSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingEditorViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingList.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.SelectedWorkspacePath.get -> string?
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.get -> bool
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.WorkspaceChooserViewModel(LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.CanAcceptFileDrop(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleFileDropAsync(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibrarySearchResult
LM.App.Wpf.ViewModels.LibrarySearchResult.Entry.get -> LM.Core.Models.Entry!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasAttachments.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasDoi.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasIdentifiers.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasInternalId.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasLinks.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNct.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPmid.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasRelations.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasSource.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasUserNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.Highlight.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.HighlightDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.IsFullText.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.LibrarySearchResult(LM.Core.Models.Entry! entry, double? score, string? highlight) -> void
LM.App.Wpf.ViewModels.LibrarySearchResult.Score.get -> double?
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentGlyphKind.get -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.TitleSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.YearPresenceSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearDescendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearAscendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SourceSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TypeSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedOnSortKey.get -> System.DateTime
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedBySortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.InternalIdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.DoiSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.PmidSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.NctSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AuthorsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TagsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IsInternalSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SnippetSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreSortKey.get -> double
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.None = 0 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Pdf = 1 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Document = 2 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Presentation = 3 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Generic = 4 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.Library.LibraryLinkItem
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.LibraryLinkItem(string! DisplayText, string! Target, LM.App.Wpf.ViewModels.Library.LinkItemKind Kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.get -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.init -> void
LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Url = 0 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.File = 1 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Folder = 2 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.RunAndBasics = 0 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Metadata = 1 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Workflow = 2 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Summary = 3 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.ProjectEditorStepDescriptor(LM.App.Wpf.ViewModels.Review.ProjectEditorStep Step, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.ReviewTemplateOption(LM.Review.Core.Models.ReviewTemplateKind Kind, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectEditorViewModel() -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.AddStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntryCount.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntrySummary.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ErrorMessage.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.HookRelativePath.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Initialize(LM.App.Wpf.Services.Review.Design.ProjectBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchEntryId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchRunId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageDownCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageUpCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.RemoveStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Result.get -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SaveCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.get -> LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.StageTypes.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStageType>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Stages.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Steps.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.TemplateOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStep.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepDescriptor.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepIndex.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsSummaryStep.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.get -> LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateKind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.NextCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.BackCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ChangeRunCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ConfigureRunReloadHandler(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.App.Wpf.Services.Review.Design.ProjectBlueprint?>!>! handler) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.StageDisplayOptionViewModel(LM.Review.Core.Models.StageContentArea area, bool isSelected) -> void
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Area.get -> LM.Review.Core.Models.StageContentArea
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Description.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.get -> bool
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageBlueprintViewModel(LM.App.Wpf.Services.Review.Design.StageBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageId.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TotalReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.DisplayOptions.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel!>!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TryBuild(out LM.App.Wpf.Services.Review.Design.StageBlueprint! stage, out string? errorMessage) -> bool
LM.App.Wpf.ViewModels.StagingListViewModel
LM.App.Wpf.ViewModels.StagingListViewModel.AddStagedItemsAsync(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Clear() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.CommitSelectedAsync(System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.StagingListViewModel.Current.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.StagingListViewModel.HasItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.HasSelectedItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.StagingListViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.StagingListViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingListViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.StagingListViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.SetCommandGuard(System.Func<System.Func<System.Threading.Tasks.Task!>!, System.Threading.Tasks.Task!>! guard) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.UpdateParentBusy(bool isBusy) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.WatchedFoldersViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList, LM.App.Wpf.ViewModels.WatchedFolderScanner! scanner, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore! settingsStore, LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.WatchedFolder
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.get -> bool
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.LastScanDisplay.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.LastScanUtc.get -> System.DateTimeOffset?
LM.App.Wpf.ViewModels.WatchedFolder.LastScanWasUnchanged.get -> bool?
LM.App.Wpf.ViewModels.WatchedFolder.Path.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.Path.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFolder.ResetScanState() -> void
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusLabel.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusToolTip.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.WatchedFolder() -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(string! path) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig
LM.App.Wpf.ViewModels.WatchedFolderConfig.ApplyState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.ClearState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFolderConfig.CreateSnapshot() -> LM.Core.Models.WatchedFolderSettings!
LM.App.Wpf.ViewModels.WatchedFolderConfig.Load(LM.Core.Models.WatchedFolderSettings! settings) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.StoreState(LM.App.Wpf.ViewModels.WatchedFolder! folder, LM.Core.Models.WatchedFolderState! state) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.WatchedFolderConfig() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Folder.get -> LM.App.Wpf.ViewModels.WatchedFolder!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Items.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.WatchedFolderScanEventArgs(LM.App.Wpf.ViewModels.WatchedFolder! folder, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner
LM.App.Wpf.ViewModels.WatchedFolderScanner.Attach(LM.App.Wpf.ViewModels.WatchedFolderConfig! config) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.ItemsStaged -> System.EventHandler<LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs!>?
LM.App.Wpf.ViewModels.WatchedFolderScanner.ScanAsync(LM.App.Wpf.ViewModels.WatchedFolder? folder, System.Threading.CancellationToken ct, bool force = false) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFolderScanner.WatchedFolderScanner(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.IAddPipeline
LM.App.Wpf.ViewModels.IAddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.IAddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.Library.ILibraryDocumentService
LM.App.Wpf.Library.ILibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.ILibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.LibraryDocumentService
LM.App.Wpf.Library.LibraryDocumentService.LibraryDocumentService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.IAttachmentMetadataPrompt
LM.App.Wpf.Library.IAttachmentMetadataPrompt.RequestMetadataAsync(LM.App.Wpf.Library.AttachmentMetadataPromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.AttachmentMetadataPromptResult?>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.get -> string!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.AttachmentMetadataPromptContext(string! EntryTitle, System.Collections.Generic.IReadOnlyList<string!>! FilePaths) -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>!
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult.AttachmentMetadataPromptResult(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>! Attachments) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection
LM.App.Wpf.Library.AttachmentMetadataSelection.AttachmentMetadataSelection(string! SourcePath, string! Title, LM.Core.Models.AttachmentKind Kind, System.Collections.Generic.IReadOnlyList<string!>! Tags) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.get -> LM.Core.Models.AttachmentKind
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.init -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LibraryFiltersViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! presetStore, LM.App.Wpf.Common.ILibraryPresetPrompt! presetPrompt, LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.SavedSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.get -> string
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedSearchPresetViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, LM.App.Wpf.Library.LibraryFilterPreset! preset, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Summary.get -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.ToSummary() -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.SavedSearchTreeChangedEventArgs(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! presets) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.SavedSearchTreeViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.TreeChanged -> System.EventHandler<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs!>?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ClearCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyPresetAsync(LM.App.Wpf.Common.LibraryPresetSummary! summary, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyState(LM.App.Wpf.Library.LibraryFilterState! state) -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.CaptureState() -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTooltip.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTokens.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.BuildFullTextQuery(string! normalizedQuery) -> LM.Core.Models.Search.FullTextSearchQuery!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.HasSavedPresets.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.GetNormalizedFullTextQuery() -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.NavigationRoots.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RefreshNavigationAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedPresets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedSearches.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleLeftPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleRightPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SortOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RemoveTagCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand<string?>!
LM.App.Wpf.ViewModels.Library.LibrarySortOption
LM.App.Wpf.ViewModels.Library.LibrarySortOption.LibrarySortOption(string! key, string! displayName) -> void
LM.App.Wpf.ViewModels.Library.LibrarySortOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOptions
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.Category = 0 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.SavedSearch = 1 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchEntry = 2 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchRun = 3 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.LibraryNavigationNodeViewModel(string! name, LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.HasChildren.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Kind.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.get -> object?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.init -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.LibraryColumnOption(string! key, string! displayName, bool isVisible) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LibraryColumnVisibility() -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LoadFrom(System.Collections.Generic.IReadOnlyDictionary<string!, bool>! source) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.Snapshot() -> System.Collections.Generic.IReadOnlyDictionary<string!, bool>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LibraryResultsViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.App.Wpf.Library.ILibraryEntryEditor! entryEditor, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.Library.IAttachmentMetadataPrompt! attachmentPrompt, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.Core.Abstractions.IHasher! hasher, LM.App.Wpf.Services.Pdf.IPdfViewerLauncher! pdfViewerLauncher) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadFullTextResultsAsync(System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.FullTextSearchHit!>! hits, System.Func<LM.Core.Models.Entry!, bool>? entryFilter = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadMetadataResults(System.Collections.Generic.IEnumerable<LM.Core.Models.Entry!>! entries) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResetSortForSearch(LM.App.Wpf.ViewModels.Library.LibrarySortOption! defaultOption) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridLoaded(System.Windows.RoutedEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridSorting(System.Windows.Controls.DataGridSortingEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.MarkAsMetadataResults() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResultsAreFullText.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.get -> LM.App.Wpf.ViewModels.LibrarySearchResult?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LinkItems.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryLinkItem!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.EditEntryAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelection.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedItems.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectionChanged -> System.EventHandler?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelectedAbstract.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ToggleBlacklistAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.get -> int
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.LibraryCollectionFolderViewModel(LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! tree, string! id, string! name, LM.App.Wpf.Library.Collections.LibraryCollectionMetadata! metadata) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.LibraryCollectionsViewModel(LM.App.Wpf.Library.Collections.LibraryCollectionStore! store, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPrimaryAttachment.get -> bool
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.LibrarySearchQueryBox() -> void
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.get -> string!
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel
LM.App.Wpf.ViewModels.LibraryViewModel.Filters.get -> LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LibraryViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFullTextSearchService! fullTextSearch, LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel! filters, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.Configuration.IUserPreferencesStore! preferencesStore, LM.App.Wpf.Common.IClipboardService! clipboard, LM.App.Wpf.Common.IFileExplorerService! fileExplorer, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! litSearchOrganizer, LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! collections, LM.App.Wpf.Library.Collections.LibraryCollectionStore! collectionStore) -> void
LM.App.Wpf.ViewModels.LibraryViewModel.Results.get -> LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.Collections.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibraryColumnOption!>!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnVisibility.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility!
LM.App.Wpf.ViewModels.SearchItemViewModel
LM.App.Wpf.ViewModels.SearchItemViewModel.Header.get -> string!
LM.App.Wpf.ViewModels.SearchItemViewModel.SearchItemViewModel(string! header, LM.App.Wpf.ViewModels.LibraryViewModel! vm) -> void
LM.App.Wpf.ViewModels.SearchItemViewModel.Vm.get -> LM.App.Wpf.ViewModels.LibraryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel
LM.App.Wpf.ViewModels.SearchViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.SearchViewModel.ExportSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.From.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.LoadSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRuns.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.PreviousSearchSummary!>!
LM.App.Wpf.ViewModels.SearchViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRunsCount.get -> int
LM.App.Wpf.ViewModels.SearchViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.SearchViewModel.Query.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.get -> LM.Core.Models.SearchHit?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RunSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SaveSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleLeftPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleRightPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SearchViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IWorkSpaceService! ws, LM.App.Wpf.Common.ISearchSavePrompt! savePrompt, LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel! providers, LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel! history, LM.Infrastructure.Search.PubMedSearchProvider! pubMedProvider, LM.Core.Abstractions.Configuration.IUserPreferencesStore? preferencesStore = null) -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.get -> LM.App.Wpf.ViewModels.PreviousSearchSummary?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.StartPreviousRunCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ShowRunDetailsCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleFavoriteCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.To.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.History.get -> LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel.Providers.get -> LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecordExecutionAsync(LM.Core.Models.Search.SearchExecutionResult! result, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.SearchHistoryViewModel(LM.Core.Abstractions.Configuration.ISearchHistoryStore! store) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.ExecuteSearchAsync() -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.RunSearchCommand.get -> LM.App.Wpf.Common.AsyncRelayCommand!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchExecuted -> System.EventHandler<LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs!>?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchProvidersViewModel(LM.Core.Abstractions.Search.ISearchExecutionService! executionService) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.set -> void
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.Result.get -> LM.Core.Models.Search.SearchExecutionResult!
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.SearchExecutedEventArgs(LM.Core.Models.Search.SearchExecutionResult! result) -> void
LM.App.Wpf.ViewModels.PreviousSearchSummary
LM.App.Wpf.ViewModels.PreviousSearchSummary.DisplayName.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.EntryId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.FavoriteRunId.get -> string?
LM.App.Wpf.ViewModels.PreviousSearchSummary.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastRunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.Provider.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.Query.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunCount.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TotalHits.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TagsDisplay.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption
LM.App.Wpf.ViewModels.SearchDatabaseOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption.SearchDatabaseOption(LM.Core.Models.SearchDatabase value, string! displayName) -> void
LM.App.Wpf.ViewModels.SearchDatabaseOption.Value.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.StagingItem
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.get -> LM.HubSpoke.Models.ArticleHook?
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.DisplayName.get -> string?
LM.App.Wpf.ViewModels.StagingItem.DisplayName.set -> void
LM.App.Wpf.ViewModels.StagingItem.Doi.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Doi.set -> void
LM.App.Wpf.ViewModels.StagingItem.FilePath.get -> string!
LM.App.Wpf.ViewModels.StagingItem.FilePath.set -> void
LM.App.Wpf.ViewModels.StagingItem.Internal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Internal.set -> void
LM.App.Wpf.ViewModels.StagingItem.InternalId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.InternalId.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsDuplicate.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsNearMatch.get -> bool
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Notes.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Notes.set -> void
LM.App.Wpf.ViewModels.StagingItem.OriginalFileName.get -> string!
LM.App.Wpf.ViewModels.StagingItem.Pmid.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Pmid.set -> void
LM.App.Wpf.ViewModels.StagingItem.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingItem.Selected.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Selected.set -> void
LM.App.Wpf.ViewModels.StagingItem.Similarity.get -> double
LM.App.Wpf.ViewModels.StagingItem.Similarity.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Source.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Source.set -> void
LM.App.Wpf.ViewModels.StagingItem.StagingItem() -> void
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.get -> string!
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.set -> void
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.Title.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Title.set -> void
LM.App.Wpf.ViewModels.StagingItem.Type.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingItem.Type.set -> void
LM.App.Wpf.ViewModels.StagingItem.Year.get -> int?
LM.App.Wpf.ViewModels.StagingItem.Year.set -> void
LM.App.Wpf.Views.AddView
LM.App.Wpf.Views.Behaviors.FileDropRequest
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.get -> System.Windows.DragEventArgs!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.get -> object?
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.FileDropRequest(System.Collections.Generic.IReadOnlyList<string!>! Paths, object? DropTarget, System.Windows.DragEventArgs! Args) -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.init -> void
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior.SavedSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.AddView.AddView() -> void
LM.App.Wpf.Views.AddView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog
LM.App.Wpf.Views.LibraryPresetPickerDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.LibraryPresetPickerDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel!
LM.App.Wpf.Views.LibraryPresetPrompt.LibraryPresetPrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.InitializeComponent() -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.AttachmentMetadataDialog(LM.App.Wpf.ViewModels.Library.AttachmentMetadataDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog
LM.App.Wpf.Views.LibraryPresetSaveDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.LibraryPresetSaveDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel!
LM.App.Wpf.Views.LibraryView
LM.App.Wpf.Views.LibraryView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryView.LibraryView() -> void
LM.App.Wpf.Views.PdfViewer
LM.App.Wpf.Views.PdfViewer.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewer.PdfViewer() -> void
LM.App.Wpf.Views.Library.TagTokenSelector
LM.App.Wpf.Views.Library.TagTokenSelector.InitializeComponent() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.FilteredSuggestions.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>?
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.set -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagTokenSelector() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.get -> System.Collections.Generic.IEnumerable<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.set -> void
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTagsProperty
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabularyProperty
LM.App.Wpf.Views.LibraryPresetPrompt
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Views.Review.Controls.DecisionBadge
LM.App.Wpf.Views.Review.Controls.DecisionBadge.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.DecisionBadge() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.get -> LM.Review.Core.Models.ScreeningStatus
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.set -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.ExtractionFieldEditor() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.ScreeningQueueControl() -> void
LM.App.Wpf.Views.Review.ReviewView
LM.App.Wpf.Views.Review.ReviewView.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ReviewView.ReviewView() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.LitSearchRunPickerWindow(LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel!
LM.App.Wpf.Views.Review.ProjectEditorWindow
LM.App.Wpf.Views.Review.ProjectEditorWindow.Attach(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.ProjectEditorWindow() -> void
LM.App.Wpf.Views.SearchSavePrompt
LM.App.Wpf.Views.SearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Views.SearchSavePrompt.SearchSavePrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.DataGridColumnVisibilityBehavior() -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.set -> void
LM.App.Wpf.Views.SearchView
LM.App.Wpf.Views.SearchView.InitializeComponent() -> void
LM.App.Wpf.Views.SearchView.SearchView() -> void
LM.App.Wpf.Views.ShellWindow
LM.App.Wpf.Views.ShellWindow.InitializeComponent() -> void
LM.App.Wpf.Views.ShellWindow.LoadWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.NewWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.ShellWindow() -> void
LM.App.Wpf.Views.StagingEditorWindow
LM.App.Wpf.Views.StagingEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.StagingEditorWindow.StagingEditorWindow(LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel! viewModel) -> void
override LM.App.Wpf.ViewModels.Library.LibrarySortOption.ToString() -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Name.get -> string!
override LM.App.Wpf.Views.Library.AttachmentMetadataDialog.OnClosed(System.EventArgs! e) -> void
LM.App.Wpf.Views.WorkspaceChooser
LM.App.Wpf.Views.WorkspaceChooser.InitializeComponent() -> void
LM.App.Wpf.Views.WorkspaceChooser.SelectedWorkspacePath.get -> string?
LM.App.Wpf.Views.WorkspaceChooser.WorkspaceChooser(LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel! viewModel) -> void
LM.App.Wpf.Views.WorkspaceChooser.Configure(System.Action<LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel!>! configure) -> void
override LM.App.Wpf.App.OnExit(System.Windows.ExitEventArgs! e) -> void
override LM.App.Wpf.App.OnStartup(System.Windows.StartupEventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetPickerDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetSaveDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.StagingEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.WorkspaceChooser.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.ProjectEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.OnClosed(System.EventArgs! e) -> void
static LM.App.Wpf.App.Main() -> void
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.All.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.NewestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.OldestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleAscending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleDescending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Clone() -> LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.LitSearchOrganizerStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveEntryAsync(string! entryId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.SyncEntriesAsync(System.Collections.Generic.IEnumerable<string!>! entryIds, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema.CurrentVersion -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.LitSearchEntryViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! title, string? query) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Query.get -> string?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.CanDelete.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsRoot.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.LitSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! name, bool isRoot) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.LitSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.LitSearchRunViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! runId, string! label, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel! parent) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.LitSearchTreeViewModel(LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt, LM.Core.Abstractions.IEntryStore! entryStore, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
---------- LM.App.Wpf ----------
#nullable enable
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.ColumnKeyProperty -> System.Windows.DependencyProperty!
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.GetColumnKey(System.Windows.DependencyObject! element) -> string?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.SetColumnKey(System.Windows.DependencyObject! element, string? value) -> void
#nullable enable
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Id.get -> string!
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.IsDraggable.get -> bool
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Name.get -> string!
const LM.App.Wpf.Library.LibraryPresetFolder.RootId = "root" -> string!
const LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.RootId = "root" -> string!
const LM.App.Wpf.ViewModels.StagingItem.DuplicateThreshold = 0.999 -> double
const LM.App.Wpf.ViewModels.StagingItem.NearThreshold = 0.75 -> double
LM.App.Wpf.App
LM.App.Wpf.App.App() -> void
LM.App.Wpf.App.InitializeComponent() -> void
LM.App.Wpf.Common.AsyncRelayCommand
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<object?, System.Threading.Tasks.Task!>! execute, System.Func<object?, bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<System.Threading.Tasks.Task!>! execute, System.Func<bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.AsyncRelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.AsyncRelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.AsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.IAsyncRelayCommand
LM.App.Wpf.Common.IAsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter
LM.App.Wpf.Common.BooleanToOpacityConverter.BooleanToOpacityConverter() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.set -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.set -> void
LM.App.Wpf.Common.Converters.ProjectEditorConverters
LM.App.Wpf.Common.Converters.ProjectEditorConverters.StageSelectionEquality.get -> System.Windows.Data.IMultiValueConverter!
LM.App.Wpf.Common.LibraryPresetSaveContext.LibraryPresetSaveContext(string! DefaultName, System.Collections.Generic.IReadOnlyCollection<string!>! ExistingNames, string! Title = "Save Library Preset", string! Prompt = "Name this filter preset.") -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.LibraryCollectionEntry() -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.DeletePresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenamePresetAsync(string! presetId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
LM.App.Wpf.Library.LibraryFilterState.Tags.get -> string![]!
LM.App.Wpf.Library.LibraryPresetFolder.EnumerateChildren() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.LibraryPresetTreeItem>!
LM.App.Wpf.Library.LibraryPresetNodeKind.Folder = 0 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetNodeKind.Preset = 1 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.LitSearchOrganizerEntry() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.LitSearchOrganizerFolder() -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectBlueprint(string! projectId, string! name, System.DateTimeOffset createdAtUtc, string! createdBy, string! litSearchEntryId, string! litSearchRunId, System.Collections.Generic.IReadOnlyList<string!>! checkedEntryIds, string? hookRelativePath, LM.Review.Core.Models.ReviewTemplateKind template, string! metadataNotes, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>! stages) -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CheckedEntryIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedAtUtc.get -> System.DateTimeOffset
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedBy.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.HookRelativePath.get -> string?
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchEntryId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchRunId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Template.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.MetadataNotes.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Stages.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.With(string? name = null, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>? stages = null, LM.Review.Core.Models.ReviewTemplateKind? template = null, string? metadataNotes = null, string? litSearchEntryId = null, string? litSearchRunId = null, System.Collections.Generic.IReadOnlyList<string!>? checkedEntryIds = null) -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint!
LM.App.Wpf.Services.Review.Design.StageBlueprint
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageBlueprint(string! stageId, string! name, LM.Review.Core.Models.ReviewStageType stageType, int primaryReviewers, int secondaryReviewers, bool requiresConsensus, int minimumAgreements, bool escalateOnDisagreement, LM.Review.Core.Models.StageDisplayProfile! displayProfile) -> void
LM.App.Wpf.Services.Review.Design.StageBlueprint.EscalateOnDisagreement.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.MinimumAgreements.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.PrimaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.RequiresConsensus.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.SecondaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageId.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.Services.Review.Design.StageBlueprint.DisplayProfile.get -> LM.Review.Core.Models.StageDisplayProfile!
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher.Show(string! entryId, string! pdfAbsolutePath, string! pdfHash) -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.AddSelectionToFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.MoveFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RemoveSelectionFromFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ItemsView.get -> System.ComponentModel.ICollectionView!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.LitSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.SavedSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SavedSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeletePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.LoadPresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenamePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.LibraryViewModel.AllTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.LibraryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.LitSearchOrganizer.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LoadCollectionEntriesAsync(string! collectionId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.OpenPdfAnnotationsCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.LibraryViewModel.RefreshTagsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.ToggleBlacklistCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationTypeDisplay.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Dispose() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.HighlightBrush.get -> System.Windows.Media.Brush!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.PdfAnnotationColorCommandParameter() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior.CollectionTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior.LitSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter
LM.App.Wpf.Views.Converters.EnumEqualsConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.EnumEqualsConverter() -> void
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.InverseBooleanToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.AnnotationColorParameterConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.Convert(object?[]! values, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.ConvertBack(object? value, System.Type![]! targetTypes, object? parameter, System.Globalization.CultureInfo! culture) -> object?[]!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NullOrEmptyToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList
LM.App.Wpf.Views.Pdf.PdfAnnotationList.PdfAnnotationList() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow
LM.App.Wpf.Views.PdfViewerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow.PdfViewerWindow() -> void
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.PdfViewerHostObject(LM.App.Wpf.Views.PdfViewer! owner) -> void
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogCloseRequestedEventArgs(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogResult.get -> bool?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.CloseRequested -> System.EventHandler<LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs!>?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.DialogViewModelBase() -> void
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.RequestClose(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.IDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.WpfDialogService(System.IServiceProvider! services) -> void
LM.App.Wpf.Common.ILibraryPresetPrompt
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Common.IClipboardService
LM.App.Wpf.Common.IClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.ClipboardService
LM.App.Wpf.Common.ClipboardService.ClipboardService() -> void
LM.App.Wpf.Common.ClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.IFileExplorerService
LM.App.Wpf.Common.IFileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.FileExplorerService
LM.App.Wpf.Common.FileExplorerService.FileExplorerService() -> void
LM.App.Wpf.Common.FileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.ISearchSavePrompt
LM.App.Wpf.Common.ISearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Common.SearchSavePromptContext
LM.App.Wpf.Common.SearchSavePromptContext.Database.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.From.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.Query.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.SearchSavePromptContext(string! Query, LM.Core.Models.SearchDatabase Database, System.DateTime? From, System.DateTime? To, string! DefaultName, string! DefaultNotes, System.Collections.Generic.IReadOnlyList<string!>! DefaultTags) -> void
LM.App.Wpf.Common.SearchSavePromptContext.Database.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.SearchSavePromptContext.From.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.Query.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.To.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.To.init -> void
LM.App.Wpf.Common.SearchSavePromptResult
LM.App.Wpf.Common.SearchSavePromptResult.Name.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Notes.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Tags.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.SearchSavePromptResult(string! Name, string! Notes, string! Tags) -> void
LM.App.Wpf.Common.SearchSavePromptResult.Name.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Notes.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Tags.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSaveResult
LM.App.Wpf.Common.LibraryPresetSaveResult.LibraryPresetSaveResult(string! Name) -> void
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.get -> bool
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.LibraryPresetSelectionContext(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! Presets, bool AllowLoad, string! Title) -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.LibraryPresetSelectionResult(string? SelectedPresetId, System.Collections.Generic.IReadOnlyList<string!>! DeletedPresetIds) -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.get -> string?
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.init -> void
LM.App.Wpf.Common.LibraryPresetSummary
LM.App.Wpf.Common.LibraryPresetSummary.Id.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Id.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.LibraryPresetSummary(string! Id, string! Name, System.DateTime SavedUtc) -> void
LM.App.Wpf.Common.LibraryPresetSummary.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.get -> System.DateTime
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.init -> void
LM.App.Wpf.Common.RelayCommand
LM.App.Wpf.Common.RelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.RelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.RelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.RelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.RelayCommand.RelayCommand(System.Action<object?>! exec, System.Func<object?, bool>? can = null) -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.get -> bool
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.init -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.get -> string?
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.init -> void
LM.App.Wpf.Common.Dialogs.FolderPickerOptions
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.get -> string?
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.init -> void
LM.App.Wpf.Common.Dialogs.IDialogService
LM.App.Wpf.Common.Dialogs.IDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.StringJoinConverter
LM.App.Wpf.Common.StringJoinConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.StringJoinConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.AttachmentGlyphToIconConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.AttachmentGlyphToDescriptionConverter() -> void
LM.App.Wpf.Common.ViewModelBase
LM.App.Wpf.Common.ViewModelBase.ViewModelBase() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Id.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.get -> int
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PdfAnnotation(string! id, string! title) -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.get -> System.Windows.Media.Imaging.BitmapImage?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.Annotations.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Pdf.PdfAnnotation!>!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.ChangeAnnotationColorCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.CopyAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DocumentSource.get -> System.Uri?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.HandleAnnotationSelectionAsync(LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.LoadPdfCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfHash.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfViewerViewModel(LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.App.Wpf.Services.IUserContext! userContext, LM.Core.Abstractions.IPdfAnnotationPreviewStorage! previewStorage, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.Common.IClipboardService! clipboard) -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.RecordAnnotationChangeCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.WebViewBridge.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DeleteAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.Library.LibraryFilterPreset
LM.App.Wpf.Library.LibraryFilterPreset.LibraryFilterPreset() -> void
LM.App.Wpf.Library.LibraryFilterPreset.Id.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Id.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.Name.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Name.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.get -> System.DateTime
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.get -> int
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.State.get -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.Library.LibraryFilterPreset.State.set -> void
LM.App.Wpf.Library.LibraryFilterPresetStore
LM.App.Wpf.Library.LibraryFilterPresetStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.MovePresetAsync(string! presetId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.LibraryFilterPresetStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.ListPresetsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.LibraryFilterPreset!>!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, string? targetFolderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetByIdAsync(string! presetId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
const LM.App.Wpf.Library.Collections.LibraryCollectionFolder.RootId = "collections-root" -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionEntry!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile
LM.App.Wpf.Library.Collections.LibraryCollectionFile.LibraryCollectionFile() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.get -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder?
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.get -> int
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.EnumerateDescendants() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionEntry!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.LibraryCollectionFolder() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.LibraryCollectionMetadata() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore
LM.App.Wpf.Library.Collections.LibraryCollectionStore.AddEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.CreateFolderAsync(string? parentFolderId, string! name, string! createdBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.DeleteFolderAsync(string! folderId, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.LibraryCollectionStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RemoveEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RenameFolderAsync(string! folderId, string! newName, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryPresetFolder
LM.App.Wpf.Library.LibraryPresetFolder.Clone() -> LM.App.Wpf.Library.LibraryPresetFolder!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Id.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Id.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.LibraryPresetFolder() -> void
LM.App.Wpf.Library.LibraryPresetFolder.Name.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Name.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Presets.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryFilterPreset!>!
LM.App.Wpf.Library.LibraryPresetFolder.Presets.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.get -> int
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.set -> void
LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem
LM.App.Wpf.Library.LibraryPresetTreeItem.Folder.get -> LM.App.Wpf.Library.LibraryPresetFolder?
LM.App.Wpf.Library.LibraryPresetTreeItem.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem(LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder, LM.App.Wpf.Library.LibraryPresetFolder? folder, LM.App.Wpf.Library.LibraryFilterPreset? preset) -> void
LM.App.Wpf.Library.LibraryPresetTreeItem.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset?
LM.App.Wpf.Library.LibraryPresetTreeItem.SortOrder.get -> int
LM.App.Wpf.Library.ILibraryEntryEditor
LM.App.Wpf.Library.ILibraryEntryEditor.EditEntryAsync(LM.Core.Models.Entry! entry) -> System.Threading.Tasks.Task<System.Boolean>!
LM.App.Wpf.Library.LibraryFilterState
LM.App.Wpf.Library.LibraryFilterState.LibraryFilterState() -> void
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.get -> bool
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.set -> void
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateFrom.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateFrom.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateTo.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateTo.set -> void
LM.App.Wpf.Library.LibraryFilterState.SortKey.get -> string?
LM.App.Wpf.Library.LibraryFilterState.SortKey.set -> void
LM.App.Wpf.Library.LibraryFilterState.Tags.set -> void
LM.App.Wpf.ViewModels.AddPipeline
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddViewModel
LM.App.Wpf.ViewModels.AddViewModel.AddFilesCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.ViewModels.WatchedFolderScanner? scanner = null, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore? watchedFolderSettings = null, LM.App.Wpf.ViewModels.StagingListViewModel? stagingList = null, LM.App.Wpf.ViewModels.WatchedFoldersViewModel? watchedFolders = null, LM.App.Wpf.Common.Dialogs.IDialogService? dialogService = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.BulkAddFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ClearCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.CommitSelectedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.AddViewModel.Current.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.AddViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.AddViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.AddViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.AddViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.AddViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.AddViewModel.ReviewStagedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Staging.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.AddViewModel.StagingListViewModel.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFolders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFoldersViewModel.get -> LM.App.Wpf.ViewModels.WatchedFoldersViewModel!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.LibraryPresetPickerDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Presets.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.SelectedPresetId.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.EntryId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookAbsolutePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookRelativePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.DisplayLabel.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.ExecutedBy.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.Owner.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.TotalHits.get -> int
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.ConfirmCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.Entries.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.LitSearchRunPickerViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.LibraryPresetSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.set -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Initialize(LM.App.Wpf.Common.SearchSavePromptContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultNotes.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultTags.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.SearchSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingEditorViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingList.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.SelectedWorkspacePath.get -> string?
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.get -> bool
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.WorkspaceChooserViewModel(LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.CanAcceptFileDrop(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleFileDropAsync(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibrarySearchResult
LM.App.Wpf.ViewModels.LibrarySearchResult.Entry.get -> LM.Core.Models.Entry!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasAttachments.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasDoi.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasIdentifiers.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasInternalId.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasLinks.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNct.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPmid.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasRelations.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasSource.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasUserNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.Highlight.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.HighlightDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.IsFullText.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.LibrarySearchResult(LM.Core.Models.Entry! entry, double? score, string? highlight) -> void
LM.App.Wpf.ViewModels.LibrarySearchResult.Score.get -> double?
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentGlyphKind.get -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.TitleSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.YearPresenceSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearDescendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearAscendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SourceSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TypeSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedOnSortKey.get -> System.DateTime
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedBySortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.InternalIdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.DoiSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.PmidSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.NctSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AuthorsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TagsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IsInternalSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SnippetSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreSortKey.get -> double
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.None = 0 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Pdf = 1 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Document = 2 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Presentation = 3 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Generic = 4 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.Library.LibraryLinkItem
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.LibraryLinkItem(string! DisplayText, string! Target, LM.App.Wpf.ViewModels.Library.LinkItemKind Kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.get -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.init -> void
LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Url = 0 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.File = 1 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Folder = 2 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.RunAndBasics = 0 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Metadata = 1 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Workflow = 2 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Summary = 3 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.ProjectEditorStepDescriptor(LM.App.Wpf.ViewModels.Review.ProjectEditorStep Step, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.ReviewTemplateOption(LM.Review.Core.Models.ReviewTemplateKind Kind, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectEditorViewModel() -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.AddStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntryCount.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntrySummary.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ErrorMessage.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.HookRelativePath.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Initialize(LM.App.Wpf.Services.Review.Design.ProjectBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchEntryId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchRunId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageDownCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageUpCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.RemoveStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Result.get -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SaveCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.get -> LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.StageTypes.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStageType>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Stages.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Steps.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.TemplateOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStep.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepDescriptor.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepIndex.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsSummaryStep.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.get -> LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateKind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.NextCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.BackCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ChangeRunCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ConfigureRunReloadHandler(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.App.Wpf.Services.Review.Design.ProjectBlueprint?>!>! handler) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.StageDisplayOptionViewModel(LM.Review.Core.Models.StageContentArea area, bool isSelected) -> void
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Area.get -> LM.Review.Core.Models.StageContentArea
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Description.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.get -> bool
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageBlueprintViewModel(LM.App.Wpf.Services.Review.Design.StageBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageId.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TotalReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.DisplayOptions.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel!>!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TryBuild(out LM.App.Wpf.Services.Review.Design.StageBlueprint! stage, out string? errorMessage) -> bool
LM.App.Wpf.ViewModels.StagingListViewModel
LM.App.Wpf.ViewModels.StagingListViewModel.AddStagedItemsAsync(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Clear() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.CommitSelectedAsync(System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.StagingListViewModel.Current.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.StagingListViewModel.HasItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.HasSelectedItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.StagingListViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.StagingListViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingListViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.StagingListViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.SetCommandGuard(System.Func<System.Func<System.Threading.Tasks.Task!>!, System.Threading.Tasks.Task!>! guard) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.UpdateParentBusy(bool isBusy) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.WatchedFoldersViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList, LM.App.Wpf.ViewModels.WatchedFolderScanner! scanner, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore! settingsStore, LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.WatchedFolder
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.get -> bool
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.LastScanDisplay.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.LastScanUtc.get -> System.DateTimeOffset?
LM.App.Wpf.ViewModels.WatchedFolder.LastScanWasUnchanged.get -> bool?
LM.App.Wpf.ViewModels.WatchedFolder.Path.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.Path.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFolder.ResetScanState() -> void
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusLabel.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusToolTip.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.WatchedFolder() -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(string! path) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig
LM.App.Wpf.ViewModels.WatchedFolderConfig.ApplyState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.ClearState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFolderConfig.CreateSnapshot() -> LM.Core.Models.WatchedFolderSettings!
LM.App.Wpf.ViewModels.WatchedFolderConfig.Load(LM.Core.Models.WatchedFolderSettings! settings) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.StoreState(LM.App.Wpf.ViewModels.WatchedFolder! folder, LM.Core.Models.WatchedFolderState! state) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.WatchedFolderConfig() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Folder.get -> LM.App.Wpf.ViewModels.WatchedFolder!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Items.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.WatchedFolderScanEventArgs(LM.App.Wpf.ViewModels.WatchedFolder! folder, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner
LM.App.Wpf.ViewModels.WatchedFolderScanner.Attach(LM.App.Wpf.ViewModels.WatchedFolderConfig! config) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.ItemsStaged -> System.EventHandler<LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs!>?
LM.App.Wpf.ViewModels.WatchedFolderScanner.ScanAsync(LM.App.Wpf.ViewModels.WatchedFolder? folder, System.Threading.CancellationToken ct, bool force = false) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFolderScanner.WatchedFolderScanner(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.IAddPipeline
LM.App.Wpf.ViewModels.IAddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.IAddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.Library.ILibraryDocumentService
LM.App.Wpf.Library.ILibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.ILibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.LibraryDocumentService
LM.App.Wpf.Library.LibraryDocumentService.LibraryDocumentService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.IAttachmentMetadataPrompt
LM.App.Wpf.Library.IAttachmentMetadataPrompt.RequestMetadataAsync(LM.App.Wpf.Library.AttachmentMetadataPromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.AttachmentMetadataPromptResult?>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.get -> string!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.AttachmentMetadataPromptContext(string! EntryTitle, System.Collections.Generic.IReadOnlyList<string!>! FilePaths) -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>!
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult.AttachmentMetadataPromptResult(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>! Attachments) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection
LM.App.Wpf.Library.AttachmentMetadataSelection.AttachmentMetadataSelection(string! SourcePath, string! Title, LM.Core.Models.AttachmentKind Kind, System.Collections.Generic.IReadOnlyList<string!>! Tags) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.get -> LM.Core.Models.AttachmentKind
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.init -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LibraryFiltersViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! presetStore, LM.App.Wpf.Common.ILibraryPresetPrompt! presetPrompt, LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.SavedSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.get -> string
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedSearchPresetViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, LM.App.Wpf.Library.LibraryFilterPreset! preset, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Summary.get -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.ToSummary() -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.SavedSearchTreeChangedEventArgs(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! presets) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.SavedSearchTreeViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.TreeChanged -> System.EventHandler<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs!>?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ClearCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyPresetAsync(LM.App.Wpf.Common.LibraryPresetSummary! summary, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyState(LM.App.Wpf.Library.LibraryFilterState! state) -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.CaptureState() -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTooltip.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTokens.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.BuildFullTextQuery(string! normalizedQuery) -> LM.Core.Models.Search.FullTextSearchQuery!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.HasSavedPresets.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.GetNormalizedFullTextQuery() -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.NavigationRoots.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RefreshNavigationAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedPresets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedSearches.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleLeftPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleRightPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SortOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RemoveTagCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand<string?>!
LM.App.Wpf.ViewModels.Library.LibrarySortOption
LM.App.Wpf.ViewModels.Library.LibrarySortOption.LibrarySortOption(string! key, string! displayName) -> void
LM.App.Wpf.ViewModels.Library.LibrarySortOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOptions
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.Category = 0 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.SavedSearch = 1 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchEntry = 2 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchRun = 3 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.LibraryNavigationNodeViewModel(string! name, LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.HasChildren.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Kind.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.get -> object?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.init -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.LibraryColumnOption(string! key, string! displayName, bool isVisible) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LibraryColumnVisibility() -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LoadFrom(System.Collections.Generic.IReadOnlyDictionary<string!, bool>! source) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.Snapshot() -> System.Collections.Generic.IReadOnlyDictionary<string!, bool>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LibraryResultsViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.App.Wpf.Library.ILibraryEntryEditor! entryEditor, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.Library.IAttachmentMetadataPrompt! attachmentPrompt, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.Core.Abstractions.IHasher! hasher, LM.App.Wpf.Services.Pdf.IPdfViewerLauncher! pdfViewerLauncher) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadFullTextResultsAsync(System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.FullTextSearchHit!>! hits, System.Func<LM.Core.Models.Entry!, bool>? entryFilter = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadMetadataResults(System.Collections.Generic.IEnumerable<LM.Core.Models.Entry!>! entries) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResetSortForSearch(LM.App.Wpf.ViewModels.Library.LibrarySortOption! defaultOption) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridLoaded(System.Windows.RoutedEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridSorting(System.Windows.Controls.DataGridSortingEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.MarkAsMetadataResults() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResultsAreFullText.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.get -> LM.App.Wpf.ViewModels.LibrarySearchResult?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LinkItems.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryLinkItem!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.EditEntryAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelection.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedItems.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectionChanged -> System.EventHandler?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelectedAbstract.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ToggleBlacklistAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.get -> int
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.LibraryCollectionFolderViewModel(LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! tree, string! id, string! name, LM.App.Wpf.Library.Collections.LibraryCollectionMetadata! metadata) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.LibraryCollectionsViewModel(LM.App.Wpf.Library.Collections.LibraryCollectionStore! store, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPrimaryAttachment.get -> bool
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.LibrarySearchQueryBox() -> void
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.get -> string!
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel
LM.App.Wpf.ViewModels.LibraryViewModel.Filters.get -> LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LibraryViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFullTextSearchService! fullTextSearch, LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel! filters, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.Configuration.IUserPreferencesStore! preferencesStore, LM.App.Wpf.Common.IClipboardService! clipboard, LM.App.Wpf.Common.IFileExplorerService! fileExplorer, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! litSearchOrganizer, LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! collections, LM.App.Wpf.Library.Collections.LibraryCollectionStore! collectionStore) -> void
LM.App.Wpf.ViewModels.LibraryViewModel.Results.get -> LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.Collections.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibraryColumnOption!>!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnVisibility.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility!
LM.App.Wpf.ViewModels.SearchItemViewModel
LM.App.Wpf.ViewModels.SearchItemViewModel.Header.get -> string!
LM.App.Wpf.ViewModels.SearchItemViewModel.SearchItemViewModel(string! header, LM.App.Wpf.ViewModels.LibraryViewModel! vm) -> void
LM.App.Wpf.ViewModels.SearchItemViewModel.Vm.get -> LM.App.Wpf.ViewModels.LibraryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel
LM.App.Wpf.ViewModels.SearchViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.SearchViewModel.ExportSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.From.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.LoadSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRuns.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.PreviousSearchSummary!>!
LM.App.Wpf.ViewModels.SearchViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRunsCount.get -> int
LM.App.Wpf.ViewModels.SearchViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.SearchViewModel.Query.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.get -> LM.Core.Models.SearchHit?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RunSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SaveSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleLeftPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleRightPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SearchViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IWorkSpaceService! ws, LM.App.Wpf.Common.ISearchSavePrompt! savePrompt, LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel! providers, LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel! history, LM.Infrastructure.Search.PubMedSearchProvider! pubMedProvider, LM.Core.Abstractions.Configuration.IUserPreferencesStore? preferencesStore = null) -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.get -> LM.App.Wpf.ViewModels.PreviousSearchSummary?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.StartPreviousRunCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ShowRunDetailsCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleFavoriteCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.To.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.History.get -> LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel.Providers.get -> LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecordExecutionAsync(LM.Core.Models.Search.SearchExecutionResult! result, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.SearchHistoryViewModel(LM.Core.Abstractions.Configuration.ISearchHistoryStore! store) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.ExecuteSearchAsync() -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.RunSearchCommand.get -> LM.App.Wpf.Common.AsyncRelayCommand!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchExecuted -> System.EventHandler<LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs!>?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchProvidersViewModel(LM.Core.Abstractions.Search.ISearchExecutionService! executionService) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.set -> void
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.Result.get -> LM.Core.Models.Search.SearchExecutionResult!
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.SearchExecutedEventArgs(LM.Core.Models.Search.SearchExecutionResult! result) -> void
LM.App.Wpf.ViewModels.PreviousSearchSummary
LM.App.Wpf.ViewModels.PreviousSearchSummary.DisplayName.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.EntryId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.FavoriteRunId.get -> string?
LM.App.Wpf.ViewModels.PreviousSearchSummary.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastRunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.Provider.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.Query.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunCount.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TotalHits.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TagsDisplay.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption
LM.App.Wpf.ViewModels.SearchDatabaseOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption.SearchDatabaseOption(LM.Core.Models.SearchDatabase value, string! displayName) -> void
LM.App.Wpf.ViewModels.SearchDatabaseOption.Value.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.StagingItem
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.get -> LM.HubSpoke.Models.ArticleHook?
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.DisplayName.get -> string?
LM.App.Wpf.ViewModels.StagingItem.DisplayName.set -> void
LM.App.Wpf.ViewModels.StagingItem.Doi.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Doi.set -> void
LM.App.Wpf.ViewModels.StagingItem.FilePath.get -> string!
LM.App.Wpf.ViewModels.StagingItem.FilePath.set -> void
LM.App.Wpf.ViewModels.StagingItem.Internal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Internal.set -> void
LM.App.Wpf.ViewModels.StagingItem.InternalId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.InternalId.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsDuplicate.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsNearMatch.get -> bool
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Notes.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Notes.set -> void
LM.App.Wpf.ViewModels.StagingItem.OriginalFileName.get -> string!
LM.App.Wpf.ViewModels.StagingItem.Pmid.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Pmid.set -> void
LM.App.Wpf.ViewModels.StagingItem.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingItem.Selected.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Selected.set -> void
LM.App.Wpf.ViewModels.StagingItem.Similarity.get -> double
LM.App.Wpf.ViewModels.StagingItem.Similarity.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Source.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Source.set -> void
LM.App.Wpf.ViewModels.StagingItem.StagingItem() -> void
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.get -> string!
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.set -> void
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.Title.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Title.set -> void
LM.App.Wpf.ViewModels.StagingItem.Type.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingItem.Type.set -> void
LM.App.Wpf.ViewModels.StagingItem.Year.get -> int?
LM.App.Wpf.ViewModels.StagingItem.Year.set -> void
LM.App.Wpf.Views.AddView
LM.App.Wpf.Views.Behaviors.FileDropRequest
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.get -> System.Windows.DragEventArgs!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.get -> object?
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.FileDropRequest(System.Collections.Generic.IReadOnlyList<string!>! Paths, object? DropTarget, System.Windows.DragEventArgs! Args) -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.init -> void
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior.SavedSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.AddView.AddView() -> void
LM.App.Wpf.Views.AddView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog
LM.App.Wpf.Views.LibraryPresetPickerDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.LibraryPresetPickerDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel!
LM.App.Wpf.Views.LibraryPresetPrompt.LibraryPresetPrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.InitializeComponent() -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.AttachmentMetadataDialog(LM.App.Wpf.ViewModels.Library.AttachmentMetadataDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog
LM.App.Wpf.Views.LibraryPresetSaveDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.LibraryPresetSaveDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel!
LM.App.Wpf.Views.LibraryView
LM.App.Wpf.Views.LibraryView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryView.LibraryView() -> void
LM.App.Wpf.Views.PdfViewer
LM.App.Wpf.Views.PdfViewer.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewer.PdfViewer() -> void
LM.App.Wpf.Views.Library.TagTokenSelector
LM.App.Wpf.Views.Library.TagTokenSelector.InitializeComponent() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.FilteredSuggestions.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>?
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.set -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagTokenSelector() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.get -> System.Collections.Generic.IEnumerable<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.set -> void
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTagsProperty
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabularyProperty
LM.App.Wpf.Views.LibraryPresetPrompt
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Views.Review.Controls.DecisionBadge
LM.App.Wpf.Views.Review.Controls.DecisionBadge.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.DecisionBadge() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.get -> LM.Review.Core.Models.ScreeningStatus
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.set -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.ExtractionFieldEditor() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.ScreeningQueueControl() -> void
LM.App.Wpf.Views.Review.ReviewView
LM.App.Wpf.Views.Review.ReviewView.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ReviewView.ReviewView() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.LitSearchRunPickerWindow(LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel!
LM.App.Wpf.Views.Review.ProjectEditorWindow
LM.App.Wpf.Views.Review.ProjectEditorWindow.Attach(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.ProjectEditorWindow() -> void
LM.App.Wpf.Views.SearchSavePrompt
LM.App.Wpf.Views.SearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Views.SearchSavePrompt.SearchSavePrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.DataGridColumnVisibilityBehavior() -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.set -> void
LM.App.Wpf.Views.SearchView
LM.App.Wpf.Views.SearchView.InitializeComponent() -> void
LM.App.Wpf.Views.SearchView.SearchView() -> void
LM.App.Wpf.Views.ShellWindow
LM.App.Wpf.Views.ShellWindow.InitializeComponent() -> void
LM.App.Wpf.Views.ShellWindow.LoadWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.NewWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.ShellWindow() -> void
LM.App.Wpf.Views.StagingEditorWindow
LM.App.Wpf.Views.StagingEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.StagingEditorWindow.StagingEditorWindow(LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel! viewModel) -> void
override LM.App.Wpf.ViewModels.Library.LibrarySortOption.ToString() -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Name.get -> string!
override LM.App.Wpf.Views.Library.AttachmentMetadataDialog.OnClosed(System.EventArgs! e) -> void
LM.App.Wpf.Views.WorkspaceChooser
LM.App.Wpf.Views.WorkspaceChooser.InitializeComponent() -> void
LM.App.Wpf.Views.WorkspaceChooser.SelectedWorkspacePath.get -> string?
LM.App.Wpf.Views.WorkspaceChooser.WorkspaceChooser(LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel! viewModel) -> void
LM.App.Wpf.Views.WorkspaceChooser.Configure(System.Action<LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel!>! configure) -> void
override LM.App.Wpf.App.OnExit(System.Windows.ExitEventArgs! e) -> void
override LM.App.Wpf.App.OnStartup(System.Windows.StartupEventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetPickerDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetSaveDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.StagingEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.WorkspaceChooser.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.ProjectEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.OnClosed(System.EventArgs! e) -> void
static LM.App.Wpf.App.Main() -> void
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.All.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.NewestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.OldestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleAscending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleDescending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Clone() -> LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.LitSearchOrganizerStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveEntryAsync(string! entryId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.SyncEntriesAsync(System.Collections.Generic.IEnumerable<string!>! entryIds, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema.CurrentVersion -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.LitSearchEntryViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! title, string? query) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Query.get -> string?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.CanDelete.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsRoot.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.LitSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! name, bool isRoot) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.LitSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.LitSearchRunViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! runId, string! label, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel! parent) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.LitSearchTreeViewModel(LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt, LM.Core.Abstractions.IEntryStore! entryStore, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
---------- LM.App.Wpf ----------
#nullable enable
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.ColumnKeyProperty -> System.Windows.DependencyProperty!
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.GetColumnKey(System.Windows.DependencyObject! element) -> string?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.SetColumnKey(System.Windows.DependencyObject! element, string? value) -> void
#nullable enable
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Id.get -> string!
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.IsDraggable.get -> bool
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Name.get -> string!
const LM.App.Wpf.Library.LibraryPresetFolder.RootId = "root" -> string!
const LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.RootId = "root" -> string!
const LM.App.Wpf.ViewModels.StagingItem.DuplicateThreshold = 0.999 -> double
const LM.App.Wpf.ViewModels.StagingItem.NearThreshold = 0.75 -> double
LM.App.Wpf.App
LM.App.Wpf.App.App() -> void
LM.App.Wpf.App.InitializeComponent() -> void
LM.App.Wpf.Common.AsyncRelayCommand
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<object?, System.Threading.Tasks.Task!>! execute, System.Func<object?, bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<System.Threading.Tasks.Task!>! execute, System.Func<bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.AsyncRelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.AsyncRelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.AsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.IAsyncRelayCommand
LM.App.Wpf.Common.IAsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter
LM.App.Wpf.Common.BooleanToOpacityConverter.BooleanToOpacityConverter() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.set -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.set -> void
LM.App.Wpf.Common.Converters.ProjectEditorConverters
LM.App.Wpf.Common.Converters.ProjectEditorConverters.StageSelectionEquality.get -> System.Windows.Data.IMultiValueConverter!
LM.App.Wpf.Common.LibraryPresetSaveContext.LibraryPresetSaveContext(string! DefaultName, System.Collections.Generic.IReadOnlyCollection<string!>! ExistingNames, string! Title = "Save Library Preset", string! Prompt = "Name this filter preset.") -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.LibraryCollectionEntry() -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.DeletePresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenamePresetAsync(string! presetId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
LM.App.Wpf.Library.LibraryFilterState.Tags.get -> string![]!
LM.App.Wpf.Library.LibraryPresetFolder.EnumerateChildren() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.LibraryPresetTreeItem>!
LM.App.Wpf.Library.LibraryPresetNodeKind.Folder = 0 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetNodeKind.Preset = 1 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.LitSearchOrganizerEntry() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.LitSearchOrganizerFolder() -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectBlueprint(string! projectId, string! name, System.DateTimeOffset createdAtUtc, string! createdBy, string! litSearchEntryId, string! litSearchRunId, System.Collections.Generic.IReadOnlyList<string!>! checkedEntryIds, string? hookRelativePath, LM.Review.Core.Models.ReviewTemplateKind template, string! metadataNotes, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>! stages) -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CheckedEntryIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedAtUtc.get -> System.DateTimeOffset
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedBy.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.HookRelativePath.get -> string?
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchEntryId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchRunId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Template.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.MetadataNotes.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Stages.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.With(string? name = null, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>? stages = null, LM.Review.Core.Models.ReviewTemplateKind? template = null, string? metadataNotes = null, string? litSearchEntryId = null, string? litSearchRunId = null, System.Collections.Generic.IReadOnlyList<string!>? checkedEntryIds = null) -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint!
LM.App.Wpf.Services.Review.Design.StageBlueprint
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageBlueprint(string! stageId, string! name, LM.Review.Core.Models.ReviewStageType stageType, int primaryReviewers, int secondaryReviewers, bool requiresConsensus, int minimumAgreements, bool escalateOnDisagreement, LM.Review.Core.Models.StageDisplayProfile! displayProfile) -> void
LM.App.Wpf.Services.Review.Design.StageBlueprint.EscalateOnDisagreement.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.MinimumAgreements.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.PrimaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.RequiresConsensus.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.SecondaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageId.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.Services.Review.Design.StageBlueprint.DisplayProfile.get -> LM.Review.Core.Models.StageDisplayProfile!
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher.Show(string! entryId, string! pdfAbsolutePath, string! pdfHash) -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.AddSelectionToFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.MoveFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RemoveSelectionFromFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ItemsView.get -> System.ComponentModel.ICollectionView!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.LitSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.SavedSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SavedSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeletePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.LoadPresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenamePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.LibraryViewModel.AllTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.LibraryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.LitSearchOrganizer.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LoadCollectionEntriesAsync(string! collectionId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.OpenPdfAnnotationsCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.LibraryViewModel.RefreshTagsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.ToggleBlacklistCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationTypeDisplay.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Dispose() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.HighlightBrush.get -> System.Windows.Media.Brush!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.PdfAnnotationColorCommandParameter() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior.CollectionTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior.LitSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter
LM.App.Wpf.Views.Converters.EnumEqualsConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.EnumEqualsConverter() -> void
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.InverseBooleanToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.AnnotationColorParameterConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.Convert(object?[]! values, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.ConvertBack(object? value, System.Type![]! targetTypes, object? parameter, System.Globalization.CultureInfo! culture) -> object?[]!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NullOrEmptyToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList
LM.App.Wpf.Views.Pdf.PdfAnnotationList.PdfAnnotationList() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow
LM.App.Wpf.Views.PdfViewerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow.PdfViewerWindow() -> void
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.PdfViewerHostObject(LM.App.Wpf.Views.PdfViewer! owner) -> void
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogCloseRequestedEventArgs(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogResult.get -> bool?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.CloseRequested -> System.EventHandler<LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs!>?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.DialogViewModelBase() -> void
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.RequestClose(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.IDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.WpfDialogService(System.IServiceProvider! services) -> void
LM.App.Wpf.Common.ILibraryPresetPrompt
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Common.IClipboardService
LM.App.Wpf.Common.IClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.ClipboardService
LM.App.Wpf.Common.ClipboardService.ClipboardService() -> void
LM.App.Wpf.Common.ClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.IFileExplorerService
LM.App.Wpf.Common.IFileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.FileExplorerService
LM.App.Wpf.Common.FileExplorerService.FileExplorerService() -> void
LM.App.Wpf.Common.FileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.ISearchSavePrompt
LM.App.Wpf.Common.ISearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Common.SearchSavePromptContext
LM.App.Wpf.Common.SearchSavePromptContext.Database.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.From.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.Query.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.SearchSavePromptContext(string! Query, LM.Core.Models.SearchDatabase Database, System.DateTime? From, System.DateTime? To, string! DefaultName, string! DefaultNotes, System.Collections.Generic.IReadOnlyList<string!>! DefaultTags) -> void
LM.App.Wpf.Common.SearchSavePromptContext.Database.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.SearchSavePromptContext.From.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.Query.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.To.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.To.init -> void
LM.App.Wpf.Common.SearchSavePromptResult
LM.App.Wpf.Common.SearchSavePromptResult.Name.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Notes.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Tags.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.SearchSavePromptResult(string! Name, string! Notes, string! Tags) -> void
LM.App.Wpf.Common.SearchSavePromptResult.Name.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Notes.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Tags.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSaveResult
LM.App.Wpf.Common.LibraryPresetSaveResult.LibraryPresetSaveResult(string! Name) -> void
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.get -> bool
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.LibraryPresetSelectionContext(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! Presets, bool AllowLoad, string! Title) -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.LibraryPresetSelectionResult(string? SelectedPresetId, System.Collections.Generic.IReadOnlyList<string!>! DeletedPresetIds) -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.get -> string?
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.init -> void
LM.App.Wpf.Common.LibraryPresetSummary
LM.App.Wpf.Common.LibraryPresetSummary.Id.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Id.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.LibraryPresetSummary(string! Id, string! Name, System.DateTime SavedUtc) -> void
LM.App.Wpf.Common.LibraryPresetSummary.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.get -> System.DateTime
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.init -> void
LM.App.Wpf.Common.RelayCommand
LM.App.Wpf.Common.RelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.RelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.RelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.RelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.RelayCommand.RelayCommand(System.Action<object?>! exec, System.Func<object?, bool>? can = null) -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.get -> bool
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.init -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.get -> string?
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.init -> void
LM.App.Wpf.Common.Dialogs.FolderPickerOptions
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.get -> string?
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.init -> void
LM.App.Wpf.Common.Dialogs.IDialogService
LM.App.Wpf.Common.Dialogs.IDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.StringJoinConverter
LM.App.Wpf.Common.StringJoinConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.StringJoinConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.AttachmentGlyphToIconConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.AttachmentGlyphToDescriptionConverter() -> void
LM.App.Wpf.Common.ViewModelBase
LM.App.Wpf.Common.ViewModelBase.ViewModelBase() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Id.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.get -> int
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PdfAnnotation(string! id, string! title) -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.get -> System.Windows.Media.Imaging.BitmapImage?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.Annotations.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Pdf.PdfAnnotation!>!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.ChangeAnnotationColorCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.CopyAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DocumentSource.get -> System.Uri?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.HandleAnnotationSelectionAsync(LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.LoadPdfCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfHash.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfViewerViewModel(LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.App.Wpf.Services.IUserContext! userContext, LM.Core.Abstractions.IPdfAnnotationPreviewStorage! previewStorage, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.Common.IClipboardService! clipboard) -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.RecordAnnotationChangeCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.WebViewBridge.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DeleteAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.Library.LibraryFilterPreset
LM.App.Wpf.Library.LibraryFilterPreset.LibraryFilterPreset() -> void
LM.App.Wpf.Library.LibraryFilterPreset.Id.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Id.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.Name.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Name.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.get -> System.DateTime
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.get -> int
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.State.get -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.Library.LibraryFilterPreset.State.set -> void
LM.App.Wpf.Library.LibraryFilterPresetStore
LM.App.Wpf.Library.LibraryFilterPresetStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.MovePresetAsync(string! presetId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.LibraryFilterPresetStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.ListPresetsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.LibraryFilterPreset!>!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, string? targetFolderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetByIdAsync(string! presetId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
const LM.App.Wpf.Library.Collections.LibraryCollectionFolder.RootId = "collections-root" -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionEntry!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile
LM.App.Wpf.Library.Collections.LibraryCollectionFile.LibraryCollectionFile() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.get -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder?
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.get -> int
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.EnumerateDescendants() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionEntry!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.LibraryCollectionFolder() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.LibraryCollectionMetadata() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore
LM.App.Wpf.Library.Collections.LibraryCollectionStore.AddEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.CreateFolderAsync(string? parentFolderId, string! name, string! createdBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.DeleteFolderAsync(string! folderId, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.LibraryCollectionStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RemoveEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RenameFolderAsync(string! folderId, string! newName, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryPresetFolder
LM.App.Wpf.Library.LibraryPresetFolder.Clone() -> LM.App.Wpf.Library.LibraryPresetFolder!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Id.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Id.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.LibraryPresetFolder() -> void
LM.App.Wpf.Library.LibraryPresetFolder.Name.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Name.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Presets.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryFilterPreset!>!
LM.App.Wpf.Library.LibraryPresetFolder.Presets.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.get -> int
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.set -> void
LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem
LM.App.Wpf.Library.LibraryPresetTreeItem.Folder.get -> LM.App.Wpf.Library.LibraryPresetFolder?
LM.App.Wpf.Library.LibraryPresetTreeItem.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem(LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder, LM.App.Wpf.Library.LibraryPresetFolder? folder, LM.App.Wpf.Library.LibraryFilterPreset? preset) -> void
LM.App.Wpf.Library.LibraryPresetTreeItem.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset?
LM.App.Wpf.Library.LibraryPresetTreeItem.SortOrder.get -> int
LM.App.Wpf.Library.ILibraryEntryEditor
LM.App.Wpf.Library.ILibraryEntryEditor.EditEntryAsync(LM.Core.Models.Entry! entry) -> System.Threading.Tasks.Task<System.Boolean>!
LM.App.Wpf.Library.LibraryFilterState
LM.App.Wpf.Library.LibraryFilterState.LibraryFilterState() -> void
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.get -> bool
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.set -> void
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateFrom.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateFrom.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateTo.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateTo.set -> void
LM.App.Wpf.Library.LibraryFilterState.SortKey.get -> string?
LM.App.Wpf.Library.LibraryFilterState.SortKey.set -> void
LM.App.Wpf.Library.LibraryFilterState.Tags.set -> void
LM.App.Wpf.ViewModels.AddPipeline
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddViewModel
LM.App.Wpf.ViewModels.AddViewModel.AddFilesCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.ViewModels.WatchedFolderScanner? scanner = null, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore? watchedFolderSettings = null, LM.App.Wpf.ViewModels.StagingListViewModel? stagingList = null, LM.App.Wpf.ViewModels.WatchedFoldersViewModel? watchedFolders = null, LM.App.Wpf.Common.Dialogs.IDialogService? dialogService = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.BulkAddFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ClearCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.CommitSelectedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.AddViewModel.Current.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.AddViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.AddViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.AddViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.AddViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.AddViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.AddViewModel.ReviewStagedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Staging.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.AddViewModel.StagingListViewModel.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFolders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFoldersViewModel.get -> LM.App.Wpf.ViewModels.WatchedFoldersViewModel!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.LibraryPresetPickerDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Presets.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.SelectedPresetId.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.EntryId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookAbsolutePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookRelativePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.DisplayLabel.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.ExecutedBy.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.Owner.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.TotalHits.get -> int
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.ConfirmCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.Entries.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.LitSearchRunPickerViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.LibraryPresetSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.set -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Initialize(LM.App.Wpf.Common.SearchSavePromptContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultNotes.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultTags.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.SearchSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingEditorViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingList.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.SelectedWorkspacePath.get -> string?
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.get -> bool
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.WorkspaceChooserViewModel(LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.CanAcceptFileDrop(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleFileDropAsync(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibrarySearchResult
LM.App.Wpf.ViewModels.LibrarySearchResult.Entry.get -> LM.Core.Models.Entry!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasAttachments.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasDoi.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasIdentifiers.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasInternalId.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasLinks.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNct.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPmid.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasRelations.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasSource.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasUserNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.Highlight.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.HighlightDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.IsFullText.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.LibrarySearchResult(LM.Core.Models.Entry! entry, double? score, string? highlight) -> void
LM.App.Wpf.ViewModels.LibrarySearchResult.Score.get -> double?
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentGlyphKind.get -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.TitleSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.YearPresenceSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearDescendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearAscendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SourceSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TypeSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedOnSortKey.get -> System.DateTime
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedBySortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.InternalIdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.DoiSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.PmidSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.NctSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AuthorsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TagsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IsInternalSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SnippetSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreSortKey.get -> double
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.None = 0 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Pdf = 1 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Document = 2 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Presentation = 3 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Generic = 4 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.Library.LibraryLinkItem
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.LibraryLinkItem(string! DisplayText, string! Target, LM.App.Wpf.ViewModels.Library.LinkItemKind Kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.get -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.init -> void
LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Url = 0 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.File = 1 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Folder = 2 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.RunAndBasics = 0 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Metadata = 1 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Workflow = 2 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Summary = 3 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.ProjectEditorStepDescriptor(LM.App.Wpf.ViewModels.Review.ProjectEditorStep Step, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.ReviewTemplateOption(LM.Review.Core.Models.ReviewTemplateKind Kind, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectEditorViewModel() -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.AddStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntryCount.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntrySummary.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ErrorMessage.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.HookRelativePath.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Initialize(LM.App.Wpf.Services.Review.Design.ProjectBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchEntryId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchRunId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageDownCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageUpCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.RemoveStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Result.get -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SaveCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.get -> LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.StageTypes.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStageType>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Stages.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Steps.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.TemplateOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStep.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepDescriptor.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepIndex.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsSummaryStep.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.get -> LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateKind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.NextCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.BackCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ChangeRunCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ConfigureRunReloadHandler(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.App.Wpf.Services.Review.Design.ProjectBlueprint?>!>! handler) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.StageDisplayOptionViewModel(LM.Review.Core.Models.StageContentArea area, bool isSelected) -> void
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Area.get -> LM.Review.Core.Models.StageContentArea
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Description.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.get -> bool
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageBlueprintViewModel(LM.App.Wpf.Services.Review.Design.StageBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageId.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TotalReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.DisplayOptions.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel!>!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TryBuild(out LM.App.Wpf.Services.Review.Design.StageBlueprint! stage, out string? errorMessage) -> bool
LM.App.Wpf.ViewModels.StagingListViewModel
LM.App.Wpf.ViewModels.StagingListViewModel.AddStagedItemsAsync(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Clear() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.CommitSelectedAsync(System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.StagingListViewModel.Current.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.StagingListViewModel.HasItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.HasSelectedItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.StagingListViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.StagingListViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingListViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.StagingListViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.SetCommandGuard(System.Func<System.Func<System.Threading.Tasks.Task!>!, System.Threading.Tasks.Task!>! guard) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.UpdateParentBusy(bool isBusy) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.WatchedFoldersViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList, LM.App.Wpf.ViewModels.WatchedFolderScanner! scanner, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore! settingsStore, LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.WatchedFolder
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.get -> bool
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.LastScanDisplay.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.LastScanUtc.get -> System.DateTimeOffset?
LM.App.Wpf.ViewModels.WatchedFolder.LastScanWasUnchanged.get -> bool?
LM.App.Wpf.ViewModels.WatchedFolder.Path.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.Path.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFolder.ResetScanState() -> void
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusLabel.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusToolTip.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.WatchedFolder() -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(string! path) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig
LM.App.Wpf.ViewModels.WatchedFolderConfig.ApplyState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.ClearState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFolderConfig.CreateSnapshot() -> LM.Core.Models.WatchedFolderSettings!
LM.App.Wpf.ViewModels.WatchedFolderConfig.Load(LM.Core.Models.WatchedFolderSettings! settings) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.StoreState(LM.App.Wpf.ViewModels.WatchedFolder! folder, LM.Core.Models.WatchedFolderState! state) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.WatchedFolderConfig() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Folder.get -> LM.App.Wpf.ViewModels.WatchedFolder!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Items.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.WatchedFolderScanEventArgs(LM.App.Wpf.ViewModels.WatchedFolder! folder, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner
LM.App.Wpf.ViewModels.WatchedFolderScanner.Attach(LM.App.Wpf.ViewModels.WatchedFolderConfig! config) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.ItemsStaged -> System.EventHandler<LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs!>?
LM.App.Wpf.ViewModels.WatchedFolderScanner.ScanAsync(LM.App.Wpf.ViewModels.WatchedFolder? folder, System.Threading.CancellationToken ct, bool force = false) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFolderScanner.WatchedFolderScanner(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.IAddPipeline
LM.App.Wpf.ViewModels.IAddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.IAddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.Library.ILibraryDocumentService
LM.App.Wpf.Library.ILibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.ILibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.LibraryDocumentService
LM.App.Wpf.Library.LibraryDocumentService.LibraryDocumentService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.IAttachmentMetadataPrompt
LM.App.Wpf.Library.IAttachmentMetadataPrompt.RequestMetadataAsync(LM.App.Wpf.Library.AttachmentMetadataPromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.AttachmentMetadataPromptResult?>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.get -> string!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.AttachmentMetadataPromptContext(string! EntryTitle, System.Collections.Generic.IReadOnlyList<string!>! FilePaths) -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>!
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult.AttachmentMetadataPromptResult(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>! Attachments) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection
LM.App.Wpf.Library.AttachmentMetadataSelection.AttachmentMetadataSelection(string! SourcePath, string! Title, LM.Core.Models.AttachmentKind Kind, System.Collections.Generic.IReadOnlyList<string!>! Tags) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.get -> LM.Core.Models.AttachmentKind
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.init -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LibraryFiltersViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! presetStore, LM.App.Wpf.Common.ILibraryPresetPrompt! presetPrompt, LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.SavedSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.get -> string
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedSearchPresetViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, LM.App.Wpf.Library.LibraryFilterPreset! preset, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Summary.get -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.ToSummary() -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.SavedSearchTreeChangedEventArgs(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! presets) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.SavedSearchTreeViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.TreeChanged -> System.EventHandler<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs!>?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ClearCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyPresetAsync(LM.App.Wpf.Common.LibraryPresetSummary! summary, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyState(LM.App.Wpf.Library.LibraryFilterState! state) -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.CaptureState() -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTooltip.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTokens.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.BuildFullTextQuery(string! normalizedQuery) -> LM.Core.Models.Search.FullTextSearchQuery!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.HasSavedPresets.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.GetNormalizedFullTextQuery() -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.NavigationRoots.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RefreshNavigationAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedPresets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedSearches.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleLeftPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleRightPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SortOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RemoveTagCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand<string?>!
LM.App.Wpf.ViewModels.Library.LibrarySortOption
LM.App.Wpf.ViewModels.Library.LibrarySortOption.LibrarySortOption(string! key, string! displayName) -> void
LM.App.Wpf.ViewModels.Library.LibrarySortOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOptions
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.Category = 0 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.SavedSearch = 1 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchEntry = 2 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchRun = 3 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.LibraryNavigationNodeViewModel(string! name, LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.HasChildren.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Kind.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.get -> object?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.init -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.LibraryColumnOption(string! key, string! displayName, bool isVisible) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LibraryColumnVisibility() -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LoadFrom(System.Collections.Generic.IReadOnlyDictionary<string!, bool>! source) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.Snapshot() -> System.Collections.Generic.IReadOnlyDictionary<string!, bool>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LibraryResultsViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.App.Wpf.Library.ILibraryEntryEditor! entryEditor, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.Library.IAttachmentMetadataPrompt! attachmentPrompt, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.Core.Abstractions.IHasher! hasher, LM.App.Wpf.Services.Pdf.IPdfViewerLauncher! pdfViewerLauncher) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadFullTextResultsAsync(System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.FullTextSearchHit!>! hits, System.Func<LM.Core.Models.Entry!, bool>? entryFilter = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadMetadataResults(System.Collections.Generic.IEnumerable<LM.Core.Models.Entry!>! entries) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResetSortForSearch(LM.App.Wpf.ViewModels.Library.LibrarySortOption! defaultOption) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridLoaded(System.Windows.RoutedEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridSorting(System.Windows.Controls.DataGridSortingEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.MarkAsMetadataResults() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResultsAreFullText.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.get -> LM.App.Wpf.ViewModels.LibrarySearchResult?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LinkItems.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryLinkItem!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.EditEntryAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelection.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedItems.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectionChanged -> System.EventHandler?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelectedAbstract.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ToggleBlacklistAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.get -> int
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.LibraryCollectionFolderViewModel(LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! tree, string! id, string! name, LM.App.Wpf.Library.Collections.LibraryCollectionMetadata! metadata) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.LibraryCollectionsViewModel(LM.App.Wpf.Library.Collections.LibraryCollectionStore! store, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPrimaryAttachment.get -> bool
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.LibrarySearchQueryBox() -> void
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.get -> string!
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel
LM.App.Wpf.ViewModels.LibraryViewModel.Filters.get -> LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LibraryViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFullTextSearchService! fullTextSearch, LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel! filters, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.Configuration.IUserPreferencesStore! preferencesStore, LM.App.Wpf.Common.IClipboardService! clipboard, LM.App.Wpf.Common.IFileExplorerService! fileExplorer, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! litSearchOrganizer, LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! collections, LM.App.Wpf.Library.Collections.LibraryCollectionStore! collectionStore) -> void
LM.App.Wpf.ViewModels.LibraryViewModel.Results.get -> LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.Collections.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibraryColumnOption!>!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnVisibility.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility!
LM.App.Wpf.ViewModels.SearchItemViewModel
LM.App.Wpf.ViewModels.SearchItemViewModel.Header.get -> string!
LM.App.Wpf.ViewModels.SearchItemViewModel.SearchItemViewModel(string! header, LM.App.Wpf.ViewModels.LibraryViewModel! vm) -> void
LM.App.Wpf.ViewModels.SearchItemViewModel.Vm.get -> LM.App.Wpf.ViewModels.LibraryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel
LM.App.Wpf.ViewModels.SearchViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.SearchViewModel.ExportSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.From.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.LoadSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRuns.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.PreviousSearchSummary!>!
LM.App.Wpf.ViewModels.SearchViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRunsCount.get -> int
LM.App.Wpf.ViewModels.SearchViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.SearchViewModel.Query.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.get -> LM.Core.Models.SearchHit?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RunSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SaveSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleLeftPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleRightPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SearchViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IWorkSpaceService! ws, LM.App.Wpf.Common.ISearchSavePrompt! savePrompt, LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel! providers, LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel! history, LM.Infrastructure.Search.PubMedSearchProvider! pubMedProvider, LM.Core.Abstractions.Configuration.IUserPreferencesStore? preferencesStore = null) -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.get -> LM.App.Wpf.ViewModels.PreviousSearchSummary?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.StartPreviousRunCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ShowRunDetailsCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleFavoriteCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.To.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.History.get -> LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel.Providers.get -> LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecordExecutionAsync(LM.Core.Models.Search.SearchExecutionResult! result, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.SearchHistoryViewModel(LM.Core.Abstractions.Configuration.ISearchHistoryStore! store) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.ExecuteSearchAsync() -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.RunSearchCommand.get -> LM.App.Wpf.Common.AsyncRelayCommand!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchExecuted -> System.EventHandler<LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs!>?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchProvidersViewModel(LM.Core.Abstractions.Search.ISearchExecutionService! executionService) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.set -> void
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.Result.get -> LM.Core.Models.Search.SearchExecutionResult!
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.SearchExecutedEventArgs(LM.Core.Models.Search.SearchExecutionResult! result) -> void
LM.App.Wpf.ViewModels.PreviousSearchSummary
LM.App.Wpf.ViewModels.PreviousSearchSummary.DisplayName.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.EntryId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.FavoriteRunId.get -> string?
LM.App.Wpf.ViewModels.PreviousSearchSummary.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastRunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.Provider.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.Query.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunCount.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TotalHits.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TagsDisplay.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption
LM.App.Wpf.ViewModels.SearchDatabaseOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption.SearchDatabaseOption(LM.Core.Models.SearchDatabase value, string! displayName) -> void
LM.App.Wpf.ViewModels.SearchDatabaseOption.Value.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.StagingItem
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.get -> LM.HubSpoke.Models.ArticleHook?
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.DisplayName.get -> string?
LM.App.Wpf.ViewModels.StagingItem.DisplayName.set -> void
LM.App.Wpf.ViewModels.StagingItem.Doi.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Doi.set -> void
LM.App.Wpf.ViewModels.StagingItem.FilePath.get -> string!
LM.App.Wpf.ViewModels.StagingItem.FilePath.set -> void
LM.App.Wpf.ViewModels.StagingItem.Internal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Internal.set -> void
LM.App.Wpf.ViewModels.StagingItem.InternalId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.InternalId.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsDuplicate.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsNearMatch.get -> bool
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Notes.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Notes.set -> void
LM.App.Wpf.ViewModels.StagingItem.OriginalFileName.get -> string!
LM.App.Wpf.ViewModels.StagingItem.Pmid.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Pmid.set -> void
LM.App.Wpf.ViewModels.StagingItem.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingItem.Selected.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Selected.set -> void
LM.App.Wpf.ViewModels.StagingItem.Similarity.get -> double
LM.App.Wpf.ViewModels.StagingItem.Similarity.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Source.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Source.set -> void
LM.App.Wpf.ViewModels.StagingItem.StagingItem() -> void
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.get -> string!
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.set -> void
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.Title.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Title.set -> void
LM.App.Wpf.ViewModels.StagingItem.Type.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingItem.Type.set -> void
LM.App.Wpf.ViewModels.StagingItem.Year.get -> int?
LM.App.Wpf.ViewModels.StagingItem.Year.set -> void
LM.App.Wpf.Views.AddView
LM.App.Wpf.Views.Behaviors.FileDropRequest
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.get -> System.Windows.DragEventArgs!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.get -> object?
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.FileDropRequest(System.Collections.Generic.IReadOnlyList<string!>! Paths, object? DropTarget, System.Windows.DragEventArgs! Args) -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.init -> void
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior.SavedSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.AddView.AddView() -> void
LM.App.Wpf.Views.AddView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog
LM.App.Wpf.Views.LibraryPresetPickerDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.LibraryPresetPickerDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel!
LM.App.Wpf.Views.LibraryPresetPrompt.LibraryPresetPrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.InitializeComponent() -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.AttachmentMetadataDialog(LM.App.Wpf.ViewModels.Library.AttachmentMetadataDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog
LM.App.Wpf.Views.LibraryPresetSaveDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.LibraryPresetSaveDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel!
LM.App.Wpf.Views.LibraryView
LM.App.Wpf.Views.LibraryView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryView.LibraryView() -> void
LM.App.Wpf.Views.PdfViewer
LM.App.Wpf.Views.PdfViewer.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewer.PdfViewer() -> void
LM.App.Wpf.Views.Library.TagTokenSelector
LM.App.Wpf.Views.Library.TagTokenSelector.InitializeComponent() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.FilteredSuggestions.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>?
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.set -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagTokenSelector() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.get -> System.Collections.Generic.IEnumerable<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.set -> void
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTagsProperty
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabularyProperty
LM.App.Wpf.Views.LibraryPresetPrompt
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Views.Review.Controls.DecisionBadge
LM.App.Wpf.Views.Review.Controls.DecisionBadge.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.DecisionBadge() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.get -> LM.Review.Core.Models.ScreeningStatus
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.set -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.ExtractionFieldEditor() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.ScreeningQueueControl() -> void
LM.App.Wpf.Views.Review.ReviewView
LM.App.Wpf.Views.Review.ReviewView.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ReviewView.ReviewView() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.LitSearchRunPickerWindow(LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel!
LM.App.Wpf.Views.Review.ProjectEditorWindow
LM.App.Wpf.Views.Review.ProjectEditorWindow.Attach(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.ProjectEditorWindow() -> void
LM.App.Wpf.Views.SearchSavePrompt
LM.App.Wpf.Views.SearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Views.SearchSavePrompt.SearchSavePrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.DataGridColumnVisibilityBehavior() -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.set -> void
LM.App.Wpf.Views.SearchView
LM.App.Wpf.Views.SearchView.InitializeComponent() -> void
LM.App.Wpf.Views.SearchView.SearchView() -> void
LM.App.Wpf.Views.ShellWindow
LM.App.Wpf.Views.ShellWindow.InitializeComponent() -> void
LM.App.Wpf.Views.ShellWindow.LoadWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.NewWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.ShellWindow() -> void
LM.App.Wpf.Views.StagingEditorWindow
LM.App.Wpf.Views.StagingEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.StagingEditorWindow.StagingEditorWindow(LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel! viewModel) -> void
override LM.App.Wpf.ViewModels.Library.LibrarySortOption.ToString() -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Name.get -> string!
override LM.App.Wpf.Views.Library.AttachmentMetadataDialog.OnClosed(System.EventArgs! e) -> void
LM.App.Wpf.Views.WorkspaceChooser
LM.App.Wpf.Views.WorkspaceChooser.InitializeComponent() -> void
LM.App.Wpf.Views.WorkspaceChooser.SelectedWorkspacePath.get -> string?
LM.App.Wpf.Views.WorkspaceChooser.WorkspaceChooser(LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel! viewModel) -> void
LM.App.Wpf.Views.WorkspaceChooser.Configure(System.Action<LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel!>! configure) -> void
override LM.App.Wpf.App.OnExit(System.Windows.ExitEventArgs! e) -> void
override LM.App.Wpf.App.OnStartup(System.Windows.StartupEventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetPickerDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetSaveDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.StagingEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.WorkspaceChooser.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.ProjectEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.OnClosed(System.EventArgs! e) -> void
static LM.App.Wpf.App.Main() -> void
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.All.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.NewestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.OldestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleAscending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleDescending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Clone() -> LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.LitSearchOrganizerStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveEntryAsync(string! entryId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.SyncEntriesAsync(System.Collections.Generic.IEnumerable<string!>! entryIds, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema.CurrentVersion -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.LitSearchEntryViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! title, string? query) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Query.get -> string?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.CanDelete.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsRoot.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.LitSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! name, bool isRoot) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.LitSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.LitSearchRunViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! runId, string! label, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel! parent) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.LitSearchTreeViewModel(LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt, LM.Core.Abstractions.IEntryStore! entryStore, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
---------- LM.App.Wpf ----------
#nullable enable
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.ColumnKeyProperty -> System.Windows.DependencyProperty!
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.GetColumnKey(System.Windows.DependencyObject! element) -> string?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.SetColumnKey(System.Windows.DependencyObject! element, string? value) -> void
#nullable enable
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Id.get -> string!
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.IsDraggable.get -> bool
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Name.get -> string!
const LM.App.Wpf.Library.LibraryPresetFolder.RootId = "root" -> string!
const LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.RootId = "root" -> string!
const LM.App.Wpf.ViewModels.StagingItem.DuplicateThreshold = 0.999 -> double
const LM.App.Wpf.ViewModels.StagingItem.NearThreshold = 0.75 -> double
LM.App.Wpf.App
LM.App.Wpf.App.App() -> void
LM.App.Wpf.App.InitializeComponent() -> void
LM.App.Wpf.Common.AsyncRelayCommand
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<object?, System.Threading.Tasks.Task!>! execute, System.Func<object?, bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<System.Threading.Tasks.Task!>! execute, System.Func<bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.AsyncRelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.AsyncRelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.AsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.IAsyncRelayCommand
LM.App.Wpf.Common.IAsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter
LM.App.Wpf.Common.BooleanToOpacityConverter.BooleanToOpacityConverter() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.set -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.set -> void
LM.App.Wpf.Common.Converters.ProjectEditorConverters
LM.App.Wpf.Common.Converters.ProjectEditorConverters.StageSelectionEquality.get -> System.Windows.Data.IMultiValueConverter!
LM.App.Wpf.Common.LibraryPresetSaveContext.LibraryPresetSaveContext(string! DefaultName, System.Collections.Generic.IReadOnlyCollection<string!>! ExistingNames, string! Title = "Save Library Preset", string! Prompt = "Name this filter preset.") -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.LibraryCollectionEntry() -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.DeletePresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenamePresetAsync(string! presetId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
LM.App.Wpf.Library.LibraryFilterState.Tags.get -> string![]!
LM.App.Wpf.Library.LibraryPresetFolder.EnumerateChildren() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.LibraryPresetTreeItem>!
LM.App.Wpf.Library.LibraryPresetNodeKind.Folder = 0 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetNodeKind.Preset = 1 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.LitSearchOrganizerEntry() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.LitSearchOrganizerFolder() -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectBlueprint(string! projectId, string! name, System.DateTimeOffset createdAtUtc, string! createdBy, string! litSearchEntryId, string! litSearchRunId, System.Collections.Generic.IReadOnlyList<string!>! checkedEntryIds, string? hookRelativePath, LM.Review.Core.Models.ReviewTemplateKind template, string! metadataNotes, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>! stages) -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CheckedEntryIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedAtUtc.get -> System.DateTimeOffset
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedBy.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.HookRelativePath.get -> string?
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchEntryId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchRunId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Template.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.MetadataNotes.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Stages.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.With(string? name = null, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>? stages = null, LM.Review.Core.Models.ReviewTemplateKind? template = null, string? metadataNotes = null, string? litSearchEntryId = null, string? litSearchRunId = null, System.Collections.Generic.IReadOnlyList<string!>? checkedEntryIds = null) -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint!
LM.App.Wpf.Services.Review.Design.StageBlueprint
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageBlueprint(string! stageId, string! name, LM.Review.Core.Models.ReviewStageType stageType, int primaryReviewers, int secondaryReviewers, bool requiresConsensus, int minimumAgreements, bool escalateOnDisagreement, LM.Review.Core.Models.StageDisplayProfile! displayProfile) -> void
LM.App.Wpf.Services.Review.Design.StageBlueprint.EscalateOnDisagreement.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.MinimumAgreements.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.PrimaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.RequiresConsensus.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.SecondaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageId.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.Services.Review.Design.StageBlueprint.DisplayProfile.get -> LM.Review.Core.Models.StageDisplayProfile!
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher.Show(string! entryId, string! pdfAbsolutePath, string! pdfHash) -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.AddSelectionToFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.MoveFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RemoveSelectionFromFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ItemsView.get -> System.ComponentModel.ICollectionView!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.LitSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.SavedSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SavedSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeletePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.LoadPresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenamePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.LibraryViewModel.AllTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.LibraryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.LitSearchOrganizer.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LoadCollectionEntriesAsync(string! collectionId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.OpenPdfAnnotationsCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.LibraryViewModel.RefreshTagsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.ToggleBlacklistCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationTypeDisplay.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Dispose() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.HighlightBrush.get -> System.Windows.Media.Brush!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.PdfAnnotationColorCommandParameter() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior.CollectionTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior.LitSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter
LM.App.Wpf.Views.Converters.EnumEqualsConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.EnumEqualsConverter() -> void
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.InverseBooleanToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.AnnotationColorParameterConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.Convert(object?[]! values, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.ConvertBack(object? value, System.Type![]! targetTypes, object? parameter, System.Globalization.CultureInfo! culture) -> object?[]!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NullOrEmptyToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList
LM.App.Wpf.Views.Pdf.PdfAnnotationList.PdfAnnotationList() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow
LM.App.Wpf.Views.PdfViewerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow.PdfViewerWindow() -> void
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.PdfViewerHostObject(LM.App.Wpf.Views.PdfViewer! owner) -> void
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogCloseRequestedEventArgs(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogResult.get -> bool?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.CloseRequested -> System.EventHandler<LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs!>?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.DialogViewModelBase() -> void
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.RequestClose(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.IDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.WpfDialogService(System.IServiceProvider! services) -> void
LM.App.Wpf.Common.ILibraryPresetPrompt
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Common.IClipboardService
LM.App.Wpf.Common.IClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.ClipboardService
LM.App.Wpf.Common.ClipboardService.ClipboardService() -> void
LM.App.Wpf.Common.ClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.IFileExplorerService
LM.App.Wpf.Common.IFileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.FileExplorerService
LM.App.Wpf.Common.FileExplorerService.FileExplorerService() -> void
LM.App.Wpf.Common.FileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.ISearchSavePrompt
LM.App.Wpf.Common.ISearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Common.SearchSavePromptContext
LM.App.Wpf.Common.SearchSavePromptContext.Database.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.From.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.Query.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.SearchSavePromptContext(string! Query, LM.Core.Models.SearchDatabase Database, System.DateTime? From, System.DateTime? To, string! DefaultName, string! DefaultNotes, System.Collections.Generic.IReadOnlyList<string!>! DefaultTags) -> void
LM.App.Wpf.Common.SearchSavePromptContext.Database.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.SearchSavePromptContext.From.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.Query.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.To.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.To.init -> void
LM.App.Wpf.Common.SearchSavePromptResult
LM.App.Wpf.Common.SearchSavePromptResult.Name.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Notes.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Tags.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.SearchSavePromptResult(string! Name, string! Notes, string! Tags) -> void
LM.App.Wpf.Common.SearchSavePromptResult.Name.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Notes.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Tags.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSaveResult
LM.App.Wpf.Common.LibraryPresetSaveResult.LibraryPresetSaveResult(string! Name) -> void
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.get -> bool
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.LibraryPresetSelectionContext(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! Presets, bool AllowLoad, string! Title) -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.LibraryPresetSelectionResult(string? SelectedPresetId, System.Collections.Generic.IReadOnlyList<string!>! DeletedPresetIds) -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.get -> string?
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.init -> void
LM.App.Wpf.Common.LibraryPresetSummary
LM.App.Wpf.Common.LibraryPresetSummary.Id.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Id.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.LibraryPresetSummary(string! Id, string! Name, System.DateTime SavedUtc) -> void
LM.App.Wpf.Common.LibraryPresetSummary.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.get -> System.DateTime
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.init -> void
LM.App.Wpf.Common.RelayCommand
LM.App.Wpf.Common.RelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.RelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.RelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.RelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.RelayCommand.RelayCommand(System.Action<object?>! exec, System.Func<object?, bool>? can = null) -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.get -> bool
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.init -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.get -> string?
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.init -> void
LM.App.Wpf.Common.Dialogs.FolderPickerOptions
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.get -> string?
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.init -> void
LM.App.Wpf.Common.Dialogs.IDialogService
LM.App.Wpf.Common.Dialogs.IDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.StringJoinConverter
LM.App.Wpf.Common.StringJoinConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.StringJoinConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.AttachmentGlyphToIconConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.AttachmentGlyphToDescriptionConverter() -> void
LM.App.Wpf.Common.ViewModelBase
LM.App.Wpf.Common.ViewModelBase.ViewModelBase() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Id.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.get -> int
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PdfAnnotation(string! id, string! title) -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.get -> System.Windows.Media.Imaging.BitmapImage?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.Annotations.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Pdf.PdfAnnotation!>!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.ChangeAnnotationColorCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.CopyAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DocumentSource.get -> System.Uri?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.HandleAnnotationSelectionAsync(LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.LoadPdfCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfHash.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfViewerViewModel(LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.App.Wpf.Services.IUserContext! userContext, LM.Core.Abstractions.IPdfAnnotationPreviewStorage! previewStorage, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.Common.IClipboardService! clipboard) -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.RecordAnnotationChangeCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.WebViewBridge.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DeleteAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.Library.LibraryFilterPreset
LM.App.Wpf.Library.LibraryFilterPreset.LibraryFilterPreset() -> void
LM.App.Wpf.Library.LibraryFilterPreset.Id.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Id.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.Name.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Name.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.get -> System.DateTime
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.get -> int
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.State.get -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.Library.LibraryFilterPreset.State.set -> void
LM.App.Wpf.Library.LibraryFilterPresetStore
LM.App.Wpf.Library.LibraryFilterPresetStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.MovePresetAsync(string! presetId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.LibraryFilterPresetStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.ListPresetsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.LibraryFilterPreset!>!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, string? targetFolderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetByIdAsync(string! presetId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
const LM.App.Wpf.Library.Collections.LibraryCollectionFolder.RootId = "collections-root" -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionEntry!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile
LM.App.Wpf.Library.Collections.LibraryCollectionFile.LibraryCollectionFile() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.get -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder?
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.get -> int
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.EnumerateDescendants() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionEntry!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.LibraryCollectionFolder() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.LibraryCollectionMetadata() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore
LM.App.Wpf.Library.Collections.LibraryCollectionStore.AddEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.CreateFolderAsync(string? parentFolderId, string! name, string! createdBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.DeleteFolderAsync(string! folderId, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.LibraryCollectionStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RemoveEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RenameFolderAsync(string! folderId, string! newName, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryPresetFolder
LM.App.Wpf.Library.LibraryPresetFolder.Clone() -> LM.App.Wpf.Library.LibraryPresetFolder!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Id.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Id.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.LibraryPresetFolder() -> void
LM.App.Wpf.Library.LibraryPresetFolder.Name.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Name.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Presets.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryFilterPreset!>!
LM.App.Wpf.Library.LibraryPresetFolder.Presets.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.get -> int
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.set -> void
LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem
LM.App.Wpf.Library.LibraryPresetTreeItem.Folder.get -> LM.App.Wpf.Library.LibraryPresetFolder?
LM.App.Wpf.Library.LibraryPresetTreeItem.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem(LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder, LM.App.Wpf.Library.LibraryPresetFolder? folder, LM.App.Wpf.Library.LibraryFilterPreset? preset) -> void
LM.App.Wpf.Library.LibraryPresetTreeItem.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset?
LM.App.Wpf.Library.LibraryPresetTreeItem.SortOrder.get -> int
LM.App.Wpf.Library.ILibraryEntryEditor
LM.App.Wpf.Library.ILibraryEntryEditor.EditEntryAsync(LM.Core.Models.Entry! entry) -> System.Threading.Tasks.Task<System.Boolean>!
LM.App.Wpf.Library.LibraryFilterState
LM.App.Wpf.Library.LibraryFilterState.LibraryFilterState() -> void
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.get -> bool
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.set -> void
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateFrom.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateFrom.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateTo.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateTo.set -> void
LM.App.Wpf.Library.LibraryFilterState.SortKey.get -> string?
LM.App.Wpf.Library.LibraryFilterState.SortKey.set -> void
LM.App.Wpf.Library.LibraryFilterState.Tags.set -> void
LM.App.Wpf.ViewModels.AddPipeline
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddViewModel
LM.App.Wpf.ViewModels.AddViewModel.AddFilesCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.ViewModels.WatchedFolderScanner? scanner = null, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore? watchedFolderSettings = null, LM.App.Wpf.ViewModels.StagingListViewModel? stagingList = null, LM.App.Wpf.ViewModels.WatchedFoldersViewModel? watchedFolders = null, LM.App.Wpf.Common.Dialogs.IDialogService? dialogService = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.BulkAddFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ClearCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.CommitSelectedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.AddViewModel.Current.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.AddViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.AddViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.AddViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.AddViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.AddViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.AddViewModel.ReviewStagedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Staging.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.AddViewModel.StagingListViewModel.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFolders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFoldersViewModel.get -> LM.App.Wpf.ViewModels.WatchedFoldersViewModel!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.LibraryPresetPickerDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Presets.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.SelectedPresetId.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.EntryId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookAbsolutePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookRelativePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.DisplayLabel.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.ExecutedBy.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.Owner.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.TotalHits.get -> int
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.ConfirmCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.Entries.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.LitSearchRunPickerViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.LibraryPresetSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.set -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Initialize(LM.App.Wpf.Common.SearchSavePromptContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultNotes.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultTags.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.SearchSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingEditorViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingList.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.SelectedWorkspacePath.get -> string?
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.get -> bool
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.WorkspaceChooserViewModel(LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.CanAcceptFileDrop(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleFileDropAsync(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibrarySearchResult
LM.App.Wpf.ViewModels.LibrarySearchResult.Entry.get -> LM.Core.Models.Entry!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasAttachments.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasDoi.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasIdentifiers.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasInternalId.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasLinks.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNct.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPmid.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasRelations.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasSource.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasUserNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.Highlight.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.HighlightDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.IsFullText.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.LibrarySearchResult(LM.Core.Models.Entry! entry, double? score, string? highlight) -> void
LM.App.Wpf.ViewModels.LibrarySearchResult.Score.get -> double?
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentGlyphKind.get -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.TitleSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.YearPresenceSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearDescendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearAscendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SourceSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TypeSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedOnSortKey.get -> System.DateTime
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedBySortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.InternalIdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.DoiSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.PmidSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.NctSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AuthorsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TagsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IsInternalSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SnippetSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreSortKey.get -> double
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.None = 0 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Pdf = 1 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Document = 2 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Presentation = 3 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Generic = 4 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.Library.LibraryLinkItem
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.LibraryLinkItem(string! DisplayText, string! Target, LM.App.Wpf.ViewModels.Library.LinkItemKind Kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.get -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.init -> void
LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Url = 0 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.File = 1 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Folder = 2 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.RunAndBasics = 0 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Metadata = 1 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Workflow = 2 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Summary = 3 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.ProjectEditorStepDescriptor(LM.App.Wpf.ViewModels.Review.ProjectEditorStep Step, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.ReviewTemplateOption(LM.Review.Core.Models.ReviewTemplateKind Kind, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectEditorViewModel() -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.AddStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntryCount.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntrySummary.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ErrorMessage.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.HookRelativePath.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Initialize(LM.App.Wpf.Services.Review.Design.ProjectBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchEntryId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchRunId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageDownCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageUpCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.RemoveStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Result.get -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SaveCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.get -> LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.StageTypes.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStageType>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Stages.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Steps.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.TemplateOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStep.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepDescriptor.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepIndex.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsSummaryStep.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.get -> LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateKind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.NextCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.BackCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ChangeRunCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ConfigureRunReloadHandler(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.App.Wpf.Services.Review.Design.ProjectBlueprint?>!>! handler) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.StageDisplayOptionViewModel(LM.Review.Core.Models.StageContentArea area, bool isSelected) -> void
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Area.get -> LM.Review.Core.Models.StageContentArea
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Description.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.get -> bool
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageBlueprintViewModel(LM.App.Wpf.Services.Review.Design.StageBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageId.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TotalReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.DisplayOptions.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel!>!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TryBuild(out LM.App.Wpf.Services.Review.Design.StageBlueprint! stage, out string? errorMessage) -> bool
LM.App.Wpf.ViewModels.StagingListViewModel
LM.App.Wpf.ViewModels.StagingListViewModel.AddStagedItemsAsync(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Clear() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.CommitSelectedAsync(System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.StagingListViewModel.Current.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.StagingListViewModel.HasItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.HasSelectedItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.StagingListViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.StagingListViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingListViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.StagingListViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.SetCommandGuard(System.Func<System.Func<System.Threading.Tasks.Task!>!, System.Threading.Tasks.Task!>! guard) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.UpdateParentBusy(bool isBusy) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.WatchedFoldersViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList, LM.App.Wpf.ViewModels.WatchedFolderScanner! scanner, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore! settingsStore, LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.WatchedFolder
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.get -> bool
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.LastScanDisplay.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.LastScanUtc.get -> System.DateTimeOffset?
LM.App.Wpf.ViewModels.WatchedFolder.LastScanWasUnchanged.get -> bool?
LM.App.Wpf.ViewModels.WatchedFolder.Path.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.Path.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFolder.ResetScanState() -> void
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusLabel.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusToolTip.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.WatchedFolder() -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(string! path) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig
LM.App.Wpf.ViewModels.WatchedFolderConfig.ApplyState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.ClearState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFolderConfig.CreateSnapshot() -> LM.Core.Models.WatchedFolderSettings!
LM.App.Wpf.ViewModels.WatchedFolderConfig.Load(LM.Core.Models.WatchedFolderSettings! settings) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.StoreState(LM.App.Wpf.ViewModels.WatchedFolder! folder, LM.Core.Models.WatchedFolderState! state) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.WatchedFolderConfig() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Folder.get -> LM.App.Wpf.ViewModels.WatchedFolder!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Items.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.WatchedFolderScanEventArgs(LM.App.Wpf.ViewModels.WatchedFolder! folder, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner
LM.App.Wpf.ViewModels.WatchedFolderScanner.Attach(LM.App.Wpf.ViewModels.WatchedFolderConfig! config) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.ItemsStaged -> System.EventHandler<LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs!>?
LM.App.Wpf.ViewModels.WatchedFolderScanner.ScanAsync(LM.App.Wpf.ViewModels.WatchedFolder? folder, System.Threading.CancellationToken ct, bool force = false) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFolderScanner.WatchedFolderScanner(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.IAddPipeline
LM.App.Wpf.ViewModels.IAddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.IAddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.Library.ILibraryDocumentService
LM.App.Wpf.Library.ILibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.ILibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.LibraryDocumentService
LM.App.Wpf.Library.LibraryDocumentService.LibraryDocumentService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.IAttachmentMetadataPrompt
LM.App.Wpf.Library.IAttachmentMetadataPrompt.RequestMetadataAsync(LM.App.Wpf.Library.AttachmentMetadataPromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.AttachmentMetadataPromptResult?>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.get -> string!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.AttachmentMetadataPromptContext(string! EntryTitle, System.Collections.Generic.IReadOnlyList<string!>! FilePaths) -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>!
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult.AttachmentMetadataPromptResult(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>! Attachments) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection
LM.App.Wpf.Library.AttachmentMetadataSelection.AttachmentMetadataSelection(string! SourcePath, string! Title, LM.Core.Models.AttachmentKind Kind, System.Collections.Generic.IReadOnlyList<string!>! Tags) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.get -> LM.Core.Models.AttachmentKind
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.init -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LibraryFiltersViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! presetStore, LM.App.Wpf.Common.ILibraryPresetPrompt! presetPrompt, LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.SavedSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.get -> string
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedSearchPresetViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, LM.App.Wpf.Library.LibraryFilterPreset! preset, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Summary.get -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.ToSummary() -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.SavedSearchTreeChangedEventArgs(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! presets) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.SavedSearchTreeViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.TreeChanged -> System.EventHandler<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs!>?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ClearCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyPresetAsync(LM.App.Wpf.Common.LibraryPresetSummary! summary, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyState(LM.App.Wpf.Library.LibraryFilterState! state) -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.CaptureState() -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTooltip.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTokens.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.BuildFullTextQuery(string! normalizedQuery) -> LM.Core.Models.Search.FullTextSearchQuery!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.HasSavedPresets.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.GetNormalizedFullTextQuery() -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.NavigationRoots.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RefreshNavigationAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedPresets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedSearches.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleLeftPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleRightPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SortOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RemoveTagCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand<string?>!
LM.App.Wpf.ViewModels.Library.LibrarySortOption
LM.App.Wpf.ViewModels.Library.LibrarySortOption.LibrarySortOption(string! key, string! displayName) -> void
LM.App.Wpf.ViewModels.Library.LibrarySortOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOptions
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.Category = 0 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.SavedSearch = 1 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchEntry = 2 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchRun = 3 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.LibraryNavigationNodeViewModel(string! name, LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.HasChildren.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Kind.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.get -> object?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.init -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.LibraryColumnOption(string! key, string! displayName, bool isVisible) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LibraryColumnVisibility() -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LoadFrom(System.Collections.Generic.IReadOnlyDictionary<string!, bool>! source) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.Snapshot() -> System.Collections.Generic.IReadOnlyDictionary<string!, bool>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LibraryResultsViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.App.Wpf.Library.ILibraryEntryEditor! entryEditor, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.Library.IAttachmentMetadataPrompt! attachmentPrompt, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.Core.Abstractions.IHasher! hasher, LM.App.Wpf.Services.Pdf.IPdfViewerLauncher! pdfViewerLauncher) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadFullTextResultsAsync(System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.FullTextSearchHit!>! hits, System.Func<LM.Core.Models.Entry!, bool>? entryFilter = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadMetadataResults(System.Collections.Generic.IEnumerable<LM.Core.Models.Entry!>! entries) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResetSortForSearch(LM.App.Wpf.ViewModels.Library.LibrarySortOption! defaultOption) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridLoaded(System.Windows.RoutedEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridSorting(System.Windows.Controls.DataGridSortingEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.MarkAsMetadataResults() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResultsAreFullText.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.get -> LM.App.Wpf.ViewModels.LibrarySearchResult?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LinkItems.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryLinkItem!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.EditEntryAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelection.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedItems.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectionChanged -> System.EventHandler?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelectedAbstract.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ToggleBlacklistAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.get -> int
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.LibraryCollectionFolderViewModel(LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! tree, string! id, string! name, LM.App.Wpf.Library.Collections.LibraryCollectionMetadata! metadata) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.LibraryCollectionsViewModel(LM.App.Wpf.Library.Collections.LibraryCollectionStore! store, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPrimaryAttachment.get -> bool
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.LibrarySearchQueryBox() -> void
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.get -> string!
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel
LM.App.Wpf.ViewModels.LibraryViewModel.Filters.get -> LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LibraryViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFullTextSearchService! fullTextSearch, LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel! filters, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.Configuration.IUserPreferencesStore! preferencesStore, LM.App.Wpf.Common.IClipboardService! clipboard, LM.App.Wpf.Common.IFileExplorerService! fileExplorer, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! litSearchOrganizer, LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! collections, LM.App.Wpf.Library.Collections.LibraryCollectionStore! collectionStore) -> void
LM.App.Wpf.ViewModels.LibraryViewModel.Results.get -> LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.Collections.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibraryColumnOption!>!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnVisibility.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility!
LM.App.Wpf.ViewModels.SearchItemViewModel
LM.App.Wpf.ViewModels.SearchItemViewModel.Header.get -> string!
LM.App.Wpf.ViewModels.SearchItemViewModel.SearchItemViewModel(string! header, LM.App.Wpf.ViewModels.LibraryViewModel! vm) -> void
LM.App.Wpf.ViewModels.SearchItemViewModel.Vm.get -> LM.App.Wpf.ViewModels.LibraryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel
LM.App.Wpf.ViewModels.SearchViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.SearchViewModel.ExportSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.From.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.LoadSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRuns.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.PreviousSearchSummary!>!
LM.App.Wpf.ViewModels.SearchViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRunsCount.get -> int
LM.App.Wpf.ViewModels.SearchViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.SearchViewModel.Query.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.get -> LM.Core.Models.SearchHit?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RunSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SaveSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleLeftPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleRightPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SearchViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IWorkSpaceService! ws, LM.App.Wpf.Common.ISearchSavePrompt! savePrompt, LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel! providers, LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel! history, LM.Infrastructure.Search.PubMedSearchProvider! pubMedProvider, LM.Core.Abstractions.Configuration.IUserPreferencesStore? preferencesStore = null) -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.get -> LM.App.Wpf.ViewModels.PreviousSearchSummary?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.StartPreviousRunCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ShowRunDetailsCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleFavoriteCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.To.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.History.get -> LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel.Providers.get -> LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecordExecutionAsync(LM.Core.Models.Search.SearchExecutionResult! result, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.SearchHistoryViewModel(LM.Core.Abstractions.Configuration.ISearchHistoryStore! store) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.ExecuteSearchAsync() -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.RunSearchCommand.get -> LM.App.Wpf.Common.AsyncRelayCommand!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchExecuted -> System.EventHandler<LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs!>?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchProvidersViewModel(LM.Core.Abstractions.Search.ISearchExecutionService! executionService) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.set -> void
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.Result.get -> LM.Core.Models.Search.SearchExecutionResult!
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.SearchExecutedEventArgs(LM.Core.Models.Search.SearchExecutionResult! result) -> void
LM.App.Wpf.ViewModels.PreviousSearchSummary
LM.App.Wpf.ViewModels.PreviousSearchSummary.DisplayName.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.EntryId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.FavoriteRunId.get -> string?
LM.App.Wpf.ViewModels.PreviousSearchSummary.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastRunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.Provider.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.Query.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunCount.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TotalHits.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TagsDisplay.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption
LM.App.Wpf.ViewModels.SearchDatabaseOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption.SearchDatabaseOption(LM.Core.Models.SearchDatabase value, string! displayName) -> void
LM.App.Wpf.ViewModels.SearchDatabaseOption.Value.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.StagingItem
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.get -> LM.HubSpoke.Models.ArticleHook?
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.DisplayName.get -> string?
LM.App.Wpf.ViewModels.StagingItem.DisplayName.set -> void
LM.App.Wpf.ViewModels.StagingItem.Doi.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Doi.set -> void
LM.App.Wpf.ViewModels.StagingItem.FilePath.get -> string!
LM.App.Wpf.ViewModels.StagingItem.FilePath.set -> void
LM.App.Wpf.ViewModels.StagingItem.Internal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Internal.set -> void
LM.App.Wpf.ViewModels.StagingItem.InternalId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.InternalId.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsDuplicate.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsNearMatch.get -> bool
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Notes.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Notes.set -> void
LM.App.Wpf.ViewModels.StagingItem.OriginalFileName.get -> string!
LM.App.Wpf.ViewModels.StagingItem.Pmid.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Pmid.set -> void
LM.App.Wpf.ViewModels.StagingItem.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingItem.Selected.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Selected.set -> void
LM.App.Wpf.ViewModels.StagingItem.Similarity.get -> double
LM.App.Wpf.ViewModels.StagingItem.Similarity.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Source.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Source.set -> void
LM.App.Wpf.ViewModels.StagingItem.StagingItem() -> void
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.get -> string!
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.set -> void
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.Title.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Title.set -> void
LM.App.Wpf.ViewModels.StagingItem.Type.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingItem.Type.set -> void
LM.App.Wpf.ViewModels.StagingItem.Year.get -> int?
LM.App.Wpf.ViewModels.StagingItem.Year.set -> void
LM.App.Wpf.Views.AddView
LM.App.Wpf.Views.Behaviors.FileDropRequest
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.get -> System.Windows.DragEventArgs!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.get -> object?
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.FileDropRequest(System.Collections.Generic.IReadOnlyList<string!>! Paths, object? DropTarget, System.Windows.DragEventArgs! Args) -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.init -> void
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior.SavedSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.AddView.AddView() -> void
LM.App.Wpf.Views.AddView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog
LM.App.Wpf.Views.LibraryPresetPickerDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.LibraryPresetPickerDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel!
LM.App.Wpf.Views.LibraryPresetPrompt.LibraryPresetPrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.InitializeComponent() -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.AttachmentMetadataDialog(LM.App.Wpf.ViewModels.Library.AttachmentMetadataDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog
LM.App.Wpf.Views.LibraryPresetSaveDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.LibraryPresetSaveDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel!
LM.App.Wpf.Views.LibraryView
LM.App.Wpf.Views.LibraryView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryView.LibraryView() -> void
LM.App.Wpf.Views.PdfViewer
LM.App.Wpf.Views.PdfViewer.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewer.PdfViewer() -> void
LM.App.Wpf.Views.Library.TagTokenSelector
LM.App.Wpf.Views.Library.TagTokenSelector.InitializeComponent() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.FilteredSuggestions.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>?
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.set -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagTokenSelector() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.get -> System.Collections.Generic.IEnumerable<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.set -> void
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTagsProperty
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabularyProperty
LM.App.Wpf.Views.LibraryPresetPrompt
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Views.Review.Controls.DecisionBadge
LM.App.Wpf.Views.Review.Controls.DecisionBadge.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.DecisionBadge() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.get -> LM.Review.Core.Models.ScreeningStatus
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.set -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.ExtractionFieldEditor() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.ScreeningQueueControl() -> void
LM.App.Wpf.Views.Review.ReviewView
LM.App.Wpf.Views.Review.ReviewView.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ReviewView.ReviewView() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.LitSearchRunPickerWindow(LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel!
LM.App.Wpf.Views.Review.ProjectEditorWindow
LM.App.Wpf.Views.Review.ProjectEditorWindow.Attach(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.ProjectEditorWindow() -> void
LM.App.Wpf.Views.SearchSavePrompt
LM.App.Wpf.Views.SearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Views.SearchSavePrompt.SearchSavePrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.DataGridColumnVisibilityBehavior() -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.set -> void
LM.App.Wpf.Views.SearchView
LM.App.Wpf.Views.SearchView.InitializeComponent() -> void
LM.App.Wpf.Views.SearchView.SearchView() -> void
LM.App.Wpf.Views.ShellWindow
LM.App.Wpf.Views.ShellWindow.InitializeComponent() -> void
LM.App.Wpf.Views.ShellWindow.LoadWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.NewWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.ShellWindow() -> void
LM.App.Wpf.Views.StagingEditorWindow
LM.App.Wpf.Views.StagingEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.StagingEditorWindow.StagingEditorWindow(LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel! viewModel) -> void
override LM.App.Wpf.ViewModels.Library.LibrarySortOption.ToString() -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Name.get -> string!
override LM.App.Wpf.Views.Library.AttachmentMetadataDialog.OnClosed(System.EventArgs! e) -> void
LM.App.Wpf.Views.WorkspaceChooser
LM.App.Wpf.Views.WorkspaceChooser.InitializeComponent() -> void
LM.App.Wpf.Views.WorkspaceChooser.SelectedWorkspacePath.get -> string?
LM.App.Wpf.Views.WorkspaceChooser.WorkspaceChooser(LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel! viewModel) -> void
LM.App.Wpf.Views.WorkspaceChooser.Configure(System.Action<LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel!>! configure) -> void
override LM.App.Wpf.App.OnExit(System.Windows.ExitEventArgs! e) -> void
override LM.App.Wpf.App.OnStartup(System.Windows.StartupEventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetPickerDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetSaveDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.StagingEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.WorkspaceChooser.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.ProjectEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.OnClosed(System.EventArgs! e) -> void
static LM.App.Wpf.App.Main() -> void
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.All.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.NewestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.OldestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleAscending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleDescending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Clone() -> LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.LitSearchOrganizerStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveEntryAsync(string! entryId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.SyncEntriesAsync(System.Collections.Generic.IEnumerable<string!>! entryIds, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema.CurrentVersion -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.LitSearchEntryViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! title, string? query) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Query.get -> string?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.CanDelete.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsRoot.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.LitSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! name, bool isRoot) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.LitSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.LitSearchRunViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! runId, string! label, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel! parent) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.LitSearchTreeViewModel(LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt, LM.Core.Abstractions.IEntryStore! entryStore, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
---------- LM.App.Wpf ----------
#nullable enable
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.ColumnKeyProperty -> System.Windows.DependencyProperty!
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.GetColumnKey(System.Windows.DependencyObject! element) -> string?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.SetColumnKey(System.Windows.DependencyObject! element, string? value) -> void
#nullable enable
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Id.get -> string!
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.IsDraggable.get -> bool
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Name.get -> string!
abstract LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.IsDraggable.get -> bool
const LM.App.Wpf.Library.LibraryPresetFolder.RootId = "root" -> string!
const LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.RootId = "root" -> string!
const LM.App.Wpf.ViewModels.StagingItem.DuplicateThreshold = 0.999 -> double
const LM.App.Wpf.ViewModels.StagingItem.NearThreshold = 0.75 -> double
LM.App.Wpf.App
LM.App.Wpf.App.App() -> void
LM.App.Wpf.App.InitializeComponent() -> void
LM.App.Wpf.Common.AsyncRelayCommand
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<object?, System.Threading.Tasks.Task!>! execute, System.Func<object?, bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<System.Threading.Tasks.Task!>! execute, System.Func<bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.AsyncRelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.AsyncRelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.AsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.IAsyncRelayCommand
LM.App.Wpf.Common.IAsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter
LM.App.Wpf.Common.BooleanToOpacityConverter.BooleanToOpacityConverter() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.set -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.set -> void
LM.App.Wpf.Common.Converters.ProjectEditorConverters
LM.App.Wpf.Common.Converters.ProjectEditorConverters.StageSelectionEquality.get -> System.Windows.Data.IMultiValueConverter!
LM.App.Wpf.Common.LibraryPresetSaveContext.LibraryPresetSaveContext(string! DefaultName, System.Collections.Generic.IReadOnlyCollection<string!>! ExistingNames, string! Title = "Save Library Preset", string! Prompt = "Name this filter preset.") -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.LibraryCollectionEntry() -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.DeletePresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenamePresetAsync(string! presetId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
LM.App.Wpf.Library.LibraryFilterState.Tags.get -> string![]!
LM.App.Wpf.Library.LibraryPresetFolder.EnumerateChildren() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.LibraryPresetTreeItem>!
LM.App.Wpf.Library.LibraryPresetNodeKind.Folder = 0 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetNodeKind.Preset = 1 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.LitSearchOrganizerEntry() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.LitSearchOrganizerFolder() -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectBlueprint(string! projectId, string! name, System.DateTimeOffset createdAtUtc, string! createdBy, string! litSearchEntryId, string! litSearchRunId, System.Collections.Generic.IReadOnlyList<string!>! checkedEntryIds, string? hookRelativePath, LM.Review.Core.Models.ReviewTemplateKind template, string! metadataNotes, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>! stages) -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CheckedEntryIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedAtUtc.get -> System.DateTimeOffset
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedBy.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.HookRelativePath.get -> string?
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchEntryId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchRunId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Template.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.MetadataNotes.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Stages.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.With(string? name = null, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>? stages = null, LM.Review.Core.Models.ReviewTemplateKind? template = null, string? metadataNotes = null, string? litSearchEntryId = null, string? litSearchRunId = null, System.Collections.Generic.IReadOnlyList<string!>? checkedEntryIds = null) -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint!
LM.App.Wpf.Services.Review.Design.StageBlueprint
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageBlueprint(string! stageId, string! name, LM.Review.Core.Models.ReviewStageType stageType, int primaryReviewers, int secondaryReviewers, bool requiresConsensus, int minimumAgreements, bool escalateOnDisagreement, LM.Review.Core.Models.StageDisplayProfile! displayProfile) -> void
LM.App.Wpf.Services.Review.Design.StageBlueprint.EscalateOnDisagreement.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.MinimumAgreements.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.PrimaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.RequiresConsensus.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.SecondaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageId.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.Services.Review.Design.StageBlueprint.DisplayProfile.get -> LM.Review.Core.Models.StageDisplayProfile!
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher.Show(string! entryId, string! pdfAbsolutePath, string! pdfHash) -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.AddSelectionToFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.MoveFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RemoveSelectionFromFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ItemsView.get -> System.ComponentModel.ICollectionView!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.LitSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.SavedSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.IsRoot.get -> bool
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SavedSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeletePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.LoadPresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenamePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.LibraryViewModel.AllTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.LibraryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.LitSearchOrganizer.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LoadCollectionEntriesAsync(string! collectionId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.OpenPdfAnnotationsCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.LibraryViewModel.RefreshTagsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.ToggleBlacklistCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationTypeDisplay.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Dispose() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.HighlightBrush.get -> System.Windows.Media.Brush!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.PdfAnnotationColorCommandParameter() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior.CollectionTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior.LitSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter
LM.App.Wpf.Views.Converters.EnumEqualsConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.EnumEqualsConverter() -> void
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.InverseBooleanToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.AnnotationColorParameterConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.Convert(object?[]! values, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.ConvertBack(object? value, System.Type![]! targetTypes, object? parameter, System.Globalization.CultureInfo! culture) -> object?[]!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NullOrEmptyToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList
LM.App.Wpf.Views.Pdf.PdfAnnotationList.PdfAnnotationList() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow
LM.App.Wpf.Views.PdfViewerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow.PdfViewerWindow() -> void
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.PdfViewerHostObject(LM.App.Wpf.Views.PdfViewer! owner) -> void
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogCloseRequestedEventArgs(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogResult.get -> bool?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.CloseRequested -> System.EventHandler<LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs!>?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.DialogViewModelBase() -> void
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.RequestClose(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.IDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.WpfDialogService(System.IServiceProvider! services) -> void
LM.App.Wpf.Common.ILibraryPresetPrompt
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Common.IClipboardService
LM.App.Wpf.Common.IClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.ClipboardService
LM.App.Wpf.Common.ClipboardService.ClipboardService() -> void
LM.App.Wpf.Common.ClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.IFileExplorerService
LM.App.Wpf.Common.IFileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.FileExplorerService
LM.App.Wpf.Common.FileExplorerService.FileExplorerService() -> void
LM.App.Wpf.Common.FileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.ISearchSavePrompt
LM.App.Wpf.Common.ISearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Common.SearchSavePromptContext
LM.App.Wpf.Common.SearchSavePromptContext.Database.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.From.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.Query.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.SearchSavePromptContext(string! Query, LM.Core.Models.SearchDatabase Database, System.DateTime? From, System.DateTime? To, string! DefaultName, string! DefaultNotes, System.Collections.Generic.IReadOnlyList<string!>! DefaultTags) -> void
LM.App.Wpf.Common.SearchSavePromptContext.Database.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.SearchSavePromptContext.From.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.Query.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.To.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.To.init -> void
LM.App.Wpf.Common.SearchSavePromptResult
LM.App.Wpf.Common.SearchSavePromptResult.Name.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Notes.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Tags.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.SearchSavePromptResult(string! Name, string! Notes, string! Tags) -> void
LM.App.Wpf.Common.SearchSavePromptResult.Name.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Notes.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Tags.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSaveResult
LM.App.Wpf.Common.LibraryPresetSaveResult.LibraryPresetSaveResult(string! Name) -> void
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.get -> bool
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.LibraryPresetSelectionContext(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! Presets, bool AllowLoad, string! Title) -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.LibraryPresetSelectionResult(string? SelectedPresetId, System.Collections.Generic.IReadOnlyList<string!>! DeletedPresetIds) -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.get -> string?
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.init -> void
LM.App.Wpf.Common.LibraryPresetSummary
LM.App.Wpf.Common.LibraryPresetSummary.Id.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Id.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.LibraryPresetSummary(string! Id, string! Name, System.DateTime SavedUtc) -> void
LM.App.Wpf.Common.LibraryPresetSummary.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.get -> System.DateTime
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.init -> void
LM.App.Wpf.Common.RelayCommand
LM.App.Wpf.Common.RelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.RelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.RelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.RelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.RelayCommand.RelayCommand(System.Action<object?>! exec, System.Func<object?, bool>? can = null) -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.get -> bool
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.init -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.get -> string?
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.init -> void
LM.App.Wpf.Common.Dialogs.FolderPickerOptions
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.get -> string?
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.init -> void
LM.App.Wpf.Common.Dialogs.IDialogService
LM.App.Wpf.Common.Dialogs.IDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.StringJoinConverter
LM.App.Wpf.Common.StringJoinConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.StringJoinConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.AttachmentGlyphToIconConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.AttachmentGlyphToDescriptionConverter() -> void
LM.App.Wpf.Common.ViewModelBase
LM.App.Wpf.Common.ViewModelBase.ViewModelBase() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Id.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.get -> int
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PdfAnnotation(string! id, string! title) -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.get -> System.Windows.Media.Imaging.BitmapImage?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.Annotations.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Pdf.PdfAnnotation!>!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.ChangeAnnotationColorCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.CopyAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DocumentSource.get -> System.Uri?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.HandleAnnotationSelectionAsync(LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.LoadPdfCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfHash.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfViewerViewModel(LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.App.Wpf.Services.IUserContext! userContext, LM.Core.Abstractions.IPdfAnnotationPreviewStorage! previewStorage, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.Common.IClipboardService! clipboard) -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.RecordAnnotationChangeCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.WebViewBridge.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DeleteAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.Library.LibraryFilterPreset
LM.App.Wpf.Library.LibraryFilterPreset.LibraryFilterPreset() -> void
LM.App.Wpf.Library.LibraryFilterPreset.Id.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Id.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.Name.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Name.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.get -> System.DateTime
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.get -> int
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.State.get -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.Library.LibraryFilterPreset.State.set -> void
LM.App.Wpf.Library.LibraryFilterPresetStore
LM.App.Wpf.Library.LibraryFilterPresetStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.MovePresetAsync(string! presetId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.LibraryFilterPresetStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.ListPresetsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.LibraryFilterPreset!>!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, string? targetFolderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetByIdAsync(string! presetId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
const LM.App.Wpf.Library.Collections.LibraryCollectionFolder.RootId = "collections-root" -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionEntry!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile
LM.App.Wpf.Library.Collections.LibraryCollectionFile.LibraryCollectionFile() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.get -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder?
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.get -> int
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.EnumerateDescendants() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionEntry!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.LibraryCollectionFolder() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.LibraryCollectionMetadata() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore
LM.App.Wpf.Library.Collections.LibraryCollectionStore.AddEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.CreateFolderAsync(string? parentFolderId, string! name, string! createdBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.DeleteFolderAsync(string! folderId, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.LibraryCollectionStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RemoveEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RenameFolderAsync(string! folderId, string! newName, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryPresetFolder
LM.App.Wpf.Library.LibraryPresetFolder.Clone() -> LM.App.Wpf.Library.LibraryPresetFolder!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Id.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Id.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.LibraryPresetFolder() -> void
LM.App.Wpf.Library.LibraryPresetFolder.Name.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Name.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Presets.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryFilterPreset!>!
LM.App.Wpf.Library.LibraryPresetFolder.Presets.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.get -> int
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.set -> void
LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem
LM.App.Wpf.Library.LibraryPresetTreeItem.Folder.get -> LM.App.Wpf.Library.LibraryPresetFolder?
LM.App.Wpf.Library.LibraryPresetTreeItem.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem(LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder, LM.App.Wpf.Library.LibraryPresetFolder? folder, LM.App.Wpf.Library.LibraryFilterPreset? preset) -> void
LM.App.Wpf.Library.LibraryPresetTreeItem.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset?
LM.App.Wpf.Library.LibraryPresetTreeItem.SortOrder.get -> int
LM.App.Wpf.Library.ILibraryEntryEditor
LM.App.Wpf.Library.ILibraryEntryEditor.EditEntryAsync(LM.Core.Models.Entry! entry) -> System.Threading.Tasks.Task<System.Boolean>!
LM.App.Wpf.Library.LibraryFilterState
LM.App.Wpf.Library.LibraryFilterState.LibraryFilterState() -> void
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.get -> bool
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.set -> void
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateFrom.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateFrom.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateTo.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateTo.set -> void
LM.App.Wpf.Library.LibraryFilterState.SortKey.get -> string?
LM.App.Wpf.Library.LibraryFilterState.SortKey.set -> void
LM.App.Wpf.Library.LibraryFilterState.Tags.set -> void
LM.App.Wpf.ViewModels.AddPipeline
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddViewModel
LM.App.Wpf.ViewModels.AddViewModel.AddFilesCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.ViewModels.WatchedFolderScanner? scanner = null, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore? watchedFolderSettings = null, LM.App.Wpf.ViewModels.StagingListViewModel? stagingList = null, LM.App.Wpf.ViewModels.WatchedFoldersViewModel? watchedFolders = null, LM.App.Wpf.Common.Dialogs.IDialogService? dialogService = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.BulkAddFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ClearCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.CommitSelectedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.AddViewModel.Current.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.AddViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.AddViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.AddViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.AddViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.AddViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.AddViewModel.ReviewStagedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Staging.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.AddViewModel.StagingListViewModel.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFolders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFoldersViewModel.get -> LM.App.Wpf.ViewModels.WatchedFoldersViewModel!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.LibraryPresetPickerDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Presets.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.SelectedPresetId.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.EntryId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookAbsolutePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookRelativePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.DisplayLabel.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.ExecutedBy.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.Owner.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.TotalHits.get -> int
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.ConfirmCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.Entries.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.LitSearchRunPickerViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.LibraryPresetSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.set -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Initialize(LM.App.Wpf.Common.SearchSavePromptContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultNotes.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultTags.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.SearchSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingEditorViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingList.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.SelectedWorkspacePath.get -> string?
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.get -> bool
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.WorkspaceChooserViewModel(LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.CanAcceptFileDrop(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleFileDropAsync(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibrarySearchResult
LM.App.Wpf.ViewModels.LibrarySearchResult.Entry.get -> LM.Core.Models.Entry!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasAttachments.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasDoi.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasIdentifiers.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasInternalId.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasLinks.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNct.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPmid.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasRelations.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasSource.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasUserNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.Highlight.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.HighlightDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.IsFullText.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.LibrarySearchResult(LM.Core.Models.Entry! entry, double? score, string? highlight) -> void
LM.App.Wpf.ViewModels.LibrarySearchResult.Score.get -> double?
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentGlyphKind.get -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.TitleSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.YearPresenceSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearDescendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearAscendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SourceSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TypeSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedOnSortKey.get -> System.DateTime
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedBySortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.InternalIdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.DoiSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.PmidSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.NctSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AuthorsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TagsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IsInternalSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SnippetSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreSortKey.get -> double
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.None = 0 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Pdf = 1 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Document = 2 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Presentation = 3 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Generic = 4 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.Library.LibraryLinkItem
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.LibraryLinkItem(string! DisplayText, string! Target, LM.App.Wpf.ViewModels.Library.LinkItemKind Kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.get -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.init -> void
LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Url = 0 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.File = 1 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Folder = 2 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.RunAndBasics = 0 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Metadata = 1 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Workflow = 2 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Summary = 3 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.ProjectEditorStepDescriptor(LM.App.Wpf.ViewModels.Review.ProjectEditorStep Step, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.ReviewTemplateOption(LM.Review.Core.Models.ReviewTemplateKind Kind, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectEditorViewModel() -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.AddStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntryCount.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntrySummary.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ErrorMessage.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.HookRelativePath.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Initialize(LM.App.Wpf.Services.Review.Design.ProjectBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchEntryId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchRunId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageDownCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageUpCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.RemoveStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Result.get -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SaveCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.get -> LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.StageTypes.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStageType>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Stages.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Steps.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.TemplateOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStep.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepDescriptor.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepIndex.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsSummaryStep.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.get -> LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateKind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.NextCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.BackCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ChangeRunCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ConfigureRunReloadHandler(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.App.Wpf.Services.Review.Design.ProjectBlueprint?>!>! handler) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.StageDisplayOptionViewModel(LM.Review.Core.Models.StageContentArea area, bool isSelected) -> void
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Area.get -> LM.Review.Core.Models.StageContentArea
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Description.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.get -> bool
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageBlueprintViewModel(LM.App.Wpf.Services.Review.Design.StageBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageId.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TotalReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.DisplayOptions.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel!>!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TryBuild(out LM.App.Wpf.Services.Review.Design.StageBlueprint! stage, out string? errorMessage) -> bool
LM.App.Wpf.ViewModels.StagingListViewModel
LM.App.Wpf.ViewModels.StagingListViewModel.AddStagedItemsAsync(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Clear() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.CommitSelectedAsync(System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.StagingListViewModel.Current.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.StagingListViewModel.HasItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.HasSelectedItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.StagingListViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.StagingListViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingListViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.StagingListViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.SetCommandGuard(System.Func<System.Func<System.Threading.Tasks.Task!>!, System.Threading.Tasks.Task!>! guard) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.UpdateParentBusy(bool isBusy) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.WatchedFoldersViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList, LM.App.Wpf.ViewModels.WatchedFolderScanner! scanner, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore! settingsStore, LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.WatchedFolder
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.get -> bool
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.LastScanDisplay.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.LastScanUtc.get -> System.DateTimeOffset?
LM.App.Wpf.ViewModels.WatchedFolder.LastScanWasUnchanged.get -> bool?
LM.App.Wpf.ViewModels.WatchedFolder.Path.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.Path.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFolder.ResetScanState() -> void
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusLabel.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusToolTip.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.WatchedFolder() -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(string! path) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig
LM.App.Wpf.ViewModels.WatchedFolderConfig.ApplyState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.ClearState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFolderConfig.CreateSnapshot() -> LM.Core.Models.WatchedFolderSettings!
LM.App.Wpf.ViewModels.WatchedFolderConfig.Load(LM.Core.Models.WatchedFolderSettings! settings) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.StoreState(LM.App.Wpf.ViewModels.WatchedFolder! folder, LM.Core.Models.WatchedFolderState! state) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.WatchedFolderConfig() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Folder.get -> LM.App.Wpf.ViewModels.WatchedFolder!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Items.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.WatchedFolderScanEventArgs(LM.App.Wpf.ViewModels.WatchedFolder! folder, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner
LM.App.Wpf.ViewModels.WatchedFolderScanner.Attach(LM.App.Wpf.ViewModels.WatchedFolderConfig! config) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.ItemsStaged -> System.EventHandler<LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs!>?
LM.App.Wpf.ViewModels.WatchedFolderScanner.ScanAsync(LM.App.Wpf.ViewModels.WatchedFolder? folder, System.Threading.CancellationToken ct, bool force = false) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFolderScanner.WatchedFolderScanner(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.IAddPipeline
LM.App.Wpf.ViewModels.IAddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.IAddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.Library.ILibraryDocumentService
LM.App.Wpf.Library.ILibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.ILibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.LibraryDocumentService
LM.App.Wpf.Library.LibraryDocumentService.LibraryDocumentService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.IAttachmentMetadataPrompt
LM.App.Wpf.Library.IAttachmentMetadataPrompt.RequestMetadataAsync(LM.App.Wpf.Library.AttachmentMetadataPromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.AttachmentMetadataPromptResult?>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.get -> string!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.AttachmentMetadataPromptContext(string! EntryTitle, System.Collections.Generic.IReadOnlyList<string!>! FilePaths) -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>!
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult.AttachmentMetadataPromptResult(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>! Attachments) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection
LM.App.Wpf.Library.AttachmentMetadataSelection.AttachmentMetadataSelection(string! SourcePath, string! Title, LM.Core.Models.AttachmentKind Kind, System.Collections.Generic.IReadOnlyList<string!>! Tags) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.get -> LM.Core.Models.AttachmentKind
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.init -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LibraryFiltersViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! presetStore, LM.App.Wpf.Common.ILibraryPresetPrompt! presetPrompt, LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.SavedSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.get -> string
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedSearchPresetViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, LM.App.Wpf.Library.LibraryFilterPreset! preset, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Summary.get -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.ToSummary() -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.SavedSearchTreeChangedEventArgs(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! presets) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.SavedSearchTreeViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.TreeChanged -> System.EventHandler<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs!>?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ClearCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyPresetAsync(LM.App.Wpf.Common.LibraryPresetSummary! summary, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyState(LM.App.Wpf.Library.LibraryFilterState! state) -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.CaptureState() -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTooltip.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTokens.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.BuildFullTextQuery(string! normalizedQuery) -> LM.Core.Models.Search.FullTextSearchQuery!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.HasSavedPresets.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.GetNormalizedFullTextQuery() -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.NavigationRoots.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RefreshNavigationAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedPresets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedSearches.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleLeftPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleRightPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SortOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RemoveTagCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand<string?>!
LM.App.Wpf.ViewModels.Library.LibrarySortOption
LM.App.Wpf.ViewModels.Library.LibrarySortOption.LibrarySortOption(string! key, string! displayName) -> void
LM.App.Wpf.ViewModels.Library.LibrarySortOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOptions
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.Category = 0 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.SavedSearch = 1 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchEntry = 2 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchRun = 3 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.LibraryNavigationNodeViewModel(string! name, LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.HasChildren.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Kind.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.get -> object?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.init -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.LibraryColumnOption(string! key, string! displayName, bool isVisible) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LibraryColumnVisibility() -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LoadFrom(System.Collections.Generic.IReadOnlyDictionary<string!, bool>! source) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.Snapshot() -> System.Collections.Generic.IReadOnlyDictionary<string!, bool>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LibraryResultsViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.App.Wpf.Library.ILibraryEntryEditor! entryEditor, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.Library.IAttachmentMetadataPrompt! attachmentPrompt, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.Core.Abstractions.IHasher! hasher, LM.App.Wpf.Services.Pdf.IPdfViewerLauncher! pdfViewerLauncher) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadFullTextResultsAsync(System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.FullTextSearchHit!>! hits, System.Func<LM.Core.Models.Entry!, bool>? entryFilter = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadMetadataResults(System.Collections.Generic.IEnumerable<LM.Core.Models.Entry!>! entries) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResetSortForSearch(LM.App.Wpf.ViewModels.Library.LibrarySortOption! defaultOption) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridLoaded(System.Windows.RoutedEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridSorting(System.Windows.Controls.DataGridSortingEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.MarkAsMetadataResults() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResultsAreFullText.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.get -> LM.App.Wpf.ViewModels.LibrarySearchResult?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LinkItems.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryLinkItem!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.EditEntryAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelection.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedItems.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectionChanged -> System.EventHandler?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelectedAbstract.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ToggleBlacklistAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.get -> int
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.LibraryCollectionFolderViewModel(LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! tree, string! id, string! name, LM.App.Wpf.Library.Collections.LibraryCollectionMetadata! metadata) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.LibraryCollectionsViewModel(LM.App.Wpf.Library.Collections.LibraryCollectionStore! store, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPrimaryAttachment.get -> bool
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.LibrarySearchQueryBox() -> void
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.get -> string!
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel
LM.App.Wpf.ViewModels.LibraryViewModel.Filters.get -> LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LibraryViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFullTextSearchService! fullTextSearch, LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel! filters, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.Configuration.IUserPreferencesStore! preferencesStore, LM.App.Wpf.Common.IClipboardService! clipboard, LM.App.Wpf.Common.IFileExplorerService! fileExplorer, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! litSearchOrganizer, LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! collections, LM.App.Wpf.Library.Collections.LibraryCollectionStore! collectionStore) -> void
LM.App.Wpf.ViewModels.LibraryViewModel.Results.get -> LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.Collections.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibraryColumnOption!>!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnVisibility.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility!
LM.App.Wpf.ViewModels.SearchItemViewModel
LM.App.Wpf.ViewModels.SearchItemViewModel.Header.get -> string!
LM.App.Wpf.ViewModels.SearchItemViewModel.SearchItemViewModel(string! header, LM.App.Wpf.ViewModels.LibraryViewModel! vm) -> void
LM.App.Wpf.ViewModels.SearchItemViewModel.Vm.get -> LM.App.Wpf.ViewModels.LibraryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel
LM.App.Wpf.ViewModels.SearchViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.SearchViewModel.ExportSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.From.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.LoadSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRuns.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.PreviousSearchSummary!>!
LM.App.Wpf.ViewModels.SearchViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRunsCount.get -> int
LM.App.Wpf.ViewModels.SearchViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.SearchViewModel.Query.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.get -> LM.Core.Models.SearchHit?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RunSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SaveSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleLeftPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleRightPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SearchViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IWorkSpaceService! ws, LM.App.Wpf.Common.ISearchSavePrompt! savePrompt, LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel! providers, LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel! history, LM.Infrastructure.Search.PubMedSearchProvider! pubMedProvider, LM.Core.Abstractions.Configuration.IUserPreferencesStore? preferencesStore = null) -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.get -> LM.App.Wpf.ViewModels.PreviousSearchSummary?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.StartPreviousRunCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ShowRunDetailsCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleFavoriteCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.To.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.History.get -> LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel.Providers.get -> LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecordExecutionAsync(LM.Core.Models.Search.SearchExecutionResult! result, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.SearchHistoryViewModel(LM.Core.Abstractions.Configuration.ISearchHistoryStore! store) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.ExecuteSearchAsync() -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.RunSearchCommand.get -> LM.App.Wpf.Common.AsyncRelayCommand!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchExecuted -> System.EventHandler<LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs!>?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchProvidersViewModel(LM.Core.Abstractions.Search.ISearchExecutionService! executionService) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.set -> void
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.Result.get -> LM.Core.Models.Search.SearchExecutionResult!
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.SearchExecutedEventArgs(LM.Core.Models.Search.SearchExecutionResult! result) -> void
LM.App.Wpf.ViewModels.PreviousSearchSummary
LM.App.Wpf.ViewModels.PreviousSearchSummary.DisplayName.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.EntryId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.FavoriteRunId.get -> string?
LM.App.Wpf.ViewModels.PreviousSearchSummary.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastRunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.Provider.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.Query.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunCount.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TotalHits.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TagsDisplay.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption
LM.App.Wpf.ViewModels.SearchDatabaseOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption.SearchDatabaseOption(LM.Core.Models.SearchDatabase value, string! displayName) -> void
LM.App.Wpf.ViewModels.SearchDatabaseOption.Value.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.StagingItem
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.get -> LM.HubSpoke.Models.ArticleHook?
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.DisplayName.get -> string?
LM.App.Wpf.ViewModels.StagingItem.DisplayName.set -> void
LM.App.Wpf.ViewModels.StagingItem.Doi.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Doi.set -> void
LM.App.Wpf.ViewModels.StagingItem.FilePath.get -> string!
LM.App.Wpf.ViewModels.StagingItem.FilePath.set -> void
LM.App.Wpf.ViewModels.StagingItem.Internal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Internal.set -> void
LM.App.Wpf.ViewModels.StagingItem.InternalId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.InternalId.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsDuplicate.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsNearMatch.get -> bool
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Notes.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Notes.set -> void
LM.App.Wpf.ViewModels.StagingItem.OriginalFileName.get -> string!
LM.App.Wpf.ViewModels.StagingItem.Pmid.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Pmid.set -> void
LM.App.Wpf.ViewModels.StagingItem.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingItem.Selected.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Selected.set -> void
LM.App.Wpf.ViewModels.StagingItem.Similarity.get -> double
LM.App.Wpf.ViewModels.StagingItem.Similarity.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Source.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Source.set -> void
LM.App.Wpf.ViewModels.StagingItem.StagingItem() -> void
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.get -> string!
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.set -> void
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.Title.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Title.set -> void
LM.App.Wpf.ViewModels.StagingItem.Type.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingItem.Type.set -> void
LM.App.Wpf.ViewModels.StagingItem.Year.get -> int?
LM.App.Wpf.ViewModels.StagingItem.Year.set -> void
LM.App.Wpf.Views.AddView
LM.App.Wpf.Views.Behaviors.FileDropRequest
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.get -> System.Windows.DragEventArgs!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.get -> object?
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.FileDropRequest(System.Collections.Generic.IReadOnlyList<string!>! Paths, object? DropTarget, System.Windows.DragEventArgs! Args) -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.init -> void
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior.SavedSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.AddView.AddView() -> void
LM.App.Wpf.Views.AddView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog
LM.App.Wpf.Views.LibraryPresetPickerDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.LibraryPresetPickerDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel!
LM.App.Wpf.Views.LibraryPresetPrompt.LibraryPresetPrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.InitializeComponent() -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.AttachmentMetadataDialog(LM.App.Wpf.ViewModels.Library.AttachmentMetadataDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog
LM.App.Wpf.Views.LibraryPresetSaveDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.LibraryPresetSaveDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel!
LM.App.Wpf.Views.LibraryView
LM.App.Wpf.Views.LibraryView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryView.LibraryView() -> void
LM.App.Wpf.Views.PdfViewer
LM.App.Wpf.Views.PdfViewer.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewer.PdfViewer() -> void
LM.App.Wpf.Views.Library.TagTokenSelector
LM.App.Wpf.Views.Library.TagTokenSelector.InitializeComponent() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.FilteredSuggestions.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>?
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.set -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagTokenSelector() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.get -> System.Collections.Generic.IEnumerable<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.set -> void
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTagsProperty
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabularyProperty
LM.App.Wpf.Views.LibraryPresetPrompt
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Views.Review.Controls.DecisionBadge
LM.App.Wpf.Views.Review.Controls.DecisionBadge.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.DecisionBadge() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.get -> LM.Review.Core.Models.ScreeningStatus
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.set -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.ExtractionFieldEditor() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.ScreeningQueueControl() -> void
LM.App.Wpf.Views.Review.ReviewView
LM.App.Wpf.Views.Review.ReviewView.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ReviewView.ReviewView() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.LitSearchRunPickerWindow(LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel!
LM.App.Wpf.Views.Review.ProjectEditorWindow
LM.App.Wpf.Views.Review.ProjectEditorWindow.Attach(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.ProjectEditorWindow() -> void
LM.App.Wpf.Views.SearchSavePrompt
LM.App.Wpf.Views.SearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Views.SearchSavePrompt.SearchSavePrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.DataGridColumnVisibilityBehavior() -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.set -> void
LM.App.Wpf.Views.SearchView
LM.App.Wpf.Views.SearchView.InitializeComponent() -> void
LM.App.Wpf.Views.SearchView.SearchView() -> void
LM.App.Wpf.Views.ShellWindow
LM.App.Wpf.Views.ShellWindow.InitializeComponent() -> void
LM.App.Wpf.Views.ShellWindow.LoadWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.NewWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.ShellWindow() -> void
LM.App.Wpf.Views.StagingEditorWindow
LM.App.Wpf.Views.StagingEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.StagingEditorWindow.StagingEditorWindow(LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel! viewModel) -> void
override LM.App.Wpf.ViewModels.Library.LibrarySortOption.ToString() -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.IsDraggable.get -> bool
override LM.App.Wpf.Views.Library.AttachmentMetadataDialog.OnClosed(System.EventArgs! e) -> void
LM.App.Wpf.Views.WorkspaceChooser
LM.App.Wpf.Views.WorkspaceChooser.InitializeComponent() -> void
LM.App.Wpf.Views.WorkspaceChooser.SelectedWorkspacePath.get -> string?
LM.App.Wpf.Views.WorkspaceChooser.WorkspaceChooser(LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel! viewModel) -> void
LM.App.Wpf.Views.WorkspaceChooser.Configure(System.Action<LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel!>! configure) -> void
override LM.App.Wpf.App.OnExit(System.Windows.ExitEventArgs! e) -> void
override LM.App.Wpf.App.OnStartup(System.Windows.StartupEventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetPickerDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetSaveDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.StagingEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.WorkspaceChooser.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.ProjectEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.OnClosed(System.EventArgs! e) -> void
static LM.App.Wpf.App.Main() -> void
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.All.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.NewestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.OldestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleAscending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleDescending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Clone() -> LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.LitSearchOrganizerStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveEntryAsync(string! entryId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.SyncEntriesAsync(System.Collections.Generic.IEnumerable<string!>! entryIds, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema.CurrentVersion -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.LitSearchEntryViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! title, string? query) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Query.get -> string?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.CanDelete.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsRoot.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.LitSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! name, bool isRoot) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.LitSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.LitSearchRunViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! runId, string! label, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel! parent) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.LitSearchTreeViewModel(LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt, LM.Core.Abstractions.IEntryStore! entryStore, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
---------- LM.Core ----------
#nullable enable
#nullable enable
IPublicationLookup
IPublicationLookup.TryGetByDoiAsync(string! doi, bool includeCitedBy, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<LM.Core.Models.PublicationRecord?>!
LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore
LM.Core.Abstractions.IContentExtractor
LM.Core.Abstractions.IContentExtractor.ExtractTextAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Core.Abstractions.IEntryStore
LM.Core.Abstractions.IEntryStore.EnumerateAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<LM.Core.Models.Entry!>!
LM.Core.Abstractions.IEntryStore.FindByHashAsync(string! sha256, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Core.Abstractions.IEntryStore.FindByIdsAsync(string? doi, string? pmid, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Core.Abstractions.IEntryStore.FindSimilarByNameYearAsync(string! title, int? year, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.Core.Abstractions.IEntryStore.GetByIdAsync(string! id, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Core.Abstractions.IEntryStore.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.IEntryStore.SaveAsync(LM.Core.Models.Entry! entry, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.IEntryStore.SearchAsync(LM.Core.Models.Filters.EntryFilter! filter, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.Core.Abstractions.IFullTextSearchService
LM.Core.Abstractions.IFullTextSearchService.SearchAsync(LM.Core.Models.Search.FullTextSearchQuery! query, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.FullTextSearchHit!>!>!
LM.Core.Abstractions.Search.ISearchExecutionService
LM.Core.Abstractions.Search.ISearchExecutionService.ExecuteAsync(LM.Core.Models.Search.SearchExecutionRequest! request, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Search.SearchExecutionResult!>!
LM.Core.Abstractions.Search.ISearchProvider
LM.Core.Abstractions.Search.ISearchProvider.Database.get -> LM.Core.Models.SearchDatabase
LM.Core.Abstractions.Search.ISearchProvider.SearchAsync(string! query, System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.SearchHit!>!>!
LM.Core.Abstractions.IFileStorageRepository
LM.Core.Abstractions.IFileStorageRepository.SaveNewAsync(string! sourcePath, string! relativeTargetDir, string? preferredFileName = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Core.Abstractions.IHasher
LM.Core.Abstractions.IHasher.ComputeSha256Async(string! filePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Core.Abstractions.IPdfAnnotationPersistenceService
LM.Core.Abstractions.IPdfAnnotationPersistenceService.PersistAsync(string! entryId, string! pdfHash, string! overlayJson, System.Collections.Generic.IReadOnlyDictionary<string!, byte[]!>! previewImages, string? overlaySidecarRelativePath, string? pdfRelativePath, System.Collections.Generic.IReadOnlyList<LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata!>! annotations, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata.AnnotationId.get -> string!
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata.Note.get -> string?
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata.ColorHex.get -> string?
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata.PdfAnnotationBridgeMetadata(string! annotationId, string? text, string? note, string? colorHex = null) -> void
LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata.Text.get -> string?
LM.Core.Abstractions.IPdfAnnotationPreviewStorage
LM.Core.Abstractions.IPdfAnnotationPreviewStorage.SaveAsync(string! pdfHash, string! annotationId, byte[]! pngBytes, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<string!>!
LM.Core.Abstractions.IPdfAnnotationOverlayReader
LM.Core.Abstractions.IPdfAnnotationOverlayReader.GetOverlayJsonAsync(string! entryId, string! pdfHash, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string?>!
LM.Core.Abstractions.IMetadataDebugSlideExporter
LM.Core.Abstractions.IMetadataDebugSlideExporter.ExportAsync(System.Collections.Generic.IEnumerable<LM.Core.Models.FileMetadata!>! items, string! outputPath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Core.Abstractions.IMetadataExtractor
LM.Core.Abstractions.IMetadataExtractor.ExtractAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.FileMetadata!>!
LM.Core.Abstractions.IPmidNormalizer
LM.Core.Abstractions.IPmidNormalizer.Normalize(string? raw) -> string?
LM.Core.Abstractions.ISimilarityService
LM.Core.Abstractions.ISimilarityService.ComputeFileSimilarityAsync(string! filePathA, string! filePathB, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
LM.Core.Abstractions.ITagVocabularyProvider
LM.Core.Abstractions.ITagVocabularyProvider.GetAllTagsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>!>!
LM.Core.Abstractions.IWorkSpaceService
LM.Core.Abstractions.IWorkSpaceService.EnsureWorkspaceAsync(string! absoluteWorkspacePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.IWorkSpaceService.GetAbsolutePath(string! relativePath) -> string!
LM.Core.Abstractions.IWorkSpaceService.GetLocalDbPath() -> string!
LM.Core.Abstractions.IWorkSpaceService.GetWorkspaceRoot() -> string!
LM.Core.Abstractions.IWorkSpaceService.WorkspacePath.get -> string?
LM.Core.Abstractions.IDoiNormalizer
LM.Core.Abstractions.IDoiNormalizer.Normalize(string? raw) -> string?
LM.Core.Models.AbstractSection
LM.Core.Models.AbstractSection.Label.get -> string?
LM.Core.Models.AbstractSection.Label.init -> void
LM.Core.Models.AbstractSection.Text.get -> string?
LM.Core.Models.AbstractSection.Text.init -> void
LM.Core.Models.Attachment
LM.Core.Models.Attachment.Attachment() -> void
LM.Core.Models.Attachment.Id.get -> string!
LM.Core.Models.Attachment.Id.set -> void
LM.Core.Models.Attachment.Notes.get -> string?
LM.Core.Models.Attachment.Notes.set -> void
LM.Core.Models.Attachment.RelativePath.get -> string!
LM.Core.Models.Attachment.RelativePath.set -> void
LM.Core.Models.Attachment.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Attachment.Tags.set -> void
LM.Core.Models.Attachment.Title.get -> string!
LM.Core.Models.Attachment.Title.set -> void
LM.Core.Models.Attachment.Kind.get -> LM.Core.Models.AttachmentKind
LM.Core.Models.Attachment.Kind.set -> void
LM.Core.Models.Attachment.AddedBy.get -> string!
LM.Core.Models.Attachment.AddedBy.set -> void
LM.Core.Models.Attachment.AddedUtc.get -> System.DateTime
LM.Core.Models.Attachment.AddedUtc.set -> void
LM.Core.Models.AttachmentKind
LM.Core.Models.AttachmentKind.Supplement = 0 -> LM.Core.Models.AttachmentKind
LM.Core.Models.AttachmentKind.Version = 1 -> LM.Core.Models.AttachmentKind
LM.Core.Models.AttachmentKind.Presentation = 2 -> LM.Core.Models.AttachmentKind
LM.Core.Models.AttachmentKind.ExternalNotes = 3 -> LM.Core.Models.AttachmentKind
LM.Core.Models.AttachmentKind.Metadata = 4 -> LM.Core.Models.AttachmentKind
LM.Core.Models.AuthorName
LM.Core.Models.AuthorName.Affiliations.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.AuthorName.Affiliations.init -> void
LM.Core.Models.AuthorName.CollectiveName.get -> string?
LM.Core.Models.AuthorName.CollectiveName.init -> void
LM.Core.Models.AuthorName.Family.get -> string?
LM.Core.Models.AuthorName.Family.init -> void
LM.Core.Models.AuthorName.Given.get -> string?
LM.Core.Models.AuthorName.Given.init -> void
LM.Core.Models.AuthorName.LastFromLiteral() -> string?
LM.Core.Models.AuthorName.Literal.get -> string?
LM.Core.Models.AuthorName.Literal.init -> void
LM.Core.Models.AuthorName.Orcid.get -> string?
LM.Core.Models.AuthorName.Orcid.init -> void
LM.Core.Models.AuthorName.ToCsvPart() -> string!
LM.Core.Models.Entry
LM.Core.Models.Entry.AddedBy.get -> string?
LM.Core.Models.Entry.AddedBy.set -> void
LM.Core.Models.Entry.AddedOnUtc.get -> System.DateTime
LM.Core.Models.Entry.AddedOnUtc.set -> void
LM.Core.Models.Entry.Attachments.get -> System.Collections.Generic.List<LM.Core.Models.Attachment!>!
LM.Core.Models.Entry.Attachments.set -> void
LM.Core.Models.Entry.Authors.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Entry.Authors.set -> void
LM.Core.Models.Entry.DisplayName.get -> string?
LM.Core.Models.Entry.DisplayName.set -> void
LM.Core.Models.Entry.Doi.get -> string?
LM.Core.Models.Entry.Doi.set -> void
LM.Core.Models.Entry.Entry() -> void
LM.Core.Models.Entry.Id.get -> string!
LM.Core.Models.Entry.Id.set -> void
LM.Core.Models.Entry.InternalId.get -> string?
LM.Core.Models.Entry.InternalId.set -> void
LM.Core.Models.Entry.IsInternal.get -> bool
LM.Core.Models.Entry.IsInternal.set -> void
LM.Core.Models.Entry.IsBlacklisted.get -> bool
LM.Core.Models.Entry.IsBlacklisted.set -> void
LM.Core.Models.Entry.Links.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Entry.Links.set -> void
LM.Core.Models.Entry.MainFileHashSha256.get -> string?
LM.Core.Models.Entry.MainFileHashSha256.set -> void
LM.Core.Models.Entry.MainFilePath.get -> string!
LM.Core.Models.Entry.MainFilePath.set -> void
LM.Core.Models.Entry.Nct.get -> string?
LM.Core.Models.Entry.Nct.set -> void
LM.Core.Models.Entry.Notes.get -> string?
LM.Core.Models.Entry.Notes.set -> void
LM.Core.Models.Entry.UserNotes.get -> string?
LM.Core.Models.Entry.UserNotes.set -> void
LM.Core.Models.Entry.OriginalFileName.get -> string?
LM.Core.Models.Entry.OriginalFileName.set -> void
LM.Core.Models.Entry.Pmid.get -> string?
LM.Core.Models.Entry.Pmid.set -> void
LM.Core.Models.Entry.Relations.get -> System.Collections.Generic.List<LM.Core.Models.Relation!>!
LM.Core.Models.Entry.Relations.set -> void
LM.Core.Models.Entry.ShortTitle.get -> string?
LM.Core.Models.Entry.ShortTitle.set -> void
LM.Core.Models.Entry.Source.get -> string?
LM.Core.Models.Entry.Source.set -> void
LM.Core.Models.Entry.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Entry.Tags.set -> void
LM.Core.Models.Entry.Title.get -> string!
LM.Core.Models.Entry.Title.set -> void
LM.Core.Models.Entry.Type.get -> LM.Core.Models.EntryType
LM.Core.Models.Entry.Type.set -> void
LM.Core.Models.Entry.Version.get -> int
LM.Core.Models.Entry.Version.set -> void
LM.Core.Models.Entry.Year.get -> int?
LM.Core.Models.Entry.Year.set -> void
LM.Core.Models.EntryDocument
LM.Core.Models.EntryDocument.Authors.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.EntryDocument.Authors.set -> void
LM.Core.Models.EntryDocument.CreatedUtc.get -> System.DateTimeOffset
LM.Core.Models.EntryDocument.CreatedUtc.set -> void
LM.Core.Models.EntryDocument.Doi.get -> string?
LM.Core.Models.EntryDocument.Doi.set -> void
LM.Core.Models.EntryDocument.EntryDocument() -> void
LM.Core.Models.EntryDocument.Files.get -> System.Collections.Generic.List<LM.Core.Models.EntryFile!>!
LM.Core.Models.EntryDocument.Files.set -> void
LM.Core.Models.EntryDocument.Id.get -> string!
LM.Core.Models.EntryDocument.Id.set -> void
LM.Core.Models.EntryDocument.Internal.get -> bool
LM.Core.Models.EntryDocument.Internal.set -> void
LM.Core.Models.EntryDocument.Pmid.get -> string?
LM.Core.Models.EntryDocument.Pmid.set -> void
LM.Core.Models.EntryDocument.Source.get -> string?
LM.Core.Models.EntryDocument.Source.set -> void
LM.Core.Models.EntryDocument.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.EntryDocument.Tags.set -> void
LM.Core.Models.EntryDocument.Title.get -> string?
LM.Core.Models.EntryDocument.Title.set -> void
LM.Core.Models.EntryDocument.UpdatedUtc.get -> System.DateTimeOffset
LM.Core.Models.EntryDocument.UpdatedUtc.set -> void
LM.Core.Models.EntryDocument.Year.get -> int?
LM.Core.Models.EntryDocument.Year.set -> void
LM.Core.Models.EntryFile
LM.Core.Models.EntryFile.EntryFile() -> void
LM.Core.Models.EntryFile.Hash.get -> string!
LM.Core.Models.EntryFile.Hash.set -> void
LM.Core.Models.EntryFile.MimeType.get -> string!
LM.Core.Models.EntryFile.MimeType.set -> void
LM.Core.Models.EntryFile.OriginalFileName.get -> string!
LM.Core.Models.EntryFile.OriginalFileName.set -> void
LM.Core.Models.EntryFile.RelativePath.get -> string!
LM.Core.Models.EntryFile.RelativePath.set -> void
LM.Core.Models.EntryFile.SizeBytes.get -> long
LM.Core.Models.EntryFile.SizeBytes.set -> void
LM.Core.Models.EntryFile.StoredFileName.get -> string!
LM.Core.Models.EntryFile.StoredFileName.set -> void
LM.Core.Models.EntryType
LM.Core.Models.EntryType.LitSearch = 6 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.Other = 5 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.Presentation = 1 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.Publication = 0 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.Report = 4 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.SlideDeck = 3 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.WhitePaper = 2 -> LM.Core.Models.EntryType
LM.Core.Models.FileMetadata
LM.Core.Models.FileMetadata.Authors.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.FileMetadata.Authors.set -> void
LM.Core.Models.FileMetadata.Doi.get -> string?
LM.Core.Models.FileMetadata.Doi.set -> void
LM.Core.Models.FileMetadata.FileMetadata() -> void
LM.Core.Models.FileMetadata.Pmid.get -> string?
LM.Core.Models.FileMetadata.Pmid.set -> void
LM.Core.Models.FileMetadata.Source.get -> string?
LM.Core.Models.FileMetadata.Source.set -> void
LM.Core.Models.FileMetadata.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.FileMetadata.Tags.set -> void
LM.Core.Models.FileMetadata.Title.get -> string?
LM.Core.Models.FileMetadata.Title.set -> void
LM.Core.Models.FileMetadata.Year.get -> int?
LM.Core.Models.FileMetadata.Year.set -> void
LM.Core.Models.Filters.EntryFilter
LM.Core.Models.Filters.EntryFilter.AuthorContains.get -> string?
LM.Core.Models.Filters.EntryFilter.AuthorContains.set -> void
LM.Core.Models.Filters.EntryFilter.EntryFilter() -> void
LM.Core.Models.Filters.EntryFilter.IsInternal.get -> bool?
LM.Core.Models.Filters.EntryFilter.IsInternal.set -> void
LM.Core.Models.Filters.EntryFilter.TagMatchMode.get -> LM.Core.Models.Filters.TagMatchMode
LM.Core.Models.Filters.EntryFilter.TagMatchMode.set -> void
LM.Core.Models.Filters.EntryFilter.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Filters.EntryFilter.Tags.set -> void
LM.Core.Models.Filters.TagMatchMode
LM.Core.Models.Filters.TagMatchMode.Any = 0 -> LM.Core.Models.Filters.TagMatchMode
LM.Core.Models.Filters.TagMatchMode.All = 1 -> LM.Core.Models.Filters.TagMatchMode
LM.Core.Models.Filters.TagMatchMode.Not = 2 -> LM.Core.Models.Filters.TagMatchMode
LM.Core.Models.Filters.EntryFilter.TitleContains.get -> string?
LM.Core.Models.Filters.EntryFilter.TitleContains.set -> void
LM.Core.Models.Filters.EntryFilter.TypesAny.get -> LM.Core.Models.EntryType[]?
LM.Core.Models.Filters.EntryFilter.TypesAny.set -> void
LM.Core.Models.Filters.EntryFilter.YearFrom.get -> int?
LM.Core.Models.Filters.EntryFilter.YearFrom.set -> void
LM.Core.Models.Filters.EntryFilter.YearTo.get -> int?
LM.Core.Models.Filters.EntryFilter.YearTo.set -> void
LM.Core.Models.Filters.EntryFilter.SourceContains.get -> string?
LM.Core.Models.Filters.EntryFilter.SourceContains.set -> void
LM.Core.Models.Filters.EntryFilter.InternalIdContains.get -> string?
LM.Core.Models.Filters.EntryFilter.InternalIdContains.set -> void
LM.Core.Models.Filters.EntryFilter.DoiContains.get -> string?
LM.Core.Models.Filters.EntryFilter.DoiContains.set -> void
LM.Core.Models.Filters.EntryFilter.PmidContains.get -> string?
LM.Core.Models.Filters.EntryFilter.PmidContains.set -> void
LM.Core.Models.Filters.EntryFilter.NctContains.get -> string?
LM.Core.Models.Filters.EntryFilter.NctContains.set -> void
LM.Core.Models.Filters.EntryFilter.AddedByContains.get -> string?
LM.Core.Models.Filters.EntryFilter.AddedByContains.set -> void
LM.Core.Models.Filters.EntryFilter.AddedOnFromUtc.get -> System.DateTime?
LM.Core.Models.Filters.EntryFilter.AddedOnFromUtc.set -> void
LM.Core.Models.Filters.EntryFilter.AddedOnToUtc.get -> System.DateTime?
LM.Core.Models.Filters.EntryFilter.AddedOnToUtc.set -> void
LM.Core.Models.GrantInfo
LM.Core.Models.GrantInfo.Agency.get -> string?
LM.Core.Models.GrantInfo.Agency.init -> void
LM.Core.Models.GrantInfo.Country.get -> string?
LM.Core.Models.GrantInfo.Country.init -> void
LM.Core.Models.GrantInfo.GrantId.get -> string?
LM.Core.Models.GrantInfo.GrantId.init -> void
LM.Core.Models.PublicationRecord
LM.Core.Models.PublicationRecord.AbstractPlain.get -> string?
LM.Core.Models.PublicationRecord.AbstractPlain.init -> void
LM.Core.Models.PublicationRecord.AbstractSections.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.AbstractSection!>!
LM.Core.Models.PublicationRecord.AbstractSections.init -> void
LM.Core.Models.PublicationRecord.Affiliations.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.Affiliations.init -> void
LM.Core.Models.PublicationRecord.Authors.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.AuthorName!>!
LM.Core.Models.PublicationRecord.Authors.init -> void
LM.Core.Models.PublicationRecord.AuthorsCsv.get -> string!
LM.Core.Models.PublicationRecord.CitedByCount.get -> int?
LM.Core.Models.PublicationRecord.CitedByCount.init -> void
LM.Core.Models.PublicationRecord.CitedByPmids.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.CitedByPmids.init -> void
LM.Core.Models.PublicationRecord.CommentsCorrections.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.CommentsCorrections.init -> void
LM.Core.Models.PublicationRecord.Country.get -> string?
LM.Core.Models.PublicationRecord.Country.init -> void
LM.Core.Models.PublicationRecord.Doi.get -> string?
LM.Core.Models.PublicationRecord.Doi.init -> void
LM.Core.Models.PublicationRecord.FirstAuthorLast.get -> string!
LM.Core.Models.PublicationRecord.Grants.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.GrantInfo!>!
LM.Core.Models.PublicationRecord.Grants.init -> void
LM.Core.Models.PublicationRecord.Issue.get -> string?
LM.Core.Models.PublicationRecord.Issue.init -> void
LM.Core.Models.PublicationRecord.JournalIsoAbbrev.get -> string?
LM.Core.Models.PublicationRecord.JournalIsoAbbrev.init -> void
LM.Core.Models.PublicationRecord.JournalTitle.get -> string?
LM.Core.Models.PublicationRecord.JournalTitle.init -> void
LM.Core.Models.PublicationRecord.Keywords.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.Keywords.init -> void
LM.Core.Models.PublicationRecord.Language.get -> string?
LM.Core.Models.PublicationRecord.Language.init -> void
LM.Core.Models.PublicationRecord.MeshHeadings.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.MeshHeadings.init -> void
LM.Core.Models.PublicationRecord.Pages.get -> string?
LM.Core.Models.PublicationRecord.Pages.init -> void
LM.Core.Models.PublicationRecord.Pmcid.get -> string?
LM.Core.Models.PublicationRecord.Pmcid.init -> void
LM.Core.Models.PublicationRecord.Pmid.get -> string?
LM.Core.Models.PublicationRecord.Pmid.init -> void
LM.Core.Models.PublicationRecord.PublicationTypes.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.PublicationTypes.init -> void
LM.Core.Models.PublicationRecord.PublishedEpub.get -> System.DateOnly?
LM.Core.Models.PublicationRecord.PublishedEpub.init -> void
LM.Core.Models.PublicationRecord.PublishedPrint.get -> System.DateOnly?
LM.Core.Models.PublicationRecord.PublishedPrint.init -> void
LM.Core.Models.PublicationRecord.ReferencedPmids.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.ReferencedPmids.init -> void
LM.Core.Models.PublicationRecord.Title.get -> string?
LM.Core.Models.PublicationRecord.Title.init -> void
LM.Core.Models.PublicationRecord.UrlPubMed.get -> string?
LM.Core.Models.PublicationRecord.UrlPubMed.init -> void
LM.Core.Models.PublicationRecord.Volume.get -> string?
LM.Core.Models.PublicationRecord.Volume.init -> void
LM.Core.Models.PublicationRecord.Year.get -> int?
LM.Core.Models.PublicationRecord.Year.init -> void
LM.Core.Models.Relation
LM.Core.Models.Relation.Relation() -> void
LM.Core.Models.Relation.TargetEntryId.get -> string!
LM.Core.Models.Relation.TargetEntryId.set -> void
LM.Core.Models.Relation.Type.get -> string!
LM.Core.Models.Relation.Type.set -> void
LM.Core.Models.Search.FullTextSearchHit.EntryId.init -> void
LM.Core.Models.Search.FullTextSearchHit.Highlight.init -> void
LM.Core.Models.Search.FullTextSearchHit.Score.init -> void
LM.Core.Models.Search.FullTextSearchQuery.TypesAny.get -> LM.Core.Models.EntryType[]?
LM.Core.Models.SearchDatabase
LM.Core.Models.SearchDatabase.ClinicalTrialsGov = 1 -> LM.Core.Models.SearchDatabase
LM.Core.Models.SearchDatabase.PubMed = 0 -> LM.Core.Models.SearchDatabase
LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchField.Abstract = 2 -> LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchField.Content = 4 -> LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchField.None = 0 -> LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchField.Title = 1 -> LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchHit
LM.Core.Models.Search.FullTextSearchHit.EntryId.get -> string!
LM.Core.Models.Search.FullTextSearchHit.FullTextSearchHit(string! EntryId, double Score, string? Highlight) -> void
LM.Core.Models.Search.FullTextSearchHit.Highlight.get -> string?
LM.Core.Models.Search.FullTextSearchHit.Score.get -> double
LM.Core.Models.Search.FullTextSearchQuery
LM.Core.Models.Search.FullTextSearchQuery.Fields.get -> LM.Core.Models.Search.FullTextSearchField
LM.Core.Models.Search.FullTextSearchQuery.Fields.set -> void
LM.Core.Models.Search.FullTextSearchQuery.FullTextSearchQuery() -> void
LM.Core.Models.Search.FullTextSearchQuery.IsInternal.get -> bool?
LM.Core.Models.Search.FullTextSearchQuery.IsInternal.set -> void
LM.Core.Models.Search.FullTextSearchQuery.Limit.get -> int
LM.Core.Models.Search.FullTextSearchQuery.Limit.set -> void
LM.Core.Models.Search.FullTextSearchQuery.Text.get -> string?
LM.Core.Models.Search.FullTextSearchQuery.Text.set -> void
LM.Core.Models.Search.FullTextSearchQuery.TypesAny.set -> void
LM.Core.Models.Search.FullTextSearchQuery.YearFrom.get -> int?
LM.Core.Models.Search.FullTextSearchQuery.YearFrom.set -> void
LM.Core.Models.Search.FullTextSearchQuery.YearTo.get -> int?
LM.Core.Models.Search.FullTextSearchQuery.YearTo.set -> void
LM.Core.Models.SearchHit
LM.Core.Models.SearchHit.AlreadyInDb.get -> bool
LM.Core.Models.SearchHit.AlreadyInDb.set -> void
LM.Core.Models.SearchHit.Authors.get -> string!
LM.Core.Models.SearchHit.Authors.init -> void
LM.Core.Models.SearchHit.Doi.get -> string?
LM.Core.Models.SearchHit.Doi.init -> void
LM.Core.Models.SearchHit.ExternalId.get -> string!
LM.Core.Models.SearchHit.ExternalId.init -> void
LM.Core.Models.SearchHit.ExistingEntryId.get -> string?
LM.Core.Models.SearchHit.ExistingEntryId.set -> void
LM.Core.Models.SearchHit.JournalOrSource.get -> string?
LM.Core.Models.SearchHit.JournalOrSource.init -> void
LM.Core.Models.SearchHit.SearchHit() -> void
LM.Core.Models.SearchHit.Selected.get -> bool
LM.Core.Models.SearchHit.Selected.set -> void
LM.Core.Models.SearchHit.Source.get -> LM.Core.Models.SearchDatabase
LM.Core.Models.SearchHit.Source.init -> void
LM.Core.Models.SearchHit.Title.get -> string!
LM.Core.Models.SearchHit.Title.init -> void
LM.Core.Models.SearchHit.Url.get -> string?
LM.Core.Models.SearchHit.Url.init -> void
LM.Core.Models.SearchHit.Year.get -> int?
LM.Core.Models.SearchHit.Year.init -> void
LM.Core.Models.SearchHit.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.Core.Models.WatchedFolderState.WatchedFolderState(string! Path, System.DateTimeOffset? LastScanUtc, string? AggregatedHash, bool LastScanWasUnchanged) -> void
LM.Core.Utils.Hashes
LM.Core.Utils.IdGen
LM.Core.Utils.JsonEx
static LM.Core.Utils.Hashes.Sha1(string! input) -> string!
static LM.Core.Utils.Hashes.Sha256File(string! path) -> string!
static LM.Core.Utils.IdGen.NewId() -> string!
static LM.Core.Utils.JsonEx.Deserialize<T>(string! s) -> T?
static LM.Core.Utils.JsonEx.Serialize<T>(T v) -> string!
LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.WatchedFolderSettings!>!
LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore.SaveAsync(LM.Core.Models.WatchedFolderSettings! settings, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.Configuration.ISearchHistoryStore
LM.Core.Abstractions.Configuration.ISearchHistoryStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Search.SearchHistoryDocument!>!
LM.Core.Abstractions.Configuration.ISearchHistoryStore.SaveAsync(LM.Core.Models.Search.SearchHistoryDocument! document, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.Configuration.IUserPreferencesStore
LM.Core.Abstractions.Configuration.IUserPreferencesStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.UserPreferences!>!
LM.Core.Abstractions.Configuration.IUserPreferencesStore.SaveAsync(LM.Core.Models.UserPreferences! preferences, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Models.Search.SearchHistoryDocument
LM.Core.Models.Search.SearchHistoryDocument.Entries.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.Core.Models.Search.SearchHistoryDocument.Entries.init -> void
LM.Core.Models.Search.SearchHistoryEntry
LM.Core.Models.Search.SearchHistoryEntry.Database.get -> LM.Core.Models.SearchDatabase
LM.Core.Models.Search.SearchHistoryEntry.Database.init -> void
LM.Core.Models.Search.SearchHistoryEntry.ExecutedUtc.get -> System.DateTimeOffset
LM.Core.Models.Search.SearchHistoryEntry.ExecutedUtc.init -> void
LM.Core.Models.Search.SearchHistoryEntry.From.get -> System.DateTime?
LM.Core.Models.Search.SearchHistoryEntry.From.init -> void
LM.Core.Models.Search.SearchHistoryEntry.Query.get -> string!
LM.Core.Models.Search.SearchHistoryEntry.Query.init -> void
LM.Core.Models.Search.SearchHistoryEntry.To.get -> System.DateTime?
LM.Core.Models.Search.SearchHistoryEntry.To.init -> void
LM.Core.Models.Search.SearchExecutionRequest
LM.Core.Models.Search.SearchExecutionRequest.Database.get -> LM.Core.Models.SearchDatabase
LM.Core.Models.Search.SearchExecutionRequest.Database.init -> void
LM.Core.Models.Search.SearchExecutionRequest.From.get -> System.DateTime?
LM.Core.Models.Search.SearchExecutionRequest.From.init -> void
LM.Core.Models.Search.SearchExecutionRequest.Query.get -> string!
LM.Core.Models.Search.SearchExecutionRequest.Query.init -> void
LM.Core.Models.Search.SearchExecutionRequest.To.get -> System.DateTime?
LM.Core.Models.Search.SearchExecutionRequest.To.init -> void
LM.Core.Models.Search.SearchExecutionResult
LM.Core.Models.Search.SearchExecutionResult.ExecutedUtc.get -> System.DateTimeOffset
LM.Core.Models.Search.SearchExecutionResult.ExecutedUtc.init -> void
LM.Core.Models.Search.SearchExecutionResult.Hits.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.SearchHit!>!
LM.Core.Models.Search.SearchExecutionResult.Hits.init -> void
LM.Core.Models.Search.SearchExecutionResult.Request.get -> LM.Core.Models.Search.SearchExecutionRequest!
LM.Core.Models.Search.SearchExecutionResult.Request.init -> void
LM.Core.Models.UserPreferences
LM.Core.Models.UserPreferences.Search.get -> LM.Core.Models.SearchPreferences!
LM.Core.Models.UserPreferences.Search.init -> void
LM.Core.Models.UserPreferences.Library.get -> LM.Core.Models.LibraryPreferences!
LM.Core.Models.UserPreferences.Library.init -> void
LM.Core.Models.SearchPreferences
LM.Core.Models.SearchPreferences.LastSelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.Core.Models.SearchPreferences.LastSelectedDatabase.init -> void
LM.Core.Models.SearchPreferences.LastUpdatedUtc.get -> System.DateTimeOffset
LM.Core.Models.SearchPreferences.LastUpdatedUtc.init -> void
LM.Core.Models.LibraryPreferences
LM.Core.Models.LibraryPreferences.VisibleColumns.get -> string![]!
LM.Core.Models.LibraryPreferences.VisibleColumns.init -> void
LM.Core.Models.LibraryPreferences.LastUpdatedUtc.get -> System.DateTimeOffset
LM.Core.Models.LibraryPreferences.LastUpdatedUtc.init -> void
LM.Core.Models.WatchedFolderSettings
LM.Core.Models.WatchedFolderSettings.Folders.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.WatchedFolderSettingsFolder!>!
LM.Core.Models.WatchedFolderSettings.Folders.init -> void
LM.Core.Models.WatchedFolderSettings.States.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.WatchedFolderState!>!
LM.Core.Models.WatchedFolderSettings.States.init -> void
LM.Core.Models.WatchedFolderSettingsFolder
LM.Core.Models.WatchedFolderSettingsFolder.IsEnabled.get -> bool
LM.Core.Models.WatchedFolderSettingsFolder.IsEnabled.init -> void
LM.Core.Models.WatchedFolderSettingsFolder.Path.get -> string!
LM.Core.Models.WatchedFolderSettingsFolder.Path.init -> void
LM.Core.Models.WatchedFolderState
LM.Core.Models.WatchedFolderState.AggregatedHash.get -> string?
LM.Core.Models.WatchedFolderState.AggregatedHash.init -> void
LM.Core.Models.WatchedFolderState.LastScanUtc.get -> System.DateTimeOffset?
LM.Core.Models.WatchedFolderState.LastScanUtc.init -> void
LM.Core.Models.WatchedFolderState.LastScanWasUnchanged.get -> bool
LM.Core.Models.WatchedFolderState.LastScanWasUnchanged.init -> void
LM.Core.Models.WatchedFolderState.Path.get -> string!
LM.Core.Models.WatchedFolderState.Path.init -> void
static readonly LM.Core.Utils.JsonEx.Options -> System.Text.Json.JsonSerializerOptions!
---------- LM.HubSpoke ----------
#nullable enable
#nullable enable
LM.HubSpoke.Abstractions.CasResult
LM.HubSpoke.Abstractions.CasResult.Bytes.get -> long
LM.HubSpoke.Abstractions.CasResult.Bytes.init -> void
LM.HubSpoke.Abstractions.CasResult.CasResult() -> void
LM.HubSpoke.Abstractions.CasResult.CasResult(string? RelPath, string? Sha, long Bytes, string? Mime, string? Original) -> void
LM.HubSpoke.Abstractions.CasResult.Mime.get -> string?
LM.HubSpoke.Abstractions.CasResult.Mime.init -> void
LM.HubSpoke.Abstractions.CasResult.Original.get -> string?
LM.HubSpoke.Abstractions.CasResult.Original.init -> void
LM.HubSpoke.Abstractions.CasResult.RelPath.get -> string?
LM.HubSpoke.Abstractions.CasResult.RelPath.init -> void
LM.HubSpoke.Abstractions.CasResult.Sha.get -> string?
LM.HubSpoke.Abstractions.CasResult.Sha.init -> void
LM.HubSpoke.Abstractions.ISimilarityLog
LM.HubSpoke.Abstractions.ISimilarityLog.LogAsync(string! sessionId, string! stagedPath, string! candidateEntryId, double score, string! method, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Abstractions.ISimilarityLog.NewSessionId() -> string!
LM.HubSpoke.Abstractions.ISpokeHandler
LM.HubSpoke.Abstractions.ISpokeHandler.BuildHookAsync(LM.Core.Models.Entry! entry, LM.HubSpoke.Abstractions.CasResult primary, System.Collections.Generic.IEnumerable<string!>! attachmentRelPaths, System.Func<string!, System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.HubSpoke.Abstractions.CasResult>!>! moveToCas, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Abstractions.ISpokeHandler.BuildIndex(LM.HubSpoke.Models.EntryHub! hub, object? hook, string? extractedFullText) -> LM.HubSpoke.Abstractions.SpokeIndexContribution
LM.HubSpoke.Abstractions.ISpokeHandler.Handles.get -> LM.Core.Models.EntryType
LM.HubSpoke.Abstractions.ISpokeHandler.HookPath.get -> string!
LM.HubSpoke.Abstractions.ISpokeHandler.LoadHookAsync(LM.Core.Abstractions.IWorkSpaceService! ws, string! entryId, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Abstractions.ISpokeHandler.MapToEntry(LM.HubSpoke.Models.EntryHub! hub, object? hook) -> LM.Core.Models.Entry!
LM.HubSpoke.Abstractions.SpokeIndexContribution
LM.HubSpoke.Abstractions.SpokeIndexContribution.Abstract.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Abstract.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.AssetHashes.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Abstractions.SpokeIndexContribution.AssetHashes.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Authors.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Abstractions.SpokeIndexContribution.Authors.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Doi.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Doi.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.FullText.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.FullText.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Journal.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Journal.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Keywords.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Abstractions.SpokeIndexContribution.Keywords.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Pmid.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Pmid.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.SpokeIndexContribution() -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.SpokeIndexContribution(string? Title, string? Abstract, System.Collections.Generic.IReadOnlyList<string!>! Authors, System.Collections.Generic.IReadOnlyList<string!>! Keywords, string? Journal, string? Doi, string? Pmid, int? Year, System.Collections.Generic.IReadOnlyList<string!>! AssetHashes, string? FullText) -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Title.get -> string?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Title.init -> void
LM.HubSpoke.Abstractions.SpokeIndexContribution.Year.get -> int?
LM.HubSpoke.Abstractions.SpokeIndexContribution.Year.init -> void
LM.HubSpoke.Entries.HubSpokeStore
LM.HubSpoke.Entries.HubSpokeStore.EnumerateAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<LM.Core.Models.Entry!>!
LM.HubSpoke.Entries.HubSpokeStore.FindByHashAsync(string! sha256, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.HubSpoke.Entries.HubSpokeStore.FindByIdsAsync(string? doi, string? pmid, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.HubSpoke.Entries.HubSpokeStore.FindSimilarByNameYearAsync(string! title, int? year, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.HubSpoke.Entries.HubSpokeStore.FullTextSearch.get -> LM.Core.Abstractions.IFullTextSearchService!
LM.HubSpoke.Entries.HubSpokeStore.GetByIdAsync(string! id, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.HubSpoke.Entries.HubSpokeStore.HubSpokeStore(LM.Core.Abstractions.IWorkSpaceService! ws, LM.Core.Abstractions.IHasher! hasher, System.Collections.Generic.IEnumerable<LM.HubSpoke.Abstractions.ISpokeHandler!>! handlers, LM.Core.Abstractions.IContentExtractor? contentExtractor = null, LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub? graphHub = null) -> void
LM.HubSpoke.Entries.HubSpokeStore.HubSpokeStore(LM.Core.Abstractions.IWorkSpaceService! ws, LM.Core.Abstractions.IHasher! hasher, System.Collections.Generic.IEnumerable<LM.HubSpoke.Abstractions.ISpokeHandler!>! handlers, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.Core.Abstractions.IContentExtractor? contentExtractor = null, LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub? graphHub = null) -> void
LM.HubSpoke.Entries.HubSpokeStore.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Entries.HubSpokeStore.SaveAsync(LM.Core.Models.Entry! entry, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Entries.HubSpokeStore.SearchAsync(LM.Core.Models.Filters.EntryFilter! filter, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.HubSpoke.Indexing.SimilarityLog
LM.HubSpoke.Indexing.SimilarityLog.LogAsync(string! sessionId, string! stagedPath, string! candidateEntryId, double score, string! method, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Indexing.SimilarityLog.NewSessionId() -> string!
LM.HubSpoke.Indexing.SimilarityLog.SimilarityLog(LM.Core.Abstractions.IWorkSpaceService! ws) -> void
LM.HubSpoke.Models.AbstractSection
LM.HubSpoke.Models.AbstractSection.AbstractSection() -> void
LM.HubSpoke.Models.AbstractSection.Label.get -> string?
LM.HubSpoke.Models.AbstractSection.Label.init -> void
LM.HubSpoke.Models.AbstractSection.Text.get -> string!
LM.HubSpoke.Models.AbstractSection.Text.init -> void
LM.HubSpoke.Models.Affiliation
LM.HubSpoke.Models.Affiliation.Affiliation() -> void
LM.HubSpoke.Models.Affiliation.Email.get -> string?
LM.HubSpoke.Models.Affiliation.Email.init -> void
LM.HubSpoke.Models.Affiliation.Text.get -> string!
LM.HubSpoke.Models.Affiliation.Text.init -> void
LM.HubSpoke.Models.AttachmentHook
LM.HubSpoke.Models.AttachmentHook.AttachmentHook() -> void
LM.HubSpoke.Models.AttachmentHook.Attachments.get -> System.Collections.Generic.List<LM.HubSpoke.Models.AttachmentHookItem!>!
LM.HubSpoke.Models.AttachmentHook.Attachments.set -> void
LM.HubSpoke.Models.AttachmentHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.AttachmentHook.SchemaVersion.init -> void
LM.HubSpoke.Models.AttachmentHookItem
LM.HubSpoke.Models.AttachmentHookItem.AddedBy.get -> string!
LM.HubSpoke.Models.AttachmentHookItem.AddedBy.init -> void
LM.HubSpoke.Models.AttachmentHookItem.AddedUtc.get -> System.DateTime
LM.HubSpoke.Models.AttachmentHookItem.AddedUtc.init -> void
LM.HubSpoke.Models.AttachmentHookItem.AttachmentHookItem() -> void
LM.HubSpoke.Models.AttachmentHookItem.AttachmentId.get -> string!
LM.HubSpoke.Models.AttachmentHookItem.AttachmentId.init -> void
LM.HubSpoke.Models.AttachmentHookItem.LibraryPath.get -> string!
LM.HubSpoke.Models.AttachmentHookItem.LibraryPath.init -> void
LM.HubSpoke.Models.AttachmentHookItem.Notes.get -> string?
LM.HubSpoke.Models.AttachmentHookItem.Notes.init -> void
LM.HubSpoke.Models.AttachmentHookItem.Purpose.get -> LM.Core.Models.AttachmentKind
LM.HubSpoke.Models.AttachmentHookItem.Purpose.init -> void
LM.HubSpoke.Models.AttachmentHookItem.Tags.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.AttachmentHookItem.Tags.init -> void
LM.HubSpoke.Models.AttachmentHookItem.Title.get -> string!
LM.HubSpoke.Models.AttachmentHookItem.Title.init -> void
LM.HubSpoke.Models.ArticleAbstract
LM.HubSpoke.Models.ArticleAbstract.ArticleAbstract() -> void
LM.HubSpoke.Models.ArticleAbstract.Sections.get -> System.Collections.Generic.List<LM.HubSpoke.Models.AbstractSection!>!
LM.HubSpoke.Models.ArticleAbstract.Sections.init -> void
LM.HubSpoke.Models.ArticleAbstract.Text.get -> string?
LM.HubSpoke.Models.ArticleAbstract.Text.init -> void
LM.HubSpoke.Models.ArticleAsset
LM.HubSpoke.Models.ArticleAsset.ArticleAsset() -> void
LM.HubSpoke.Models.ArticleAsset.Bytes.get -> long
LM.HubSpoke.Models.ArticleAsset.Bytes.init -> void
LM.HubSpoke.Models.ArticleAsset.ContentType.get -> string!
LM.HubSpoke.Models.ArticleAsset.ContentType.init -> void
LM.HubSpoke.Models.ArticleAsset.Hash.get -> string!
LM.HubSpoke.Models.ArticleAsset.Hash.init -> void
LM.HubSpoke.Models.ArticleAsset.OriginalFilename.get -> string?
LM.HubSpoke.Models.ArticleAsset.OriginalFilename.init -> void
LM.HubSpoke.Models.ArticleAsset.OriginalFolderPath.get -> string?
LM.HubSpoke.Models.ArticleAsset.OriginalFolderPath.init -> void
LM.HubSpoke.Models.ArticleAsset.Purpose.get -> LM.HubSpoke.Models.ArticleAssetPurpose
LM.HubSpoke.Models.ArticleAsset.Purpose.init -> void
LM.HubSpoke.Models.ArticleAsset.StoragePath.get -> string!
LM.HubSpoke.Models.ArticleAsset.StoragePath.init -> void
LM.HubSpoke.Models.ArticleAsset.Title.get -> string!
LM.HubSpoke.Models.ArticleAsset.Title.init -> void
LM.HubSpoke.Models.ArticleAssetPurpose
LM.HubSpoke.Models.ArticleAssetPurpose.Manuscript = 0 -> LM.HubSpoke.Models.ArticleAssetPurpose
LM.HubSpoke.Models.ArticleAssetPurpose.Supplement = 1 -> LM.HubSpoke.Models.ArticleAssetPurpose
LM.HubSpoke.Models.ArticleDates
LM.HubSpoke.Models.ArticleDates.Accepted.get -> System.DateTimeOffset?
LM.HubSpoke.Models.ArticleDates.Accepted.init -> void
LM.HubSpoke.Models.ArticleDates.ArticleDates() -> void
LM.HubSpoke.Models.ArticleDates.Electronic.get -> System.DateTimeOffset?
LM.HubSpoke.Models.ArticleDates.Electronic.init -> void
LM.HubSpoke.Models.ArticleDates.Print.get -> System.DateTimeOffset?
LM.HubSpoke.Models.ArticleDates.Print.init -> void
LM.HubSpoke.Models.ArticleDates.Received.get -> System.DateTimeOffset?
LM.HubSpoke.Models.ArticleDates.Received.init -> void
LM.HubSpoke.Models.ArticleDates.Revised.get -> System.DateTimeOffset?
LM.HubSpoke.Models.ArticleDates.Revised.init -> void
LM.HubSpoke.Models.ArticleDetails
LM.HubSpoke.Models.ArticleDetails.ArticleDetails() -> void
LM.HubSpoke.Models.ArticleDetails.Dates.get -> LM.HubSpoke.Models.ArticleDates!
LM.HubSpoke.Models.ArticleDetails.Dates.init -> void
LM.HubSpoke.Models.ArticleDetails.Language.get -> string?
LM.HubSpoke.Models.ArticleDetails.Language.init -> void
LM.HubSpoke.Models.ArticleDetails.Pagination.get -> LM.HubSpoke.Models.Pagination!
LM.HubSpoke.Models.ArticleDetails.Pagination.init -> void
LM.HubSpoke.Models.ArticleDetails.PublicationTypes.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.ArticleDetails.PublicationTypes.init -> void
LM.HubSpoke.Models.ArticleDetails.Status.get -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.ArticleDetails.Status.init -> void
LM.HubSpoke.Models.ArticleDetails.Title.get -> string!
LM.HubSpoke.Models.ArticleDetails.Title.init -> void
LM.HubSpoke.Models.ArticleHook
LM.HubSpoke.Models.ArticleHook.Abstract.get -> LM.HubSpoke.Models.ArticleAbstract?
LM.HubSpoke.Models.ArticleHook.Abstract.init -> void
LM.HubSpoke.Models.ArticleHook.Article.get -> LM.HubSpoke.Models.ArticleDetails!
LM.HubSpoke.Models.ArticleHook.Article.init -> void
LM.HubSpoke.Models.ArticleHook.ArticleHook() -> void
LM.HubSpoke.Models.ArticleHook.Assets.get -> System.Collections.Generic.List<LM.HubSpoke.Models.ArticleAsset!>!
LM.HubSpoke.Models.ArticleHook.Assets.init -> void
LM.HubSpoke.Models.ArticleHook.Authors.get -> System.Collections.Generic.List<LM.HubSpoke.Models.Author!>!
LM.HubSpoke.Models.ArticleHook.Authors.init -> void
LM.HubSpoke.Models.ArticleHook.Chemicals.get -> System.Collections.Generic.List<LM.HubSpoke.Models.Chemical!>!
LM.HubSpoke.Models.ArticleHook.Chemicals.init -> void
LM.HubSpoke.Models.ArticleHook.ConflictOfInterest.get -> string?
LM.HubSpoke.Models.ArticleHook.ConflictOfInterest.init -> void
LM.HubSpoke.Models.ArticleHook.Copyright.get -> string?
LM.HubSpoke.Models.ArticleHook.Copyright.init -> void
LM.HubSpoke.Models.ArticleHook.Grants.get -> System.Collections.Generic.List<LM.HubSpoke.Models.Grant!>!
LM.HubSpoke.Models.ArticleHook.Grants.init -> void
LM.HubSpoke.Models.ArticleHook.History.get -> LM.HubSpoke.Models.PublicationHistory!
LM.HubSpoke.Models.ArticleHook.History.init -> void
LM.HubSpoke.Models.ArticleHook.Identifier.get -> LM.HubSpoke.Models.ArticleIdentifier!
LM.HubSpoke.Models.ArticleHook.Identifier.init -> void
LM.HubSpoke.Models.ArticleHook.Journal.get -> LM.HubSpoke.Models.JournalInfo!
LM.HubSpoke.Models.ArticleHook.Journal.init -> void
LM.HubSpoke.Models.ArticleHook.Keywords.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.ArticleHook.Keywords.init -> void
LM.HubSpoke.Models.ArticleHook.Medline.get -> LM.HubSpoke.Models.MedlineInfo!
LM.HubSpoke.Models.ArticleHook.Medline.init -> void
LM.HubSpoke.Models.ArticleHook.MeshHeadings.get -> System.Collections.Generic.List<LM.HubSpoke.Models.MeshHeading!>!
LM.HubSpoke.Models.ArticleHook.MeshHeadings.init -> void
LM.HubSpoke.Models.ArticleHook.References.get -> System.Collections.Generic.List<LM.HubSpoke.Models.Citation!>!
LM.HubSpoke.Models.ArticleHook.References.init -> void
LM.HubSpoke.Models.ArticleHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.ArticleHook.SchemaVersion.init -> void
LM.HubSpoke.Models.ArticleIdentifier
LM.HubSpoke.Models.ArticleIdentifier.ArticleIdentifier() -> void
LM.HubSpoke.Models.ArticleIdentifier.DOI.get -> string?
LM.HubSpoke.Models.ArticleIdentifier.DOI.init -> void
LM.HubSpoke.Models.ArticleIdentifier.OtherIds.get -> System.Collections.Generic.Dictionary<string!, string!>!
LM.HubSpoke.Models.ArticleIdentifier.OtherIds.init -> void
LM.HubSpoke.Models.ArticleIdentifier.PII.get -> string?
LM.HubSpoke.Models.ArticleIdentifier.PII.init -> void
LM.HubSpoke.Models.ArticleIdentifier.PMCID.get -> string?
LM.HubSpoke.Models.ArticleIdentifier.PMCID.init -> void
LM.HubSpoke.Models.ArticleIdentifier.PMID.get -> string!
LM.HubSpoke.Models.ArticleIdentifier.PMID.init -> void
LM.HubSpoke.Models.AssetRef
LM.HubSpoke.Models.AssetRef.AssetRef() -> void
LM.HubSpoke.Models.AssetRef.Bytes.get -> long
LM.HubSpoke.Models.AssetRef.Bytes.init -> void
LM.HubSpoke.Models.AssetRef.ContentType.get -> string!
LM.HubSpoke.Models.AssetRef.ContentType.init -> void
LM.HubSpoke.Models.AssetRef.Hash.get -> string!
LM.HubSpoke.Models.AssetRef.Hash.init -> void
LM.HubSpoke.Models.AssetRef.OriginalFilename.get -> string?
LM.HubSpoke.Models.AssetRef.OriginalFilename.init -> void
LM.HubSpoke.Models.AssetRef.Role.get -> string!
LM.HubSpoke.Models.AssetRef.Role.init -> void
LM.HubSpoke.Models.AssetRef.StoragePath.get -> string!
LM.HubSpoke.Models.AssetRef.StoragePath.init -> void
LM.HubSpoke.Models.Author
LM.HubSpoke.Models.Author.Affiliations.get -> System.Collections.Generic.List<LM.HubSpoke.Models.Affiliation!>!
LM.HubSpoke.Models.Author.Affiliations.init -> void
LM.HubSpoke.Models.Author.Author() -> void
LM.HubSpoke.Models.Author.ForeName.get -> string?
LM.HubSpoke.Models.Author.ForeName.init -> void
LM.HubSpoke.Models.Author.Initials.get -> string?
LM.HubSpoke.Models.Author.Initials.init -> void
LM.HubSpoke.Models.Author.LastName.get -> string?
LM.HubSpoke.Models.Author.LastName.init -> void
LM.HubSpoke.Models.Author.ORCID.get -> string?
LM.HubSpoke.Models.Author.ORCID.init -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails
LM.HubSpoke.Models.ChangeLogAttachmentDetails.AttachmentId.get -> string!
LM.HubSpoke.Models.ChangeLogAttachmentDetails.AttachmentId.init -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails.ChangeLogAttachmentDetails() -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails.LibraryPath.get -> string!
LM.HubSpoke.Models.ChangeLogAttachmentDetails.LibraryPath.init -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Purpose.get -> LM.Core.Models.AttachmentKind
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Purpose.init -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Tags.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Tags.init -> void
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Title.get -> string!
LM.HubSpoke.Models.ChangeLogAttachmentDetails.Title.init -> void
LM.HubSpoke.Models.Chemical
LM.HubSpoke.Models.Chemical.Chemical() -> void
LM.HubSpoke.Models.Chemical.Name.get -> string!
LM.HubSpoke.Models.Chemical.Name.init -> void
LM.HubSpoke.Models.Chemical.RegistryNumber.get -> string?
LM.HubSpoke.Models.Chemical.RegistryNumber.init -> void
LM.HubSpoke.Models.Citation
LM.HubSpoke.Models.Citation.Citation() -> void
LM.HubSpoke.Models.Citation.DOI.get -> string?
LM.HubSpoke.Models.Citation.DOI.init -> void
LM.HubSpoke.Models.Citation.PMID.get -> string?
LM.HubSpoke.Models.Citation.PMID.init -> void
LM.HubSpoke.Models.Citation.Text.get -> string!
LM.HubSpoke.Models.Citation.Text.init -> void
LM.HubSpoke.Models.CreationMethod
LM.HubSpoke.Models.CreationMethod.Manual = 0 -> LM.HubSpoke.Models.CreationMethod
LM.HubSpoke.Models.CreationMethod.Search = 1 -> LM.HubSpoke.Models.CreationMethod
LM.HubSpoke.Models.DocumentHook
LM.HubSpoke.Models.DocumentHook.Assets.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.AssetRef!>!
LM.HubSpoke.Models.DocumentHook.Assets.init -> void
LM.HubSpoke.Models.DocumentHook.Description.get -> string?
LM.HubSpoke.Models.DocumentHook.Description.init -> void
LM.HubSpoke.Models.DocumentHook.DocumentHook() -> void
LM.HubSpoke.Models.DocumentHook.DocumentType.get -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentHook.DocumentType.init -> void
LM.HubSpoke.Models.DocumentHook.EffectiveUtc.get -> System.DateTime?
LM.HubSpoke.Models.DocumentHook.EffectiveUtc.init -> void
LM.HubSpoke.Models.DocumentHook.ExpiresUtc.get -> System.DateTime?
LM.HubSpoke.Models.DocumentHook.ExpiresUtc.init -> void
LM.HubSpoke.Models.DocumentHook.Owner.get -> string?
LM.HubSpoke.Models.DocumentHook.Owner.init -> void
LM.HubSpoke.Models.DocumentHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.DocumentHook.SchemaVersion.init -> void
LM.HubSpoke.Models.DocumentHook.Title.get -> string?
LM.HubSpoke.Models.DocumentHook.Title.init -> void
LM.HubSpoke.Models.DocumentHook.Version.get -> string?
LM.HubSpoke.Models.DocumentHook.Version.init -> void
LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.MarketingMaterial = 1 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.Other = 6 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.Poster = 5 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.Presentation = 0 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.Report = 2 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.StandardOperatingProcedure = 3 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.DocumentType.Whitepaper = 4 -> LM.HubSpoke.Models.DocumentType
LM.HubSpoke.Models.EntryChangeLogEvent
LM.HubSpoke.Models.EntryChangeLogEvent.Action.get -> string!
LM.HubSpoke.Models.EntryChangeLogEvent.Action.init -> void
LM.HubSpoke.Models.EntryChangeLogEvent.Details.get -> LM.HubSpoke.Models.ChangeLogAttachmentDetails?
LM.HubSpoke.Models.EntryChangeLogEvent.Details.init -> void
LM.HubSpoke.Models.EntryChangeLogEvent.EntryChangeLogEvent() -> void
LM.HubSpoke.Models.EntryChangeLogEvent.EventId.get -> string!
LM.HubSpoke.Models.EntryChangeLogEvent.EventId.init -> void
LM.HubSpoke.Models.EntryChangeLogEvent.PerformedBy.get -> string!
LM.HubSpoke.Models.EntryChangeLogEvent.PerformedBy.init -> void
LM.HubSpoke.Models.EntryChangeLogEvent.TimestampUtc.get -> System.DateTime
LM.HubSpoke.Models.EntryChangeLogEvent.TimestampUtc.init -> void
LM.HubSpoke.Models.EntryChangeLogHook
LM.HubSpoke.Models.EntryChangeLogHook.EntryChangeLogHook() -> void
LM.HubSpoke.Models.EntryChangeLogHook.Events.get -> System.Collections.Generic.List<LM.HubSpoke.Models.EntryChangeLogEvent!>!
LM.HubSpoke.Models.EntryChangeLogHook.Events.set -> void
LM.HubSpoke.Models.EntryChangeLogHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.EntryChangeLogHook.SchemaVersion.init -> void
LM.HubSpoke.Models.PdfAnnotationPreview
LM.HubSpoke.Models.PdfAnnotationPreview.AnnotationId.get -> string!
LM.HubSpoke.Models.PdfAnnotationPreview.AnnotationId.init -> void
LM.HubSpoke.Models.PdfAnnotationPreview.ImagePath.get -> string!
LM.HubSpoke.Models.PdfAnnotationPreview.ImagePath.init -> void
LM.HubSpoke.Models.PdfAnnotationPreview.PdfAnnotationPreview() -> void
LM.HubSpoke.Models.PdfAnnotationsHook
LM.HubSpoke.Models.PdfAnnotationsHook.Annotations.get -> System.Collections.Generic.List<LM.HubSpoke.Models.PdfAnnotationMetadata!>!
LM.HubSpoke.Models.PdfAnnotationsHook.Annotations.init -> void
LM.HubSpoke.Models.PdfAnnotationsHook.OverlayPath.get -> string!
LM.HubSpoke.Models.PdfAnnotationsHook.OverlayPath.init -> void
LM.HubSpoke.Models.PdfAnnotationsHook.Previews.get -> System.Collections.Generic.List<LM.HubSpoke.Models.PdfAnnotationPreview!>!
LM.HubSpoke.Models.PdfAnnotationsHook.Previews.init -> void
LM.HubSpoke.Models.PdfAnnotationsHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.PdfAnnotationsHook.SchemaVersion.init -> void
LM.HubSpoke.Models.PdfAnnotationsHook.PdfAnnotationsHook() -> void
LM.HubSpoke.Models.PdfAnnotationMetadata
LM.HubSpoke.Models.PdfAnnotationMetadata.AnnotationId.get -> string!
LM.HubSpoke.Models.PdfAnnotationMetadata.AnnotationId.init -> void
LM.HubSpoke.Models.PdfAnnotationMetadata.Color.get -> LM.HubSpoke.Models.PdfAnnotationColorMetadata?
LM.HubSpoke.Models.PdfAnnotationMetadata.Color.init -> void
LM.HubSpoke.Models.PdfAnnotationMetadata.Note.get -> string?
LM.HubSpoke.Models.PdfAnnotationMetadata.Note.init -> void
LM.HubSpoke.Models.PdfAnnotationMetadata.PdfAnnotationMetadata() -> void
LM.HubSpoke.Models.PdfAnnotationMetadata.Text.get -> string?
LM.HubSpoke.Models.PdfAnnotationMetadata.Text.init -> void
LM.HubSpoke.Models.PdfAnnotationColorMetadata
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Blue.get -> int
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Blue.init -> void
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Green.get -> int
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Green.init -> void
LM.HubSpoke.Models.PdfAnnotationColorMetadata.PdfAnnotationColorMetadata() -> void
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Red.get -> int
LM.HubSpoke.Models.PdfAnnotationColorMetadata.Red.init -> void
LM.HubSpoke.Models.EntryHooks
LM.HubSpoke.Models.EntryHooks.Article.get -> string?
LM.HubSpoke.Models.EntryHooks.Article.init -> void
LM.HubSpoke.Models.EntryHooks.LitSearch.get -> string?
LM.HubSpoke.Models.EntryHooks.LitSearch.init -> void
LM.HubSpoke.Models.EntryHooks.DataExtraction.get -> string?
LM.HubSpoke.Models.EntryHooks.DataExtraction.init -> void
LM.HubSpoke.Models.EntryHooks.Document.get -> string?
LM.HubSpoke.Models.EntryHooks.Document.init -> void
LM.HubSpoke.Models.EntryHooks.PdfAnnotations.get -> string?
LM.HubSpoke.Models.EntryHooks.PdfAnnotations.init -> void
LM.HubSpoke.Models.EntryHooks.EntryHooks() -> void
LM.HubSpoke.Models.EntryHooks.History.get -> string?
LM.HubSpoke.Models.EntryHooks.History.init -> void
LM.HubSpoke.Models.EntryHooks.Notes.get -> string?
LM.HubSpoke.Models.EntryHooks.Notes.init -> void
LM.HubSpoke.Models.EntryHooks.Provenance.get -> string?
LM.HubSpoke.Models.EntryHooks.Provenance.init -> void
LM.HubSpoke.Models.EntryHooks.Relations.get -> string?
LM.HubSpoke.Models.EntryHooks.Relations.init -> void
LM.HubSpoke.Models.EntryHooks.SearchHits.get -> string?
LM.HubSpoke.Models.EntryHooks.SearchHits.init -> void
LM.HubSpoke.Models.EntryHooks.Trial.get -> string?
LM.HubSpoke.Models.EntryHooks.Trial.init -> void
LM.HubSpoke.Models.EntryHub
LM.HubSpoke.Models.EntryHub.ConcurrencyStamp.get -> string!
LM.HubSpoke.Models.EntryHub.ConcurrencyStamp.init -> void
LM.HubSpoke.Models.EntryHub.CreatedBy.get -> LM.HubSpoke.Models.PersonRef
LM.HubSpoke.Models.EntryHub.CreatedBy.init -> void
LM.HubSpoke.Models.EntryHub.CreatedUtc.get -> System.DateTime
LM.HubSpoke.Models.EntryHub.CreatedUtc.init -> void
LM.HubSpoke.Models.EntryHub.CreationMethod.get -> LM.HubSpoke.Models.CreationMethod
LM.HubSpoke.Models.EntryHub.CreationMethod.init -> void
LM.HubSpoke.Models.EntryHub.DisplayTitle.get -> string!
LM.HubSpoke.Models.EntryHub.DisplayTitle.init -> void
LM.HubSpoke.Models.EntryHub.EntryHub() -> void
LM.HubSpoke.Models.EntryHub.EntryId.get -> string!
LM.HubSpoke.Models.EntryHub.EntryId.init -> void
LM.HubSpoke.Models.EntryHub.Flags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Models.EntryHub.Flags.init -> void
LM.HubSpoke.Models.EntryHub.Hooks.get -> LM.HubSpoke.Models.EntryHooks!
LM.HubSpoke.Models.EntryHub.Hooks.init -> void
LM.HubSpoke.Models.DataExtractionHook
LM.HubSpoke.Models.DataExtractionHook.Assignments.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.PopulationInterventionAssignment!>!
LM.HubSpoke.Models.DataExtractionHook.Assignments.init -> void
LM.HubSpoke.Models.DataExtractionHook.DataExtractionHook() -> void
LM.HubSpoke.Models.DataExtractionHook.Endpoints.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.ExtractedEndpoint!>!
LM.HubSpoke.Models.DataExtractionHook.Endpoints.init -> void
LM.HubSpoke.Models.DataExtractionHook.EntryId.get -> string!
LM.HubSpoke.Models.DataExtractionHook.EntryId.init -> void
LM.HubSpoke.Models.DataExtractionHook.Interventions.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.ExtractedIntervention!>!
LM.HubSpoke.Models.DataExtractionHook.Interventions.init -> void
LM.HubSpoke.Models.DataExtractionHook.Populations.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.ExtractedPopulation!>!
LM.HubSpoke.Models.DataExtractionHook.Populations.init -> void
LM.HubSpoke.Models.DataExtractionHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.DataExtractionHook.SchemaVersion.init -> void
LM.HubSpoke.Models.DataExtractionHook.Source.get -> string?
LM.HubSpoke.Models.DataExtractionHook.Source.init -> void
LM.HubSpoke.Models.DataExtractionHook.Title.get -> string?
LM.HubSpoke.Models.DataExtractionHook.Title.init -> void
LM.HubSpoke.Models.DataExtractionHook.Year.get -> int?
LM.HubSpoke.Models.DataExtractionHook.Year.init -> void
LM.HubSpoke.Models.ExtractedEndpoint
LM.HubSpoke.Models.ExtractedEndpoint.Category.get -> string!
LM.HubSpoke.Models.ExtractedEndpoint.Category.init -> void
LM.HubSpoke.Models.ExtractedEndpoint.Description.get -> string?
LM.HubSpoke.Models.ExtractedEndpoint.Description.init -> void
LM.HubSpoke.Models.ExtractedEndpoint.ExtractedEndpoint() -> void
LM.HubSpoke.Models.ExtractedEndpoint.Id.get -> string!
LM.HubSpoke.Models.ExtractedEndpoint.Id.init -> void
LM.HubSpoke.Models.ExtractedEndpoint.Name.get -> string!
LM.HubSpoke.Models.ExtractedEndpoint.Name.init -> void
LM.HubSpoke.Models.ExtractedEndpoint.Readouts.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.EndpointReadout!>!
LM.HubSpoke.Models.ExtractedEndpoint.Readouts.init -> void
LM.HubSpoke.Models.ExtractedIntervention
LM.HubSpoke.Models.ExtractedIntervention.Attributes.get -> System.Collections.Generic.IReadOnlyDictionary<string!, string!>?
LM.HubSpoke.Models.ExtractedIntervention.Attributes.init -> void
LM.HubSpoke.Models.ExtractedIntervention.Description.get -> string?
LM.HubSpoke.Models.ExtractedIntervention.Description.init -> void
LM.HubSpoke.Models.ExtractedIntervention.ExtractedIntervention() -> void
LM.HubSpoke.Models.ExtractedIntervention.Id.get -> string!
LM.HubSpoke.Models.ExtractedIntervention.Id.init -> void
LM.HubSpoke.Models.ExtractedIntervention.Name.get -> string!
LM.HubSpoke.Models.ExtractedIntervention.Name.init -> void
LM.HubSpoke.Models.ExtractedIntervention.Type.get -> string?
LM.HubSpoke.Models.ExtractedIntervention.Type.init -> void
LM.HubSpoke.Models.ExtractedPopulation
LM.HubSpoke.Models.ExtractedPopulation.BaselineCharacteristics.get -> System.Collections.Generic.IReadOnlyDictionary<string!, string!>!
LM.HubSpoke.Models.ExtractedPopulation.BaselineCharacteristics.init -> void
LM.HubSpoke.Models.ExtractedPopulation.Description.get -> string?
LM.HubSpoke.Models.ExtractedPopulation.Description.init -> void
LM.HubSpoke.Models.ExtractedPopulation.ExtractedPopulation() -> void
LM.HubSpoke.Models.ExtractedPopulation.Id.get -> string!
LM.HubSpoke.Models.ExtractedPopulation.Id.init -> void
LM.HubSpoke.Models.ExtractedPopulation.Name.get -> string!
LM.HubSpoke.Models.ExtractedPopulation.Name.init -> void
LM.HubSpoke.Models.EndpointReadout
LM.HubSpoke.Models.EndpointReadout.ComparatorInterventionId.get -> string?
LM.HubSpoke.Models.EndpointReadout.ComparatorInterventionId.init -> void
LM.HubSpoke.Models.EndpointReadout.EndpointReadout() -> void
LM.HubSpoke.Models.EndpointReadout.InterventionId.get -> string?
LM.HubSpoke.Models.EndpointReadout.InterventionId.init -> void
LM.HubSpoke.Models.EndpointReadout.KaplanMeierCurve.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Models.KaplanMeierPoint!>?
LM.HubSpoke.Models.EndpointReadout.KaplanMeierCurve.init -> void
LM.HubSpoke.Models.EndpointReadout.Metric.get -> string?
LM.HubSpoke.Models.EndpointReadout.Metric.init -> void
LM.HubSpoke.Models.EndpointReadout.PopulationId.get -> string?
LM.HubSpoke.Models.EndpointReadout.PopulationId.init -> void
LM.HubSpoke.Models.EndpointReadout.Timepoint.get -> string?
LM.HubSpoke.Models.EndpointReadout.Timepoint.init -> void
LM.HubSpoke.Models.EndpointReadout.Unit.get -> string?
LM.HubSpoke.Models.EndpointReadout.Unit.init -> void
LM.HubSpoke.Models.EndpointReadout.Value.get -> double?
LM.HubSpoke.Models.EndpointReadout.Value.init -> void
LM.HubSpoke.Models.KaplanMeierPoint
LM.HubSpoke.Models.KaplanMeierPoint.KaplanMeierPoint() -> void
LM.HubSpoke.Models.KaplanMeierPoint.SurvivalProbability.get -> double
LM.HubSpoke.Models.KaplanMeierPoint.SurvivalProbability.init -> void
LM.HubSpoke.Models.KaplanMeierPoint.Time.get -> double
LM.HubSpoke.Models.KaplanMeierPoint.Time.init -> void
LM.HubSpoke.Models.PopulationInterventionAssignment
LM.HubSpoke.Models.PopulationInterventionAssignment.ArmLabel.get -> string?
LM.HubSpoke.Models.PopulationInterventionAssignment.ArmLabel.init -> void
LM.HubSpoke.Models.PopulationInterventionAssignment.PopulationId.get -> string!
LM.HubSpoke.Models.PopulationInterventionAssignment.PopulationId.init -> void
LM.HubSpoke.Models.PopulationInterventionAssignment.InterventionId.get -> string!
LM.HubSpoke.Models.PopulationInterventionAssignment.InterventionId.init -> void
LM.HubSpoke.Models.PopulationInterventionAssignment.PopulationInterventionAssignment() -> void
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.GetEntryOverviewAsync(string! entryId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview?>!
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.GetKaplanMeierOverlaysAsync(string! entryId, string? endpointId = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.GetMortalityComparisonsAsync(string? entryId = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.RefreshEntryAsync(string! entryId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Hubs.KnowledgeGraph.IKnowledgeGraphHub.SearchBaselineCharacteristicsAsync(string! characteristicSearchTerm, string? valueContains = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.KnowledgeGraphHub(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.GetEntryOverviewAsync(string! entryId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview?>!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.GetKaplanMeierOverlaysAsync(string! entryId, string? endpointId = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.GetMortalityComparisonsAsync(string? entryId = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.RefreshEntryAsync(string! entryId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.HubSpoke.Hubs.KnowledgeGraph.KnowledgeGraphHub.SearchBaselineCharacteristicsAsync(string! characteristicSearchTerm, string? valueContains = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit!>!>!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.BaselineCharacteristicHit(string! entryId, string! entryTitle, string! populationId, string! populationName, string! characteristic, string! value) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.Characteristic.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.EntryId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.EntryTitle.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.PopulationId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.PopulationName.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.BaselineCharacteristicHit.Value.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.GraphEdge(string! sourceType, string! sourceId, string! targetType, string! targetId, string! relationship, string? payloadJson) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.PayloadJson.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.Relationship.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.SourceId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.SourceType.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.TargetId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge.TargetType.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.Edges.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge!>!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.GraphEntryOverview(string! entryId, string! title, System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode!>! populations, System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode!>! interventions, System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode!>! endpoints, System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEdge!>! edges) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.EntryId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.Endpoints.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode!>!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.Interventions.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode!>!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.Populations.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode!>!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEntryOverview.Title.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode.Category.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode.Description.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode.EndpointId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode.GraphEndpointNode(string! endpointId, string! name, string! category, string? description) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.GraphEndpointNode.Name.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode.Description.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode.GraphInterventionNode(string! interventionId, string! name, string? type, string? description) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode.InterventionId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode.Name.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphInterventionNode.Type.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode
LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode.Description.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode.GraphPopulationNode(string! populationId, string! name, string? description) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode.Name.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.GraphPopulationNode.PopulationId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.Curve.get -> System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto!>!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.EndpointId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.EndpointName.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.EntryId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.EntryTitle.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.InterventionId.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.InterventionName.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.KaplanMeierOverlay(string! entryId, string! entryTitle, string! endpointId, string! endpointName, string? populationId, string? interventionId, string? interventionName, System.Collections.Generic.IReadOnlyList<LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto!>! curve) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierOverlay.PopulationId.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto.KaplanMeierPointDto(double time, double survivalProbability) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto.SurvivalProbability.get -> double
LM.HubSpoke.Hubs.KnowledgeGraph.KaplanMeierPointDto.Time.get -> double
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.ComparatorInterventionId.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.ComparatorName.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.EndpointId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.EndpointName.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.EntryId.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.EntryTitle.get -> string!
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.InterventionId.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.InterventionName.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.Metric.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.MortalityComparison(string! entryId, string! entryTitle, string! endpointId, string! endpointName, string? populationId, string? interventionId, string? interventionName, string? comparatorInterventionId, string? comparatorName, double? value, string? unit, string? metric, string? timepoint) -> void
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.PopulationId.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.Timepoint.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.Unit.get -> string?
LM.HubSpoke.Hubs.KnowledgeGraph.MortalityComparison.Value.get -> double?
LM.HubSpoke.Models.EntryHub.LastActivityUtc.get -> System.DateTime?
LM.HubSpoke.Models.EntryHub.LastActivityUtc.init -> void
LM.HubSpoke.Models.EntryHub.Origin.get -> LM.HubSpoke.Models.EntryOrigin
LM.HubSpoke.Models.EntryHub.Origin.init -> void
LM.HubSpoke.Models.EntryHub.PrimaryPurpose.get -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryHub.PrimaryPurpose.init -> void
LM.HubSpoke.Models.EntryHub.PrimaryPurposeSource.get -> LM.HubSpoke.Models.PurposeSource
LM.HubSpoke.Models.EntryHub.PrimaryPurposeSource.init -> void
LM.HubSpoke.Models.EntryHub.RelationsSummary.get -> LM.HubSpoke.Models.EntryRelationsSummary?
LM.HubSpoke.Models.EntryHub.RelationsSummary.init -> void
LM.HubSpoke.Models.EntryHub.SchemaVersion.get -> string!
LM.HubSpoke.Models.EntryHub.SchemaVersion.init -> void
LM.HubSpoke.Models.EntryHub.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Models.EntryHub.Tags.init -> void
LM.HubSpoke.Models.EntryHub.UpdatedBy.get -> LM.HubSpoke.Models.PersonRef
LM.HubSpoke.Models.EntryHub.UpdatedBy.init -> void
LM.HubSpoke.Models.EntryHub.UpdatedUtc.get -> System.DateTime
LM.HubSpoke.Models.EntryHub.UpdatedUtc.init -> void
LM.HubSpoke.Models.EntryNotesHook
LM.HubSpoke.Models.EntryNotesHook.EntryNotesHook() -> void
LM.HubSpoke.Models.EntryNotesHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.EntryNotesHook.SchemaVersion.init -> void
LM.HubSpoke.Models.EntryNotesHook.Summary.get -> LM.HubSpoke.Models.EntryNotesSummary?
LM.HubSpoke.Models.EntryNotesHook.Summary.init -> void
LM.HubSpoke.Models.EntryNotesHook.SummaryText.get -> string?
LM.HubSpoke.Models.EntryNotesHook.UpdatedUtc.get -> System.DateTime
LM.HubSpoke.Models.EntryNotesHook.UpdatedUtc.init -> void
LM.HubSpoke.Models.EntryNotesHook.UserNotes.get -> string?
LM.HubSpoke.Models.EntryNotesHook.UserNotes.init -> void
LM.HubSpoke.Models.EntryNotesSummary
LM.HubSpoke.Models.EntryNotesSummary.EntryNotesSummary() -> void
LM.HubSpoke.Models.EntryNotesSummary.GetRenderedText() -> string?
LM.HubSpoke.Models.EntryNotesSummary.LitSearch.get -> LM.HubSpoke.Models.LitSearchNoteSummary?
LM.HubSpoke.Models.EntryNotesSummary.LitSearch.init -> void
LM.HubSpoke.Models.EntryNotesSummary.RawText.get -> string?
LM.HubSpoke.Models.EntryNotesSummary.RawText.init -> void
LM.HubSpoke.Models.EntryNotesSummary.Rendered.get -> string?
LM.HubSpoke.Models.EntryNotesSummary.Rendered.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary
LM.HubSpoke.Models.LitSearchNoteRunSummary.ExecutedBy.get -> string?
LM.HubSpoke.Models.LitSearchNoteRunSummary.ExecutedBy.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.From.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchNoteRunSummary.From.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.LitSearchNoteRunSummary() -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.RunId.get -> string!
LM.HubSpoke.Models.LitSearchNoteRunSummary.RunId.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.RunUtc.get -> System.DateTime
LM.HubSpoke.Models.LitSearchNoteRunSummary.RunUtc.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.To.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchNoteRunSummary.To.init -> void
LM.HubSpoke.Models.LitSearchNoteRunSummary.TotalHits.get -> int
LM.HubSpoke.Models.LitSearchNoteRunSummary.TotalHits.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary
LM.HubSpoke.Models.LitSearchNoteSummary.CreatedBy.get -> string?
LM.HubSpoke.Models.LitSearchNoteSummary.CreatedBy.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.CreatedUtc.get -> System.DateTime
LM.HubSpoke.Models.LitSearchNoteSummary.CreatedUtc.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.DerivedFromEntryId.get -> string?
LM.HubSpoke.Models.LitSearchNoteSummary.DerivedFromEntryId.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.LatestRun.get -> LM.HubSpoke.Models.LitSearchNoteRunSummary?
LM.HubSpoke.Models.LitSearchNoteSummary.LatestRun.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.LitSearchNoteSummary() -> void
LM.HubSpoke.Models.LitSearchNoteSummary.Provider.get -> string!
LM.HubSpoke.Models.LitSearchNoteSummary.Provider.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.Query.get -> string!
LM.HubSpoke.Models.LitSearchNoteSummary.Query.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.RunCount.get -> int
LM.HubSpoke.Models.LitSearchNoteSummary.RunCount.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.Title.get -> string?
LM.HubSpoke.Models.LitSearchNoteSummary.Title.init -> void
LM.HubSpoke.Models.LitSearchNoteSummary.ToDisplayString() -> string!
LM.HubSpoke.Models.EntryOrigin
LM.HubSpoke.Models.EntryOrigin.External = 0 -> LM.HubSpoke.Models.EntryOrigin
LM.HubSpoke.Models.EntryOrigin.Internal = 1 -> LM.HubSpoke.Models.EntryOrigin
LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Code = 5 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Dataset = 4 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Document = 3 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Manuscript = 1 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Trial = 2 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryPurpose.Unknown = 0 -> LM.HubSpoke.Models.EntryPurpose
LM.HubSpoke.Models.EntryRelationsSummary
LM.HubSpoke.Models.EntryRelationsSummary.EntryRelationsSummary() -> void
LM.HubSpoke.Models.EntryRelationsSummary.RelatedCount.get -> int
LM.HubSpoke.Models.EntryRelationsSummary.RelatedCount.init -> void
LM.HubSpoke.Models.EntryRelationsSummary.RelationsUpdatedUtc.get -> System.DateTime?
LM.HubSpoke.Models.EntryRelationsSummary.RelationsUpdatedUtc.init -> void
LM.HubSpoke.Models.EntryRelationsSummary.VariantOfCount.get -> int
LM.HubSpoke.Models.EntryRelationsSummary.VariantOfCount.init -> void
LM.HubSpoke.Models.Grant
LM.HubSpoke.Models.Grant.Agency.get -> string?
LM.HubSpoke.Models.Grant.Agency.init -> void
LM.HubSpoke.Models.Grant.Country.get -> string?
LM.HubSpoke.Models.Grant.Country.init -> void
LM.HubSpoke.Models.Grant.Grant() -> void
LM.HubSpoke.Models.Grant.GrantId.get -> string?
LM.HubSpoke.Models.Grant.GrantId.init -> void
LM.HubSpoke.Models.JournalInfo
LM.HubSpoke.Models.JournalInfo.Country.get -> string?
LM.HubSpoke.Models.JournalInfo.Country.init -> void
LM.HubSpoke.Models.JournalInfo.ISOAbbreviation.get -> string?
LM.HubSpoke.Models.JournalInfo.ISOAbbreviation.init -> void
LM.HubSpoke.Models.JournalInfo.ISSN.get -> string?
LM.HubSpoke.Models.JournalInfo.ISSN.init -> void
LM.HubSpoke.Models.JournalInfo.ISSNElectronic.get -> string?
LM.HubSpoke.Models.JournalInfo.ISSNElectronic.init -> void
LM.HubSpoke.Models.JournalInfo.ISSNPrint.get -> string?
LM.HubSpoke.Models.JournalInfo.ISSNPrint.init -> void
LM.HubSpoke.Models.JournalInfo.Issue.get -> LM.HubSpoke.Models.JournalIssue!
LM.HubSpoke.Models.JournalInfo.Issue.init -> void
LM.HubSpoke.Models.JournalInfo.JournalInfo() -> void
LM.HubSpoke.Models.JournalInfo.NlmUniqueId.get -> string?
LM.HubSpoke.Models.JournalInfo.NlmUniqueId.init -> void
LM.HubSpoke.Models.JournalInfo.Title.get -> string!
LM.HubSpoke.Models.JournalInfo.Title.init -> void
LM.HubSpoke.Models.JournalIssue
LM.HubSpoke.Models.JournalIssue.JournalIssue() -> void
LM.HubSpoke.Models.JournalIssue.Number.get -> string?
LM.HubSpoke.Models.JournalIssue.Number.init -> void
LM.HubSpoke.Models.JournalIssue.PubDate.get -> LM.HubSpoke.Models.PartialDate?
LM.HubSpoke.Models.JournalIssue.PubDate.init -> void
LM.HubSpoke.Models.JournalIssue.Volume.get -> string?
LM.HubSpoke.Models.JournalIssue.Volume.init -> void
LM.HubSpoke.Models.JsonStd
LM.HubSpoke.Models.LitSearchHook
LM.HubSpoke.Models.LitSearchHook.CreatedBy.get -> string?
LM.HubSpoke.Models.LitSearchHook.CreatedBy.init -> void
LM.HubSpoke.Models.LitSearchHook.CreatedUtc.get -> System.DateTime
LM.HubSpoke.Models.LitSearchHook.CreatedUtc.init -> void
LM.HubSpoke.Models.LitSearchHook.From.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchHook.From.init -> void
LM.HubSpoke.Models.LitSearchHook.Keywords.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.HubSpoke.Models.LitSearchHook.Keywords.init -> void
LM.HubSpoke.Models.LitSearchHook.DerivedFromEntryId.get -> string?
LM.HubSpoke.Models.LitSearchHook.DerivedFromEntryId.init -> void
LM.HubSpoke.Models.LitSearchHook.LitSearchHook() -> void
LM.HubSpoke.Models.LitSearchHook.Provider.get -> string!
LM.HubSpoke.Models.LitSearchHook.Provider.init -> void
LM.HubSpoke.Models.LitSearchHook.Query.get -> string!
LM.HubSpoke.Models.LitSearchHook.Query.init -> void
LM.HubSpoke.Models.LitSearchHook.LegacyNotes.get -> string?
LM.HubSpoke.Models.LitSearchHook.LegacyNotes.init -> void
LM.HubSpoke.Models.LitSearchHook.NotesSummary.get -> string?
LM.HubSpoke.Models.LitSearchHook.NotesSummary.set -> void
LM.HubSpoke.Models.LitSearchHook.UserNotes.get -> string?
LM.HubSpoke.Models.LitSearchHook.UserNotes.set -> void
LM.HubSpoke.Models.LitSearchHook.Runs.get -> System.Collections.Generic.List<LM.HubSpoke.Models.LitSearchRun!>!
LM.HubSpoke.Models.LitSearchHook.Runs.init -> void
LM.HubSpoke.Models.LitSearchHook.SchemaVersion.get -> string!
LM.HubSpoke.Models.LitSearchHook.SchemaVersion.init -> void
LM.HubSpoke.Models.LitSearchHook.Title.get -> string!
LM.HubSpoke.Models.LitSearchHook.Title.init -> void
LM.HubSpoke.Models.LitSearchHook.To.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchHook.To.init -> void
LM.HubSpoke.Models.LitSearchRun
LM.HubSpoke.Models.LitSearchRun.IsFavorite.get -> bool
LM.HubSpoke.Models.LitSearchRun.IsFavorite.init -> void
LM.HubSpoke.Models.LitSearchRun.LitSearchRun() -> void
LM.HubSpoke.Models.LitSearchRun.RawAttachments.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.LitSearchRun.RawAttachments.init -> void
LM.HubSpoke.Models.LitSearchRun.CheckedEntryIdsPath.get -> string?
LM.HubSpoke.Models.LitSearchRun.CheckedEntryIdsPath.set -> void
LM.HubSpoke.Models.LitSearchRun.RunId.get -> string!
LM.HubSpoke.Models.LitSearchRun.RunId.init -> void
LM.HubSpoke.Models.LitSearchRun.RunUtc.get -> System.DateTime
LM.HubSpoke.Models.LitSearchRun.RunUtc.init -> void
LM.HubSpoke.Models.LitSearchRun.ExecutedBy.get -> string?
LM.HubSpoke.Models.LitSearchRun.ExecutedBy.init -> void
LM.HubSpoke.Models.LitSearchRun.From.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchRun.From.init -> void
LM.HubSpoke.Models.LitSearchRun.To.get -> System.DateTime?
LM.HubSpoke.Models.LitSearchRun.To.init -> void
LM.HubSpoke.Models.LitSearchRun.TotalHits.get -> int
LM.HubSpoke.Models.LitSearchRun.TotalHits.init -> void
LM.HubSpoke.Models.MedlineInfo
LM.HubSpoke.Models.MedlineInfo.CitationSubset.get -> string?
LM.HubSpoke.Models.MedlineInfo.CitationSubset.init -> void
LM.HubSpoke.Models.MedlineInfo.MedlineInfo() -> void
LM.HubSpoke.Models.MedlineInfo.PublicationStatusRaw.get -> string?
LM.HubSpoke.Models.MedlineInfo.PublicationStatusRaw.init -> void
LM.HubSpoke.Models.MeshHeading
LM.HubSpoke.Models.MeshHeading.Descriptor.get -> string!
LM.HubSpoke.Models.MeshHeading.Descriptor.init -> void
LM.HubSpoke.Models.MeshHeading.MajorTopic.get -> bool
LM.HubSpoke.Models.MeshHeading.MajorTopic.init -> void
LM.HubSpoke.Models.MeshHeading.MeshHeading() -> void
LM.HubSpoke.Models.MeshHeading.Qualifiers.get -> System.Collections.Generic.List<string!>!
LM.HubSpoke.Models.MeshHeading.Qualifiers.init -> void
LM.HubSpoke.Models.NullableUtcDateTimeConverter
LM.HubSpoke.Models.NullableUtcDateTimeConverter.NullableUtcDateTimeConverter() -> void
LM.HubSpoke.Models.Pagination
LM.HubSpoke.Models.Pagination.ArticleNumber.get -> string?
LM.HubSpoke.Models.Pagination.ArticleNumber.init -> void
LM.HubSpoke.Models.Pagination.EndPage.get -> string?
LM.HubSpoke.Models.Pagination.EndPage.init -> void
LM.HubSpoke.Models.Pagination.Pagination() -> void
LM.HubSpoke.Models.Pagination.StartPage.get -> string?
LM.HubSpoke.Models.Pagination.StartPage.init -> void
LM.HubSpoke.Models.PartialDate
LM.HubSpoke.Models.PartialDate.Day.get -> int?
LM.HubSpoke.Models.PartialDate.Day.init -> void
LM.HubSpoke.Models.PartialDate.Month.get -> int?
LM.HubSpoke.Models.PartialDate.Month.init -> void
LM.HubSpoke.Models.PartialDate.PartialDate() -> void
LM.HubSpoke.Models.PartialDate.ToDateTimeOrNull() -> System.DateTime?
LM.HubSpoke.Models.PartialDate.Year.get -> int
LM.HubSpoke.Models.PartialDate.Year.init -> void
LM.HubSpoke.Models.PersonRef
LM.HubSpoke.Models.PersonRef.DisplayName.get -> string?
LM.HubSpoke.Models.PersonRef.DisplayName.init -> void
LM.HubSpoke.Models.PersonRef.Id.get -> string!
LM.HubSpoke.Models.PersonRef.Id.init -> void
LM.HubSpoke.Models.PersonRef.PersonRef() -> void
LM.HubSpoke.Models.PersonRef.PersonRef(string! Id, string? DisplayName) -> void
LM.HubSpoke.Models.PersonRef.TimestampUtc.get -> System.DateTime?
LM.HubSpoke.Models.PersonRef.TimestampUtc.init -> void
LM.HubSpoke.Models.PublicationHistory
LM.HubSpoke.Models.PublicationHistory.Accepted.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.Accepted.init -> void
LM.HubSpoke.Models.PublicationHistory.Entrez.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.Entrez.init -> void
LM.HubSpoke.Models.PublicationHistory.Medline.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.Medline.init -> void
LM.HubSpoke.Models.PublicationHistory.PublicationHistory() -> void
LM.HubSpoke.Models.PublicationHistory.PubMed.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.PubMed.init -> void
LM.HubSpoke.Models.PublicationHistory.Received.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.Received.init -> void
LM.HubSpoke.Models.PublicationHistory.Revised.get -> System.DateTimeOffset?
LM.HubSpoke.Models.PublicationHistory.Revised.init -> void
LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.AheadOfPrint = 1 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.EPublish = 2 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.Medline = 4 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.PPublish = 3 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.PubMedNotMedline = 5 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PubStatus.Unknown = 0 -> LM.HubSpoke.Models.PubStatus
LM.HubSpoke.Models.PurposeSource
LM.HubSpoke.Models.PurposeSource.Inferred = 0 -> LM.HubSpoke.Models.PurposeSource
LM.HubSpoke.Models.PurposeSource.Manual = 1 -> LM.HubSpoke.Models.PurposeSource
LM.HubSpoke.Models.UtcDateTimeConverter
LM.HubSpoke.Models.UtcDateTimeConverter.UtcDateTimeConverter() -> void
LM.HubSpoke.Spokes.ArticleSpokeHandler
LM.HubSpoke.Spokes.ArticleSpokeHandler.ArticleSpokeHandler() -> void
LM.HubSpoke.Spokes.ArticleSpokeHandler.BuildHookAsync(LM.Core.Models.Entry! entry, LM.HubSpoke.Abstractions.CasResult primary, System.Collections.Generic.IEnumerable<string!>! attachmentRelPaths, System.Func<string!, System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.HubSpoke.Abstractions.CasResult>!>! moveToCas, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.ArticleSpokeHandler.BuildIndex(LM.HubSpoke.Models.EntryHub! hub, object? hookObj, string? fullText) -> LM.HubSpoke.Abstractions.SpokeIndexContribution
LM.HubSpoke.Spokes.ArticleSpokeHandler.Handles.get -> LM.Core.Models.EntryType
LM.HubSpoke.Spokes.ArticleSpokeHandler.HookPath.get -> string!
LM.HubSpoke.Spokes.ArticleSpokeHandler.LoadHookAsync(LM.Core.Abstractions.IWorkSpaceService! ws, string! entryId, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.ArticleSpokeHandler.MapToEntry(LM.HubSpoke.Models.EntryHub! hub, object? hookObj) -> LM.Core.Models.Entry!
LM.HubSpoke.Spokes.DocumentSpokeHandler
LM.HubSpoke.Spokes.DocumentSpokeHandler.BuildHookAsync(LM.Core.Models.Entry! entry, LM.HubSpoke.Abstractions.CasResult primary, System.Collections.Generic.IEnumerable<string!>! attachmentRelPaths, System.Func<string!, System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.HubSpoke.Abstractions.CasResult>!>! moveToCas, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.DocumentSpokeHandler.BuildIndex(LM.HubSpoke.Models.EntryHub! hub, object? hookObj, string? fullText) -> LM.HubSpoke.Abstractions.SpokeIndexContribution
LM.HubSpoke.Spokes.DocumentSpokeHandler.DocumentSpokeHandler() -> void
LM.HubSpoke.Spokes.DocumentSpokeHandler.Handles.get -> LM.Core.Models.EntryType
LM.HubSpoke.Spokes.DocumentSpokeHandler.HookPath.get -> string!
LM.HubSpoke.Spokes.DocumentSpokeHandler.LoadHookAsync(LM.Core.Abstractions.IWorkSpaceService! ws, string! entryId, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.DocumentSpokeHandler.MapToEntry(LM.HubSpoke.Models.EntryHub! hub, object? hookObj) -> LM.Core.Models.Entry!
LM.HubSpoke.Spokes.LitSearchSpokeHandler
LM.HubSpoke.Spokes.LitSearchSpokeHandler.BuildHookAsync(LM.Core.Models.Entry! entry, LM.HubSpoke.Abstractions.CasResult primary, System.Collections.Generic.IEnumerable<string!>! attachmentRelPaths, System.Func<string!, System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.HubSpoke.Abstractions.CasResult>!>! moveToCas, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.LitSearchSpokeHandler.BuildIndex(LM.HubSpoke.Models.EntryHub! hub, object? hookObj, string? extractedFullText) -> LM.HubSpoke.Abstractions.SpokeIndexContribution
LM.HubSpoke.Spokes.LitSearchSpokeHandler.Handles.get -> LM.Core.Models.EntryType
LM.HubSpoke.Spokes.LitSearchSpokeHandler.HookPath.get -> string!
LM.HubSpoke.Spokes.LitSearchSpokeHandler.LitSearchSpokeHandler(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.HubSpoke.Spokes.LitSearchSpokeHandler.LoadHookAsync(LM.Core.Abstractions.IWorkSpaceService! ws, string! entryId, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<object?>!
LM.HubSpoke.Spokes.LitSearchSpokeHandler.MapToEntry(LM.HubSpoke.Models.EntryHub! hub, object? hookObj) -> LM.Core.Models.Entry!
override LM.HubSpoke.Models.NullableUtcDateTimeConverter.Read(ref System.Text.Json.Utf8JsonReader reader, System.Type! typeToConvert, System.Text.Json.JsonSerializerOptions! options) -> System.DateTime?
override LM.HubSpoke.Models.NullableUtcDateTimeConverter.Write(System.Text.Json.Utf8JsonWriter! writer, System.DateTime? value, System.Text.Json.JsonSerializerOptions! options) -> void
override LM.HubSpoke.Models.UtcDateTimeConverter.Read(ref System.Text.Json.Utf8JsonReader reader, System.Type! typeToConvert, System.Text.Json.JsonSerializerOptions! options) -> System.DateTime
override LM.HubSpoke.Models.UtcDateTimeConverter.Write(System.Text.Json.Utf8JsonWriter! writer, System.DateTime value, System.Text.Json.JsonSerializerOptions! options) -> void
static LM.HubSpoke.Models.EntryNotesSummary.FromLitSearch(LM.HubSpoke.Models.LitSearchNoteSummary! summary, string? renderedText) -> LM.HubSpoke.Models.EntryNotesSummary!
static LM.HubSpoke.Models.EntryNotesSummary.FromRawText(string! text) -> LM.HubSpoke.Models.EntryNotesSummary!
static LM.HubSpoke.Models.PersonRef.Unknown.get -> LM.HubSpoke.Models.PersonRef
static readonly LM.HubSpoke.Models.JsonStd.Options -> System.Text.Json.JsonSerializerOptions!
---------- LM.Review.Core ----------
#nullable enable
LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConflictState.None = 0 -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConflictState.Conflict = 1 -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConflictState.Escalated = 2 -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConflictState.Resolved = 3 -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.Pending = 0 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.InProgress = 1 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.Included = 2 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.Excluded = 3 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.Escalated = 4 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewerRole.Primary = 0 -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewerRole.Secondary = 1 -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewerRole.TieBreaker = 2 -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewerRole.Arbitrator = 3 -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewStageType.TitleScreening = 0 -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewStageType.FullTextReview = 1 -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewStageType.ConsensusMeeting = 2 -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewStageType.QualityAssurance = 3 -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewerDecision
LM.Review.Core.Models.ReviewerDecision.AssignmentId.get -> string!
static LM.Review.Core.Models.ReviewerDecision.Create(string! assignmentId, string! reviewerId, LM.Review.Core.Models.ScreeningStatus decision, System.DateTimeOffset decidedAtUtc, string? notes = null) -> LM.Review.Core.Models.ReviewerDecision!
LM.Review.Core.Models.ReviewerDecision.DecidedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ReviewerDecision.Decision.get -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ReviewerDecision.Notes.get -> string?
LM.Review.Core.Models.ReviewerDecision.ReviewerId.get -> string!
LM.Review.Core.Models.ConsensusOutcome
LM.Review.Core.Models.ConsensusOutcome.Approved.get -> bool
static LM.Review.Core.Models.ConsensusOutcome.Create(string! stageId, bool approved, LM.Review.Core.Models.ConflictState resultingState, System.DateTimeOffset resolvedAtUtc, string? notes = null, string? resolvedBy = null) -> LM.Review.Core.Models.ConsensusOutcome!
LM.Review.Core.Models.ConsensusOutcome.Notes.get -> string?
LM.Review.Core.Models.ConsensusOutcome.ResolvedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ConsensusOutcome.ResolvedBy.get -> string?
LM.Review.Core.Models.ConsensusOutcome.ResultingState.get -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConsensusOutcome.StageId.get -> string!
LM.Review.Core.Models.ReviewAuditTrail
LM.Review.Core.Models.ReviewAuditTrail.Append(LM.Review.Core.Models.ReviewAuditTrail.AuditEntry! entry) -> LM.Review.Core.Models.ReviewAuditTrail!
static LM.Review.Core.Models.ReviewAuditTrail.Create(System.Collections.Generic.IEnumerable<LM.Review.Core.Models.ReviewAuditTrail.AuditEntry!>? entries = null) -> LM.Review.Core.Models.ReviewAuditTrail!
LM.Review.Core.Models.ReviewAuditTrail.Entries.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewAuditTrail.AuditEntry!>!
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Action.get -> string!
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Actor.get -> string!
static LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Create(string! id, string! actor, string! action, System.DateTimeOffset occurredAtUtc, string? details = null) -> LM.Review.Core.Models.ReviewAuditTrail.AuditEntry!
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Details.get -> string?
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Id.get -> string!
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.OccurredAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ReviewProject
LM.Review.Core.Models.ReviewProject.AuditTrail.get -> LM.Review.Core.Models.ReviewAuditTrail!
static LM.Review.Core.Models.ReviewProject.Create(string! id, string! name, System.DateTimeOffset createdAtUtc, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.StageDefinition!>! stageDefinitions, LM.Review.Core.Models.ReviewProjectMetadata? metadata = null, LM.Review.Core.Models.ReviewAuditTrail? auditTrail = null) -> LM.Review.Core.Models.ReviewProject!
LM.Review.Core.Models.ReviewProject.CreatedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ReviewProject.Id.get -> string!
LM.Review.Core.Models.ReviewProject.Name.get -> string!
LM.Review.Core.Models.ReviewProject.Metadata.get -> LM.Review.Core.Models.ReviewProjectMetadata!
LM.Review.Core.Models.ReviewProject.StageDefinitions.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.StageDefinition!>!
LM.Review.Core.Models.ReviewStage
LM.Review.Core.Models.ReviewStage.ActivatedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ReviewStage.Assignments.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ScreeningAssignment!>!
LM.Review.Core.Models.ReviewStage.CompletedAt.get -> System.DateTimeOffset?
LM.Review.Core.Models.ReviewStage.Consensus.get -> LM.Review.Core.Models.ConsensusOutcome?
LM.Review.Core.Models.ReviewStage.ConflictState.get -> LM.Review.Core.Models.ConflictState
static LM.Review.Core.Models.ReviewStage.Create(string! id, string! projectId, LM.Review.Core.Models.StageDefinition! definition, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.ScreeningAssignment!>! assignments, LM.Review.Core.Models.ConflictState conflictState, System.DateTimeOffset activatedAtUtc, System.DateTimeOffset? completedAtUtc = null, LM.Review.Core.Models.ConsensusOutcome? consensus = null) -> LM.Review.Core.Models.ReviewStage!
LM.Review.Core.Models.ReviewStage.Definition.get -> LM.Review.Core.Models.StageDefinition!
LM.Review.Core.Models.ReviewStage.Id.get -> string!
LM.Review.Core.Models.ReviewStage.IsComplete.get -> bool
LM.Review.Core.Models.ReviewStage.ProjectId.get -> string!
LM.Review.Core.Models.StageDefinition
LM.Review.Core.Models.StageDefinition.ConsensusPolicy.get -> LM.Review.Core.Models.StageConsensusPolicy!
static LM.Review.Core.Models.StageDefinition.Create(string! id, string! name, LM.Review.Core.Models.ReviewStageType stageType, LM.Review.Core.Models.ReviewerRequirement! reviewerRequirement, LM.Review.Core.Models.StageConsensusPolicy! consensusPolicy, LM.Review.Core.Models.StageDisplayProfile! displayProfile) -> LM.Review.Core.Models.StageDefinition!
LM.Review.Core.Models.StageDefinition.Id.get -> string!
LM.Review.Core.Models.StageDefinition.Name.get -> string!
LM.Review.Core.Models.StageDefinition.ReviewerRequirement.get -> LM.Review.Core.Models.ReviewerRequirement!
LM.Review.Core.Models.StageDefinition.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.StageDefinition.DisplayProfile.get -> LM.Review.Core.Models.StageDisplayProfile!
LM.Review.Core.Models.StageConsensusPolicy
LM.Review.Core.Models.StageConsensusPolicy.ArbitrationRole.get -> LM.Review.Core.Models.ReviewerRole?
static LM.Review.Core.Models.StageConsensusPolicy.Disabled() -> LM.Review.Core.Models.StageConsensusPolicy!
LM.Review.Core.Models.StageConsensusPolicy.EscalateOnDisagreement.get -> bool
LM.Review.Core.Models.StageConsensusPolicy.MinimumAgreements.get -> int
static LM.Review.Core.Models.StageConsensusPolicy.RequireAgreement(int minimumAgreements, bool escalateOnDisagreement, LM.Review.Core.Models.ReviewerRole? arbitrationRole) -> LM.Review.Core.Models.StageConsensusPolicy!
LM.Review.Core.Models.StageConsensusPolicy.RequiresConsensus.get -> bool
LM.Review.Core.Models.ReviewerRequirement
static LM.Review.Core.Models.ReviewerRequirement.Create(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<LM.Review.Core.Models.ReviewerRole, int>>! requirements) -> LM.Review.Core.Models.ReviewerRequirement!
LM.Review.Core.Models.ReviewerRequirement.GetRequirement(LM.Review.Core.Models.ReviewerRole role) -> int
LM.Review.Core.Models.ReviewerRequirement.Requirements.get -> System.Collections.Generic.IReadOnlyDictionary<LM.Review.Core.Models.ReviewerRole, int>!
LM.Review.Core.Models.ReviewerRequirement.TotalRequired.get -> int
LM.Review.Core.Models.ScreeningAssignment
LM.Review.Core.Models.ScreeningAssignment.AssignedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ScreeningAssignment.CompletedAt.get -> System.DateTimeOffset?
static LM.Review.Core.Models.ScreeningAssignment.Create(string! id, string! stageId, string! reviewerId, LM.Review.Core.Models.ReviewerRole role, LM.Review.Core.Models.ScreeningStatus status, System.DateTimeOffset assignedAtUtc, System.DateTimeOffset? completedAtUtc = null, LM.Review.Core.Models.ReviewerDecision? decision = null) -> LM.Review.Core.Models.ScreeningAssignment!
LM.Review.Core.Models.ScreeningAssignment.Decision.get -> LM.Review.Core.Models.ReviewerDecision?
LM.Review.Core.Models.ScreeningAssignment.Id.get -> string!
LM.Review.Core.Models.ScreeningAssignment.ReviewerId.get -> string!
LM.Review.Core.Models.ScreeningAssignment.Role.get -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ScreeningAssignment.StageId.get -> string!
LM.Review.Core.Models.ScreeningAssignment.Status.get -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.Forms.ExtractionForm
LM.Review.Core.Models.Forms.ExtractionForm.Category.get -> string?
static LM.Review.Core.Models.Forms.ExtractionForm.Create(string! id, string! name, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.Forms.FormSection!>! sections, string? description = null, string? category = null) -> LM.Review.Core.Models.Forms.ExtractionForm!
LM.Review.Core.Models.Forms.ExtractionForm.Description.get -> string?
LM.Review.Core.Models.Forms.ExtractionForm.Id.get -> string!
LM.Review.Core.Models.Forms.ExtractionForm.Name.get -> string!
LM.Review.Core.Models.Forms.ExtractionForm.Sections.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.Forms.FormSection!>!
LM.Review.Core.Models.Forms.FormField
LM.Review.Core.Models.Forms.FormField.AllowFreeTextFallback.get -> bool
LM.Review.Core.Models.Forms.FormField.Description.get -> string?
LM.Review.Core.Models.Forms.FormField.FieldType.get -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormField.Id.get -> string!
LM.Review.Core.Models.Forms.FormField.Options.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.Forms.FormFieldOption!>!
LM.Review.Core.Models.Forms.FormField.Title.get -> string!
LM.Review.Core.Models.Forms.FormField.Validation.get -> LM.Review.Core.Models.Forms.FormFieldValidation?
LM.Review.Core.Models.Forms.FormField.Visibility.get -> LM.Review.Core.Models.Forms.FormVisibilityRule?
static LM.Review.Core.Models.Forms.FormField.Create(string! id, string! title, LM.Review.Core.Models.Forms.FormFieldType fieldType, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.Forms.FormFieldOption!>? options = null, string? description = null, LM.Review.Core.Models.Forms.FormFieldValidation? validation = null, LM.Review.Core.Models.Forms.FormVisibilityRule? visibility = null, bool allowFreeTextFallback = false) -> LM.Review.Core.Models.Forms.FormField!
LM.Review.Core.Models.Forms.FormFieldOption
LM.Review.Core.Models.Forms.FormFieldOption.Description.get -> string?
LM.Review.Core.Models.Forms.FormFieldOption.Id.get -> string!
LM.Review.Core.Models.Forms.FormFieldOption.IsDefault.get -> bool
LM.Review.Core.Models.Forms.FormFieldOption.Label.get -> string!
static LM.Review.Core.Models.Forms.FormFieldOption.Create(string! id, string! label, string? description = null, bool isDefault = false) -> LM.Review.Core.Models.Forms.FormFieldOption!
LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.SingleSelect = 0 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.MultiSelect = 1 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.Text = 2 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.Numeric = 3 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.Date = 4 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.Reference = 5 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldValidation
LM.Review.Core.Models.Forms.FormFieldValidation.Expression.get -> string?
LM.Review.Core.Models.Forms.FormFieldValidation.Maximum.get -> decimal?
LM.Review.Core.Models.Forms.FormFieldValidation.MaximumDateUtc.get -> System.DateTime?
LM.Review.Core.Models.Forms.FormFieldValidation.Minimum.get -> decimal?
LM.Review.Core.Models.Forms.FormFieldValidation.MinimumDateUtc.get -> System.DateTime?
LM.Review.Core.Models.Forms.FormFieldValidation.Mode.get -> LM.Review.Core.Models.Forms.FormValidationMode
static LM.Review.Core.Models.Forms.FormFieldValidation.CreateDateRange(System.DateTime? minimumUtc, System.DateTime? maximumUtc) -> LM.Review.Core.Models.Forms.FormFieldValidation!
static LM.Review.Core.Models.Forms.FormFieldValidation.CreateNumericRange(decimal? minimum, decimal? maximum) -> LM.Review.Core.Models.Forms.FormFieldValidation!
static LM.Review.Core.Models.Forms.FormFieldValidation.CreateRegex(string! pattern) -> LM.Review.Core.Models.Forms.FormFieldValidation!
static LM.Review.Core.Models.Forms.FormFieldValidation.CreateRequired() -> LM.Review.Core.Models.Forms.FormFieldValidation!
LM.Review.Core.Models.Forms.FormIdentifier
static bool LM.Review.Core.Models.Forms.FormIdentifier.IsNormalized(string! identifier) -> bool
static string LM.Review.Core.Models.Forms.FormIdentifier.Normalize(string! identifier) -> string!
LM.Review.Core.Models.Forms.FormSection
LM.Review.Core.Models.Forms.FormSection.Children.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.Forms.FormSection!>!
LM.Review.Core.Models.Forms.FormSection.Description.get -> string?
LM.Review.Core.Models.Forms.FormSection.Fields.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.Forms.FormField!>!
LM.Review.Core.Models.Forms.FormSection.Id.get -> string!
LM.Review.Core.Models.Forms.FormSection.IsRepeatable.get -> bool
LM.Review.Core.Models.Forms.FormSection.Title.get -> string!
LM.Review.Core.Models.Forms.FormSection.Visibility.get -> LM.Review.Core.Models.Forms.FormVisibilityRule?
static LM.Review.Core.Models.Forms.FormSection.Create(string! id, string! title, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.Forms.FormField!>! fields, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.Forms.FormSection!>? children = null, bool isRepeatable = false, string? description = null, LM.Review.Core.Models.Forms.FormVisibilityRule? visibility = null) -> LM.Review.Core.Models.Forms.FormSection!
LM.Review.Core.Models.Forms.FormValidationMode
LM.Review.Core.Models.Forms.FormValidationMode.Required = 0 -> LM.Review.Core.Models.Forms.FormValidationMode
LM.Review.Core.Models.Forms.FormValidationMode.Range = 1 -> LM.Review.Core.Models.Forms.FormValidationMode
LM.Review.Core.Models.Forms.FormValidationMode.Regex = 2 -> LM.Review.Core.Models.Forms.FormValidationMode
LM.Review.Core.Models.Forms.FormVisibilityRule
LM.Review.Core.Models.Forms.FormVisibilityRule.ExpectedValues.get -> System.Collections.Generic.IReadOnlyList<string>!
LM.Review.Core.Models.Forms.FormVisibilityRule.IsVisibleWhenMatches.get -> bool
LM.Review.Core.Models.Forms.FormVisibilityRule.SourceFieldId.get -> string!
static LM.Review.Core.Models.Forms.FormVisibilityRule.Create(string! sourceFieldId, System.Collections.Generic.IEnumerable<string>? expectedValues = null, bool isVisibleWhenMatches = true) -> LM.Review.Core.Models.Forms.FormVisibilityRule!
LM.Review.Core.Models.Forms.ExtractionFormSnapshot
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.CapturedBy.get -> string!
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.CapturedUtc.get -> System.DateTime
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.FormId.get -> string!
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.Values.get -> System.Collections.Generic.IReadOnlyDictionary<string, object?>!
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.VersionId.get -> string!
static LM.Review.Core.Models.Forms.ExtractionFormSnapshot.Create(string! formId, string! versionId, System.Collections.Generic.IDictionary<string, object?>! values, string? capturedBy = null, System.DateTime? capturedUtc = null) -> LM.Review.Core.Models.Forms.ExtractionFormSnapshot!
LM.Review.Core.Models.Forms.ExtractionFormVersion
LM.Review.Core.Models.Forms.ExtractionFormVersion.CreatedBy.get -> string!
LM.Review.Core.Models.Forms.ExtractionFormVersion.CreatedUtc.get -> System.DateTime
LM.Review.Core.Models.Forms.ExtractionFormVersion.Form.get -> LM.Review.Core.Models.Forms.ExtractionForm!
LM.Review.Core.Models.Forms.ExtractionFormVersion.Metadata.get -> System.Collections.Generic.IReadOnlyDictionary<string, string>!
LM.Review.Core.Models.Forms.ExtractionFormVersion.VersionId.get -> string!
static LM.Review.Core.Models.Forms.ExtractionFormVersion.Create(string! versionId, LM.Review.Core.Models.Forms.ExtractionForm! form, System.Collections.Generic.IDictionary<string, string>? metadata = null, string? createdBy = null, System.DateTime? createdUtc = null) -> LM.Review.Core.Models.Forms.ExtractionFormVersion!
LM.Review.Core.Validation.FormSchemaIssue
LM.Review.Core.Validation.FormSchemaIssue.Code.get -> string!
LM.Review.Core.Validation.FormSchemaIssue.FieldId.get -> string?
LM.Review.Core.Validation.FormSchemaIssue.Message.get -> string!
LM.Review.Core.Validation.FormSchemaIssue.SectionId.get -> string?
LM.Review.Core.Validation.FormSchemaIssue.Severity.get -> LM.Review.Core.Validation.FormSchemaSeverity
static LM.Review.Core.Validation.FormSchemaIssue.Error(string! code, string! message, string? sectionId = null, string? fieldId = null) -> LM.Review.Core.Validation.FormSchemaIssue!
static LM.Review.Core.Validation.FormSchemaIssue.Warning(string! code, string! message, string? sectionId = null, string? fieldId = null) -> LM.Review.Core.Validation.FormSchemaIssue!
LM.Review.Core.Validation.FormSchemaSeverity
LM.Review.Core.Validation.FormSchemaSeverity.Warning = 0 -> LM.Review.Core.Validation.FormSchemaSeverity
LM.Review.Core.Validation.FormSchemaSeverity.Error = 1 -> LM.Review.Core.Validation.FormSchemaSeverity
LM.Review.Core.Validation.FormSchemaValidator
LM.Review.Core.Validation.FormSchemaValidator.Validate(LM.Review.Core.Models.Forms.ExtractionForm! form) -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Validation.FormSchemaIssue!>!
LM.Review.Core.Validation.FormSchemaValidator.Validate(LM.Review.Core.Models.Forms.ExtractionFormSnapshot! snapshot, LM.Review.Core.Models.Forms.ExtractionFormVersion! version) -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Validation.FormSchemaIssue!>!
LM.Review.Core.Validation.FormSchemaValidator.Validate(LM.Review.Core.Models.Forms.ExtractionFormVersion! version) -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Validation.FormSchemaIssue!>!
#nullable enable
LM.Review.Core.Services.IReviewHookContext
LM.Review.Core.Services.IReviewHookContextFactory
LM.Review.Core.Services.IReviewHookContextFactory.CreateAssignmentUpdated(LM.Review.Core.Models.ReviewStage! stage, LM.Review.Core.Models.ScreeningAssignment! assignment) -> LM.Review.Core.Services.IReviewHookContext!
LM.Review.Core.Services.IReviewHookContextFactory.CreateReviewerDecisionRecorded(LM.Review.Core.Models.ScreeningAssignment! assignment, LM.Review.Core.Models.ReviewerDecision! decision) -> LM.Review.Core.Services.IReviewHookContext!
LM.Review.Core.Services.IReviewHookContextFactory.CreateStageTransition(LM.Review.Core.Models.ReviewStage! stage, LM.Review.Core.Models.ConflictState previousState, LM.Review.Core.Models.ConflictState currentState) -> LM.Review.Core.Services.IReviewHookContext!
LM.Review.Core.Services.IReviewHookOrchestrator
LM.Review.Core.Services.IReviewHookOrchestrator.ProcessAsync(string! entryId, LM.Review.Core.Services.IReviewHookContext! context, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Review.Core.Services.IReviewWorkflowService
LM.Review.Core.Services.IReviewWorkflowService.CreateStageAsync(string! projectId, string! stageDefinitionId, System.Collections.Generic.IReadOnlyCollection<LM.Review.Core.Services.ReviewerAssignmentRequest!>! assignments, System.Threading.CancellationToken cancellationToken = default) -> LM.Review.Core.Models.ReviewStage!
LM.Review.Core.Services.IReviewWorkflowService.SubmitDecisionAsync(string! assignmentId, LM.Review.Core.Models.ScreeningStatus decision, string? notes, System.Threading.CancellationToken cancellationToken = default) -> LM.Review.Core.Models.ScreeningAssignment!
LM.Review.Core.Services.IReviewWorkflowStore
LM.Review.Core.Services.IReviewWorkflowStore.GetAssignmentAsync(string! assignmentId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ScreeningAssignment?>!
LM.Review.Core.Services.IReviewWorkflowStore.GetAssignmentsByStageAsync(string! stageId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ScreeningAssignment!>>!
LM.Review.Core.Services.IReviewWorkflowStore.GetProjectAsync(string! projectId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ReviewProject?>!
LM.Review.Core.Services.IReviewWorkflowStore.GetProjectsAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewProject!>!>!
LM.Review.Core.Services.IReviewWorkflowStore.GetStageAsync(string! stageId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ReviewStage?>!
LM.Review.Core.Services.IReviewWorkflowStore.GetStagesByProjectAsync(string! projectId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStage!>>!
LM.Review.Core.Services.IReviewWorkflowStore.SaveAssignmentAsync(string! projectId, LM.Review.Core.Models.ScreeningAssignment! assignment, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Review.Core.Services.IReviewWorkflowStore.SaveProjectAsync(LM.Review.Core.Models.ReviewProject! project, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Review.Core.Services.IReviewWorkflowStore.SaveStageAsync(LM.Review.Core.Models.ReviewStage! stage, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Review.Core.Services.ReviewWorkflowService
LM.Review.Core.Services.ReviewWorkflowService.CreateStageAsync(string! projectId, string! stageDefinitionId, System.Collections.Generic.IReadOnlyCollection<LM.Review.Core.Services.ReviewerAssignmentRequest!>! assignments, System.Threading.CancellationToken cancellationToken = default) -> LM.Review.Core.Models.ReviewStage!
LM.Review.Core.Services.ReviewWorkflowService.ReviewWorkflowService(LM.Review.Core.Services.IReviewWorkflowStore! store, LM.Review.Core.Services.IReviewHookOrchestrator! hookOrchestrator, LM.Review.Core.Services.IReviewHookContextFactory! hookContextFactory, System.TimeProvider? timeProvider = null)
LM.Review.Core.Services.ReviewWorkflowService.SubmitDecisionAsync(string! assignmentId, LM.Review.Core.Models.ScreeningStatus decision, string? notes, System.Threading.CancellationToken cancellationToken = default) -> LM.Review.Core.Models.ScreeningAssignment!
LM.Review.Core.Services.ReviewerAssignmentRequest
LM.Review.Core.Services.ReviewerAssignmentRequest.ReviewerAssignmentRequest(string! ReviewerId, LM.Review.Core.Models.ReviewerRole Role)
LM.Review.Core.Services.ReviewerAssignmentRequest.ReviewerId.get -> string!
LM.Review.Core.Services.ReviewerAssignmentRequest.ReviewerId.init -> void
LM.Review.Core.Services.ReviewerAssignmentRequest.Role.get -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Services.ReviewerAssignmentRequest.Role.init -> void
LM.Review.Core.Models.ReviewStageType.DataExtraction = 4 -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewProjectMetadata
static LM.Review.Core.Models.ReviewProjectMetadata.Create(LM.Review.Core.Models.ReviewTemplateKind template, string? notes) -> LM.Review.Core.Models.ReviewProjectMetadata!
LM.Review.Core.Models.ReviewProjectMetadata.Notes.get -> string!
LM.Review.Core.Models.ReviewProjectMetadata.Template.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.ReviewTemplateKind.Custom = 1 -> LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.ReviewTemplateKind.DataExtraction = 3 -> LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.ReviewTemplateKind.Picos = 0 -> LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.ReviewTemplateKind.RapidAssessment = 2 -> LM.Review.Core.Models.ReviewTemplateKind
LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.BibliographySummary = 0 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.DataExtractionWorkspace = 4 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.FullTextViewer = 2 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.InclusionExclusionChecklist = 1 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.NotesPane = 5 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageContentArea.ReviewerDecisionPanel = 3 -> LM.Review.Core.Models.StageContentArea
LM.Review.Core.Models.StageDisplayProfile
static LM.Review.Core.Models.StageDisplayProfile.Create(System.Collections.Generic.IEnumerable<LM.Review.Core.Models.StageContentArea!>! contentAreas) -> LM.Review.Core.Models.StageDisplayProfile!
LM.Review.Core.Models.StageDisplayProfile.ContentAreas.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.StageContentArea>!
---------- LM.Infrastructure ----------
#nullable enable
#nullable enable
LM.Infrastructure.Content.CompositeContentExtractor
LM.Infrastructure.Content.CompositeContentExtractor.CompositeContentExtractor() -> void
LM.Infrastructure.Content.CompositeContentExtractor.ExtractTextAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Content.OpenXmlContentExtractor
LM.Infrastructure.Content.OpenXmlContentExtractor.ExtractTextAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Content.OpenXmlContentExtractor.OpenXmlContentExtractor() -> void
LM.Infrastructure.Content.PdfPigContentExtractor
LM.Infrastructure.Content.PdfPigContentExtractor.ExtractTextAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Content.PdfPigContentExtractor.PdfPigContentExtractor() -> void
LM.Infrastructure.Content.PlainTextContentExtractor
LM.Infrastructure.Content.PlainTextContentExtractor.ExtractTextAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Content.PlainTextContentExtractor.PlainTextContentExtractor() -> void
LM.Infrastructure.Entries.JsonEntryStore
LM.Infrastructure.Entries.JsonEntryStore.EnumerateAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<LM.Core.Models.Entry!>!
LM.Infrastructure.Entries.JsonEntryStore.FindByHashAsync(string! sha256, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Infrastructure.Entries.JsonEntryStore.FindByIdsAsync(string? doi, string? pmid, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Infrastructure.Entries.JsonEntryStore.FindSimilarByNameYearAsync(string! title, int? year, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.Infrastructure.Entries.JsonEntryStore.GetByIdAsync(string! id, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Infrastructure.Entries.JsonEntryStore.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Infrastructure.Entries.JsonEntryStore.JsonEntryStore(LM.Core.Abstractions.IWorkSpaceService! ws, LM.Core.Abstractions.IDoiNormalizer? doiNormalizer = null, LM.Core.Abstractions.IPmidNormalizer? pmidNormalizer = null) -> void
LM.Infrastructure.Entries.JsonEntryStore.SaveAsync(LM.Core.Models.Entry! entry, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Infrastructure.Entries.JsonEntryStore.SearchAsync(LM.Core.Models.Filters.EntryFilter! f, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.Infrastructure.Entries.EntryTagVocabularyProvider
LM.Infrastructure.Entries.EntryTagVocabularyProvider.EntryTagVocabularyProvider(LM.Core.Abstractions.IEntryStore! store) -> void
LM.Infrastructure.Entries.EntryTagVocabularyProvider.GetAllTagsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>!>!
LM.Infrastructure.Export.MetadataDebugSlideExporter
LM.Infrastructure.Export.MetadataDebugSlideExporter.ExportAsync(System.Collections.Generic.IEnumerable<LM.Core.Models.FileMetadata!>! items, string! outPath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Export.MetadataDebugSlideExporter.MetadataDebugSlideExporter() -> void
LM.Infrastructure.FileSystem.WorkspaceService
LM.Infrastructure.FileSystem.WorkspaceService.EnsureWorkspaceAsync(string! absoluteWorkspacePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Infrastructure.FileSystem.WorkspaceService.GetAbsolutePath(string! relativePath) -> string!
LM.Infrastructure.FileSystem.WorkspaceService.GetLocalDbPath() -> string!
LM.Infrastructure.FileSystem.WorkspaceService.GetWorkspaceRoot() -> string!
LM.Infrastructure.FileSystem.WorkspaceService.WorkspacePath.get -> string?
LM.Infrastructure.FileSystem.WorkspaceService.WorkspaceService() -> void
LM.Infrastructure.FileSystem.WorkspacePreferenceStore
LM.Infrastructure.FileSystem.WorkspacePreferenceStore.SetLastWorkspacePath(string! workspacePath) -> void
LM.Infrastructure.FileSystem.WorkspacePreferenceStore.TryGetLastWorkspacePath() -> string?
LM.Infrastructure.FileSystem.WorkspacePreferenceStore.WorkspacePreferenceStore(string? settingsFilePath = null) -> void
LM.Infrastructure.Hooks.ArticleHookFactory
LM.Infrastructure.Hooks.HookContext
LM.Infrastructure.Hooks.HookContext.Article.get -> LM.HubSpoke.Models.ArticleHook?
LM.Infrastructure.Hooks.HookContext.Article.init -> void
LM.Infrastructure.Hooks.HookContext.Attachments.get -> LM.HubSpoke.Models.AttachmentHook?
LM.Infrastructure.Hooks.HookContext.Attachments.init -> void
LM.Infrastructure.Hooks.HookContext.ChangeLog.get -> LM.HubSpoke.Models.EntryChangeLogHook?
LM.Infrastructure.Hooks.HookContext.ChangeLog.init -> void
LM.Infrastructure.Hooks.HookContext.HookContext() -> void
LM.Infrastructure.Hooks.HookOrchestrator
LM.Infrastructure.Hooks.HookOrchestrator.HookOrchestrator(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Hooks.HookOrchestrator.ProcessAsync(string! entryId, LM.Infrastructure.Hooks.HookContext! ctx, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.Infrastructure.Hooks.HookPersister
LM.Infrastructure.Hooks.HookPersister.HookPersister(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Hooks.HookPersister.SaveArticleIfAnyAsync(string! entryId, LM.HubSpoke.Models.ArticleHook? hook, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.Infrastructure.Metadata.CompositeMetadataExtractor
LM.Infrastructure.Metadata.CompositeMetadataExtractor.CompositeMetadataExtractor(LM.Core.Abstractions.IContentExtractor! content) -> void
LM.Infrastructure.Metadata.CompositeMetadataExtractor.ExtractAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.FileMetadata!>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetAssignmentsByStageAsync(string! stageId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ScreeningAssignment!>!>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetStagesByProjectAsync(string! projectId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStage!>!>!
LM.Infrastructure.Search.ClinicalTrialsGovSearchProvider
LM.Infrastructure.Search.ClinicalTrialsGovSearchProvider.ClinicalTrialsGovSearchProvider() -> void
LM.Infrastructure.Search.ClinicalTrialsGovSearchProvider.Database.get -> LM.Core.Models.SearchDatabase
LM.Infrastructure.Search.ClinicalTrialsGovSearchProvider.SearchAsync(string! query, System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.SearchHit!>!>!
LM.Infrastructure.PubMed.PubMedClient
LM.Infrastructure.PubMed.PubMedClient.PubMedClient() -> void
LM.Infrastructure.PubMed.PubMedClient.TryGetByDoiAsync(string! doi, bool includeCitedBy, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<LM.Core.Models.PublicationRecord?>!
LM.Infrastructure.Pdf.PdfAnnotationPersistenceService
LM.Infrastructure.Pdf.PdfAnnotationPersistenceService.PdfAnnotationPersistenceService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Pdf.PdfAnnotationPersistenceService.PersistAsync(string! entryId, string! pdfHash, string! overlayJson, System.Collections.Generic.IReadOnlyDictionary<string!, byte[]!>! previewImages, string? overlaySidecarRelativePath, string? pdfRelativePath, System.Collections.Generic.IReadOnlyList<LM.Core.Models.Pdf.PdfAnnotationBridgeMetadata!>! annotations, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Infrastructure.Pdf.PdfAnnotationPreviewStorage
LM.Infrastructure.Pdf.PdfAnnotationPreviewStorage.PdfAnnotationPreviewStorage(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Pdf.PdfAnnotationPreviewStorage.SaveAsync(string! pdfHash, string! annotationId, byte[]! pngBytes, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Pdf.PdfAnnotationOverlayReader
LM.Infrastructure.Pdf.PdfAnnotationOverlayReader.PdfAnnotationOverlayReader(LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IEntryStore! entryStore) -> void
LM.Infrastructure.Pdf.PdfAnnotationOverlayReader.GetOverlayJsonAsync(string! entryId, string! pdfHash, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string?>!
LM.Infrastructure.Search.PubMedSearchProvider
LM.Infrastructure.Search.PubMedSearchProvider.PubMedSearchProvider() -> void
LM.Infrastructure.Search.PubMedSearchProvider.Database.get -> LM.Core.Models.SearchDatabase
LM.Infrastructure.Search.PubMedSearchProvider.SearchAsync(string! query, System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.SearchHit!>!>!
LM.Infrastructure.Search.PubMedSearchProvider.FetchFullRecordXmlAsync(string! pubmedId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string?>!
LM.Infrastructure.Search.SearchExecutionService
LM.Infrastructure.Search.SearchExecutionService.SearchExecutionService(System.Collections.Generic.IEnumerable<LM.Core.Abstractions.Search.ISearchProvider!>! providers, LM.Core.Abstractions.IEntryStore! store) -> void
LM.Infrastructure.Search.SearchExecutionService.ExecuteAsync(LM.Core.Models.Search.SearchExecutionRequest! request, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Search.SearchExecutionResult!>!
LM.Infrastructure.Settings.JsonWatchedFolderSettingsStore
LM.Infrastructure.Storage.FileStorageService
LM.Infrastructure.Storage.FileStorageService.FileStorageService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Storage.FileStorageService.SaveNewAsync(string! sourcePath, string! relativeTargetDir, string? preferredFileName = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Text.DoiNormalizer
LM.Infrastructure.Text.DoiNormalizer.DoiNormalizer() -> void
LM.Infrastructure.Text.DoiNormalizer.Normalize(string? raw) -> string?
LM.Infrastructure.Text.PmidNormalizer
LM.Infrastructure.Text.PmidNormalizer.Normalize(string? raw) -> string?
LM.Infrastructure.Text.PmidNormalizer.PmidNormalizer() -> void
LM.Infrastructure.Utils.BibliographyHelper
LM.Infrastructure.Utils.ContentAwareSimilarityService
LM.Infrastructure.Utils.ContentAwareSimilarityService.ComputeFileSimilarityAsync(string! filePathA, string! filePathB, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
LM.Infrastructure.Utils.ContentAwareSimilarityService.ContentAwareSimilarityService(LM.Core.Abstractions.IContentExtractor! extractor) -> void
LM.Infrastructure.Utils.HashingService
LM.Infrastructure.Utils.HashingService.ComputeSha256Async(string! filePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Infrastructure.Utils.HashingService.HashingService() -> void
LM.Infrastructure.Utils.SimilarityService
LM.Infrastructure.Utils.SimilarityService.ComputeFileSimilarityAsync(string! filePathA, string! filePathB, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
LM.Infrastructure.Utils.SimilarityService.SimilarityService() -> void
LM.Infrastructure.Utils.TagMerger
LM.Infrastructure.Utils.TagNormalizer
static LM.Infrastructure.Hooks.ArticleHookFactory.CreateFromPublication(LM.Core.Models.PublicationRecord! r) -> LM.HubSpoke.Models.ArticleHook!
static LM.Infrastructure.Utils.BibliographyHelper.GenerateShortTitle(string? title, System.Collections.Generic.IEnumerable<string!>! authors, string? source, int? year) -> string!
static LM.Infrastructure.Utils.TagMerger.Merge(string? existingCsv, System.Collections.Generic.IEnumerable<string!>? add) -> string?
LM.Infrastructure.Settings.JsonWatchedFolderSettingsStore.JsonWatchedFolderSettingsStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Settings.JsonWatchedFolderSettingsStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.WatchedFolderSettings!>!
LM.Infrastructure.Settings.JsonWatchedFolderSettingsStore.SaveAsync(LM.Core.Models.WatchedFolderSettings! settings, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Infrastructure.Settings.JsonSearchHistoryStore
LM.Infrastructure.Settings.JsonSearchHistoryStore.JsonSearchHistoryStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.Infrastructure.Settings.JsonSearchHistoryStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Search.SearchHistoryDocument!>!
LM.Infrastructure.Settings.JsonSearchHistoryStore.SaveAsync(LM.Core.Models.Search.SearchHistoryDocument! document, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Infrastructure.Settings.JsonUserPreferencesStore
LM.Infrastructure.Settings.JsonUserPreferencesStore.JsonUserPreferencesStore() -> void
LM.Infrastructure.Settings.JsonUserPreferencesStore.LoadAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.UserPreferences!>!
LM.Infrastructure.Settings.JsonUserPreferencesStore.SaveAsync(LM.Core.Models.UserPreferences! preferences, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
static LM.Infrastructure.Utils.TagNormalizer.SplitAndNormalize(string! raw) -> System.Collections.Generic.IEnumerable<string!>!
LM.Infrastructure.Review.ReviewHookContextFactory
LM.Infrastructure.Review.ReviewHookContextFactory.CreateProjectCreated(LM.Review.Core.Models.ReviewProject! project) -> LM.Review.Core.Services.IReviewHookContext!
LM.Infrastructure.Review.ReviewHookContextFactory.CreateAssignmentUpdated(LM.Review.Core.Models.ReviewStage! stage, LM.Review.Core.Models.ScreeningAssignment! assignment) -> LM.Review.Core.Services.IReviewHookContext!
LM.Infrastructure.Review.ReviewHookContextFactory.CreateConsensusResolved(LM.Review.Core.Models.ReviewStage! stage, LM.Review.Core.Models.ConsensusOutcome! consensus) -> LM.Review.Core.Services.IReviewHookContext!
LM.Infrastructure.Review.ReviewHookContextFactory.CreateReviewerDecisionRecorded(LM.Review.Core.Models.ScreeningAssignment! assignment, LM.Review.Core.Models.ReviewerDecision! decision) -> LM.Review.Core.Services.IReviewHookContext!
LM.Infrastructure.Review.ReviewHookContextFactory.CreateStageTransition(LM.Review.Core.Models.ReviewStage! stage, LM.Review.Core.Models.ConflictState previousState, LM.Review.Core.Models.ConflictState currentState) -> LM.Review.Core.Services.IReviewHookContext!
LM.Infrastructure.Review.ReviewHookContextFactory.ReviewHookContextFactory() -> void
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetAssignmentAsync(string! assignmentId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ScreeningAssignment?>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetProjectAsync(string! projectId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ReviewProject?>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetProjectsAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewProject!>!>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.GetStageAsync(string! stageId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ReviewStage?>!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.SaveAssignmentAsync(string! projectId, LM.Review.Core.Models.ScreeningAssignment! assignment, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.SaveProjectAsync(LM.Review.Core.Models.ReviewProject! project, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.SaveStageAsync(LM.Review.Core.Models.ReviewStage! stage, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Infrastructure.Review.WorkspaceReviewWorkflowStore.WorkspaceReviewWorkflowStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
---------- LM.App.Wpf ----------
#nullable enable
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.ColumnKeyProperty -> System.Windows.DependencyProperty!
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.GetColumnKey(System.Windows.DependencyObject! element) -> string?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.SetColumnKey(System.Windows.DependencyObject! element, string? value) -> void
#nullable enable
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Id.get -> string!
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.IsDraggable.get -> bool
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Name.get -> string!
abstract LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.IsDraggable.get -> bool
const LM.App.Wpf.Library.LibraryPresetFolder.RootId = "root" -> string!
const LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.RootId = "root" -> string!
const LM.App.Wpf.ViewModels.StagingItem.DuplicateThreshold = 0.999 -> double
const LM.App.Wpf.ViewModels.StagingItem.NearThreshold = 0.75 -> double
LM.App.Wpf.App
LM.App.Wpf.App.App() -> void
LM.App.Wpf.App.InitializeComponent() -> void
LM.App.Wpf.Common.AsyncRelayCommand
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<object?, System.Threading.Tasks.Task!>! execute, System.Func<object?, bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<System.Threading.Tasks.Task!>! execute, System.Func<bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.AsyncRelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.AsyncRelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.AsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.IAsyncRelayCommand
LM.App.Wpf.Common.IAsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter
LM.App.Wpf.Common.BooleanToOpacityConverter.BooleanToOpacityConverter() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.set -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.set -> void
LM.App.Wpf.Common.Converters.ProjectEditorConverters
LM.App.Wpf.Common.Converters.ProjectEditorConverters.StageSelectionEquality.get -> System.Windows.Data.IMultiValueConverter!
LM.App.Wpf.Common.LibraryPresetSaveContext.LibraryPresetSaveContext(string! DefaultName, System.Collections.Generic.IReadOnlyCollection<string!>! ExistingNames, string! Title = "Save Library Preset", string! Prompt = "Name this filter preset.") -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.LibraryCollectionEntry() -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.DeletePresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenamePresetAsync(string! presetId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
LM.App.Wpf.Library.LibraryFilterState.Tags.get -> string![]!
LM.App.Wpf.Library.LibraryPresetFolder.EnumerateChildren() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.LibraryPresetTreeItem>!
LM.App.Wpf.Library.LibraryPresetNodeKind.Folder = 0 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetNodeKind.Preset = 1 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.LitSearchOrganizerEntry() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.LitSearchOrganizerFolder() -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectBlueprint(string! projectId, string! name, System.DateTimeOffset createdAtUtc, string! createdBy, string! litSearchEntryId, string! litSearchRunId, System.Collections.Generic.IReadOnlyList<string!>! checkedEntryIds, string? hookRelativePath, LM.Review.Core.Models.ReviewTemplateKind template, string! metadataNotes, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>! stages) -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CheckedEntryIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedAtUtc.get -> System.DateTimeOffset
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedBy.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.HookRelativePath.get -> string?
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchEntryId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchRunId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Template.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.MetadataNotes.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Stages.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.With(string? name = null, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>? stages = null, LM.Review.Core.Models.ReviewTemplateKind? template = null, string? metadataNotes = null, string? litSearchEntryId = null, string? litSearchRunId = null, System.Collections.Generic.IReadOnlyList<string!>? checkedEntryIds = null) -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint!
LM.App.Wpf.Services.Review.Design.StageBlueprint
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageBlueprint(string! stageId, string! name, LM.Review.Core.Models.ReviewStageType stageType, int primaryReviewers, int secondaryReviewers, bool requiresConsensus, int minimumAgreements, bool escalateOnDisagreement, LM.Review.Core.Models.StageDisplayProfile! displayProfile) -> void
LM.App.Wpf.Services.Review.Design.StageBlueprint.EscalateOnDisagreement.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.MinimumAgreements.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.PrimaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.RequiresConsensus.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.SecondaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageId.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.Services.Review.Design.StageBlueprint.DisplayProfile.get -> LM.Review.Core.Models.StageDisplayProfile!
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher.Show(string! entryId, string! pdfAbsolutePath, string! pdfHash) -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.AddSelectionToFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.MoveFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RemoveSelectionFromFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ItemsView.get -> System.ComponentModel.ICollectionView!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.LitSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.SavedSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.IsRoot.get -> bool
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SavedSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeletePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.LoadPresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenamePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.LibraryViewModel.AllTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.LibraryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.LitSearchOrganizer.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LoadCollectionEntriesAsync(string! collectionId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.OpenPdfAnnotationsCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.LibraryViewModel.RefreshTagsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.ToggleBlacklistCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationTypeDisplay.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Dispose() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.HighlightBrush.get -> System.Windows.Media.Brush!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.PdfAnnotationColorCommandParameter() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior.CollectionTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior.LitSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter
LM.App.Wpf.Views.Converters.EnumEqualsConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.EnumEqualsConverter() -> void
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.InverseBooleanToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.AnnotationColorParameterConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.Convert(object?[]! values, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.ConvertBack(object? value, System.Type![]! targetTypes, object? parameter, System.Globalization.CultureInfo! culture) -> object?[]!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NullOrEmptyToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList
LM.App.Wpf.Views.Pdf.PdfAnnotationList.PdfAnnotationList() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow
LM.App.Wpf.Views.PdfViewerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow.PdfViewerWindow() -> void
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.PdfViewerHostObject(LM.App.Wpf.Views.PdfViewer! owner) -> void
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogCloseRequestedEventArgs(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogResult.get -> bool?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.CloseRequested -> System.EventHandler<LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs!>?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.DialogViewModelBase() -> void
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.RequestClose(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.IDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.WpfDialogService(System.IServiceProvider! services) -> void
LM.App.Wpf.Common.ILibraryPresetPrompt
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Common.IClipboardService
LM.App.Wpf.Common.IClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.ClipboardService
LM.App.Wpf.Common.ClipboardService.ClipboardService() -> void
LM.App.Wpf.Common.ClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.IFileExplorerService
LM.App.Wpf.Common.IFileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.FileExplorerService
LM.App.Wpf.Common.FileExplorerService.FileExplorerService() -> void
LM.App.Wpf.Common.FileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.ISearchSavePrompt
LM.App.Wpf.Common.ISearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Common.SearchSavePromptContext
LM.App.Wpf.Common.SearchSavePromptContext.Database.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.From.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.Query.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.SearchSavePromptContext(string! Query, LM.Core.Models.SearchDatabase Database, System.DateTime? From, System.DateTime? To, string! DefaultName, string! DefaultNotes, System.Collections.Generic.IReadOnlyList<string!>! DefaultTags) -> void
LM.App.Wpf.Common.SearchSavePromptContext.Database.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.SearchSavePromptContext.From.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.Query.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.To.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.To.init -> void
LM.App.Wpf.Common.SearchSavePromptResult
LM.App.Wpf.Common.SearchSavePromptResult.Name.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Notes.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Tags.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.SearchSavePromptResult(string! Name, string! Notes, string! Tags) -> void
LM.App.Wpf.Common.SearchSavePromptResult.Name.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Notes.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Tags.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSaveResult
LM.App.Wpf.Common.LibraryPresetSaveResult.LibraryPresetSaveResult(string! Name) -> void
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.get -> bool
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.LibraryPresetSelectionContext(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! Presets, bool AllowLoad, string! Title) -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.LibraryPresetSelectionResult(string? SelectedPresetId, System.Collections.Generic.IReadOnlyList<string!>! DeletedPresetIds) -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.get -> string?
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.init -> void
LM.App.Wpf.Common.LibraryPresetSummary
LM.App.Wpf.Common.LibraryPresetSummary.Id.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Id.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.LibraryPresetSummary(string! Id, string! Name, System.DateTime SavedUtc) -> void
LM.App.Wpf.Common.LibraryPresetSummary.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.get -> System.DateTime
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.init -> void
LM.App.Wpf.Common.RelayCommand
LM.App.Wpf.Common.RelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.RelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.RelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.RelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.RelayCommand.RelayCommand(System.Action<object?>! exec, System.Func<object?, bool>? can = null) -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.get -> bool
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.init -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.get -> string?
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.init -> void
LM.App.Wpf.Common.Dialogs.FolderPickerOptions
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.get -> string?
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.init -> void
LM.App.Wpf.Common.Dialogs.IDialogService
LM.App.Wpf.Common.Dialogs.IDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.StringJoinConverter
LM.App.Wpf.Common.StringJoinConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.StringJoinConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.AttachmentGlyphToIconConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.AttachmentGlyphToDescriptionConverter() -> void
LM.App.Wpf.Common.ViewModelBase
LM.App.Wpf.Common.ViewModelBase.ViewModelBase() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Id.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.get -> int
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PdfAnnotation(string! id, string! title) -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.get -> System.Windows.Media.Imaging.BitmapImage?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.Annotations.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Pdf.PdfAnnotation!>!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.ChangeAnnotationColorCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.CopyAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DocumentSource.get -> System.Uri?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.HandleAnnotationSelectionAsync(LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.LoadPdfCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfHash.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfViewerViewModel(LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.App.Wpf.Services.IUserContext! userContext, LM.Core.Abstractions.IPdfAnnotationPreviewStorage! previewStorage, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.Common.IClipboardService! clipboard) -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.RecordAnnotationChangeCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.WebViewBridge.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DeleteAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.Library.LibraryFilterPreset
LM.App.Wpf.Library.LibraryFilterPreset.LibraryFilterPreset() -> void
LM.App.Wpf.Library.LibraryFilterPreset.Id.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Id.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.Name.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Name.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.get -> System.DateTime
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.get -> int
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.State.get -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.Library.LibraryFilterPreset.State.set -> void
LM.App.Wpf.Library.LibraryFilterPresetStore
LM.App.Wpf.Library.LibraryFilterPresetStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.MovePresetAsync(string! presetId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.LibraryFilterPresetStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.ListPresetsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.LibraryFilterPreset!>!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, string? targetFolderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetByIdAsync(string! presetId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
const LM.App.Wpf.Library.Collections.LibraryCollectionFolder.RootId = "collections-root" -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionEntry!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile
LM.App.Wpf.Library.Collections.LibraryCollectionFile.LibraryCollectionFile() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.get -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder?
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.get -> int
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.EnumerateDescendants() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionEntry!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.LibraryCollectionFolder() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.LibraryCollectionMetadata() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore
LM.App.Wpf.Library.Collections.LibraryCollectionStore.AddEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.CreateFolderAsync(string? parentFolderId, string! name, string! createdBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.DeleteFolderAsync(string! folderId, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.LibraryCollectionStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RemoveEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RenameFolderAsync(string! folderId, string! newName, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryPresetFolder
LM.App.Wpf.Library.LibraryPresetFolder.Clone() -> LM.App.Wpf.Library.LibraryPresetFolder!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Id.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Id.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.LibraryPresetFolder() -> void
LM.App.Wpf.Library.LibraryPresetFolder.Name.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Name.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Presets.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryFilterPreset!>!
LM.App.Wpf.Library.LibraryPresetFolder.Presets.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.get -> int
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.set -> void
LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem
LM.App.Wpf.Library.LibraryPresetTreeItem.Folder.get -> LM.App.Wpf.Library.LibraryPresetFolder?
LM.App.Wpf.Library.LibraryPresetTreeItem.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem(LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder, LM.App.Wpf.Library.LibraryPresetFolder? folder, LM.App.Wpf.Library.LibraryFilterPreset? preset) -> void
LM.App.Wpf.Library.LibraryPresetTreeItem.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset?
LM.App.Wpf.Library.LibraryPresetTreeItem.SortOrder.get -> int
LM.App.Wpf.Library.ILibraryEntryEditor
LM.App.Wpf.Library.ILibraryEntryEditor.EditEntryAsync(LM.Core.Models.Entry! entry) -> System.Threading.Tasks.Task<System.Boolean>!
LM.App.Wpf.Library.LibraryFilterState
LM.App.Wpf.Library.LibraryFilterState.LibraryFilterState() -> void
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.get -> bool
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.set -> void
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateFrom.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateFrom.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateTo.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateTo.set -> void
LM.App.Wpf.Library.LibraryFilterState.SortKey.get -> string?
LM.App.Wpf.Library.LibraryFilterState.SortKey.set -> void
LM.App.Wpf.Library.LibraryFilterState.Tags.set -> void
LM.App.Wpf.ViewModels.AddPipeline
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddViewModel
LM.App.Wpf.ViewModels.AddViewModel.AddFilesCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.ViewModels.WatchedFolderScanner? scanner = null, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore? watchedFolderSettings = null, LM.App.Wpf.ViewModels.StagingListViewModel? stagingList = null, LM.App.Wpf.ViewModels.WatchedFoldersViewModel? watchedFolders = null, LM.App.Wpf.Common.Dialogs.IDialogService? dialogService = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.BulkAddFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ClearCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.CommitSelectedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.AddViewModel.Current.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.AddViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.AddViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.AddViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.AddViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.AddViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.AddViewModel.ReviewStagedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Staging.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.AddViewModel.StagingListViewModel.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFolders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFoldersViewModel.get -> LM.App.Wpf.ViewModels.WatchedFoldersViewModel!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.LibraryPresetPickerDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Presets.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.SelectedPresetId.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.EntryId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookAbsolutePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookRelativePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.DisplayLabel.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.ExecutedBy.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.Owner.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.TotalHits.get -> int
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.ConfirmCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.Entries.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.LitSearchRunPickerViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.LibraryPresetSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.set -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Initialize(LM.App.Wpf.Common.SearchSavePromptContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultNotes.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultTags.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.SearchSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingEditorViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingList.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.SelectedWorkspacePath.get -> string?
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.get -> bool
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.WorkspaceChooserViewModel(LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.CanAcceptFileDrop(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleFileDropAsync(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibrarySearchResult
LM.App.Wpf.ViewModels.LibrarySearchResult.Entry.get -> LM.Core.Models.Entry!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasAttachments.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasDoi.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasIdentifiers.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasInternalId.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasLinks.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNct.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPmid.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasRelations.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasSource.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasUserNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.Highlight.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.HighlightDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.IsFullText.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.LibrarySearchResult(LM.Core.Models.Entry! entry, double? score, string? highlight) -> void
LM.App.Wpf.ViewModels.LibrarySearchResult.Score.get -> double?
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentGlyphKind.get -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.TitleSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.YearPresenceSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearDescendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearAscendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SourceSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TypeSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedOnSortKey.get -> System.DateTime
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedBySortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.InternalIdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.DoiSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.PmidSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.NctSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AuthorsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TagsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IsInternalSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SnippetSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreSortKey.get -> double
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.None = 0 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Pdf = 1 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Document = 2 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Presentation = 3 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Generic = 4 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.Library.LibraryLinkItem
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.LibraryLinkItem(string! DisplayText, string! Target, LM.App.Wpf.ViewModels.Library.LinkItemKind Kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.get -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.init -> void
LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Url = 0 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.File = 1 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Folder = 2 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.RunAndBasics = 0 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Metadata = 1 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Workflow = 2 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Summary = 3 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.ProjectEditorStepDescriptor(LM.App.Wpf.ViewModels.Review.ProjectEditorStep Step, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.ReviewTemplateOption(LM.Review.Core.Models.ReviewTemplateKind Kind, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectEditorViewModel() -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.AddStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntryCount.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntrySummary.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ErrorMessage.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.HookRelativePath.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Initialize(LM.App.Wpf.Services.Review.Design.ProjectBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchEntryId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchRunId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageDownCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageUpCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.RemoveStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Result.get -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SaveCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.get -> LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.StageTypes.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStageType>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Stages.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Steps.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.TemplateOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStep.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepDescriptor.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepIndex.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsSummaryStep.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.get -> LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateKind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.NextCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.BackCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ChangeRunCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ConfigureRunReloadHandler(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.App.Wpf.Services.Review.Design.ProjectBlueprint?>!>! handler) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.StageDisplayOptionViewModel(LM.Review.Core.Models.StageContentArea area, bool isSelected) -> void
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Area.get -> LM.Review.Core.Models.StageContentArea
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Description.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.get -> bool
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageBlueprintViewModel(LM.App.Wpf.Services.Review.Design.StageBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageId.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TotalReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.DisplayOptions.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel!>!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TryBuild(out LM.App.Wpf.Services.Review.Design.StageBlueprint! stage, out string? errorMessage) -> bool
LM.App.Wpf.ViewModels.StagingListViewModel
LM.App.Wpf.ViewModels.StagingListViewModel.AddStagedItemsAsync(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Clear() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.CommitSelectedAsync(System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.StagingListViewModel.Current.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.StagingListViewModel.HasItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.HasSelectedItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.StagingListViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.StagingListViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingListViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.StagingListViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.SetCommandGuard(System.Func<System.Func<System.Threading.Tasks.Task!>!, System.Threading.Tasks.Task!>! guard) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.UpdateParentBusy(bool isBusy) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.WatchedFoldersViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList, LM.App.Wpf.ViewModels.WatchedFolderScanner! scanner, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore! settingsStore, LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.WatchedFolder
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.get -> bool
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.LastScanDisplay.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.LastScanUtc.get -> System.DateTimeOffset?
LM.App.Wpf.ViewModels.WatchedFolder.LastScanWasUnchanged.get -> bool?
LM.App.Wpf.ViewModels.WatchedFolder.Path.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.Path.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFolder.ResetScanState() -> void
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusLabel.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusToolTip.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.WatchedFolder() -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(string! path) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig
LM.App.Wpf.ViewModels.WatchedFolderConfig.ApplyState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.ClearState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFolderConfig.CreateSnapshot() -> LM.Core.Models.WatchedFolderSettings!
LM.App.Wpf.ViewModels.WatchedFolderConfig.Load(LM.Core.Models.WatchedFolderSettings! settings) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.StoreState(LM.App.Wpf.ViewModels.WatchedFolder! folder, LM.Core.Models.WatchedFolderState! state) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.WatchedFolderConfig() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Folder.get -> LM.App.Wpf.ViewModels.WatchedFolder!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Items.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.WatchedFolderScanEventArgs(LM.App.Wpf.ViewModels.WatchedFolder! folder, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner
LM.App.Wpf.ViewModels.WatchedFolderScanner.Attach(LM.App.Wpf.ViewModels.WatchedFolderConfig! config) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.ItemsStaged -> System.EventHandler<LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs!>?
LM.App.Wpf.ViewModels.WatchedFolderScanner.ScanAsync(LM.App.Wpf.ViewModels.WatchedFolder? folder, System.Threading.CancellationToken ct, bool force = false) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFolderScanner.WatchedFolderScanner(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.IAddPipeline
LM.App.Wpf.ViewModels.IAddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.IAddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.Library.ILibraryDocumentService
LM.App.Wpf.Library.ILibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.ILibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.LibraryDocumentService
LM.App.Wpf.Library.LibraryDocumentService.LibraryDocumentService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.IAttachmentMetadataPrompt
LM.App.Wpf.Library.IAttachmentMetadataPrompt.RequestMetadataAsync(LM.App.Wpf.Library.AttachmentMetadataPromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.AttachmentMetadataPromptResult?>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.get -> string!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.AttachmentMetadataPromptContext(string! EntryTitle, System.Collections.Generic.IReadOnlyList<string!>! FilePaths) -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>!
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult.AttachmentMetadataPromptResult(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>! Attachments) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection
LM.App.Wpf.Library.AttachmentMetadataSelection.AttachmentMetadataSelection(string! SourcePath, string! Title, LM.Core.Models.AttachmentKind Kind, System.Collections.Generic.IReadOnlyList<string!>! Tags) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.get -> LM.Core.Models.AttachmentKind
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.init -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LibraryFiltersViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! presetStore, LM.App.Wpf.Common.ILibraryPresetPrompt! presetPrompt, LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.SavedSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.get -> string
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedSearchPresetViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, LM.App.Wpf.Library.LibraryFilterPreset! preset, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Summary.get -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.ToSummary() -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.SavedSearchTreeChangedEventArgs(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! presets) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.SavedSearchTreeViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.TreeChanged -> System.EventHandler<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs!>?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ClearCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyPresetAsync(LM.App.Wpf.Common.LibraryPresetSummary! summary, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyState(LM.App.Wpf.Library.LibraryFilterState! state) -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.CaptureState() -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTooltip.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTokens.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.BuildFullTextQuery(string! normalizedQuery) -> LM.Core.Models.Search.FullTextSearchQuery!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.HasSavedPresets.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.GetNormalizedFullTextQuery() -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.NavigationRoots.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RefreshNavigationAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedPresets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedSearches.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleLeftPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleRightPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SortOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RemoveTagCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand<string?>!
LM.App.Wpf.ViewModels.Library.LibrarySortOption
LM.App.Wpf.ViewModels.Library.LibrarySortOption.LibrarySortOption(string! key, string! displayName) -> void
LM.App.Wpf.ViewModels.Library.LibrarySortOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOptions
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.Category = 0 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.SavedSearch = 1 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchEntry = 2 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchRun = 3 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.LibraryNavigationNodeViewModel(string! name, LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.HasChildren.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Kind.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.get -> object?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.init -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.LibraryColumnOption(string! key, string! displayName, bool isVisible) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LibraryColumnVisibility() -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LoadFrom(System.Collections.Generic.IReadOnlyDictionary<string!, bool>! source) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.Snapshot() -> System.Collections.Generic.IReadOnlyDictionary<string!, bool>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LibraryResultsViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.App.Wpf.Library.ILibraryEntryEditor! entryEditor, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.Library.IAttachmentMetadataPrompt! attachmentPrompt, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.Core.Abstractions.IHasher! hasher, LM.App.Wpf.Services.Pdf.IPdfViewerLauncher! pdfViewerLauncher) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadFullTextResultsAsync(System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.FullTextSearchHit!>! hits, System.Func<LM.Core.Models.Entry!, bool>? entryFilter = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadMetadataResults(System.Collections.Generic.IEnumerable<LM.Core.Models.Entry!>! entries) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResetSortForSearch(LM.App.Wpf.ViewModels.Library.LibrarySortOption! defaultOption) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridLoaded(System.Windows.RoutedEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridSorting(System.Windows.Controls.DataGridSortingEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.MarkAsMetadataResults() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResultsAreFullText.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.get -> LM.App.Wpf.ViewModels.LibrarySearchResult?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LinkItems.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryLinkItem!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.EditEntryAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelection.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedItems.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectionChanged -> System.EventHandler?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelectedAbstract.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ToggleBlacklistAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.get -> int
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.LibraryCollectionFolderViewModel(LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! tree, string! id, string! name, LM.App.Wpf.Library.Collections.LibraryCollectionMetadata! metadata) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.LibraryCollectionsViewModel(LM.App.Wpf.Library.Collections.LibraryCollectionStore! store, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPrimaryAttachment.get -> bool
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.LibrarySearchQueryBox() -> void
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.get -> string!
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel
LM.App.Wpf.ViewModels.LibraryViewModel.Filters.get -> LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LibraryViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFullTextSearchService! fullTextSearch, LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel! filters, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.Configuration.IUserPreferencesStore! preferencesStore, LM.App.Wpf.Common.IClipboardService! clipboard, LM.App.Wpf.Common.IFileExplorerService! fileExplorer, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! litSearchOrganizer, LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! collections, LM.App.Wpf.Library.Collections.LibraryCollectionStore! collectionStore) -> void
LM.App.Wpf.ViewModels.LibraryViewModel.Results.get -> LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.Collections.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibraryColumnOption!>!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnVisibility.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility!
LM.App.Wpf.ViewModels.SearchItemViewModel
LM.App.Wpf.ViewModels.SearchItemViewModel.Header.get -> string!
LM.App.Wpf.ViewModels.SearchItemViewModel.SearchItemViewModel(string! header, LM.App.Wpf.ViewModels.LibraryViewModel! vm) -> void
LM.App.Wpf.ViewModels.SearchItemViewModel.Vm.get -> LM.App.Wpf.ViewModels.LibraryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel
LM.App.Wpf.ViewModels.SearchViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.SearchViewModel.ExportSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.From.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.LoadSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRuns.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.PreviousSearchSummary!>!
LM.App.Wpf.ViewModels.SearchViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRunsCount.get -> int
LM.App.Wpf.ViewModels.SearchViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.SearchViewModel.Query.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.get -> LM.Core.Models.SearchHit?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RunSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SaveSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleLeftPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleRightPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SearchViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IWorkSpaceService! ws, LM.App.Wpf.Common.ISearchSavePrompt! savePrompt, LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel! providers, LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel! history, LM.Infrastructure.Search.PubMedSearchProvider! pubMedProvider, LM.Core.Abstractions.Configuration.IUserPreferencesStore? preferencesStore = null) -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.get -> LM.App.Wpf.ViewModels.PreviousSearchSummary?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.StartPreviousRunCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ShowRunDetailsCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleFavoriteCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.To.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.History.get -> LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel.Providers.get -> LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecordExecutionAsync(LM.Core.Models.Search.SearchExecutionResult! result, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.SearchHistoryViewModel(LM.Core.Abstractions.Configuration.ISearchHistoryStore! store) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.ExecuteSearchAsync() -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.RunSearchCommand.get -> LM.App.Wpf.Common.AsyncRelayCommand!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchExecuted -> System.EventHandler<LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs!>?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchProvidersViewModel(LM.Core.Abstractions.Search.ISearchExecutionService! executionService) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.set -> void
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.Result.get -> LM.Core.Models.Search.SearchExecutionResult!
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.SearchExecutedEventArgs(LM.Core.Models.Search.SearchExecutionResult! result) -> void
LM.App.Wpf.ViewModels.PreviousSearchSummary
LM.App.Wpf.ViewModels.PreviousSearchSummary.DisplayName.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.EntryId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.FavoriteRunId.get -> string?
LM.App.Wpf.ViewModels.PreviousSearchSummary.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastRunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.Provider.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.Query.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunCount.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TotalHits.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TagsDisplay.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption
LM.App.Wpf.ViewModels.SearchDatabaseOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption.SearchDatabaseOption(LM.Core.Models.SearchDatabase value, string! displayName) -> void
LM.App.Wpf.ViewModels.SearchDatabaseOption.Value.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.StagingItem
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.get -> LM.HubSpoke.Models.ArticleHook?
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.DisplayName.get -> string?
LM.App.Wpf.ViewModels.StagingItem.DisplayName.set -> void
LM.App.Wpf.ViewModels.StagingItem.Doi.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Doi.set -> void
LM.App.Wpf.ViewModels.StagingItem.FilePath.get -> string!
LM.App.Wpf.ViewModels.StagingItem.FilePath.set -> void
LM.App.Wpf.ViewModels.StagingItem.Internal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Internal.set -> void
LM.App.Wpf.ViewModels.StagingItem.InternalId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.InternalId.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsDuplicate.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsNearMatch.get -> bool
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Notes.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Notes.set -> void
LM.App.Wpf.ViewModels.StagingItem.OriginalFileName.get -> string!
LM.App.Wpf.ViewModels.StagingItem.Pmid.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Pmid.set -> void
LM.App.Wpf.ViewModels.StagingItem.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingItem.Selected.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Selected.set -> void
LM.App.Wpf.ViewModels.StagingItem.Similarity.get -> double
LM.App.Wpf.ViewModels.StagingItem.Similarity.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Source.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Source.set -> void
LM.App.Wpf.ViewModels.StagingItem.StagingItem() -> void
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.get -> string!
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.set -> void
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.Title.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Title.set -> void
LM.App.Wpf.ViewModels.StagingItem.Type.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingItem.Type.set -> void
LM.App.Wpf.ViewModels.StagingItem.Year.get -> int?
LM.App.Wpf.ViewModels.StagingItem.Year.set -> void
LM.App.Wpf.Views.AddView
LM.App.Wpf.Views.Behaviors.FileDropRequest
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.get -> System.Windows.DragEventArgs!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.get -> object?
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.FileDropRequest(System.Collections.Generic.IReadOnlyList<string!>! Paths, object? DropTarget, System.Windows.DragEventArgs! Args) -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.init -> void
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior.SavedSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.AddView.AddView() -> void
LM.App.Wpf.Views.AddView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog
LM.App.Wpf.Views.LibraryPresetPickerDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.LibraryPresetPickerDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel!
LM.App.Wpf.Views.LibraryPresetPrompt.LibraryPresetPrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.InitializeComponent() -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.AttachmentMetadataDialog(LM.App.Wpf.ViewModels.Library.AttachmentMetadataDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog
LM.App.Wpf.Views.LibraryPresetSaveDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.LibraryPresetSaveDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel!
LM.App.Wpf.Views.LibraryView
LM.App.Wpf.Views.LibraryView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryView.LibraryView() -> void
LM.App.Wpf.Views.PdfViewer
LM.App.Wpf.Views.PdfViewer.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewer.PdfViewer() -> void
LM.App.Wpf.Views.Library.TagTokenSelector
LM.App.Wpf.Views.Library.TagTokenSelector.InitializeComponent() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.FilteredSuggestions.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>?
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.set -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagTokenSelector() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.get -> System.Collections.Generic.IEnumerable<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.set -> void
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTagsProperty
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabularyProperty
LM.App.Wpf.Views.LibraryPresetPrompt
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Views.Review.Controls.DecisionBadge
LM.App.Wpf.Views.Review.Controls.DecisionBadge.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.DecisionBadge() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.get -> LM.Review.Core.Models.ScreeningStatus
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.set -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.ExtractionFieldEditor() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.ScreeningQueueControl() -> void
LM.App.Wpf.Views.Review.ReviewView
LM.App.Wpf.Views.Review.ReviewView.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ReviewView.ReviewView() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.LitSearchRunPickerWindow(LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel!
LM.App.Wpf.Views.Review.ProjectEditorWindow
LM.App.Wpf.Views.Review.ProjectEditorWindow.Attach(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.ProjectEditorWindow() -> void
LM.App.Wpf.Views.SearchSavePrompt
LM.App.Wpf.Views.SearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Views.SearchSavePrompt.SearchSavePrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.DataGridColumnVisibilityBehavior() -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.set -> void
LM.App.Wpf.Views.SearchView
LM.App.Wpf.Views.SearchView.InitializeComponent() -> void
LM.App.Wpf.Views.SearchView.SearchView() -> void
LM.App.Wpf.Views.ShellWindow
LM.App.Wpf.Views.ShellWindow.InitializeComponent() -> void
LM.App.Wpf.Views.ShellWindow.LoadWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.NewWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.ShellWindow() -> void
LM.App.Wpf.Views.StagingEditorWindow
LM.App.Wpf.Views.StagingEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.StagingEditorWindow.StagingEditorWindow(LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel! viewModel) -> void
override LM.App.Wpf.ViewModels.Library.LibrarySortOption.ToString() -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.IsDraggable.get -> bool
override LM.App.Wpf.Views.Library.AttachmentMetadataDialog.OnClosed(System.EventArgs! e) -> void
LM.App.Wpf.Views.WorkspaceChooser
LM.App.Wpf.Views.WorkspaceChooser.InitializeComponent() -> void
LM.App.Wpf.Views.WorkspaceChooser.SelectedWorkspacePath.get -> string?
LM.App.Wpf.Views.WorkspaceChooser.WorkspaceChooser(LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel! viewModel) -> void
LM.App.Wpf.Views.WorkspaceChooser.Configure(System.Action<LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel!>! configure) -> void
override LM.App.Wpf.App.OnExit(System.Windows.ExitEventArgs! e) -> void
override LM.App.Wpf.App.OnStartup(System.Windows.StartupEventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetPickerDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetSaveDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.StagingEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.WorkspaceChooser.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.ProjectEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.OnClosed(System.EventArgs! e) -> void
static LM.App.Wpf.App.Main() -> void
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.All.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.NewestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.OldestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleAscending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleDescending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Clone() -> LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.LitSearchOrganizerStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveEntryAsync(string! entryId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.SyncEntriesAsync(System.Collections.Generic.IEnumerable<string!>! entryIds, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema.CurrentVersion -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.LitSearchEntryViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! title, string? query) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Query.get -> string?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.CanDelete.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsRoot.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.LitSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! name, bool isRoot) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.LitSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.LitSearchRunViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! runId, string! label, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel! parent) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.LitSearchTreeViewModel(LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt, LM.Core.Abstractions.IEntryStore! entryStore, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
---------- LM.App.Wpf ----------
#nullable enable
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.ColumnKeyProperty -> System.Windows.DependencyProperty!
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.GetColumnKey(System.Windows.DependencyObject! element) -> string?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.SetColumnKey(System.Windows.DependencyObject! element, string? value) -> void
#nullable enable
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Id.get -> string!
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.IsDraggable.get -> bool
abstract LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Name.get -> string!
abstract LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.IsDraggable.get -> bool
const LM.App.Wpf.Library.LibraryPresetFolder.RootId = "root" -> string!
const LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.RootId = "root" -> string!
const LM.App.Wpf.ViewModels.StagingItem.DuplicateThreshold = 0.999 -> double
const LM.App.Wpf.ViewModels.StagingItem.NearThreshold = 0.75 -> double
LM.App.Wpf.App
LM.App.Wpf.App.App() -> void
LM.App.Wpf.App.InitializeComponent() -> void
LM.App.Wpf.Common.AsyncRelayCommand
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<object?, System.Threading.Tasks.Task!>! execute, System.Func<object?, bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<System.Threading.Tasks.Task!>! execute, System.Func<bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.AsyncRelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.AsyncRelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.AsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.IAsyncRelayCommand
LM.App.Wpf.Common.IAsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter
LM.App.Wpf.Common.BooleanToOpacityConverter.BooleanToOpacityConverter() -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.FalseOpacity.set -> void
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.get -> double
LM.App.Wpf.Common.BooleanToOpacityConverter.TrueOpacity.set -> void
LM.App.Wpf.Common.Converters.ProjectEditorConverters
LM.App.Wpf.Common.Converters.ProjectEditorConverters.StageSelectionEquality.get -> System.Windows.Data.IMultiValueConverter!
LM.App.Wpf.Common.LibraryPresetSaveContext.LibraryPresetSaveContext(string! DefaultName, System.Collections.Generic.IReadOnlyCollection<string!>! ExistingNames, string! Title = "Save Library Preset", string! Prompt = "Name this filter preset.") -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.LibraryCollectionEntry() -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.DeletePresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.RenamePresetAsync(string! presetId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetAsync(string! key, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
LM.App.Wpf.Library.LibraryFilterState.Tags.get -> string![]!
LM.App.Wpf.Library.LibraryPresetFolder.EnumerateChildren() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.LibraryPresetTreeItem>!
LM.App.Wpf.Library.LibraryPresetNodeKind.Folder = 0 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetNodeKind.Preset = 1 -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.LitSearchOrganizerEntry() -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.LitSearchOrganizerFolder() -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectBlueprint(string! projectId, string! name, System.DateTimeOffset createdAtUtc, string! createdBy, string! litSearchEntryId, string! litSearchRunId, System.Collections.Generic.IReadOnlyList<string!>! checkedEntryIds, string? hookRelativePath, LM.Review.Core.Models.ReviewTemplateKind template, string! metadataNotes, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>! stages) -> void
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CheckedEntryIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedAtUtc.get -> System.DateTimeOffset
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.CreatedBy.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.HookRelativePath.get -> string?
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchEntryId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.LitSearchRunId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Template.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.MetadataNotes.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.ProjectId.get -> string!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.Stages.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>!
LM.App.Wpf.Services.Review.Design.ProjectBlueprint.With(string? name = null, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Services.Review.Design.StageBlueprint!>? stages = null, LM.Review.Core.Models.ReviewTemplateKind? template = null, string? metadataNotes = null, string? litSearchEntryId = null, string? litSearchRunId = null, System.Collections.Generic.IReadOnlyList<string!>? checkedEntryIds = null) -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint!
LM.App.Wpf.Services.Review.Design.StageBlueprint
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageBlueprint(string! stageId, string! name, LM.Review.Core.Models.ReviewStageType stageType, int primaryReviewers, int secondaryReviewers, bool requiresConsensus, int minimumAgreements, bool escalateOnDisagreement, LM.Review.Core.Models.StageDisplayProfile! displayProfile) -> void
LM.App.Wpf.Services.Review.Design.StageBlueprint.EscalateOnDisagreement.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.MinimumAgreements.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.Name.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.PrimaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.RequiresConsensus.get -> bool
LM.App.Wpf.Services.Review.Design.StageBlueprint.SecondaryReviewers.get -> int
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageId.get -> string!
LM.App.Wpf.Services.Review.Design.StageBlueprint.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.Services.Review.Design.StageBlueprint.DisplayProfile.get -> LM.Review.Core.Models.StageDisplayProfile!
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher
LM.App.Wpf.Services.Pdf.IPdfViewerLauncher.Show(string! entryId, string! pdfAbsolutePath, string! pdfHash) -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.AddSelectionToFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.MoveFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.CollectionDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RemoveSelectionFromFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.PresetApplied -> System.EventHandler?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ItemsView.get -> System.ComponentModel.ICollectionView!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.LitSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.SavedSearchDragDropRequest() -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.IsRoot.get -> bool
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SavedSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeleteFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.DeletePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.LoadPresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.MoveCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenameFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RenamePresetCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel?>!
LM.App.Wpf.ViewModels.LibraryViewModel.AllTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.LibraryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.LitSearchOrganizer.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LoadCollectionEntriesAsync(string! collectionId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.OpenPdfAnnotationsCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.LibraryViewModel.RefreshTagsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibraryViewModel.ToggleBlacklistCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.LibrarySearchResult?>!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationType.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.AnnotationTypeDisplay.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorHex.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Dispose() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.HighlightBrush.get -> System.Windows.Media.Brush!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.PdfAnnotationColorCommandParameter() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.CollectionDragDropRequest() -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.Source.init -> void
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?
LM.App.Wpf.Views.Behaviors.CollectionDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.CollectionTreeDragDropBehavior.CollectionTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.LitSearchTreeDragDropBehavior.LitSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter
LM.App.Wpf.Views.Converters.EnumEqualsConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.EnumEqualsConverter.EnumEqualsConverter() -> void
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.Convert(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Converters.InverseBooleanToVisibilityConverter.InverseBooleanToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.AnnotationColorParameterConverter() -> void
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.Convert(object?[]! values, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Pdf.AnnotationColorParameterConverter.ConvertBack(object? value, System.Type![]! targetTypes, object? parameter, System.Globalization.CultureInfo! culture) -> object?[]!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object!
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.EmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.get -> System.Windows.Visibility
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NonEmptyState.set -> void
LM.App.Wpf.Views.Pdf.NullOrEmptyToVisibilityConverter.NullOrEmptyToVisibilityConverter() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList
LM.App.Wpf.Views.Pdf.PdfAnnotationList.PdfAnnotationList() -> void
LM.App.Wpf.Views.Pdf.PdfAnnotationList.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow
LM.App.Wpf.Views.PdfViewerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewerWindow.PdfViewerWindow() -> void
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.IPdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.PdfViewerHostObject(LM.App.Wpf.Views.PdfViewer! owner) -> void
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.LoadPdfAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.CreateHighlightAsync(string? payloadJson) -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.GetCurrentSelectionAsync() -> System.Threading.Tasks.Task<string?>!
LM.App.Wpf.Views.PdfViewer.PdfViewerHostObject.SetOverlayAsync(string? payloadJson) -> System.Threading.Tasks.Task!
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogCloseRequestedEventArgs(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs.DialogResult.get -> bool?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.CloseRequested -> System.EventHandler<LM.App.Wpf.Common.Dialogs.DialogCloseRequestedEventArgs!>?
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.DialogViewModelBase() -> void
LM.App.Wpf.Common.Dialogs.DialogViewModelBase.RequestClose(bool? dialogResult) -> void
LM.App.Wpf.Common.Dialogs.IDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowOpenFileDialog(LM.App.Wpf.Common.Dialogs.FilePickerOptions! options) -> string![]?
LM.App.Wpf.Common.Dialogs.WpfDialogService.WpfDialogService(System.IServiceProvider! services) -> void
LM.App.Wpf.Common.ILibraryPresetPrompt
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Common.ILibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Common.IClipboardService
LM.App.Wpf.Common.IClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.ClipboardService
LM.App.Wpf.Common.ClipboardService.ClipboardService() -> void
LM.App.Wpf.Common.ClipboardService.SetText(string! text) -> void
LM.App.Wpf.Common.IFileExplorerService
LM.App.Wpf.Common.IFileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.FileExplorerService
LM.App.Wpf.Common.FileExplorerService.FileExplorerService() -> void
LM.App.Wpf.Common.FileExplorerService.RevealInExplorer(string! path) -> void
LM.App.Wpf.Common.ISearchSavePrompt
LM.App.Wpf.Common.ISearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Common.SearchSavePromptContext
LM.App.Wpf.Common.SearchSavePromptContext.Database.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.From.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.Query.init -> void
LM.App.Wpf.Common.SearchSavePromptContext.SearchSavePromptContext(string! Query, LM.Core.Models.SearchDatabase Database, System.DateTime? From, System.DateTime? To, string! DefaultName, string! DefaultNotes, System.Collections.Generic.IReadOnlyList<string!>! DefaultTags) -> void
LM.App.Wpf.Common.SearchSavePromptContext.Database.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.Common.SearchSavePromptContext.DefaultName.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultNotes.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.DefaultTags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.SearchSavePromptContext.From.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.Query.get -> string!
LM.App.Wpf.Common.SearchSavePromptContext.To.get -> System.DateTime?
LM.App.Wpf.Common.SearchSavePromptContext.To.init -> void
LM.App.Wpf.Common.SearchSavePromptResult
LM.App.Wpf.Common.SearchSavePromptResult.Name.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Notes.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.Tags.init -> void
LM.App.Wpf.Common.SearchSavePromptResult.SearchSavePromptResult(string! Name, string! Notes, string! Tags) -> void
LM.App.Wpf.Common.SearchSavePromptResult.Name.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Notes.get -> string!
LM.App.Wpf.Common.SearchSavePromptResult.Tags.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.DefaultName.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
LM.App.Wpf.Common.LibraryPresetSaveContext.ExistingNames.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Prompt.init -> void
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSaveResult
LM.App.Wpf.Common.LibraryPresetSaveResult.LibraryPresetSaveResult(string! Name) -> void
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSaveResult.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.get -> bool
LM.App.Wpf.Common.LibraryPresetSelectionContext.AllowLoad.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.LibraryPresetSelectionContext(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! Presets, bool AllowLoad, string! Title) -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Presets.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.get -> string!
LM.App.Wpf.Common.LibraryPresetSelectionContext.Title.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Common.LibraryPresetSelectionResult.DeletedPresetIds.init -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.LibraryPresetSelectionResult(string? SelectedPresetId, System.Collections.Generic.IReadOnlyList<string!>! DeletedPresetIds) -> void
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.get -> string?
LM.App.Wpf.Common.LibraryPresetSelectionResult.SelectedPresetId.init -> void
LM.App.Wpf.Common.LibraryPresetSummary
LM.App.Wpf.Common.LibraryPresetSummary.Id.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Id.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.LibraryPresetSummary(string! Id, string! Name, System.DateTime SavedUtc) -> void
LM.App.Wpf.Common.LibraryPresetSummary.Name.get -> string!
LM.App.Wpf.Common.LibraryPresetSummary.Name.init -> void
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.get -> System.DateTime
LM.App.Wpf.Common.LibraryPresetSummary.SavedUtc.init -> void
LM.App.Wpf.Common.RelayCommand
LM.App.Wpf.Common.RelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.RelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.RelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.RelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.RelayCommand.RelayCommand(System.Action<object?>! exec, System.Func<object?, bool>? can = null) -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.get -> bool
LM.App.Wpf.Common.Dialogs.FilePickerOptions.AllowMultiple.init -> void
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.get -> string?
LM.App.Wpf.Common.Dialogs.FilePickerOptions.Filter.init -> void
LM.App.Wpf.Common.Dialogs.FolderPickerOptions
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.get -> string?
LM.App.Wpf.Common.Dialogs.FolderPickerOptions.Description.init -> void
LM.App.Wpf.Common.Dialogs.IDialogService
LM.App.Wpf.Common.Dialogs.IDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.IDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowFolderBrowserDialog(LM.App.Wpf.Common.Dialogs.FolderPickerOptions! options) -> string?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> bool?
LM.App.Wpf.Common.Dialogs.WpfDialogService.ShowProjectEditor(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! editor) -> bool?
LM.App.Wpf.Common.StringJoinConverter
LM.App.Wpf.Common.StringJoinConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.ConvertBack(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Common.StringJoinConverter.StringJoinConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToIconConverter.AttachmentGlyphToIconConverter() -> void
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.Convert(object? value, System.Type! targetType, object? parameter, System.Globalization.CultureInfo! culture) -> object?
LM.App.Wpf.Views.Converters.AttachmentGlyphToDescriptionConverter.AttachmentGlyphToDescriptionConverter() -> void
LM.App.Wpf.Common.ViewModelBase
LM.App.Wpf.Common.ViewModelBase.ViewModelBase() -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ChangeColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ClearColorCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.CopyCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.get -> System.Windows.Input.ICommand?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.DeleteCommand.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Id.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Note.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.Annotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotationColorCommandParameter.ColorName.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.get -> int
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PageNumber.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PdfAnnotation(string! id, string! title) -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.get -> System.Windows.Media.Imaging.BitmapImage?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImage.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.PreviewImagePath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.TextSnippet.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.get -> string!
LM.App.Wpf.ViewModels.Pdf.PdfAnnotation.Title.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.Annotations.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Pdf.PdfAnnotation!>!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.ChangeAnnotationColorCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.CopyAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DocumentSource.get -> System.Uri?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.EntryId.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.HandleAnnotationSelectionAsync(LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.LoadPdfCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfHash.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.get -> string?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfPath.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.PdfViewerViewModel(LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.App.Wpf.Services.IUserContext! userContext, LM.Core.Abstractions.IPdfAnnotationPreviewStorage! previewStorage, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.Common.IClipboardService! clipboard) -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.RecordAnnotationChangeCommand.get -> LM.App.Wpf.Common.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.get -> LM.App.Wpf.ViewModels.Pdf.PdfAnnotation?
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.SelectedAnnotation.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.WebViewBridge.set -> void
LM.App.Wpf.ViewModels.Pdf.PdfViewerViewModel.DeleteAnnotationCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.Library.LibraryFilterPreset
LM.App.Wpf.Library.LibraryFilterPreset.LibraryFilterPreset() -> void
LM.App.Wpf.Library.LibraryFilterPreset.Id.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Id.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.Name.get -> string!
LM.App.Wpf.Library.LibraryFilterPreset.Name.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.get -> System.DateTime
LM.App.Wpf.Library.LibraryFilterPreset.SavedUtc.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.get -> int
LM.App.Wpf.Library.LibraryFilterPreset.SortOrder.set -> void
LM.App.Wpf.Library.LibraryFilterPreset.State.get -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.Library.LibraryFilterPreset.State.set -> void
LM.App.Wpf.Library.LibraryFilterPresetStore
LM.App.Wpf.Library.LibraryFilterPresetStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.MovePresetAsync(string! presetId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.LibraryFilterPresetStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryFilterPresetStore.ListPresetsAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.LibraryFilterPreset!>!>!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.SavePresetAsync(LM.App.Wpf.Library.LibraryFilterPreset! preset, string? targetFolderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryFilterPresetStore.TryGetPresetByIdAsync(string! presetId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LibraryFilterPreset?>!
const LM.App.Wpf.Library.Collections.LibraryCollectionFolder.RootId = "collections-root" -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.AddedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionEntry!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionEntry.EntryId.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile
LM.App.Wpf.Library.Collections.LibraryCollectionFile.LibraryCollectionFile() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.get -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder?
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Root.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.get -> int
LM.App.Wpf.Library.Collections.LibraryCollectionFile.Version.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionFolder!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.EnumerateDescendants() -> System.Collections.Generic.IEnumerable<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionEntry!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Entries.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Folders.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Id.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.LibraryCollectionFolder() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Metadata.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionFolder.Name.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.Clone() -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.CreatedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.LibraryCollectionMetadata() -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.get -> string!
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedBy.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.get -> System.DateTime
LM.App.Wpf.Library.Collections.LibraryCollectionMetadata.ModifiedUtc.set -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore
LM.App.Wpf.Library.Collections.LibraryCollectionStore.AddEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.CreateFolderAsync(string? parentFolderId, string! name, string! createdBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.DeleteFolderAsync(string! folderId, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.Collections.LibraryCollectionFolder!>!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.LibraryCollectionStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RemoveEntriesAsync(string! folderId, System.Collections.Generic.IEnumerable<string!>! entryIds, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.RenameFolderAsync(string! folderId, string! newName, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.Collections.LibraryCollectionStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, string! performedBy, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LibraryPresetFolder
LM.App.Wpf.Library.LibraryPresetFolder.Clone() -> LM.App.Wpf.Library.LibraryPresetFolder!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryPresetFolder!>!
LM.App.Wpf.Library.LibraryPresetFolder.Folders.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Id.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Id.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.LibraryPresetFolder() -> void
LM.App.Wpf.Library.LibraryPresetFolder.Name.get -> string!
LM.App.Wpf.Library.LibraryPresetFolder.Name.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.Presets.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LibraryFilterPreset!>!
LM.App.Wpf.Library.LibraryPresetFolder.Presets.set -> void
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.get -> int
LM.App.Wpf.Library.LibraryPresetFolder.SortOrder.set -> void
LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem
LM.App.Wpf.Library.LibraryPresetTreeItem.Folder.get -> LM.App.Wpf.Library.LibraryPresetFolder?
LM.App.Wpf.Library.LibraryPresetTreeItem.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.Library.LibraryPresetTreeItem.LibraryPresetTreeItem(LM.App.Wpf.Library.LibraryPresetNodeKind kind, int sortOrder, LM.App.Wpf.Library.LibraryPresetFolder? folder, LM.App.Wpf.Library.LibraryFilterPreset? preset) -> void
LM.App.Wpf.Library.LibraryPresetTreeItem.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset?
LM.App.Wpf.Library.LibraryPresetTreeItem.SortOrder.get -> int
LM.App.Wpf.Library.ILibraryEntryEditor
LM.App.Wpf.Library.ILibraryEntryEditor.EditEntryAsync(LM.Core.Models.Entry! entry) -> System.Threading.Tasks.Task<System.Boolean>!
LM.App.Wpf.Library.LibraryFilterState
LM.App.Wpf.Library.LibraryFilterState.LibraryFilterState() -> void
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.get -> bool
LM.App.Wpf.Library.LibraryFilterState.UseFullTextSearch.set -> void
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.UnifiedQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.get -> string?
LM.App.Wpf.Library.LibraryFilterState.FullTextQuery.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateFrom.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateFrom.set -> void
LM.App.Wpf.Library.LibraryFilterState.DateTo.get -> System.DateTime?
LM.App.Wpf.Library.LibraryFilterState.DateTo.set -> void
LM.App.Wpf.Library.LibraryFilterState.SortKey.get -> string?
LM.App.Wpf.Library.LibraryFilterState.SortKey.set -> void
LM.App.Wpf.Library.LibraryFilterState.Tags.set -> void
LM.App.Wpf.ViewModels.AddPipeline
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddViewModel
LM.App.Wpf.ViewModels.AddViewModel.AddFilesCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.App.Wpf.ViewModels.WatchedFolderScanner? scanner = null, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore? watchedFolderSettings = null, LM.App.Wpf.ViewModels.StagingListViewModel? stagingList = null, LM.App.Wpf.ViewModels.WatchedFoldersViewModel? watchedFolders = null, LM.App.Wpf.Common.Dialogs.IDialogService? dialogService = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.BulkAddFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ClearCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.CommitSelectedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.AddViewModel.Current.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.AddViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.AddViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.AddViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.AddViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.AddViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.AddViewModel.ReviewStagedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.AddViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.AddViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.AddViewModel.Staging.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.AddViewModel.StagingListViewModel.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFolders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.AddViewModel.WatchedFoldersViewModel.get -> LM.App.Wpf.ViewModels.WatchedFoldersViewModel!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.DeletedPresetIds.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.LibraryPresetPickerDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.Presets.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel.SelectedPresetId.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.EntryId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookAbsolutePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.HookRelativePath.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.DisplayLabel.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.ExecutedBy.get -> string?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.Owner.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.RunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel.TotalHits.get -> int
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.ConfirmCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.Entries.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel!>!
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.get -> bool
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.HasEntries.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.LitSearchRunPickerViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunEntryItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedEntry.set -> void
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunItemViewModel?
LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel.SelectedRun.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Initialize(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.LibraryPresetSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.get -> string!
LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel.Prompt.set -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Initialize(LM.App.Wpf.Common.SearchSavePromptContext! context) -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultName.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultNotes.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.ResultTags.get -> string!
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.SearchSaveDialogViewModel() -> void
LM.App.Wpf.ViewModels.Dialogs.SearchSaveDialogViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingEditorViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList) -> void
LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel.StagingList.get -> LM.App.Wpf.ViewModels.StagingListViewModel!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.SelectedWorkspacePath.get -> string?
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.Title.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.get -> bool
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.RequireExistingDirectory.set -> void
LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel.WorkspaceChooserViewModel(LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.CanAcceptFileDrop(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleFileDropAsync(System.Collections.Generic.IEnumerable<string!>? filePaths, LM.App.Wpf.ViewModels.LibrarySearchResult? dropTarget = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.LibrarySearchResult
LM.App.Wpf.ViewModels.LibrarySearchResult.Entry.get -> LM.Core.Models.Entry!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasAttachments.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasDoi.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasIdentifiers.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasInternalId.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasLinks.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNct.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPmid.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasRelations.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasSource.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.HasUserNotes.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.Highlight.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.HighlightDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.IsFullText.get -> bool
LM.App.Wpf.ViewModels.LibrarySearchResult.LibrarySearchResult(LM.Core.Models.Entry! entry, double? score, string? highlight) -> void
LM.App.Wpf.ViewModels.LibrarySearchResult.Score.get -> double?
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreDisplay.get -> string?
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentGlyphKind.get -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibrarySearchResult.PrimaryAttachmentSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.TitleSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.YearPresenceSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearDescendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.YearAscendingSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SourceSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TypeSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedOnSortKey.get -> System.DateTime
LM.App.Wpf.ViewModels.LibrarySearchResult.AddedBySortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.InternalIdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.DoiSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.PmidSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.NctSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IdSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.AuthorsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.TagsSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.IsInternalSortKey.get -> int
LM.App.Wpf.ViewModels.LibrarySearchResult.SnippetSortKey.get -> string!
LM.App.Wpf.ViewModels.LibrarySearchResult.ScoreSortKey.get -> double
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.None = 0 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Pdf = 1 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Document = 2 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Presentation = 3 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.LibraryAttachmentGlyph.Generic = 4 -> LM.App.Wpf.ViewModels.LibraryAttachmentGlyph
LM.App.Wpf.ViewModels.Library.LibraryLinkItem
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.LibraryLinkItem(string! DisplayText, string! Target, LM.App.Wpf.ViewModels.Library.LinkItemKind Kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.DisplayText.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Target.init -> void
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.get -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LibraryLinkItem.Kind.init -> void
LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Url = 0 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.File = 1 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Library.LinkItemKind.Folder = 2 -> LM.App.Wpf.ViewModels.Library.LinkItemKind
LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.RunAndBasics = 0 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Metadata = 1 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Workflow = 2 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStep.Summary = 3 -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.ProjectEditorStepDescriptor(LM.App.Wpf.ViewModels.Review.ProjectEditorStep Step, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Step.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Title.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor.Description.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.ReviewTemplateOption(LM.Review.Core.Models.ReviewTemplateKind Kind, string! Title, string! Description) -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Kind.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Title.init -> void
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.get -> string!
LM.App.Wpf.ViewModels.Review.ReviewTemplateOption.Description.init -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectEditorViewModel() -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.AddStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CancelCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntryCount.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CheckedEntrySummary.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ErrorMessage.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.HookRelativePath.get -> string?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Initialize(LM.App.Wpf.Services.Review.Design.ProjectBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchEntryId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.LitSearchRunId.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageDownCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MoveStageUpCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ProjectName.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.RemoveStageCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Result.get -> LM.App.Wpf.Services.Review.Design.ProjectBlueprint?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SaveCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.get -> LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel?
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedStage.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.StageTypes.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStageType>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Stages.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.Steps.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.TemplateOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!>!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStep.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStep
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepDescriptor.get -> LM.App.Wpf.ViewModels.Review.ProjectEditorStepDescriptor!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.CurrentStepIndex.get -> int
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsSummaryStep.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.get -> LM.App.Wpf.ViewModels.Review.ReviewTemplateOption!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateOption.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.SelectedTemplateKind.get -> LM.Review.Core.Models.ReviewTemplateKind
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.get -> string!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.MetadataNotes.set -> void
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.NextCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.BackCommand.get -> CommunityToolkit.Mvvm.Input.RelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ChangeRunCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand!
LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel.ConfigureRunReloadHandler(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<LM.App.Wpf.Services.Review.Design.ProjectBlueprint?>!>! handler) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.StageDisplayOptionViewModel(LM.Review.Core.Models.StageContentArea area, bool isSelected) -> void
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Area.get -> LM.Review.Core.Models.StageContentArea
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.Description.get -> string!
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.get -> bool
LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel.IsSelected.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageBlueprintViewModel(LM.App.Wpf.Services.Review.Design.StageBlueprint! blueprint) -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.EscalateOnDisagreement.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.MinimumAgreements.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.PrimaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.get -> bool
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.RequiresConsensus.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.SecondaryReviewers.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageId.get -> string!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.StageType.set -> void
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TotalReviewers.get -> int
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.DisplayOptions.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Review.StageDisplayOptionViewModel!>!
LM.App.Wpf.ViewModels.Review.StageBlueprintViewModel.TryBuild(out LM.App.Wpf.Services.Review.Design.StageBlueprint! stage, out string? errorMessage) -> bool
LM.App.Wpf.ViewModels.StagingListViewModel
LM.App.Wpf.ViewModels.StagingListViewModel.AddStagedItemsAsync(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Clear() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.CommitSelectedAsync(System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.StagingListViewModel.Current.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.StagingListViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.StagingListViewModel.HasItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.HasSelectedItems.get -> bool
LM.App.Wpf.ViewModels.StagingListViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.StagingListViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.StagingListViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingListViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingListViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.StagingListViewModel.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.StagingListViewModel.StagingListViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.AddWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.RemoveWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanAllWatchedFoldersCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.ScanWatchedFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.SetCommandGuard(System.Func<System.Func<System.Threading.Tasks.Task!>!, System.Threading.Tasks.Task!>! guard) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.UpdateParentBusy(bool isBusy) -> void
LM.App.Wpf.ViewModels.WatchedFoldersViewModel.WatchedFoldersViewModel(LM.App.Wpf.ViewModels.StagingListViewModel! stagingList, LM.App.Wpf.ViewModels.WatchedFolderScanner! scanner, LM.Core.Abstractions.Configuration.IWatchedFolderSettingsStore! settingsStore, LM.App.Wpf.Common.Dialogs.IDialogService! dialogService) -> void
LM.App.Wpf.ViewModels.WatchedFolder
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.get -> bool
LM.App.Wpf.ViewModels.WatchedFolder.IsEnabled.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.LastScanDisplay.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.LastScanUtc.get -> System.DateTimeOffset?
LM.App.Wpf.ViewModels.WatchedFolder.LastScanWasUnchanged.get -> bool?
LM.App.Wpf.ViewModels.WatchedFolder.Path.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.Path.set -> void
LM.App.Wpf.ViewModels.WatchedFolder.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.WatchedFolder.ResetScanState() -> void
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusLabel.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.ScanStatusToolTip.get -> string!
LM.App.Wpf.ViewModels.WatchedFolder.WatchedFolder() -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig.GetState(string! path) -> LM.Core.Models.WatchedFolderState?
LM.App.Wpf.ViewModels.WatchedFolderConfig
LM.App.Wpf.ViewModels.WatchedFolderConfig.ApplyState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.ClearState(LM.App.Wpf.ViewModels.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.WatchedFolder!>!
LM.App.Wpf.ViewModels.WatchedFolderConfig.CreateSnapshot() -> LM.Core.Models.WatchedFolderSettings!
LM.App.Wpf.ViewModels.WatchedFolderConfig.Load(LM.Core.Models.WatchedFolderSettings! settings) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.StoreState(LM.App.Wpf.ViewModels.WatchedFolder! folder, LM.Core.Models.WatchedFolderState! state) -> void
LM.App.Wpf.ViewModels.WatchedFolderConfig.WatchedFolderConfig() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Folder.get -> LM.App.Wpf.ViewModels.WatchedFolder!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.Items.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs.WatchedFolderScanEventArgs(LM.App.Wpf.ViewModels.WatchedFolder! folder, System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>! items) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner
LM.App.Wpf.ViewModels.WatchedFolderScanner.Attach(LM.App.Wpf.ViewModels.WatchedFolderConfig! config) -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.Dispose() -> void
LM.App.Wpf.ViewModels.WatchedFolderScanner.ItemsStaged -> System.EventHandler<LM.App.Wpf.ViewModels.WatchedFolderScanEventArgs!>?
LM.App.Wpf.ViewModels.WatchedFolderScanner.ScanAsync(LM.App.Wpf.ViewModels.WatchedFolder? folder, System.Threading.CancellationToken ct, bool force = false) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.WatchedFolderScanner.WatchedFolderScanner(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.IAddPipeline
LM.App.Wpf.ViewModels.IAddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.IAddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.Library.ILibraryDocumentService
LM.App.Wpf.Library.ILibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.ILibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.LibraryDocumentService
LM.App.Wpf.Library.LibraryDocumentService.LibraryDocumentService(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenEntry(LM.Core.Models.Entry! entry) -> void
LM.App.Wpf.Library.LibraryDocumentService.OpenAttachment(LM.Core.Models.Attachment! attachment) -> void
LM.App.Wpf.Library.IAttachmentMetadataPrompt
LM.App.Wpf.Library.IAttachmentMetadataPrompt.RequestMetadataAsync(LM.App.Wpf.Library.AttachmentMetadataPromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.AttachmentMetadataPromptResult?>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.get -> string!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.EntryTitle.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataPromptContext.FilePaths.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptContext.AttachmentMetadataPromptContext(string! EntryTitle, System.Collections.Generic.IReadOnlyList<string!>! FilePaths) -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>!
LM.App.Wpf.Library.AttachmentMetadataPromptResult.Attachments.init -> void
LM.App.Wpf.Library.AttachmentMetadataPromptResult.AttachmentMetadataPromptResult(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Library.AttachmentMetadataSelection!>! Attachments) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection
LM.App.Wpf.Library.AttachmentMetadataSelection.AttachmentMetadataSelection(string! SourcePath, string! Title, LM.Core.Models.AttachmentKind Kind, System.Collections.Generic.IReadOnlyList<string!>! Tags) -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.get -> LM.Core.Models.AttachmentKind
LM.App.Wpf.Library.AttachmentMetadataSelection.Kind.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.SourcePath.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Library.AttachmentMetadataSelection.Tags.init -> void
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.get -> string!
LM.App.Wpf.Library.AttachmentMetadataSelection.Title.init -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LibraryFiltersViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! presetStore, LM.App.Wpf.Common.ILibraryPresetPrompt! presetPrompt, LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.InsertIndex.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.Source.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchDragDropRequest.TargetFolder.init -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.SavedSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, string! id, string! name, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Kind.get -> LM.App.Wpf.Library.LibraryPresetNodeKind
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.get -> string
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.get -> int
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.SortOrder.set -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Preset.get -> LM.App.Wpf.Library.LibraryFilterPreset!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedSearchPresetViewModel(LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel! tree, LM.App.Wpf.Library.LibraryFilterPreset! preset, int sortOrder) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.SavedUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.Summary.get -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.ToSummary() -> LM.App.Wpf.Common.LibraryPresetSummary!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.Presets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs.SavedSearchTreeChangedEventArgs(System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>! presets) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.SavedSearchTreeViewModel(LM.App.Wpf.Library.LibraryFilterPresetStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt) -> void
LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel.TreeChanged -> System.EventHandler<LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeChangedEventArgs!>?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ClearCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyPresetAsync(LM.App.Wpf.Common.LibraryPresetSummary! summary, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ApplyState(LM.App.Wpf.Library.LibraryFilterState! state) -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.CaptureState() -> LM.App.Wpf.Library.LibraryFilterState!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTooltip.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.KeywordTokens.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.BuildFullTextQuery(string! normalizedQuery) -> LM.Core.Models.Search.FullTextSearchQuery!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.FullTextQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.HasSavedPresets.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.GetNormalizedFullTextQuery() -> string!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.NavigationRoots.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RefreshNavigationAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedPresets.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Common.LibraryPresetSummary!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SavedSearches.get -> LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsLeftPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.IsRightPanelCollapsed.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleLeftPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.ToggleRightPanelCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UnifiedQuery.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.UseFullTextSearch.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateFrom.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.DateTo.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedSort.set -> void
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SortOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel.RemoveTagCommand.get -> CommunityToolkit.Mvvm.Input.IRelayCommand<string?>!
LM.App.Wpf.ViewModels.Library.LibrarySortOption
LM.App.Wpf.ViewModels.Library.LibrarySortOption.LibrarySortOption(string! key, string! displayName) -> void
LM.App.Wpf.ViewModels.Library.LibrarySortOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibrarySortOptions
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.Category = 0 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.SavedSearch = 1 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchEntry = 2 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind.LitSearchRun = 3 -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.LibraryNavigationNodeViewModel(string! name, LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind kind) -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.HasChildren.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Kind.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeKind
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.get -> object?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Payload.init -> void
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel.Subtitle.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.IsVisible.set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.Key.get -> string!
LM.App.Wpf.ViewModels.Library.LibraryColumnOption.LibraryColumnOption(string! key, string! displayName, bool isVisible) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].get -> bool
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.this[string! key].set -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LibraryColumnVisibility() -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.LoadFrom(System.Collections.Generic.IReadOnlyDictionary<string!, bool>! source) -> void
LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility.Snapshot() -> System.Collections.Generic.IReadOnlyDictionary<string!, bool>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Clear() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LibraryResultsViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.App.Wpf.Library.ILibraryEntryEditor! entryEditor, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.Library.IAttachmentMetadataPrompt! attachmentPrompt, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator, LM.Core.Abstractions.IHasher! hasher, LM.App.Wpf.Services.Pdf.IPdfViewerLauncher! pdfViewerLauncher) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadFullTextResultsAsync(System.Collections.Generic.IReadOnlyList<LM.Core.Models.Search.FullTextSearchHit!>! hits, System.Func<LM.Core.Models.Entry!, bool>? entryFilter = null) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LoadMetadataResults(System.Collections.Generic.IEnumerable<LM.Core.Models.Entry!>! entries) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResetSortForSearch(LM.App.Wpf.ViewModels.Library.LibrarySortOption! defaultOption) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridLoaded(System.Windows.RoutedEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HandleGridSorting(System.Windows.Controls.DataGridSortingEventArgs! args) -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.MarkAsMetadataResults() -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ResultsAreFullText.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.get -> LM.App.Wpf.ViewModels.LibrarySearchResult?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.Selected.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasLinkItems.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.LinkItems.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LibraryLinkItem!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.EditEntryAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelection.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedItems.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.LibrarySearchResult!>!
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectionChanged -> System.EventHandler?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.HasSelectedAbstract.get -> bool
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.get -> string?
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.SelectedAbstract.set -> void
LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel.ToggleBlacklistAsync(LM.App.Wpf.ViewModels.LibrarySearchResult? target) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.get -> int
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.EntryCount.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Id.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.LibraryCollectionFolderViewModel(LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! tree, string! id, string! name, LM.App.Wpf.Library.Collections.LibraryCollectionMetadata! metadata) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Metadata.get -> LM.App.Wpf.Library.Collections.LibraryCollectionMetadata!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.get -> string!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Name.set -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.LibraryCollectionsViewModel(LM.App.Wpf.Library.Collections.LibraryCollectionStore! store, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Infrastructure.Hooks.HookOrchestrator! hookOrchestrator) -> void
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionFolderViewModel!
LM.App.Wpf.ViewModels.LibrarySearchResult.HasPrimaryAttachment.get -> bool
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.LibrarySearchQueryBox() -> void
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.get -> string!
LM.App.Wpf.Views.Library.Controls.LibrarySearchQueryBox.Text.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel
LM.App.Wpf.ViewModels.LibraryViewModel.Filters.get -> LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.LibraryViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFullTextSearchService! fullTextSearch, LM.App.Wpf.ViewModels.Library.LibraryFiltersViewModel! filters, LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel! results, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.Configuration.IUserPreferencesStore! preferencesStore, LM.App.Wpf.Common.IClipboardService! clipboard, LM.App.Wpf.Common.IFileExplorerService! fileExplorer, LM.App.Wpf.Library.ILibraryDocumentService! documentService, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! litSearchOrganizer, LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel! collections, LM.App.Wpf.Library.Collections.LibraryCollectionStore! collectionStore) -> void
LM.App.Wpf.ViewModels.LibraryViewModel.Results.get -> LM.App.Wpf.ViewModels.Library.LibraryResultsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.Collections.get -> LM.App.Wpf.ViewModels.Library.Collections.LibraryCollectionsViewModel!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnOptions.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibraryColumnOption!>!
LM.App.Wpf.ViewModels.LibraryViewModel.ColumnVisibility.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility!
LM.App.Wpf.ViewModels.SearchItemViewModel
LM.App.Wpf.ViewModels.SearchItemViewModel.Header.get -> string!
LM.App.Wpf.ViewModels.SearchItemViewModel.SearchItemViewModel(string! header, LM.App.Wpf.ViewModels.LibraryViewModel! vm) -> void
LM.App.Wpf.ViewModels.SearchItemViewModel.Vm.get -> LM.App.Wpf.ViewModels.LibraryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel
LM.App.Wpf.ViewModels.SearchViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.SearchViewModel.ExportSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.From.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.LoadSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRuns.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.PreviousSearchSummary!>!
LM.App.Wpf.ViewModels.SearchViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRunsCount.get -> int
LM.App.Wpf.ViewModels.SearchViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.SearchViewModel.Query.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.get -> LM.Core.Models.SearchHit?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedResult.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RunSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SaveSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleLeftPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleRightPanelCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SearchViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IWorkSpaceService! ws, LM.App.Wpf.Common.ISearchSavePrompt! savePrompt, LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel! providers, LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel! history, LM.Infrastructure.Search.PubMedSearchProvider! pubMedProvider, LM.Core.Abstractions.Configuration.IUserPreferencesStore? preferencesStore = null) -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.get -> LM.App.Wpf.ViewModels.PreviousSearchSummary?
LM.App.Wpf.ViewModels.SearchViewModel.SelectedPreviousRun.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.StartPreviousRunCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ShowRunDetailsCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.ToggleFavoriteCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.LeftPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.get -> System.Windows.GridLength
LM.App.Wpf.ViewModels.SearchViewModel.RightPanelWidth.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsLeftPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.IsRightPanelCollapsed.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.To.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.History.get -> LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel.Providers.get -> LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecordExecutionAsync(LM.Core.Models.Search.SearchExecutionResult! result, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.RecentSearchHistory.get -> System.Collections.ObjectModel.ReadOnlyObservableCollection<LM.Core.Models.Search.SearchHistoryEntry!>!
LM.App.Wpf.ViewModels.Search.SearchHistoryViewModel.SearchHistoryViewModel(LM.Core.Abstractions.Configuration.ISearchHistoryStore! store) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Databases.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.SearchDatabaseOption!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.From.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Query.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.ExecuteSearchAsync() -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.RunSearchCommand.get -> LM.App.Wpf.Common.AsyncRelayCommand!
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchExecuted -> System.EventHandler<LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs!>?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SearchProvidersViewModel(LM.Core.Abstractions.Search.ISearchExecutionService! executionService) -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.Search.SearchProvidersViewModel.To.set -> void
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.Result.get -> LM.Core.Models.Search.SearchExecutionResult!
LM.App.Wpf.ViewModels.Search.SearchExecutedEventArgs.SearchExecutedEventArgs(LM.Core.Models.Search.SearchExecutionResult! result) -> void
LM.App.Wpf.ViewModels.PreviousSearchSummary
LM.App.Wpf.ViewModels.PreviousSearchSummary.DisplayName.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.EntryId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.FavoriteRunId.get -> string?
LM.App.Wpf.ViewModels.PreviousSearchSummary.IsFavorite.get -> bool
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastFrom.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastRunUtc.get -> System.DateTime
LM.App.Wpf.ViewModels.PreviousSearchSummary.LastTo.get -> System.DateTime?
LM.App.Wpf.ViewModels.PreviousSearchSummary.Provider.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.Query.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunCount.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.RunId.get -> string!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TotalHits.get -> int
LM.App.Wpf.ViewModels.PreviousSearchSummary.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.ViewModels.PreviousSearchSummary.TagsDisplay.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption
LM.App.Wpf.ViewModels.SearchDatabaseOption.DisplayName.get -> string!
LM.App.Wpf.ViewModels.SearchDatabaseOption.SearchDatabaseOption(LM.Core.Models.SearchDatabase value, string! displayName) -> void
LM.App.Wpf.ViewModels.SearchDatabaseOption.Value.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.StagingItem
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.get -> LM.HubSpoke.Models.ArticleHook?
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.DisplayName.get -> string?
LM.App.Wpf.ViewModels.StagingItem.DisplayName.set -> void
LM.App.Wpf.ViewModels.StagingItem.Doi.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Doi.set -> void
LM.App.Wpf.ViewModels.StagingItem.FilePath.get -> string!
LM.App.Wpf.ViewModels.StagingItem.FilePath.set -> void
LM.App.Wpf.ViewModels.StagingItem.Internal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Internal.set -> void
LM.App.Wpf.ViewModels.StagingItem.InternalId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.InternalId.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsDuplicate.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsNearMatch.get -> bool
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Notes.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Notes.set -> void
LM.App.Wpf.ViewModels.StagingItem.OriginalFileName.get -> string!
LM.App.Wpf.ViewModels.StagingItem.Pmid.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Pmid.set -> void
LM.App.Wpf.ViewModels.StagingItem.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingItem.Selected.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Selected.set -> void
LM.App.Wpf.ViewModels.StagingItem.Similarity.get -> double
LM.App.Wpf.ViewModels.StagingItem.Similarity.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Source.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Source.set -> void
LM.App.Wpf.ViewModels.StagingItem.StagingItem() -> void
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.get -> string!
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.set -> void
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.Title.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Title.set -> void
LM.App.Wpf.ViewModels.StagingItem.Type.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingItem.Type.set -> void
LM.App.Wpf.ViewModels.StagingItem.Year.get -> int?
LM.App.Wpf.ViewModels.StagingItem.Year.set -> void
LM.App.Wpf.Views.AddView
LM.App.Wpf.Views.Behaviors.FileDropRequest
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.get -> System.Windows.DragEventArgs!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Args.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.get -> object?
LM.App.Wpf.Views.Behaviors.FileDropRequest.DropTarget.init -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.FileDropRequest(System.Collections.Generic.IReadOnlyList<string!>! Paths, object? DropTarget, System.Windows.DragEventArgs! Args) -> void
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Views.Behaviors.FileDropRequest.Paths.init -> void
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior
LM.App.Wpf.Views.Behaviors.SavedSearchTreeDragDropBehavior.SavedSearchTreeDragDropBehavior() -> void
LM.App.Wpf.Views.AddView.AddView() -> void
LM.App.Wpf.Views.AddView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog
LM.App.Wpf.Views.LibraryPresetPickerDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.LibraryPresetPickerDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetPickerDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetPickerDialogViewModel!
LM.App.Wpf.Views.LibraryPresetPrompt.LibraryPresetPrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.InitializeComponent() -> void
LM.App.Wpf.Views.Library.AttachmentMetadataDialog.AttachmentMetadataDialog(LM.App.Wpf.ViewModels.Library.AttachmentMetadataDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog
LM.App.Wpf.Views.LibraryPresetSaveDialog.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.LibraryPresetSaveDialog(LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel! viewModel) -> void
LM.App.Wpf.Views.LibraryPresetSaveDialog.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LibraryPresetSaveDialogViewModel!
LM.App.Wpf.Views.LibraryView
LM.App.Wpf.Views.LibraryView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryView.LibraryView() -> void
LM.App.Wpf.Views.PdfViewer
LM.App.Wpf.Views.PdfViewer.InitializeComponent() -> void
LM.App.Wpf.Views.PdfViewer.PdfViewer() -> void
LM.App.Wpf.Views.Library.TagTokenSelector
LM.App.Wpf.Views.Library.TagTokenSelector.InitializeComponent() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.FilteredSuggestions.get -> System.Collections.ObjectModel.ObservableCollection<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.get -> System.Collections.ObjectModel.ObservableCollection<string!>?
LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTags.set -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagTokenSelector() -> void
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.get -> System.Collections.Generic.IEnumerable<string!>!
LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabulary.set -> void
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.SelectedTagsProperty
field System.Windows.DependencyProperty! LM.App.Wpf.Views.Library.TagTokenSelector.TagVocabularyProperty
LM.App.Wpf.Views.LibraryPresetPrompt
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSaveAsync(LM.App.Wpf.Common.LibraryPresetSaveContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSaveResult?>!
LM.App.Wpf.Views.LibraryPresetPrompt.RequestSelectionAsync(LM.App.Wpf.Common.LibraryPresetSelectionContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.LibraryPresetSelectionResult?>!
LM.App.Wpf.Views.Review.Controls.DecisionBadge
LM.App.Wpf.Views.Review.Controls.DecisionBadge.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.DecisionBadge() -> void
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.get -> LM.Review.Core.Models.ScreeningStatus
LM.App.Wpf.Views.Review.Controls.DecisionBadge.Status.set -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ExtractionFieldEditor.ExtractionFieldEditor() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.InitializeComponent() -> void
LM.App.Wpf.Views.Review.Controls.ScreeningQueueControl.ScreeningQueueControl() -> void
LM.App.Wpf.Views.Review.ReviewView
LM.App.Wpf.Views.Review.ReviewView.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ReviewView.ReviewView() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.LitSearchRunPickerWindow(LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.ViewModel.get -> LM.App.Wpf.ViewModels.Dialogs.LitSearchRunPickerViewModel!
LM.App.Wpf.Views.Review.ProjectEditorWindow
LM.App.Wpf.Views.Review.ProjectEditorWindow.Attach(LM.App.Wpf.ViewModels.Review.ProjectEditorViewModel! viewModel) -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.Review.ProjectEditorWindow.ProjectEditorWindow() -> void
LM.App.Wpf.Views.SearchSavePrompt
LM.App.Wpf.Views.SearchSavePrompt.RequestAsync(LM.App.Wpf.Common.SearchSavePromptContext! context) -> System.Threading.Tasks.Task<LM.App.Wpf.Common.SearchSavePromptResult?>!
LM.App.Wpf.Views.SearchSavePrompt.SearchSavePrompt(System.IServiceProvider! services) -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.DataGridColumnVisibilityBehavior() -> void
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.get -> LM.App.Wpf.ViewModels.Library.LibraryColumnVisibility?
LM.App.Wpf.Views.Behaviors.DataGridColumnVisibilityBehavior.VisibilityMap.set -> void
LM.App.Wpf.Views.SearchView
LM.App.Wpf.Views.SearchView.InitializeComponent() -> void
LM.App.Wpf.Views.SearchView.SearchView() -> void
LM.App.Wpf.Views.ShellWindow
LM.App.Wpf.Views.ShellWindow.InitializeComponent() -> void
LM.App.Wpf.Views.ShellWindow.LoadWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.NewWorkspaceRequested -> System.EventHandler?
LM.App.Wpf.Views.ShellWindow.ShellWindow() -> void
LM.App.Wpf.Views.StagingEditorWindow
LM.App.Wpf.Views.StagingEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.StagingEditorWindow.StagingEditorWindow(LM.App.Wpf.ViewModels.Dialogs.StagingEditorViewModel! viewModel) -> void
override LM.App.Wpf.ViewModels.Library.LibrarySortOption.ToString() -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Id.get -> string!
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Name.get -> string!
override LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchFolderViewModel.IsDraggable.get -> bool
override LM.App.Wpf.ViewModels.Library.SavedSearches.SavedSearchPresetViewModel.IsDraggable.get -> bool
override LM.App.Wpf.Views.Library.AttachmentMetadataDialog.OnClosed(System.EventArgs! e) -> void
LM.App.Wpf.Views.WorkspaceChooser
LM.App.Wpf.Views.WorkspaceChooser.InitializeComponent() -> void
LM.App.Wpf.Views.WorkspaceChooser.SelectedWorkspacePath.get -> string?
LM.App.Wpf.Views.WorkspaceChooser.WorkspaceChooser(LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel! viewModel) -> void
LM.App.Wpf.Views.WorkspaceChooser.Configure(System.Action<LM.App.Wpf.ViewModels.Dialogs.WorkspaceChooserViewModel!>! configure) -> void
override LM.App.Wpf.App.OnExit(System.Windows.ExitEventArgs! e) -> void
override LM.App.Wpf.App.OnStartup(System.Windows.StartupEventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetPickerDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.LibraryPresetSaveDialog.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.StagingEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.WorkspaceChooser.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.ProjectEditorWindow.OnClosed(System.EventArgs! e) -> void
override LM.App.Wpf.Views.Review.LitSearchRunPickerWindow.OnClosed(System.EventArgs! e) -> void
static LM.App.Wpf.App.Main() -> void
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.All.get -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.Library.LibrarySortOption!>!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.NewestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.OldestFirst.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleAscending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
static LM.App.Wpf.ViewModels.Library.LibrarySortOptions.TitleDescending.get -> LM.App.Wpf.ViewModels.Library.LibrarySortOption!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.EntryId.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Clone() -> LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerEntry!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Entries.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.get -> System.Collections.Generic.List<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Folders.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Id.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.get -> string!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.Name.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.get -> int
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder.SortOrder.set -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.CreateFolderAsync(string! parentFolderId, string! name, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.DeleteFolderAsync(string! folderId, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.GetHierarchyAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.LitSearchOrganizerStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveEntryAsync(string! entryId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.MoveFolderAsync(string! folderId, string! targetFolderId, int insertIndex, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.RenameFolderAsync(string! folderId, string! newName, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore.SyncEntriesAsync(System.Collections.Generic.IEnumerable<string!>! entryIds, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.App.Wpf.Library.LitSearch.LitSearchOrganizerFolder!>!
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema
LM.App.Wpf.Library.LitSearch.LitSearchOrganizerSchema.CurrentVersion -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.LitSearchEntryViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! title, string? query) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Query.get -> string?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Runs.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel.Title.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.CanDelete.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Children.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel!>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.IsRoot.get -> bool
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.LitSearchFolderViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! id, string! name, bool isRoot) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel.Parent.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.LitSearchNodeViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.get -> LM.App.Wpf.ViewModels.Library.LibraryNavigationNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.NavigationNode.set -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel.Tree.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Label.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.LitSearchRunViewModel(LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel! tree, string! runId, string! label, LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel! parent) -> void
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.Parent.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchEntryViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchRunViewModel.RunId.get -> string!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.CreateFolderCommand.get -> CommunityToolkit.Mvvm.Input.IAsyncRelayCommand<LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?>!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.RefreshAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.Root.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel!
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.InsertIndex.get -> int
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.Source.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchNodeViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchDragDropRequest.TargetFolder.get -> LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchFolderViewModel?
LM.App.Wpf.ViewModels.Library.LitSearch.LitSearchTreeViewModel.LitSearchTreeViewModel(LM.App.Wpf.Library.LitSearch.LitSearchOrganizerStore! store, LM.App.Wpf.Common.ILibraryPresetPrompt! prompt, LM.Core.Abstractions.IEntryStore! entryStore, LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
