#nullable enable
const LM.App.Wpf.ViewModels.StagingItem.DuplicateThreshold = 0.999 -> double
const LM.App.Wpf.ViewModels.StagingItem.NearThreshold = 0.75 -> double
LM.App.Wpf.App
LM.App.Wpf.App.App() -> void
LM.App.Wpf.App.InitializeComponent() -> void
LM.App.Wpf.Common.AsyncRelayCommand
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<object?, System.Threading.Tasks.Task!>! execute, System.Func<object?, bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.AsyncRelayCommand(System.Func<System.Threading.Tasks.Task!>! execute, System.Func<bool>? canExecute = null) -> void
LM.App.Wpf.Common.AsyncRelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.AsyncRelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.AsyncRelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.AsyncRelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.RelayCommand
LM.App.Wpf.Common.RelayCommand.CanExecute(object? parameter) -> bool
LM.App.Wpf.Common.RelayCommand.CanExecuteChanged -> System.EventHandler?
LM.App.Wpf.Common.RelayCommand.Execute(object? parameter) -> void
LM.App.Wpf.Common.RelayCommand.RaiseCanExecuteChanged() -> void
LM.App.Wpf.Common.RelayCommand.RelayCommand(System.Action<object?>! exec, System.Func<object?, bool>? can = null) -> void
LM.App.Wpf.Common.ViewModelBase
LM.App.Wpf.Common.ViewModelBase.OnPropertyChanged(string? name = null) -> void
LM.App.Wpf.Common.ViewModelBase.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.Common.ViewModelBase.ViewModelBase() -> void
LM.App.Wpf.Models.WatchedFolder
LM.App.Wpf.Models.WatchedFolder.IncludeSubdirectories.get -> bool
LM.App.Wpf.Models.WatchedFolder.IncludeSubdirectories.init -> void
LM.App.Wpf.Models.WatchedFolder.IsEnabled.get -> bool
LM.App.Wpf.Models.WatchedFolder.IsEnabled.init -> void
LM.App.Wpf.Models.WatchedFolder.Path.get -> string!
LM.App.Wpf.Models.WatchedFolder.Path.init -> void
LM.App.Wpf.Models.WatchedFolder.WatchedFolder() -> void
LM.App.Wpf.Services.DialogService
LM.App.Wpf.Services.DialogService.DialogService() -> void
LM.App.Wpf.Services.DialogService.ShowFolderBrowserDialog(string! description) -> string?
LM.App.Wpf.Services.DialogService.ShowOpenFileDialog(string! filter, bool allowMultiple) -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Services.DialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.Add.StagingListViewModel! stagingViewModel) -> void
LM.App.Wpf.Services.FileSystemWatchedFolderScanner
LM.App.Wpf.Services.FileSystemWatchedFolderScanner.FileSystemWatchedFolderScanner() -> void
LM.App.Wpf.Services.FileSystemWatchedFolderScanner.ScanAsync(LM.App.Wpf.Models.WatchedFolder! folder, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>!>!
LM.App.Wpf.Services.IDialogService
LM.App.Wpf.Services.IDialogService.ShowFolderBrowserDialog(string! description) -> string?
LM.App.Wpf.Services.IDialogService.ShowOpenFileDialog(string! filter, bool allowMultiple) -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Services.IDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.Add.StagingListViewModel! stagingViewModel) -> void
LM.App.Wpf.Services.IWatchedFolderConfigStore
LM.App.Wpf.Services.IWatchedFolderConfigStore.Load() -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Models.WatchedFolder!>!
LM.App.Wpf.Services.IWatchedFolderConfigStore.Save(System.Collections.Generic.IEnumerable<LM.App.Wpf.Models.WatchedFolder!>! folders) -> void
LM.App.Wpf.Services.IWatchedFolderScanner
LM.App.Wpf.Services.IWatchedFolderScanner.ScanAsync(LM.App.Wpf.Models.WatchedFolder! folder, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>!>!
LM.App.Wpf.Services.InMemoryWatchedFolderConfigStore
LM.App.Wpf.Services.InMemoryWatchedFolderConfigStore.InMemoryWatchedFolderConfigStore() -> void
LM.App.Wpf.Services.InMemoryWatchedFolderConfigStore.Load() -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Models.WatchedFolder!>!
LM.App.Wpf.Services.InMemoryWatchedFolderConfigStore.Save(System.Collections.Generic.IEnumerable<LM.App.Wpf.Models.WatchedFolder!>! folders) -> void
LM.App.Wpf.Services.NullDialogService
LM.App.Wpf.Services.NullDialogService.NullDialogService() -> void
LM.App.Wpf.Services.NullDialogService.ShowFolderBrowserDialog(string! description) -> string?
LM.App.Wpf.Services.NullDialogService.ShowOpenFileDialog(string! filter, bool allowMultiple) -> System.Collections.Generic.IReadOnlyList<string!>!
LM.App.Wpf.Services.NullDialogService.ShowStagingEditor(LM.App.Wpf.ViewModels.Add.StagingListViewModel! stagingViewModel) -> void
LM.App.Wpf.Services.WatchedFolderConfigStore
LM.App.Wpf.Services.WatchedFolderConfigStore.Load() -> System.Collections.Generic.IReadOnlyList<LM.App.Wpf.Models.WatchedFolder!>!
LM.App.Wpf.Services.WatchedFolderConfigStore.Save(System.Collections.Generic.IEnumerable<LM.App.Wpf.Models.WatchedFolder!>! folders) -> void
LM.App.Wpf.Services.WatchedFolderConfigStore.WatchedFolderConfigStore(LM.Core.Abstractions.IWorkSpaceService! workspace) -> void
LM.App.Wpf.ViewModels.AddPipeline
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.AddPipeline(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null) -> void
LM.App.Wpf.ViewModels.AddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.AddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.Add.AddViewModel
LM.App.Wpf.ViewModels.Add.AddViewModel.AddViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline) -> void
LM.App.Wpf.ViewModels.Add.AddViewModel.AddViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline, LM.App.Wpf.Services.IDialogService! dialogService, LM.App.Wpf.Services.IWatchedFolderScanner! watchedFolderScanner, LM.App.Wpf.Services.IWatchedFolderConfigStore! configStore) -> void
LM.App.Wpf.ViewModels.Add.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.Infrastructure.Hooks.HookOrchestrator! orchestrator, LM.Core.Abstractions.IPmidNormalizer! pmidNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null, LM.App.Wpf.Services.IDialogService? dialogService = null, LM.App.Wpf.Services.IWatchedFolderScanner? watchedFolderScanner = null, LM.App.Wpf.Services.IWatchedFolderConfigStore? configStore = null) -> void
LM.App.Wpf.ViewModels.Add.AddViewModel.AddViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IHasher! hasher, LM.Core.Abstractions.ISimilarityService! similarity, LM.Core.Abstractions.IWorkSpaceService! workspace, LM.Core.Abstractions.IMetadataExtractor! metadata, IPublicationLookup! publicationLookup, LM.Core.Abstractions.IDoiNormalizer! doiNormalizer, LM.HubSpoke.Abstractions.ISimilarityLog? simLog = null, LM.App.Wpf.Services.IDialogService? dialogService = null, LM.App.Wpf.Services.IWatchedFolderScanner? watchedFolderScanner = null, LM.App.Wpf.Services.IWatchedFolderConfigStore? configStore = null) -> void
LM.App.Wpf.ViewModels.Add.AddViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.Add.AddViewModel.Staging.get -> LM.App.Wpf.ViewModels.Add.StagingListViewModel!
LM.App.Wpf.ViewModels.Add.AddViewModel.WatchedFolders.get -> LM.App.Wpf.ViewModels.Add.WatchedFoldersViewModel!
LM.App.Wpf.ViewModels.Add.StagingListViewModel
LM.App.Wpf.ViewModels.Add.StagingListViewModel.AddFilesCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Add.StagingListViewModel.BulkAddFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Add.StagingListViewModel.ClearCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Add.StagingListViewModel.CommitSelectedCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Add.StagingListViewModel.Current.get -> LM.App.Wpf.ViewModels.StagingItem?
LM.App.Wpf.ViewModels.Add.StagingListViewModel.Current.set -> void
LM.App.Wpf.ViewModels.Add.StagingListViewModel.EntryTypes.get -> System.Array!
LM.App.Wpf.ViewModels.Add.StagingListViewModel.IndexLabel.get -> string!
LM.App.Wpf.ViewModels.Add.StagingListViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Add.StagingListViewModel.Items.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.StagingItem!>!
LM.App.Wpf.ViewModels.Add.StagingListViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.Add.StagingListViewModel.ReviewCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Add.StagingListViewModel.SelectedType.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.Add.StagingListViewModel.SelectedType.set -> void
LM.App.Wpf.ViewModels.Add.StagingListViewModel.SelectByOffset(int delta) -> void
LM.App.Wpf.ViewModels.Add.StagingListViewModel.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task!
LM.App.Wpf.ViewModels.Add.StagingListViewModel.StagingListViewModel(LM.App.Wpf.ViewModels.IAddPipeline! pipeline, LM.App.Wpf.Services.IDialogService! dialogs) -> void
LM.App.Wpf.ViewModels.Add.WatchedFolderItemViewModel
LM.App.Wpf.ViewModels.Add.WatchedFolderItemViewModel.IncludeSubdirectories.get -> bool
LM.App.Wpf.ViewModels.Add.WatchedFolderItemViewModel.IncludeSubdirectories.set -> void
LM.App.Wpf.ViewModels.Add.WatchedFolderItemViewModel.IsEnabled.get -> bool
LM.App.Wpf.ViewModels.Add.WatchedFolderItemViewModel.IsEnabled.set -> void
LM.App.Wpf.ViewModels.Add.WatchedFolderItemViewModel.Path.get -> string!
LM.App.Wpf.ViewModels.Add.WatchedFolderItemViewModel.Path.set -> void
LM.App.Wpf.ViewModels.Add.WatchedFolderItemViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.Add.WatchedFolderItemViewModel.ToModel() -> LM.App.Wpf.Models.WatchedFolder!
LM.App.Wpf.ViewModels.Add.WatchedFolderItemViewModel.WatchedFolderItemViewModel(LM.App.Wpf.Models.WatchedFolder! folder) -> void
LM.App.Wpf.ViewModels.Add.WatchedFolderItemViewModel.WatchedFolderItemViewModel(string! path, bool includeSubdirectories, bool isEnabled) -> void
LM.App.Wpf.ViewModels.Add.WatchedFoldersViewModel
LM.App.Wpf.ViewModels.Add.WatchedFoldersViewModel.AddFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Add.WatchedFoldersViewModel.Folders.get -> System.Collections.ObjectModel.ObservableCollection<LM.App.Wpf.ViewModels.Add.WatchedFolderItemViewModel!>!
LM.App.Wpf.ViewModels.Add.WatchedFoldersViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.Add.WatchedFoldersViewModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.Add.WatchedFoldersViewModel.RemoveFolderCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Add.WatchedFoldersViewModel.ScanCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.Add.WatchedFoldersViewModel.SelectedFolder.get -> LM.App.Wpf.ViewModels.Add.WatchedFolderItemViewModel?
LM.App.Wpf.ViewModels.Add.WatchedFoldersViewModel.SelectedFolder.set -> void
LM.App.Wpf.ViewModels.Add.WatchedFoldersViewModel.WatchedFoldersViewModel(LM.App.Wpf.Services.IWatchedFolderConfigStore! configStore, LM.App.Wpf.Services.IWatchedFolderScanner! scanner, LM.App.Wpf.Services.IDialogService! dialogs, LM.App.Wpf.ViewModels.Add.StagingListViewModel! staging) -> void
LM.App.Wpf.ViewModels.IAddPipeline
LM.App.Wpf.ViewModels.IAddPipeline.CommitAsync(System.Collections.Generic.IEnumerable<LM.App.Wpf.ViewModels.StagingItem!>! selectedRows, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.IAddPipeline.StagePathsAsync(System.Collections.Generic.IEnumerable<string!>! paths, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.App.Wpf.ViewModels.StagingItem!>!>!
LM.App.Wpf.ViewModels.LibraryViewModel
LM.App.Wpf.ViewModels.LibraryViewModel.AuthorContains.get -> string?
LM.App.Wpf.ViewModels.LibraryViewModel.AuthorContains.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel.ClearCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.LibraryViewModel.IsInternal.get -> bool?
LM.App.Wpf.ViewModels.LibraryViewModel.IsInternal.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel.LibraryViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IWorkSpaceService! ws) -> void
LM.App.Wpf.ViewModels.LibraryViewModel.OpenCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.LibraryViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.Entry!>!
LM.App.Wpf.ViewModels.LibraryViewModel.SearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.LibraryViewModel.Selected.get -> LM.Core.Models.Entry?
LM.App.Wpf.ViewModels.LibraryViewModel.Selected.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel.TagsCsv.get -> string?
LM.App.Wpf.ViewModels.LibraryViewModel.TagsCsv.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel.TitleContains.get -> string?
LM.App.Wpf.ViewModels.LibraryViewModel.TitleContains.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel.TypeOther.get -> bool
LM.App.Wpf.ViewModels.LibraryViewModel.TypeOther.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel.TypePresentation.get -> bool
LM.App.Wpf.ViewModels.LibraryViewModel.TypePresentation.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel.TypePublication.get -> bool
LM.App.Wpf.ViewModels.LibraryViewModel.TypePublication.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel.TypeReport.get -> bool
LM.App.Wpf.ViewModels.LibraryViewModel.TypeReport.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel.Types.get -> LM.Core.Models.EntryType[]!
LM.App.Wpf.ViewModels.LibraryViewModel.TypeSlideDeck.get -> bool
LM.App.Wpf.ViewModels.LibraryViewModel.TypeSlideDeck.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel.TypeWhitePaper.get -> bool
LM.App.Wpf.ViewModels.LibraryViewModel.TypeWhitePaper.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel.YearFrom.get -> int?
LM.App.Wpf.ViewModels.LibraryViewModel.YearFrom.set -> void
LM.App.Wpf.ViewModels.LibraryViewModel.YearTo.get -> int?
LM.App.Wpf.ViewModels.LibraryViewModel.YearTo.set -> void
LM.App.Wpf.ViewModels.SearchItemViewModel
LM.App.Wpf.ViewModels.SearchItemViewModel.Header.get -> string!
LM.App.Wpf.ViewModels.SearchItemViewModel.SearchItemViewModel(string! header, LM.App.Wpf.ViewModels.LibraryViewModel! vm) -> void
LM.App.Wpf.ViewModels.SearchItemViewModel.Vm.get -> LM.App.Wpf.ViewModels.LibraryViewModel!
LM.App.Wpf.ViewModels.SearchViewModel
LM.App.Wpf.ViewModels.SearchViewModel.ExportSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.From.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.From.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.IsBusy.get -> bool
LM.App.Wpf.ViewModels.SearchViewModel.LoadSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.PreviousRuns.get -> System.Collections.ObjectModel.ObservableCollection<LitSearchRun!>!
LM.App.Wpf.ViewModels.SearchViewModel.Query.get -> string!
LM.App.Wpf.ViewModels.SearchViewModel.Query.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.Results.get -> System.Collections.ObjectModel.ObservableCollection<LM.Core.Models.SearchHit!>!
LM.App.Wpf.ViewModels.SearchViewModel.RunSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SaveSearchCommand.get -> System.Windows.Input.ICommand!
LM.App.Wpf.ViewModels.SearchViewModel.SearchViewModel(LM.Core.Abstractions.IEntryStore! store, LM.Core.Abstractions.IFileStorageRepository! storage, LM.Core.Abstractions.IWorkSpaceService! ws) -> void
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.get -> LM.Core.Models.SearchDatabase
LM.App.Wpf.ViewModels.SearchViewModel.SelectedDatabase.set -> void
LM.App.Wpf.ViewModels.SearchViewModel.To.get -> System.DateTime?
LM.App.Wpf.ViewModels.SearchViewModel.To.set -> void
LM.App.Wpf.ViewModels.StagingItem
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.get -> LM.HubSpoke.Models.ArticleHook?
LM.App.Wpf.ViewModels.StagingItem.ArticleHook.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AttachToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.AuthorsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.DisplayName.get -> string?
LM.App.Wpf.ViewModels.StagingItem.DisplayName.set -> void
LM.App.Wpf.ViewModels.StagingItem.Doi.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Doi.set -> void
LM.App.Wpf.ViewModels.StagingItem.FilePath.get -> string!
LM.App.Wpf.ViewModels.StagingItem.FilePath.set -> void
LM.App.Wpf.ViewModels.StagingItem.Internal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Internal.set -> void
LM.App.Wpf.ViewModels.StagingItem.InternalId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.InternalId.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsDuplicate.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.get -> bool
LM.App.Wpf.ViewModels.StagingItem.IsInternal.set -> void
LM.App.Wpf.ViewModels.StagingItem.IsNearMatch.get -> bool
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.MatchedTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Notes.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Notes.set -> void
LM.App.Wpf.ViewModels.StagingItem.OriginalFileName.get -> string!
LM.App.Wpf.ViewModels.StagingItem.Pmid.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Pmid.set -> void
LM.App.Wpf.ViewModels.StagingItem.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.App.Wpf.ViewModels.StagingItem.Selected.get -> bool
LM.App.Wpf.ViewModels.StagingItem.Selected.set -> void
LM.App.Wpf.ViewModels.StagingItem.Similarity.get -> double
LM.App.Wpf.ViewModels.StagingItem.Similarity.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToEntryId.set -> void
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.get -> string?
LM.App.Wpf.ViewModels.StagingItem.SimilarToTitle.set -> void
LM.App.Wpf.ViewModels.StagingItem.Source.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Source.set -> void
LM.App.Wpf.ViewModels.StagingItem.StagingItem() -> void
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.get -> string!
LM.App.Wpf.ViewModels.StagingItem.SuggestedAction.set -> void
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.get -> string?
LM.App.Wpf.ViewModels.StagingItem.TagsCsv.set -> void
LM.App.Wpf.ViewModels.StagingItem.Title.get -> string?
LM.App.Wpf.ViewModels.StagingItem.Title.set -> void
LM.App.Wpf.ViewModels.StagingItem.Type.get -> LM.Core.Models.EntryType
LM.App.Wpf.ViewModels.StagingItem.Type.set -> void
LM.App.Wpf.ViewModels.StagingItem.Year.get -> int?
LM.App.Wpf.ViewModels.StagingItem.Year.set -> void
LM.App.Wpf.Views.AddView
LM.App.Wpf.Views.AddView.AddView() -> void
LM.App.Wpf.Views.AddView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryView
LM.App.Wpf.Views.LibraryView.InitializeComponent() -> void
LM.App.Wpf.Views.LibraryView.LibraryView() -> void
LM.App.Wpf.Views.SearchView
LM.App.Wpf.Views.SearchView.InitializeComponent() -> void
LM.App.Wpf.Views.SearchView.SearchView() -> void
LM.App.Wpf.Views.ShellWindow
LM.App.Wpf.Views.ShellWindow.InitializeComponent() -> void
LM.App.Wpf.Views.ShellWindow.ShellWindow() -> void
LM.App.Wpf.Views.StagingEditorWindow
LM.App.Wpf.Views.StagingEditorWindow.InitializeComponent() -> void
LM.App.Wpf.Views.StagingEditorWindow.StagingEditorWindow(LM.App.Wpf.ViewModels.AddViewModel! vm) -> void
LM.App.Wpf.Views.WorkspaceChooser
LM.App.Wpf.Views.WorkspaceChooser.InitializeComponent() -> void
LM.App.Wpf.Views.WorkspaceChooser.SelectedWorkspacePath.get -> string?
LM.App.Wpf.Views.WorkspaceChooser.WorkspaceChooser() -> void
override LM.App.Wpf.App.OnStartup(System.Windows.StartupEventArgs! e) -> void
static LM.App.Wpf.App.Main() -> void