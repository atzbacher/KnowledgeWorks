#nullable enable
LM.Review.Core.Services.IReviewHookContext
LM.Review.Core.Services.IReviewHookContextFactory
LM.Review.Core.Services.IReviewHookContextFactory.CreateAssignmentUpdated(LM.Review.Core.Models.ReviewStage! stage, LM.Review.Core.Models.ScreeningAssignment! assignment) -> LM.Review.Core.Services.IReviewHookContext!
LM.Review.Core.Services.IReviewHookContextFactory.CreateReviewerDecisionRecorded(LM.Review.Core.Models.ScreeningAssignment! assignment, LM.Review.Core.Models.ReviewerDecision! decision) -> LM.Review.Core.Services.IReviewHookContext!
LM.Review.Core.Services.IReviewHookContextFactory.CreateStageTransition(LM.Review.Core.Models.ReviewStage! stage, LM.Review.Core.Models.ConflictState previousState, LM.Review.Core.Models.ConflictState currentState) -> LM.Review.Core.Services.IReviewHookContext!
LM.Review.Core.Services.IReviewHookOrchestrator
LM.Review.Core.Services.IReviewHookOrchestrator.ProcessAsync(string! entryId, LM.Review.Core.Services.IReviewHookContext! context, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Review.Core.Services.IReviewWorkflowService
LM.Review.Core.Services.IReviewWorkflowService.CreateStageAsync(string! projectId, string! stageDefinitionId, System.Collections.Generic.IReadOnlyCollection<LM.Review.Core.Services.ReviewerAssignmentRequest!>! assignments, System.Threading.CancellationToken cancellationToken = default) -> LM.Review.Core.Models.ReviewStage!
LM.Review.Core.Services.IReviewWorkflowService.SubmitDecisionAsync(string! assignmentId, LM.Review.Core.Models.ScreeningStatus decision, string? notes, System.Threading.CancellationToken cancellationToken = default) -> LM.Review.Core.Models.ScreeningAssignment!
LM.Review.Core.Services.IReviewWorkflowStore
LM.Review.Core.Services.IReviewWorkflowStore.GetAssignmentAsync(string! assignmentId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ScreeningAssignment?>!
LM.Review.Core.Services.IReviewWorkflowStore.GetAssignmentsByStageAsync(string! stageId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ScreeningAssignment!>>!
LM.Review.Core.Services.IReviewWorkflowStore.GetProjectAsync(string! projectId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ReviewProject?>!
LM.Review.Core.Services.IReviewWorkflowStore.GetStageAsync(string! stageId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ReviewStage?>!
LM.Review.Core.Services.IReviewWorkflowStore.GetStagesByProjectAsync(string! projectId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStage!>>!
LM.Review.Core.Services.IReviewWorkflowStore.SaveAssignmentAsync(string! projectId, LM.Review.Core.Models.ScreeningAssignment! assignment, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Review.Core.Services.IReviewWorkflowStore.SaveStageAsync(LM.Review.Core.Models.ReviewStage! stage, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Review.Core.Services.ReviewWorkflowService
LM.Review.Core.Services.ReviewWorkflowService.CreateStageAsync(string! projectId, string! stageDefinitionId, System.Collections.Generic.IReadOnlyCollection<LM.Review.Core.Services.ReviewerAssignmentRequest!>! assignments, System.Threading.CancellationToken cancellationToken = default) -> LM.Review.Core.Models.ReviewStage!
LM.Review.Core.Services.ReviewWorkflowService.ReviewWorkflowService(LM.Review.Core.Services.IReviewWorkflowStore! store, LM.Review.Core.Services.IReviewHookOrchestrator! hookOrchestrator, LM.Review.Core.Services.IReviewHookContextFactory! hookContextFactory, System.TimeProvider? timeProvider = null)
LM.Review.Core.Services.ReviewWorkflowService.SubmitDecisionAsync(string! assignmentId, LM.Review.Core.Models.ScreeningStatus decision, string? notes, System.Threading.CancellationToken cancellationToken = default) -> LM.Review.Core.Models.ScreeningAssignment!
LM.Review.Core.Services.ReviewerAssignmentRequest
LM.Review.Core.Services.ReviewerAssignmentRequest.ReviewerAssignmentRequest(string! ReviewerId, LM.Review.Core.Models.ReviewerRole Role)
LM.Review.Core.Services.ReviewerAssignmentRequest.ReviewerId.get -> string!
LM.Review.Core.Services.ReviewerAssignmentRequest.ReviewerId.init -> void
LM.Review.Core.Services.ReviewerAssignmentRequest.Role.get -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Services.ReviewerAssignmentRequest.Role.init -> void
LM.Review.Core.Models.Analytics.AnalyticsTimelineFilter
LM.Review.Core.Models.Analytics.AnalyticsTimelineFilter.AnalyticsTimelineFilter(System.DateTimeOffset from, System.DateTimeOffset to)
LM.Review.Core.Models.Analytics.AnalyticsTimelineFilter.Contains(System.DateTimeOffset timestamp) -> bool
LM.Review.Core.Models.Analytics.AnalyticsTimelineFilter.Duration.get -> System.TimeSpan
LM.Review.Core.Models.Analytics.AnalyticsTimelineFilter.From.get -> System.DateTimeOffset
LM.Review.Core.Models.Analytics.AnalyticsTimelineFilter.Overlaps(System.DateTimeOffset start, System.DateTimeOffset? end = null) -> bool
LM.Review.Core.Models.Analytics.AnalyticsTimelineFilter.To.get -> System.DateTimeOffset
LM.Review.Core.Models.Analytics.ConflictRateSnapshot
LM.Review.Core.Models.Analytics.ConflictRateSnapshot.ConflictRateSnapshot(int totalStages, int conflictCount, int escalatedCount, int resolvedCount, int openConflicts, double conflictRate, double escalationRate, double resolutionRate)
LM.Review.Core.Models.Analytics.ConflictRateSnapshot.ConflictCount.get -> int
LM.Review.Core.Models.Analytics.ConflictRateSnapshot.ConflictRate.get -> double
LM.Review.Core.Models.Analytics.ConflictRateSnapshot.EscalatedCount.get -> int
LM.Review.Core.Models.Analytics.ConflictRateSnapshot.EscalationRate.get -> double
LM.Review.Core.Models.Analytics.ConflictRateSnapshot.OpenConflicts.get -> int
LM.Review.Core.Models.Analytics.ConflictRateSnapshot.ResolutionRate.get -> double
LM.Review.Core.Models.Analytics.ConflictRateSnapshot.ResolvedCount.get -> int
LM.Review.Core.Models.Analytics.ConflictRateSnapshot.TotalStages.get -> int
LM.Review.Core.Models.Analytics.PrismaFlowSnapshot
LM.Review.Core.Models.Analytics.PrismaFlowSnapshot.PendingDecisions.get -> int
LM.Review.Core.Models.Analytics.PrismaFlowSnapshot.PrismaFlowSnapshot(int recordsIdentified, int recordsScreened, int recordsIncluded, int recordsExcluded, int recordsEscalated, int pendingDecisions)
LM.Review.Core.Models.Analytics.PrismaFlowSnapshot.RecordsEscalated.get -> int
LM.Review.Core.Models.Analytics.PrismaFlowSnapshot.RecordsExcluded.get -> int
LM.Review.Core.Models.Analytics.PrismaFlowSnapshot.RecordsIdentified.get -> int
LM.Review.Core.Models.Analytics.PrismaFlowSnapshot.RecordsIncluded.get -> int
LM.Review.Core.Models.Analytics.PrismaFlowSnapshot.RecordsScreened.get -> int
LM.Review.Core.Models.Analytics.ProjectAnalyticsSnapshot
LM.Review.Core.Models.Analytics.ProjectAnalyticsSnapshot.ConflictRates.get -> LM.Review.Core.Models.Analytics.ConflictRateSnapshot!
LM.Review.Core.Models.Analytics.ProjectAnalyticsSnapshot.GeneratedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.Analytics.ProjectAnalyticsSnapshot.PrismaFlow.get -> LM.Review.Core.Models.Analytics.PrismaFlowSnapshot!
LM.Review.Core.Models.Analytics.ProjectAnalyticsSnapshot.ProjectAnalyticsSnapshot(string! projectId, System.DateTimeOffset generatedAt, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.Analytics.StageProgressSnapshot!>! stageProgress, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.Analytics.ReviewerLoadBreakdown!>! reviewerLoads, LM.Review.Core.Models.Analytics.ConflictRateSnapshot! conflictRates, LM.Review.Core.Models.Analytics.PrismaFlowSnapshot! prismaFlow)
LM.Review.Core.Models.Analytics.ProjectAnalyticsSnapshot.ProjectId.get -> string!
LM.Review.Core.Models.Analytics.ProjectAnalyticsSnapshot.ReviewerLoads.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.Analytics.ReviewerLoadBreakdown!>!
LM.Review.Core.Models.Analytics.ProjectAnalyticsSnapshot.StageProgress.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.Analytics.StageProgressSnapshot!>!
LM.Review.Core.Models.Analytics.ReviewerLoadBreakdown
LM.Review.Core.Models.Analytics.ReviewerLoadBreakdown.ActiveAssignments.get -> int
LM.Review.Core.Models.Analytics.ReviewerLoadBreakdown.AverageDecisionLatencyHours.get -> double
LM.Review.Core.Models.Analytics.ReviewerLoadBreakdown.CompletedAssignments.get -> int
LM.Review.Core.Models.Analytics.ReviewerLoadBreakdown.ReviewerId.get -> string!
LM.Review.Core.Models.Analytics.ReviewerLoadBreakdown.ReviewerLoadBreakdown(string! reviewerId, int activeAssignments, int completedAssignments, double averageDecisionLatencyHours, double throughputPerDay)
LM.Review.Core.Models.Analytics.ReviewerLoadBreakdown.ThroughputPerDay.get -> double
LM.Review.Core.Models.Analytics.StageProgressSnapshot
LM.Review.Core.Models.Analytics.StageProgressSnapshot.AverageReviewerCompletion.get -> double
LM.Review.Core.Models.Analytics.StageProgressSnapshot.CompletedInstances.get -> int
LM.Review.Core.Models.Analytics.StageProgressSnapshot.CompletionRate.get -> double
LM.Review.Core.Models.Analytics.StageProgressSnapshot.StageDefinitionId.get -> string!
LM.Review.Core.Models.Analytics.StageProgressSnapshot.StageName.get -> string!
LM.Review.Core.Models.Analytics.StageProgressSnapshot.StageProgressSnapshot(string! stageDefinitionId, string! stageName, LM.Review.Core.Models.ReviewStageType stageType, int totalInstances, int completedInstances, double completionRate, double averageReviewerCompletion)
LM.Review.Core.Models.Analytics.StageProgressSnapshot.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.Analytics.StageProgressSnapshot.TotalInstances.get -> int
LM.Review.Core.Services.IReviewAnalyticsService
LM.Review.Core.Services.IReviewAnalyticsService.CreateSnapshot(LM.Review.Core.Models.ReviewProject! project, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.ReviewStage!>! stages, LM.Review.Core.Services.ReviewAnalyticsQueryOptions? options = null) -> LM.Review.Core.Models.Analytics.ProjectAnalyticsSnapshot!
LM.Review.Core.Services.ReviewAnalyticsQuery
LM.Review.Core.Services.ReviewAnalyticsQuery.ActivatedWithin(LM.Review.Core.Models.Analytics.AnalyticsTimelineFilter filter) -> System.Func<LM.Review.Core.Models.ReviewStage!, bool!>!
LM.Review.Core.Services.ReviewAnalyticsQuery.AssignedWithin(LM.Review.Core.Models.Analytics.AnalyticsTimelineFilter filter) -> System.Func<LM.Review.Core.Models.ScreeningAssignment!, bool!>!
LM.Review.Core.Services.ReviewAnalyticsQuery.CompletedWithin(LM.Review.Core.Models.Analytics.AnalyticsTimelineFilter filter) -> System.Func<LM.Review.Core.Models.ScreeningAssignment!, bool!>!
LM.Review.Core.Services.ReviewAnalyticsQuery.LastDays(int days, System.DateTimeOffset referenceTime) -> LM.Review.Core.Models.Analytics.AnalyticsTimelineFilter
LM.Review.Core.Services.ReviewAnalyticsQueryOptions
LM.Review.Core.Services.ReviewAnalyticsQueryOptions.AssignmentFilter.get -> System.Func<LM.Review.Core.Models.ScreeningAssignment!, bool!>?
LM.Review.Core.Services.ReviewAnalyticsQueryOptions.CreateDefault(System.DateTimeOffset referenceTime) -> LM.Review.Core.Services.ReviewAnalyticsQueryOptions!
LM.Review.Core.Services.ReviewAnalyticsQueryOptions.ReferenceTime.get -> System.DateTimeOffset
LM.Review.Core.Services.ReviewAnalyticsQueryOptions.ReviewAnalyticsQueryOptions(System.DateTimeOffset referenceTime, LM.Review.Core.Models.Analytics.AnalyticsTimelineFilter? timelineFilter = null, System.Func<LM.Review.Core.Models.ReviewStage!, bool!>? stageFilter = null, System.Func<LM.Review.Core.Models.ScreeningAssignment!, bool!>? assignmentFilter = null)
LM.Review.Core.Services.ReviewAnalyticsQueryOptions.StageFilter.get -> System.Func<LM.Review.Core.Models.ReviewStage!, bool!>?
LM.Review.Core.Services.ReviewAnalyticsQueryOptions.TimelineFilter.get -> LM.Review.Core.Models.Analytics.AnalyticsTimelineFilter?
LM.Review.Core.Services.ReviewAnalyticsService
LM.Review.Core.Services.ReviewAnalyticsService.CreateSnapshot(LM.Review.Core.Models.ReviewProject! project, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.ReviewStage!>! stages, LM.Review.Core.Services.ReviewAnalyticsQueryOptions? options = null) -> LM.Review.Core.Models.Analytics.ProjectAnalyticsSnapshot!
