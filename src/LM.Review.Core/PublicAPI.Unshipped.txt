#nullable enable
LM.Review.Core.Services.IReviewHookContext
LM.Review.Core.Services.IReviewHookContextFactory
LM.Review.Core.Services.IReviewHookContextFactory.CreateAssignmentUpdated(LM.Review.Core.Models.ReviewStage! stage, LM.Review.Core.Models.ScreeningAssignment! assignment) -> LM.Review.Core.Services.IReviewHookContext!
LM.Review.Core.Services.IReviewHookContextFactory.CreateReviewerDecisionRecorded(LM.Review.Core.Models.ScreeningAssignment! assignment, LM.Review.Core.Models.ReviewerDecision! decision) -> LM.Review.Core.Services.IReviewHookContext!
LM.Review.Core.Services.IReviewHookContextFactory.CreateStageTransition(LM.Review.Core.Models.ReviewStage! stage, LM.Review.Core.Models.ConflictState previousState, LM.Review.Core.Models.ConflictState currentState) -> LM.Review.Core.Services.IReviewHookContext!
LM.Review.Core.Services.IReviewHookOrchestrator
LM.Review.Core.Services.IReviewHookOrchestrator.ProcessAsync(string! entryId, LM.Review.Core.Services.IReviewHookContext! context, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Review.Core.Services.IReviewWorkflowService
LM.Review.Core.Services.IReviewWorkflowService.CreateStageAsync(string! projectId, string! stageDefinitionId, System.Collections.Generic.IReadOnlyCollection<LM.Review.Core.Services.ReviewerAssignmentRequest!>! assignments, System.Threading.CancellationToken cancellationToken = default) -> LM.Review.Core.Models.ReviewStage!
LM.Review.Core.Services.IReviewWorkflowService.SubmitDecisionAsync(string! assignmentId, LM.Review.Core.Models.ScreeningStatus decision, string? notes, System.Threading.CancellationToken cancellationToken = default) -> LM.Review.Core.Models.ScreeningAssignment!
LM.Review.Core.Services.IReviewWorkflowStore
LM.Review.Core.Services.IReviewWorkflowStore.GetAssignmentAsync(string! assignmentId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ScreeningAssignment?>!
LM.Review.Core.Services.IReviewWorkflowStore.GetAssignmentsByStageAsync(string! stageId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ScreeningAssignment!>>!
LM.Review.Core.Services.IReviewWorkflowStore.GetProjectAsync(string! projectId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ReviewProject?>!
LM.Review.Core.Services.IReviewWorkflowStore.GetStageAsync(string! stageId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LM.Review.Core.Models.ReviewStage?>!
LM.Review.Core.Services.IReviewWorkflowStore.GetStagesByProjectAsync(string! projectId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewStage!>>!
LM.Review.Core.Services.IReviewWorkflowStore.SaveAssignmentAsync(string! projectId, LM.Review.Core.Models.ScreeningAssignment! assignment, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Review.Core.Services.IReviewWorkflowStore.SaveStageAsync(LM.Review.Core.Models.ReviewStage! stage, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LM.Review.Core.Services.ReviewWorkflowService
LM.Review.Core.Services.ReviewWorkflowService.CreateStageAsync(string! projectId, string! stageDefinitionId, System.Collections.Generic.IReadOnlyCollection<LM.Review.Core.Services.ReviewerAssignmentRequest!>! assignments, System.Threading.CancellationToken cancellationToken = default) -> LM.Review.Core.Models.ReviewStage!
LM.Review.Core.Services.ReviewWorkflowService.ReviewWorkflowService(LM.Review.Core.Services.IReviewWorkflowStore! store, LM.Review.Core.Services.IReviewHookOrchestrator! hookOrchestrator, LM.Review.Core.Services.IReviewHookContextFactory! hookContextFactory, System.TimeProvider? timeProvider = null)
LM.Review.Core.Services.ReviewWorkflowService.SubmitDecisionAsync(string! assignmentId, LM.Review.Core.Models.ScreeningStatus decision, string? notes, System.Threading.CancellationToken cancellationToken = default) -> LM.Review.Core.Models.ScreeningAssignment!
LM.Review.Core.Services.ReviewerAssignmentRequest
LM.Review.Core.Services.ReviewerAssignmentRequest.ReviewerAssignmentRequest(string! ReviewerId, LM.Review.Core.Models.ReviewerRole Role)
LM.Review.Core.Services.ReviewerAssignmentRequest.ReviewerId.get -> string!
LM.Review.Core.Services.ReviewerAssignmentRequest.ReviewerId.init -> void
LM.Review.Core.Services.ReviewerAssignmentRequest.Role.get -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Services.ReviewerAssignmentRequest.Role.init -> void
