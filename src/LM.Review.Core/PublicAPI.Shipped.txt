#nullable enable
LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConflictState.None = 0 -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConflictState.Conflict = 1 -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConflictState.Escalated = 2 -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConflictState.Resolved = 3 -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.Pending = 0 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.InProgress = 1 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.Included = 2 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.Excluded = 3 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ScreeningStatus.Escalated = 4 -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewerRole.Primary = 0 -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewerRole.Secondary = 1 -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewerRole.TieBreaker = 2 -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewerRole.Arbitrator = 3 -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewStageType.TitleScreening = 0 -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewStageType.FullTextReview = 1 -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewStageType.ConsensusMeeting = 2 -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewStageType.QualityAssurance = 3 -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.ReviewerDecision
LM.Review.Core.Models.ReviewerDecision.AssignmentId.get -> string!
static LM.Review.Core.Models.ReviewerDecision.Create(string! assignmentId, string! reviewerId, LM.Review.Core.Models.ScreeningStatus decision, System.DateTimeOffset decidedAtUtc, string? notes = null) -> LM.Review.Core.Models.ReviewerDecision!
LM.Review.Core.Models.ReviewerDecision.DecidedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ReviewerDecision.Decision.get -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.ReviewerDecision.Notes.get -> string?
LM.Review.Core.Models.ReviewerDecision.ReviewerId.get -> string!
LM.Review.Core.Models.ConsensusOutcome
LM.Review.Core.Models.ConsensusOutcome.Approved.get -> bool
static LM.Review.Core.Models.ConsensusOutcome.Create(string! stageId, bool approved, LM.Review.Core.Models.ConflictState resultingState, System.DateTimeOffset resolvedAtUtc, string? notes = null, string? resolvedBy = null) -> LM.Review.Core.Models.ConsensusOutcome!
LM.Review.Core.Models.ConsensusOutcome.Notes.get -> string?
LM.Review.Core.Models.ConsensusOutcome.ResolvedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ConsensusOutcome.ResolvedBy.get -> string?
LM.Review.Core.Models.ConsensusOutcome.ResultingState.get -> LM.Review.Core.Models.ConflictState
LM.Review.Core.Models.ConsensusOutcome.StageId.get -> string!
LM.Review.Core.Models.ReviewAuditTrail
LM.Review.Core.Models.ReviewAuditTrail.Append(LM.Review.Core.Models.ReviewAuditTrail.AuditEntry! entry) -> LM.Review.Core.Models.ReviewAuditTrail!
static LM.Review.Core.Models.ReviewAuditTrail.Create(System.Collections.Generic.IEnumerable<LM.Review.Core.Models.ReviewAuditTrail.AuditEntry!>? entries = null) -> LM.Review.Core.Models.ReviewAuditTrail!
LM.Review.Core.Models.ReviewAuditTrail.Entries.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ReviewAuditTrail.AuditEntry!>!
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Action.get -> string!
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Actor.get -> string!
static LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Create(string! id, string! actor, string! action, System.DateTimeOffset occurredAtUtc, string? details = null) -> LM.Review.Core.Models.ReviewAuditTrail.AuditEntry!
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Details.get -> string?
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.Id.get -> string!
LM.Review.Core.Models.ReviewAuditTrail.AuditEntry.OccurredAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ReviewProject
LM.Review.Core.Models.ReviewProject.AuditTrail.get -> LM.Review.Core.Models.ReviewAuditTrail!
static LM.Review.Core.Models.ReviewProject.Create(string! id, string! name, System.DateTimeOffset createdAtUtc, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.StageDefinition!>! stageDefinitions, LM.Review.Core.Models.ReviewAuditTrail? auditTrail = null) -> LM.Review.Core.Models.ReviewProject!
LM.Review.Core.Models.ReviewProject.CreatedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ReviewProject.Id.get -> string!
LM.Review.Core.Models.ReviewProject.Name.get -> string!
LM.Review.Core.Models.ReviewProject.StageDefinitions.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.StageDefinition!>!
LM.Review.Core.Models.ReviewStage
LM.Review.Core.Models.ReviewStage.ActivatedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ReviewStage.Assignments.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.ScreeningAssignment!>!
LM.Review.Core.Models.ReviewStage.CompletedAt.get -> System.DateTimeOffset?
LM.Review.Core.Models.ReviewStage.Consensus.get -> LM.Review.Core.Models.ConsensusOutcome?
LM.Review.Core.Models.ReviewStage.ConflictState.get -> LM.Review.Core.Models.ConflictState
static LM.Review.Core.Models.ReviewStage.Create(string! id, string! projectId, LM.Review.Core.Models.StageDefinition! definition, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.ScreeningAssignment!>! assignments, LM.Review.Core.Models.ConflictState conflictState, System.DateTimeOffset activatedAtUtc, System.DateTimeOffset? completedAtUtc = null, LM.Review.Core.Models.ConsensusOutcome? consensus = null) -> LM.Review.Core.Models.ReviewStage!
LM.Review.Core.Models.ReviewStage.Definition.get -> LM.Review.Core.Models.StageDefinition!
LM.Review.Core.Models.ReviewStage.Id.get -> string!
LM.Review.Core.Models.ReviewStage.IsComplete.get -> bool
LM.Review.Core.Models.ReviewStage.ProjectId.get -> string!
LM.Review.Core.Models.StageDefinition
LM.Review.Core.Models.StageDefinition.ConsensusPolicy.get -> LM.Review.Core.Models.StageConsensusPolicy!
static LM.Review.Core.Models.StageDefinition.Create(string! id, string! name, LM.Review.Core.Models.ReviewStageType stageType, LM.Review.Core.Models.ReviewerRequirement! reviewerRequirement, LM.Review.Core.Models.StageConsensusPolicy! consensusPolicy) -> LM.Review.Core.Models.StageDefinition!
LM.Review.Core.Models.StageDefinition.Id.get -> string!
LM.Review.Core.Models.StageDefinition.Name.get -> string!
LM.Review.Core.Models.StageDefinition.ReviewerRequirement.get -> LM.Review.Core.Models.ReviewerRequirement!
LM.Review.Core.Models.StageDefinition.StageType.get -> LM.Review.Core.Models.ReviewStageType
LM.Review.Core.Models.StageConsensusPolicy
LM.Review.Core.Models.StageConsensusPolicy.ArbitrationRole.get -> LM.Review.Core.Models.ReviewerRole?
static LM.Review.Core.Models.StageConsensusPolicy.Disabled() -> LM.Review.Core.Models.StageConsensusPolicy!
LM.Review.Core.Models.StageConsensusPolicy.EscalateOnDisagreement.get -> bool
LM.Review.Core.Models.StageConsensusPolicy.MinimumAgreements.get -> int
static LM.Review.Core.Models.StageConsensusPolicy.RequireAgreement(int minimumAgreements, bool escalateOnDisagreement, LM.Review.Core.Models.ReviewerRole? arbitrationRole) -> LM.Review.Core.Models.StageConsensusPolicy!
LM.Review.Core.Models.StageConsensusPolicy.RequiresConsensus.get -> bool
LM.Review.Core.Models.ReviewerRequirement
static LM.Review.Core.Models.ReviewerRequirement.Create(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<LM.Review.Core.Models.ReviewerRole, int>>! requirements) -> LM.Review.Core.Models.ReviewerRequirement!
LM.Review.Core.Models.ReviewerRequirement.GetRequirement(LM.Review.Core.Models.ReviewerRole role) -> int
LM.Review.Core.Models.ReviewerRequirement.Requirements.get -> System.Collections.Generic.IReadOnlyDictionary<LM.Review.Core.Models.ReviewerRole, int>!
LM.Review.Core.Models.ReviewerRequirement.TotalRequired.get -> int
LM.Review.Core.Models.ScreeningAssignment
LM.Review.Core.Models.ScreeningAssignment.AssignedAt.get -> System.DateTimeOffset
LM.Review.Core.Models.ScreeningAssignment.CompletedAt.get -> System.DateTimeOffset?
static LM.Review.Core.Models.ScreeningAssignment.Create(string! id, string! stageId, string! reviewerId, LM.Review.Core.Models.ReviewerRole role, LM.Review.Core.Models.ScreeningStatus status, System.DateTimeOffset assignedAtUtc, System.DateTimeOffset? completedAtUtc = null, LM.Review.Core.Models.ReviewerDecision? decision = null) -> LM.Review.Core.Models.ScreeningAssignment!
LM.Review.Core.Models.ScreeningAssignment.Decision.get -> LM.Review.Core.Models.ReviewerDecision?
LM.Review.Core.Models.ScreeningAssignment.Id.get -> string!
LM.Review.Core.Models.ScreeningAssignment.ReviewerId.get -> string!
LM.Review.Core.Models.ScreeningAssignment.Role.get -> LM.Review.Core.Models.ReviewerRole
LM.Review.Core.Models.ScreeningAssignment.StageId.get -> string!
LM.Review.Core.Models.ScreeningAssignment.Status.get -> LM.Review.Core.Models.ScreeningStatus
LM.Review.Core.Models.Forms.ExtractionForm
LM.Review.Core.Models.Forms.ExtractionForm.Category.get -> string?
static LM.Review.Core.Models.Forms.ExtractionForm.Create(string! id, string! name, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.Forms.FormSection!>! sections, string? description = null, string? category = null) -> LM.Review.Core.Models.Forms.ExtractionForm!
LM.Review.Core.Models.Forms.ExtractionForm.Description.get -> string?
LM.Review.Core.Models.Forms.ExtractionForm.Id.get -> string!
LM.Review.Core.Models.Forms.ExtractionForm.Name.get -> string!
LM.Review.Core.Models.Forms.ExtractionForm.Sections.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.Forms.FormSection!>!
LM.Review.Core.Models.Forms.FormField
LM.Review.Core.Models.Forms.FormField.AllowFreeTextFallback.get -> bool
LM.Review.Core.Models.Forms.FormField.Description.get -> string?
LM.Review.Core.Models.Forms.FormField.FieldType.get -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormField.Id.get -> string!
LM.Review.Core.Models.Forms.FormField.Options.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.Forms.FormFieldOption!>!
LM.Review.Core.Models.Forms.FormField.Title.get -> string!
LM.Review.Core.Models.Forms.FormField.Validation.get -> LM.Review.Core.Models.Forms.FormFieldValidation?
LM.Review.Core.Models.Forms.FormField.Visibility.get -> LM.Review.Core.Models.Forms.FormVisibilityRule?
static LM.Review.Core.Models.Forms.FormField.Create(string! id, string! title, LM.Review.Core.Models.Forms.FormFieldType fieldType, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.Forms.FormFieldOption!>? options = null, string? description = null, LM.Review.Core.Models.Forms.FormFieldValidation? validation = null, LM.Review.Core.Models.Forms.FormVisibilityRule? visibility = null, bool allowFreeTextFallback = false) -> LM.Review.Core.Models.Forms.FormField!
LM.Review.Core.Models.Forms.FormFieldOption
LM.Review.Core.Models.Forms.FormFieldOption.Description.get -> string?
LM.Review.Core.Models.Forms.FormFieldOption.Id.get -> string!
LM.Review.Core.Models.Forms.FormFieldOption.IsDefault.get -> bool
LM.Review.Core.Models.Forms.FormFieldOption.Label.get -> string!
static LM.Review.Core.Models.Forms.FormFieldOption.Create(string! id, string! label, string? description = null, bool isDefault = false) -> LM.Review.Core.Models.Forms.FormFieldOption!
LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.SingleSelect = 0 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.MultiSelect = 1 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.Text = 2 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.Numeric = 3 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.Date = 4 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldType.Reference = 5 -> LM.Review.Core.Models.Forms.FormFieldType
LM.Review.Core.Models.Forms.FormFieldValidation
LM.Review.Core.Models.Forms.FormFieldValidation.Expression.get -> string?
LM.Review.Core.Models.Forms.FormFieldValidation.Maximum.get -> decimal?
LM.Review.Core.Models.Forms.FormFieldValidation.MaximumDateUtc.get -> System.DateTime?
LM.Review.Core.Models.Forms.FormFieldValidation.Minimum.get -> decimal?
LM.Review.Core.Models.Forms.FormFieldValidation.MinimumDateUtc.get -> System.DateTime?
LM.Review.Core.Models.Forms.FormFieldValidation.Mode.get -> LM.Review.Core.Models.Forms.FormValidationMode
static LM.Review.Core.Models.Forms.FormFieldValidation.CreateDateRange(System.DateTime? minimumUtc, System.DateTime? maximumUtc) -> LM.Review.Core.Models.Forms.FormFieldValidation!
static LM.Review.Core.Models.Forms.FormFieldValidation.CreateNumericRange(decimal? minimum, decimal? maximum) -> LM.Review.Core.Models.Forms.FormFieldValidation!
static LM.Review.Core.Models.Forms.FormFieldValidation.CreateRegex(string! pattern) -> LM.Review.Core.Models.Forms.FormFieldValidation!
static LM.Review.Core.Models.Forms.FormFieldValidation.CreateRequired() -> LM.Review.Core.Models.Forms.FormFieldValidation!
LM.Review.Core.Models.Forms.FormIdentifier
static bool LM.Review.Core.Models.Forms.FormIdentifier.IsNormalized(string! identifier) -> bool
static string LM.Review.Core.Models.Forms.FormIdentifier.Normalize(string! identifier) -> string!
LM.Review.Core.Models.Forms.FormSection
LM.Review.Core.Models.Forms.FormSection.Children.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.Forms.FormSection!>!
LM.Review.Core.Models.Forms.FormSection.Description.get -> string?
LM.Review.Core.Models.Forms.FormSection.Fields.get -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Models.Forms.FormField!>!
LM.Review.Core.Models.Forms.FormSection.Id.get -> string!
LM.Review.Core.Models.Forms.FormSection.IsRepeatable.get -> bool
LM.Review.Core.Models.Forms.FormSection.Title.get -> string!
LM.Review.Core.Models.Forms.FormSection.Visibility.get -> LM.Review.Core.Models.Forms.FormVisibilityRule?
static LM.Review.Core.Models.Forms.FormSection.Create(string! id, string! title, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.Forms.FormField!>! fields, System.Collections.Generic.IEnumerable<LM.Review.Core.Models.Forms.FormSection!>? children = null, bool isRepeatable = false, string? description = null, LM.Review.Core.Models.Forms.FormVisibilityRule? visibility = null) -> LM.Review.Core.Models.Forms.FormSection!
LM.Review.Core.Models.Forms.FormValidationMode
LM.Review.Core.Models.Forms.FormValidationMode.Required = 0 -> LM.Review.Core.Models.Forms.FormValidationMode
LM.Review.Core.Models.Forms.FormValidationMode.Range = 1 -> LM.Review.Core.Models.Forms.FormValidationMode
LM.Review.Core.Models.Forms.FormValidationMode.Regex = 2 -> LM.Review.Core.Models.Forms.FormValidationMode
LM.Review.Core.Models.Forms.FormVisibilityRule
LM.Review.Core.Models.Forms.FormVisibilityRule.ExpectedValues.get -> System.Collections.Generic.IReadOnlyList<string>!
LM.Review.Core.Models.Forms.FormVisibilityRule.IsVisibleWhenMatches.get -> bool
LM.Review.Core.Models.Forms.FormVisibilityRule.SourceFieldId.get -> string!
static LM.Review.Core.Models.Forms.FormVisibilityRule.Create(string! sourceFieldId, System.Collections.Generic.IEnumerable<string>? expectedValues = null, bool isVisibleWhenMatches = true) -> LM.Review.Core.Models.Forms.FormVisibilityRule!
LM.Review.Core.Models.Forms.ExtractionFormSnapshot
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.CapturedBy.get -> string!
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.CapturedUtc.get -> System.DateTime
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.FormId.get -> string!
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.Values.get -> System.Collections.Generic.IReadOnlyDictionary<string, object?>!
LM.Review.Core.Models.Forms.ExtractionFormSnapshot.VersionId.get -> string!
static LM.Review.Core.Models.Forms.ExtractionFormSnapshot.Create(string! formId, string! versionId, System.Collections.Generic.IDictionary<string, object?>! values, string? capturedBy = null, System.DateTime? capturedUtc = null) -> LM.Review.Core.Models.Forms.ExtractionFormSnapshot!
LM.Review.Core.Models.Forms.ExtractionFormVersion
LM.Review.Core.Models.Forms.ExtractionFormVersion.CreatedBy.get -> string!
LM.Review.Core.Models.Forms.ExtractionFormVersion.CreatedUtc.get -> System.DateTime
LM.Review.Core.Models.Forms.ExtractionFormVersion.Form.get -> LM.Review.Core.Models.Forms.ExtractionForm!
LM.Review.Core.Models.Forms.ExtractionFormVersion.Metadata.get -> System.Collections.Generic.IReadOnlyDictionary<string, string>!
LM.Review.Core.Models.Forms.ExtractionFormVersion.VersionId.get -> string!
static LM.Review.Core.Models.Forms.ExtractionFormVersion.Create(string! versionId, LM.Review.Core.Models.Forms.ExtractionForm! form, System.Collections.Generic.IDictionary<string, string>? metadata = null, string? createdBy = null, System.DateTime? createdUtc = null) -> LM.Review.Core.Models.Forms.ExtractionFormVersion!
LM.Review.Core.Validation.FormSchemaIssue
LM.Review.Core.Validation.FormSchemaIssue.Code.get -> string!
LM.Review.Core.Validation.FormSchemaIssue.FieldId.get -> string?
LM.Review.Core.Validation.FormSchemaIssue.Message.get -> string!
LM.Review.Core.Validation.FormSchemaIssue.SectionId.get -> string?
LM.Review.Core.Validation.FormSchemaIssue.Severity.get -> LM.Review.Core.Validation.FormSchemaSeverity
static LM.Review.Core.Validation.FormSchemaIssue.Error(string! code, string! message, string? sectionId = null, string? fieldId = null) -> LM.Review.Core.Validation.FormSchemaIssue!
static LM.Review.Core.Validation.FormSchemaIssue.Warning(string! code, string! message, string? sectionId = null, string? fieldId = null) -> LM.Review.Core.Validation.FormSchemaIssue!
LM.Review.Core.Validation.FormSchemaSeverity
LM.Review.Core.Validation.FormSchemaSeverity.Warning = 0 -> LM.Review.Core.Validation.FormSchemaSeverity
LM.Review.Core.Validation.FormSchemaSeverity.Error = 1 -> LM.Review.Core.Validation.FormSchemaSeverity
LM.Review.Core.Validation.FormSchemaValidator
LM.Review.Core.Validation.FormSchemaValidator.Validate(LM.Review.Core.Models.Forms.ExtractionForm! form) -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Validation.FormSchemaIssue!>!
LM.Review.Core.Validation.FormSchemaValidator.Validate(LM.Review.Core.Models.Forms.ExtractionFormSnapshot! snapshot, LM.Review.Core.Models.Forms.ExtractionFormVersion! version) -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Validation.FormSchemaIssue!>!
LM.Review.Core.Validation.FormSchemaValidator.Validate(LM.Review.Core.Models.Forms.ExtractionFormVersion! version) -> System.Collections.Generic.IReadOnlyList<LM.Review.Core.Validation.FormSchemaIssue!>!
