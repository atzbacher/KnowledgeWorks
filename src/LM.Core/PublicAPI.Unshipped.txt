#nullable enable
IPublicationLookup
IPublicationLookup.TryGetByDoiAsync(string! doi, bool includeCitedBy, System.Threading.CancellationToken ct) -> System.Threading.Tasks.Task<LM.Core.Models.PublicationRecord?>!
LM.Core.Abstractions.IContentExtractor
LM.Core.Abstractions.IContentExtractor.ExtractTextAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Core.Abstractions.IEntryStore
LM.Core.Abstractions.IEntryStore.EnumerateAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<LM.Core.Models.Entry!>!
LM.Core.Abstractions.IEntryStore.FindByHashAsync(string! sha256, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Core.Abstractions.IEntryStore.FindByIdsAsync(string? doi, string? pmid, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Core.Abstractions.IEntryStore.FindSimilarByNameYearAsync(string! title, int? year, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.Core.Abstractions.IEntryStore.GetByIdAsync(string! id, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.Entry?>!
LM.Core.Abstractions.IEntryStore.InitializeAsync(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.IEntryStore.SaveAsync(LM.Core.Models.Entry! entry, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.IEntryStore.SearchAsync(LM.Core.Models.Filters.EntryFilter! filter, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.Entry!>!>!
LM.Core.Abstractions.IFileStorageRepository
LM.Core.Abstractions.IFileStorageRepository.SaveNewAsync(string! sourcePath, string! relativeTargetDir, string? preferredFileName = null, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Core.Abstractions.IHasher
LM.Core.Abstractions.IHasher.ComputeSha256Async(string! filePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Core.Abstractions.IMetadataDebugSlideExporter
LM.Core.Abstractions.IMetadataDebugSlideExporter.ExportAsync(System.Collections.Generic.IEnumerable<LM.Core.Models.FileMetadata!>! items, string! outputPath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LM.Core.Abstractions.IMetadataExtractor
LM.Core.Abstractions.IMetadataExtractor.ExtractAsync(string! absolutePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.FileMetadata!>!
LM.Core.Abstractions.IPmidNormalizer
LM.Core.Abstractions.IPmidNormalizer.Normalize(string? raw) -> string?
LM.Core.Abstractions.ISimilarityService
LM.Core.Abstractions.ISimilarityService.ComputeFileSimilarityAsync(string! filePathA, string! filePathB, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
LM.Core.Abstractions.IWorkSpaceService
LM.Core.Abstractions.IWorkSpaceService.EnsureWorkspaceAsync(string! absoluteWorkspacePath, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.IWorkSpaceService.GetAbsolutePath(string! relativePath) -> string!
LM.Core.Abstractions.IWorkSpaceService.GetLocalDbPath() -> string!
LM.Core.Abstractions.IWorkSpaceService.GetWorkspaceRoot() -> string!
LM.Core.Abstractions.IWorkSpaceService.WorkspacePath.get -> string?
LM.Core.Abstractions.IDoiNormalizer
LM.Core.Abstractions.IDoiNormalizer.Normalize(string? raw) -> string?
LM.Core.Models.AbstractSection
LM.Core.Models.AbstractSection.Label.get -> string?
LM.Core.Models.AbstractSection.Label.init -> void
LM.Core.Models.AbstractSection.Text.get -> string?
LM.Core.Models.AbstractSection.Text.init -> void
LM.Core.Models.Attachment
LM.Core.Models.Attachment.Attachment() -> void
LM.Core.Models.Attachment.Id.get -> string!
LM.Core.Models.Attachment.Id.set -> void
LM.Core.Models.Attachment.Notes.get -> string?
LM.Core.Models.Attachment.Notes.set -> void
LM.Core.Models.Attachment.RelativePath.get -> string!
LM.Core.Models.Attachment.RelativePath.set -> void
LM.Core.Models.Attachment.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Attachment.Tags.set -> void
LM.Core.Models.AuthorName
LM.Core.Models.AuthorName.Affiliations.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.AuthorName.Affiliations.init -> void
LM.Core.Models.AuthorName.CollectiveName.get -> string?
LM.Core.Models.AuthorName.CollectiveName.init -> void
LM.Core.Models.AuthorName.Family.get -> string?
LM.Core.Models.AuthorName.Family.init -> void
LM.Core.Models.AuthorName.Given.get -> string?
LM.Core.Models.AuthorName.Given.init -> void
LM.Core.Models.AuthorName.LastFromLiteral() -> string?
LM.Core.Models.AuthorName.Literal.get -> string?
LM.Core.Models.AuthorName.Literal.init -> void
LM.Core.Models.AuthorName.Orcid.get -> string?
LM.Core.Models.AuthorName.Orcid.init -> void
LM.Core.Models.AuthorName.ToCsvPart() -> string!
LM.Core.Models.Entry
LM.Core.Models.Entry.AddedBy.get -> string?
LM.Core.Models.Entry.AddedBy.set -> void
LM.Core.Models.Entry.AddedOnUtc.get -> System.DateTime
LM.Core.Models.Entry.AddedOnUtc.set -> void
LM.Core.Models.Entry.Attachments.get -> System.Collections.Generic.List<LM.Core.Models.Attachment!>!
LM.Core.Models.Entry.Attachments.set -> void
LM.Core.Models.Entry.Authors.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Entry.Authors.set -> void
LM.Core.Models.Entry.DisplayName.get -> string?
LM.Core.Models.Entry.DisplayName.set -> void
LM.Core.Models.Entry.Doi.get -> string?
LM.Core.Models.Entry.Doi.set -> void
LM.Core.Models.Entry.Entry() -> void
LM.Core.Models.Entry.Id.get -> string!
LM.Core.Models.Entry.Id.set -> void
LM.Core.Models.Entry.InternalId.get -> string?
LM.Core.Models.Entry.InternalId.set -> void
LM.Core.Models.Entry.IsInternal.get -> bool
LM.Core.Models.Entry.IsInternal.set -> void
LM.Core.Models.Entry.Links.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Entry.Links.set -> void
LM.Core.Models.Entry.MainFileHashSha256.get -> string?
LM.Core.Models.Entry.MainFileHashSha256.set -> void
LM.Core.Models.Entry.MainFilePath.get -> string!
LM.Core.Models.Entry.MainFilePath.set -> void
LM.Core.Models.Entry.Nct.get -> string?
LM.Core.Models.Entry.Nct.set -> void
LM.Core.Models.Entry.Notes.get -> string?
LM.Core.Models.Entry.Notes.set -> void
LM.Core.Models.Entry.UserNotes.get -> string?
LM.Core.Models.Entry.UserNotes.set -> void
LM.Core.Models.Entry.OriginalFileName.get -> string?
LM.Core.Models.Entry.OriginalFileName.set -> void
LM.Core.Models.Entry.Pmid.get -> string?
LM.Core.Models.Entry.Pmid.set -> void
LM.Core.Models.Entry.Relations.get -> System.Collections.Generic.List<LM.Core.Models.Relation!>!
LM.Core.Models.Entry.Relations.set -> void
LM.Core.Models.Entry.ShortTitle.get -> string?
LM.Core.Models.Entry.ShortTitle.set -> void
LM.Core.Models.Entry.Source.get -> string?
LM.Core.Models.Entry.Source.set -> void
LM.Core.Models.Entry.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Entry.Tags.set -> void
LM.Core.Models.Entry.Title.get -> string!
LM.Core.Models.Entry.Title.set -> void
LM.Core.Models.Entry.Type.get -> LM.Core.Models.EntryType
LM.Core.Models.Entry.Type.set -> void
LM.Core.Models.Entry.Version.get -> int
LM.Core.Models.Entry.Version.set -> void
LM.Core.Models.Entry.Year.get -> int?
LM.Core.Models.Entry.Year.set -> void
LM.Core.Models.EntryDocument
LM.Core.Models.EntryDocument.Authors.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.EntryDocument.Authors.set -> void
LM.Core.Models.EntryDocument.CreatedUtc.get -> System.DateTimeOffset
LM.Core.Models.EntryDocument.CreatedUtc.set -> void
LM.Core.Models.EntryDocument.Doi.get -> string?
LM.Core.Models.EntryDocument.Doi.set -> void
LM.Core.Models.EntryDocument.EntryDocument() -> void
LM.Core.Models.EntryDocument.Files.get -> System.Collections.Generic.List<LM.Core.Models.EntryFile!>!
LM.Core.Models.EntryDocument.Files.set -> void
LM.Core.Models.EntryDocument.Id.get -> string!
LM.Core.Models.EntryDocument.Id.set -> void
LM.Core.Models.EntryDocument.Internal.get -> bool
LM.Core.Models.EntryDocument.Internal.set -> void
LM.Core.Models.EntryDocument.Pmid.get -> string?
LM.Core.Models.EntryDocument.Pmid.set -> void
LM.Core.Models.EntryDocument.Source.get -> string?
LM.Core.Models.EntryDocument.Source.set -> void
LM.Core.Models.EntryDocument.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.EntryDocument.Tags.set -> void
LM.Core.Models.EntryDocument.Title.get -> string?
LM.Core.Models.EntryDocument.Title.set -> void
LM.Core.Models.EntryDocument.UpdatedUtc.get -> System.DateTimeOffset
LM.Core.Models.EntryDocument.UpdatedUtc.set -> void
LM.Core.Models.EntryDocument.Year.get -> int?
LM.Core.Models.EntryDocument.Year.set -> void
LM.Core.Models.EntryFile
LM.Core.Models.EntryFile.EntryFile() -> void
LM.Core.Models.EntryFile.Hash.get -> string!
LM.Core.Models.EntryFile.Hash.set -> void
LM.Core.Models.EntryFile.MimeType.get -> string!
LM.Core.Models.EntryFile.MimeType.set -> void
LM.Core.Models.EntryFile.OriginalFileName.get -> string!
LM.Core.Models.EntryFile.OriginalFileName.set -> void
LM.Core.Models.EntryFile.RelativePath.get -> string!
LM.Core.Models.EntryFile.RelativePath.set -> void
LM.Core.Models.EntryFile.SizeBytes.get -> long
LM.Core.Models.EntryFile.SizeBytes.set -> void
LM.Core.Models.EntryFile.StoredFileName.get -> string!
LM.Core.Models.EntryFile.StoredFileName.set -> void
LM.Core.Models.EntryType
LM.Core.Models.EntryType.LitSearch = 6 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.Other = 5 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.Presentation = 1 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.Publication = 0 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.Report = 4 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.SlideDeck = 3 -> LM.Core.Models.EntryType
LM.Core.Models.EntryType.WhitePaper = 2 -> LM.Core.Models.EntryType
LM.Core.Models.FileMetadata
LM.Core.Models.FileMetadata.Authors.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.FileMetadata.Authors.set -> void
LM.Core.Models.FileMetadata.Doi.get -> string?
LM.Core.Models.FileMetadata.Doi.set -> void
LM.Core.Models.FileMetadata.FileMetadata() -> void
LM.Core.Models.FileMetadata.Pmid.get -> string?
LM.Core.Models.FileMetadata.Pmid.set -> void
LM.Core.Models.FileMetadata.Source.get -> string?
LM.Core.Models.FileMetadata.Source.set -> void
LM.Core.Models.FileMetadata.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.FileMetadata.Tags.set -> void
LM.Core.Models.FileMetadata.Title.get -> string?
LM.Core.Models.FileMetadata.Title.set -> void
LM.Core.Models.FileMetadata.Year.get -> int?
LM.Core.Models.FileMetadata.Year.set -> void
LM.Core.Models.Filters.EntryFilter
LM.Core.Models.Filters.EntryFilter.AuthorContains.get -> string?
LM.Core.Models.Filters.EntryFilter.AuthorContains.set -> void
LM.Core.Models.Filters.EntryFilter.EntryFilter() -> void
LM.Core.Models.Filters.EntryFilter.IsInternal.get -> bool?
LM.Core.Models.Filters.EntryFilter.IsInternal.set -> void
LM.Core.Models.Filters.EntryFilter.TagsAny.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.Filters.EntryFilter.TagsAny.set -> void
LM.Core.Models.Filters.EntryFilter.TitleContains.get -> string?
LM.Core.Models.Filters.EntryFilter.TitleContains.set -> void
LM.Core.Models.Filters.EntryFilter.TypesAny.get -> LM.Core.Models.EntryType[]?
LM.Core.Models.Filters.EntryFilter.TypesAny.set -> void
LM.Core.Models.Filters.EntryFilter.YearFrom.get -> int?
LM.Core.Models.Filters.EntryFilter.YearFrom.set -> void
LM.Core.Models.Filters.EntryFilter.YearTo.get -> int?
LM.Core.Models.Filters.EntryFilter.YearTo.set -> void
LM.Core.Models.Filters.EntryFilter.SourceContains.get -> string?
LM.Core.Models.Filters.EntryFilter.SourceContains.set -> void
LM.Core.Models.Filters.EntryFilter.InternalIdContains.get -> string?
LM.Core.Models.Filters.EntryFilter.InternalIdContains.set -> void
LM.Core.Models.Filters.EntryFilter.DoiContains.get -> string?
LM.Core.Models.Filters.EntryFilter.DoiContains.set -> void
LM.Core.Models.Filters.EntryFilter.PmidContains.get -> string?
LM.Core.Models.Filters.EntryFilter.PmidContains.set -> void
LM.Core.Models.Filters.EntryFilter.NctContains.get -> string?
LM.Core.Models.Filters.EntryFilter.NctContains.set -> void
LM.Core.Models.Filters.EntryFilter.AddedByContains.get -> string?
LM.Core.Models.Filters.EntryFilter.AddedByContains.set -> void
LM.Core.Models.Filters.EntryFilter.AddedOnFromUtc.get -> System.DateTime?
LM.Core.Models.Filters.EntryFilter.AddedOnFromUtc.set -> void
LM.Core.Models.Filters.EntryFilter.AddedOnToUtc.get -> System.DateTime?
LM.Core.Models.Filters.EntryFilter.AddedOnToUtc.set -> void
LM.Core.Models.GrantInfo
LM.Core.Models.GrantInfo.Agency.get -> string?
LM.Core.Models.GrantInfo.Agency.init -> void
LM.Core.Models.GrantInfo.Country.get -> string?
LM.Core.Models.GrantInfo.Country.init -> void
LM.Core.Models.GrantInfo.GrantId.get -> string?
LM.Core.Models.GrantInfo.GrantId.init -> void
LM.Core.Models.PublicationRecord
LM.Core.Models.PublicationRecord.AbstractPlain.get -> string?
LM.Core.Models.PublicationRecord.AbstractPlain.init -> void
LM.Core.Models.PublicationRecord.AbstractSections.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.AbstractSection!>!
LM.Core.Models.PublicationRecord.AbstractSections.init -> void
LM.Core.Models.PublicationRecord.Affiliations.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.Affiliations.init -> void
LM.Core.Models.PublicationRecord.Authors.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.AuthorName!>!
LM.Core.Models.PublicationRecord.Authors.init -> void
LM.Core.Models.PublicationRecord.AuthorsCsv.get -> string!
LM.Core.Models.PublicationRecord.CitedByCount.get -> int?
LM.Core.Models.PublicationRecord.CitedByCount.init -> void
LM.Core.Models.PublicationRecord.CitedByPmids.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.CitedByPmids.init -> void
LM.Core.Models.PublicationRecord.CommentsCorrections.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.CommentsCorrections.init -> void
LM.Core.Models.PublicationRecord.Country.get -> string?
LM.Core.Models.PublicationRecord.Country.init -> void
LM.Core.Models.PublicationRecord.Doi.get -> string?
LM.Core.Models.PublicationRecord.Doi.init -> void
LM.Core.Models.PublicationRecord.FirstAuthorLast.get -> string!
LM.Core.Models.PublicationRecord.Grants.get -> System.Collections.Generic.IReadOnlyList<LM.Core.Models.GrantInfo!>!
LM.Core.Models.PublicationRecord.Grants.init -> void
LM.Core.Models.PublicationRecord.Issue.get -> string?
LM.Core.Models.PublicationRecord.Issue.init -> void
LM.Core.Models.PublicationRecord.JournalIsoAbbrev.get -> string?
LM.Core.Models.PublicationRecord.JournalIsoAbbrev.init -> void
LM.Core.Models.PublicationRecord.JournalTitle.get -> string?
LM.Core.Models.PublicationRecord.JournalTitle.init -> void
LM.Core.Models.PublicationRecord.Keywords.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.Keywords.init -> void
LM.Core.Models.PublicationRecord.Language.get -> string?
LM.Core.Models.PublicationRecord.Language.init -> void
LM.Core.Models.PublicationRecord.MeshHeadings.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.MeshHeadings.init -> void
LM.Core.Models.PublicationRecord.Pages.get -> string?
LM.Core.Models.PublicationRecord.Pages.init -> void
LM.Core.Models.PublicationRecord.Pmcid.get -> string?
LM.Core.Models.PublicationRecord.Pmcid.init -> void
LM.Core.Models.PublicationRecord.Pmid.get -> string?
LM.Core.Models.PublicationRecord.Pmid.init -> void
LM.Core.Models.PublicationRecord.PublicationTypes.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.PublicationTypes.init -> void
LM.Core.Models.PublicationRecord.PublishedEpub.get -> System.DateOnly?
LM.Core.Models.PublicationRecord.PublishedEpub.init -> void
LM.Core.Models.PublicationRecord.PublishedPrint.get -> System.DateOnly?
LM.Core.Models.PublicationRecord.PublishedPrint.init -> void
LM.Core.Models.PublicationRecord.ReferencedPmids.get -> System.Collections.Generic.IReadOnlyList<string!>!
LM.Core.Models.PublicationRecord.ReferencedPmids.init -> void
LM.Core.Models.PublicationRecord.Title.get -> string?
LM.Core.Models.PublicationRecord.Title.init -> void
LM.Core.Models.PublicationRecord.UrlPubMed.get -> string?
LM.Core.Models.PublicationRecord.UrlPubMed.init -> void
LM.Core.Models.PublicationRecord.Volume.get -> string?
LM.Core.Models.PublicationRecord.Volume.init -> void
LM.Core.Models.PublicationRecord.Year.get -> int?
LM.Core.Models.PublicationRecord.Year.init -> void
LM.Core.Models.Relation
LM.Core.Models.Relation.Relation() -> void
LM.Core.Models.Relation.TargetEntryId.get -> string!
LM.Core.Models.Relation.TargetEntryId.set -> void
LM.Core.Models.Relation.Type.get -> string!
LM.Core.Models.Relation.Type.set -> void
LM.Core.Models.SearchDatabase
LM.Core.Models.SearchDatabase.ClinicalTrialsGov = 1 -> LM.Core.Models.SearchDatabase
LM.Core.Models.SearchDatabase.PubMed = 0 -> LM.Core.Models.SearchDatabase
LM.Core.Models.SearchHit
LM.Core.Models.SearchHit.AlreadyInDb.get -> bool
LM.Core.Models.SearchHit.AlreadyInDb.set -> void
LM.Core.Models.SearchHit.Authors.get -> string!
LM.Core.Models.SearchHit.Authors.init -> void
LM.Core.Models.SearchHit.Doi.get -> string?
LM.Core.Models.SearchHit.Doi.init -> void
LM.Core.Models.SearchHit.ExternalId.get -> string!
LM.Core.Models.SearchHit.ExternalId.init -> void
LM.Core.Models.SearchHit.ExistingEntryId.get -> string?
LM.Core.Models.SearchHit.ExistingEntryId.set -> void
LM.Core.Models.SearchHit.JournalOrSource.get -> string?
LM.Core.Models.SearchHit.JournalOrSource.init -> void
LM.Core.Models.SearchHit.SearchHit() -> void
LM.Core.Models.SearchHit.Selected.get -> bool
LM.Core.Models.SearchHit.Selected.set -> void
LM.Core.Models.SearchHit.Source.get -> LM.Core.Models.SearchDatabase
LM.Core.Models.SearchHit.Source.init -> void
LM.Core.Models.SearchHit.Title.get -> string!
LM.Core.Models.SearchHit.Title.init -> void
LM.Core.Models.SearchHit.Url.get -> string?
LM.Core.Models.SearchHit.Url.init -> void
LM.Core.Models.SearchHit.Year.get -> int?
LM.Core.Models.SearchHit.Year.init -> void
LM.Core.Models.SearchHit.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
LM.Core.Utils.Hashes
LM.Core.Utils.IdGen
LM.Core.Utils.JsonEx
static LM.Core.Utils.Hashes.Sha1(string! input) -> string!
static LM.Core.Utils.Hashes.Sha256File(string! path) -> string!
static LM.Core.Utils.IdGen.NewId() -> string!
static LM.Core.Utils.JsonEx.Deserialize<T>(string! s) -> T?
static LM.Core.Utils.JsonEx.Serialize<T>(T v) -> string!
static readonly LM.Core.Utils.JsonEx.Options -> System.Text.Json.JsonSerializerOptions!
LM.Core.Abstractions.IExtractionPostProcessor
LM.Core.Abstractions.IExtractionPostProcessor.CanHandle(LM.Core.Models.RegionExportResult! result) -> bool
LM.Core.Abstractions.IExtractionPostProcessor.Name.get -> string!
LM.Core.Abstractions.IExtractionPostProcessor.PostProcessAsync(LM.Core.Models.RegionExportResult! result, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.IExtractionRepository
LM.Core.Abstractions.IExtractionRepository.DeleteAsync(string! regionHash, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.IExtractionRepository.GetAsync(string! regionHash, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.RegionDescriptor?>!
LM.Core.Abstractions.IExtractionRepository.GetRecentAsync(int take, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.RegionDescriptor!>!>!
LM.Core.Abstractions.IExtractionRepository.ListByEntryAsync(string! entryHubId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<LM.Core.Models.RegionDescriptor!>!
LM.Core.Abstractions.IExtractionRepository.SearchAsync(string! query, int take, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LM.Core.Models.RegionDescriptor!>!>!
LM.Core.Abstractions.IExtractionRepository.UpdateStatusAsync(string! regionHash, LM.Core.Models.RegionExportStatus status, string? errorMessage = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.IExtractionRepository.UpsertAsync(LM.Core.Models.RegionDescriptor! descriptor, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.IRegionExporter
LM.Core.Abstractions.IRegionExporter.CanHandle(LM.Core.Models.RegionExportRequest! request) -> bool
LM.Core.Abstractions.IRegionExporter.ExporterId.get -> string!
LM.Core.Abstractions.IRegionExporter.ExportAsync(LM.Core.Models.RegionExportRequest! request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.RegionExportResult!>!
LM.Core.Abstractions.IRegionPreviewService
LM.Core.Abstractions.IRegionPreviewService.InvalidateAsync(string! cacheKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.IRegionPreviewService.RenderAsync(LM.Core.Models.RegionExportRequest! request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.RegionPreview!>!
LM.Core.Abstractions.IVisualExtractionCoordinator
LM.Core.Abstractions.IVisualExtractionCoordinator.CancelAsync(string! regionHash, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LM.Core.Abstractions.IVisualExtractionCoordinator.EnumerateRecentAsync(int take, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<LM.Core.Models.RegionDescriptor!>!
LM.Core.Abstractions.IVisualExtractionCoordinator.ExportCompleted -> System.EventHandler<LM.Core.Models.RegionExportCompleted!>?
LM.Core.Abstractions.IVisualExtractionCoordinator.ExportFailed -> System.EventHandler<LM.Core.Models.RegionExportFailed!>?
LM.Core.Abstractions.IVisualExtractionCoordinator.GetDescriptorAsync(string! regionHash, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.RegionDescriptor?>!
LM.Core.Abstractions.IVisualExtractionCoordinator.QueueExportAsync(LM.Core.Models.RegionExportRequest! request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LM.Core.Models.RegionExportResult!>!
LM.Core.Models.RegionBounds
LM.Core.Models.RegionBounds.Clone() -> LM.Core.Models.RegionBounds!
LM.Core.Models.RegionBounds.Height.get -> double
LM.Core.Models.RegionBounds.Height.set -> void
LM.Core.Models.RegionBounds.IsEmpty.get -> bool
LM.Core.Models.RegionBounds.RegionBounds() -> void
LM.Core.Models.RegionBounds.Width.get -> double
LM.Core.Models.RegionBounds.Width.set -> void
LM.Core.Models.RegionBounds.X.get -> double
LM.Core.Models.RegionBounds.X.set -> void
LM.Core.Models.RegionBounds.Y.get -> double
LM.Core.Models.RegionBounds.Y.set -> void
LM.Core.Models.RegionDescriptor
LM.Core.Models.RegionDescriptor.Annotation.get -> string?
LM.Core.Models.RegionDescriptor.Annotation.set -> void
LM.Core.Models.RegionDescriptor.Bounds.get -> LM.Core.Models.RegionBounds!
LM.Core.Models.RegionDescriptor.Bounds.set -> void
LM.Core.Models.RegionDescriptor.CreatedUtc.get -> System.DateTime
LM.Core.Models.RegionDescriptor.CreatedUtc.set -> void
LM.Core.Models.RegionDescriptor.EntryHubId.get -> string!
LM.Core.Models.RegionDescriptor.EntryHubId.set -> void
LM.Core.Models.RegionDescriptor.ExporterId.get -> string?
LM.Core.Models.RegionDescriptor.ExporterId.set -> void
LM.Core.Models.RegionDescriptor.ExtraMetadata.get -> System.Collections.Generic.Dictionary<string!, string!>!
LM.Core.Models.RegionDescriptor.ImagePath.get -> string?
LM.Core.Models.RegionDescriptor.ImagePath.set -> void
LM.Core.Models.RegionDescriptor.LastExportStatus.get -> LM.Core.Models.RegionExportStatus
LM.Core.Models.RegionDescriptor.LastExportStatus.set -> void
LM.Core.Models.RegionDescriptor.Notes.get -> string?
LM.Core.Models.RegionDescriptor.Notes.set -> void
LM.Core.Models.RegionDescriptor.OcrText.get -> string?
LM.Core.Models.RegionDescriptor.OcrText.set -> void
LM.Core.Models.RegionDescriptor.OcrTextPath.get -> string?
LM.Core.Models.RegionDescriptor.OcrTextPath.set -> void
LM.Core.Models.RegionDescriptor.OfficePackagePath.get -> string?
LM.Core.Models.RegionDescriptor.OfficePackagePath.set -> void
LM.Core.Models.RegionDescriptor.PageNumber.get -> int?
LM.Core.Models.RegionDescriptor.PageNumber.set -> void
LM.Core.Models.RegionDescriptor.RegionDescriptor() -> void
LM.Core.Models.RegionDescriptor.RegionHash.get -> string!
LM.Core.Models.RegionDescriptor.RegionHash.set -> void
LM.Core.Models.RegionDescriptor.SourceRelativePath.get -> string!
LM.Core.Models.RegionDescriptor.SourceRelativePath.set -> void
LM.Core.Models.RegionDescriptor.SourceSha256.get -> string?
LM.Core.Models.RegionDescriptor.SourceSha256.set -> void
LM.Core.Models.RegionDescriptor.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.RegionDescriptor.UpdatedUtc.get -> System.DateTime?
LM.Core.Models.RegionDescriptor.UpdatedUtc.set -> void
LM.Core.Models.RegionExportCompleted
LM.Core.Models.RegionExportCompleted.CompletedUtc.get -> System.DateTime
LM.Core.Models.RegionExportCompleted.CompletedUtc.set -> void
LM.Core.Models.RegionExportCompleted.RegionExportCompleted() -> void
LM.Core.Models.RegionExportCompleted.Request.get -> LM.Core.Models.RegionExportRequest!
LM.Core.Models.RegionExportCompleted.Request.set -> void
LM.Core.Models.RegionExportCompleted.Result.get -> LM.Core.Models.RegionExportResult!
LM.Core.Models.RegionExportCompleted.Result.set -> void
LM.Core.Models.RegionExportFailed
LM.Core.Models.RegionExportFailed.ErrorCode.get -> string?
LM.Core.Models.RegionExportFailed.ErrorCode.set -> void
LM.Core.Models.RegionExportFailed.ErrorMessage.get -> string!
LM.Core.Models.RegionExportFailed.ErrorMessage.set -> void
LM.Core.Models.RegionExportFailed.ExporterId.get -> string!
LM.Core.Models.RegionExportFailed.ExporterId.set -> void
LM.Core.Models.RegionExportFailed.FailedUtc.get -> System.DateTime
LM.Core.Models.RegionExportFailed.FailedUtc.set -> void
LM.Core.Models.RegionExportFailed.IsRetryable.get -> bool
LM.Core.Models.RegionExportFailed.IsRetryable.set -> void
LM.Core.Models.RegionExportFailed.RegionExportFailed() -> void
LM.Core.Models.RegionExportFailed.Request.get -> LM.Core.Models.RegionExportRequest!
LM.Core.Models.RegionExportFailed.Request.set -> void
LM.Core.Models.RegionExportRequest
LM.Core.Models.RegionExportRequest.AllowCachedResult.get -> bool
LM.Core.Models.RegionExportRequest.AllowCachedResult.set -> void
LM.Core.Models.RegionExportRequest.EntryHubId.get -> string!
LM.Core.Models.RegionExportRequest.EntryHubId.set -> void
LM.Core.Models.RegionExportRequest.ExportOptions.get -> System.Collections.Generic.Dictionary<string!, string!>!
LM.Core.Models.RegionExportRequest.ExporterId.get -> string!
LM.Core.Models.RegionExportRequest.ExporterId.set -> void
LM.Core.Models.RegionExportRequest.OfficeDestination.get -> string?
LM.Core.Models.RegionExportRequest.OfficeDestination.set -> void
LM.Core.Models.RegionExportRequest.RequestedBy.get -> string?
LM.Core.Models.RegionExportRequest.RequestedBy.set -> void
LM.Core.Models.RegionExportRequest.RequestedUtc.get -> System.DateTime
LM.Core.Models.RegionExportRequest.RequestedUtc.set -> void
LM.Core.Models.RegionExportRequest.RegionExportRequest() -> void
LM.Core.Models.RegionExportRequest.Selection.get -> LM.Core.Models.RegionSelection!
LM.Core.Models.RegionExportRequest.Selection.set -> void
LM.Core.Models.RegionExportRequest.SourceMimeType.get -> string?
LM.Core.Models.RegionExportRequest.SourceMimeType.set -> void
LM.Core.Models.RegionExportRequest.SourceRelativePath.get -> string!
LM.Core.Models.RegionExportRequest.SourceRelativePath.set -> void
LM.Core.Models.RegionExportRequest.SourceSha256.get -> string?
LM.Core.Models.RegionExportRequest.SourceSha256.set -> void
LM.Core.Models.RegionExportResult
LM.Core.Models.RegionExportResult.AdditionalOutputs.get -> System.Collections.Generic.Dictionary<string!, string!>!
LM.Core.Models.RegionExportResult.CompletedUtc.get -> System.DateTime
LM.Core.Models.RegionExportResult.CompletedUtc.set -> void
LM.Core.Models.RegionExportResult.Descriptor.get -> LM.Core.Models.RegionDescriptor!
LM.Core.Models.RegionExportResult.Descriptor.set -> void
LM.Core.Models.RegionExportResult.Duration.get -> System.TimeSpan
LM.Core.Models.RegionExportResult.Duration.set -> void
LM.Core.Models.RegionExportResult.ExporterId.get -> string!
LM.Core.Models.RegionExportResult.ExporterId.set -> void
LM.Core.Models.RegionExportResult.ImagePath.get -> string!
LM.Core.Models.RegionExportResult.ImagePath.set -> void
LM.Core.Models.RegionExportResult.OfficePackagePath.get -> string?
LM.Core.Models.RegionExportResult.OfficePackagePath.set -> void
LM.Core.Models.RegionExportResult.OcrTextPath.get -> string?
LM.Core.Models.RegionExportResult.OcrTextPath.set -> void
LM.Core.Models.RegionExportResult.RegionExportResult() -> void
LM.Core.Models.RegionExportResult.WasCached.get -> bool
LM.Core.Models.RegionExportResult.WasCached.set -> void
LM.Core.Models.RegionExportStatus
LM.Core.Models.RegionExportStatus.Canceled = 4 -> LM.Core.Models.RegionExportStatus
LM.Core.Models.RegionExportStatus.Completed = 2 -> LM.Core.Models.RegionExportStatus
LM.Core.Models.RegionExportStatus.Failed = 3 -> LM.Core.Models.RegionExportStatus
LM.Core.Models.RegionExportStatus.Pending = 1 -> LM.Core.Models.RegionExportStatus
LM.Core.Models.RegionExportStatus.Unknown = 0 -> LM.Core.Models.RegionExportStatus
LM.Core.Models.RegionPreview
LM.Core.Models.RegionPreview.CacheKey.get -> string!
LM.Core.Models.RegionPreview.CacheKey.set -> void
LM.Core.Models.RegionPreview.DpiX.get -> double
LM.Core.Models.RegionPreview.DpiX.set -> void
LM.Core.Models.RegionPreview.DpiY.get -> double
LM.Core.Models.RegionPreview.DpiY.set -> void
LM.Core.Models.RegionPreview.FromCache.get -> bool
LM.Core.Models.RegionPreview.FromCache.set -> void
LM.Core.Models.RegionPreview.GeneratedUtc.get -> System.DateTime
LM.Core.Models.RegionPreview.GeneratedUtc.set -> void
LM.Core.Models.RegionPreview.PixelHeight.get -> int
LM.Core.Models.RegionPreview.PixelHeight.set -> void
LM.Core.Models.RegionPreview.PixelWidth.get -> int
LM.Core.Models.RegionPreview.PixelWidth.set -> void
LM.Core.Models.RegionPreview.PreviewPath.get -> string!
LM.Core.Models.RegionPreview.PreviewPath.set -> void
LM.Core.Models.RegionPreview.RegionPreview() -> void
LM.Core.Models.RegionSelection
LM.Core.Models.RegionSelection.Annotation.get -> string?
LM.Core.Models.RegionSelection.Annotation.set -> void
LM.Core.Models.RegionSelection.Bounds.get -> LM.Core.Models.RegionBounds!
LM.Core.Models.RegionSelection.Bounds.set -> void
LM.Core.Models.RegionSelection.Notes.get -> string?
LM.Core.Models.RegionSelection.Notes.set -> void
LM.Core.Models.RegionSelection.PageNumber.get -> int?
LM.Core.Models.RegionSelection.PageNumber.set -> void
LM.Core.Models.RegionSelection.RegionSelection() -> void
LM.Core.Models.RegionSelection.RotationDegrees.get -> double
LM.Core.Models.RegionSelection.RotationDegrees.set -> void
LM.Core.Models.RegionSelection.Tags.get -> System.Collections.Generic.List<string!>!
LM.Core.Models.RegionSelection.ZoomLevel.get -> double
LM.Core.Models.RegionSelection.ZoomLevel.set -> void
